import { Vector3, Entity, Ped, Player, Vehicle, Object, Blip, Camera } from '@risinglife/redm-shared';
export var aicoverpoint;
(function (aicoverpoint) {
    /**
     * No comment provided
     *
     * Hash: 0x4972A022AE6DAFA1 | Since: 1207
     */
    function taskEnterCover(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskEnterCover(_ped);
    }
    aicoverpoint.taskEnterCover = taskEnterCover;
    /**
     * No comment provided
     *
     * Hash: 0x2BC4A6D92D140112 | Since: 1207
     */
    function taskExitCover(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskExitCover(_ped);
    }
    aicoverpoint.taskExitCover = taskExitCover;
    /**
     * weaponHash can also be -1
     *
     * Hash: 0x140B3CB1D424A945 | Since: 1207
     */
    function _0x140B3CB1D424A945(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        Citizen.invokeNative('0x140B3CB1D424A945', _ped, weaponHash);
    }
    aicoverpoint._0x140B3CB1D424A945 = _0x140B3CB1D424A945;
    /**
     * No comment provided
     *
     * Hash: 0x3C7A9C2C953128FE | Since: 1207
     */
    function _0x3C7A9C2C953128FE(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x3C7A9C2C953128FE', _ped);
    }
    aicoverpoint._0x3C7A9C2C953128FE = _0x3C7A9C2C953128FE;
    /**
     * No comment provided
     *
     * Hash: 0x53E4D0C079CA6855 | Since: 1207
     */
    function _0x53E4D0C079CA6855(handle) {
        return Citizen.invokeNative('0x53E4D0C079CA6855', handle);
    }
    aicoverpoint._0x53E4D0C079CA6855 = _0x53E4D0C079CA6855;
    /**
     * coverLayer: see levels_0/levels/rdr3/coverlayers
     *
     * Hash: 0x64340DC208D671D5 | Since: 1207
     */
    function _0x64340DC208D671D5(coverLayer) {
        Citizen.invokeNative('0x64340DC208D671D5', coverLayer);
    }
    aicoverpoint._0x64340DC208D671D5 = _0x64340DC208D671D5;
    /**
     * coverLayer: see levels_0/levels/rdr3/coverlayers
     *
     * Hash: 0x7A1FDCF35EAA140F | Since: 1207
     */
    function _0x7A1FDCF35EAA140F(coverLayer) {
        Citizen.invokeNative('0x7A1FDCF35EAA140F', coverLayer);
    }
    aicoverpoint._0x7A1FDCF35EAA140F = _0x7A1FDCF35EAA140F;
    /**
     * No comment provided
     *
     * Hash: 0x957D7E750216D74B | Since: 1207
     */
    function _0x957D7E750216D74B(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x957D7E750216D74B', _ped);
    }
    aicoverpoint._0x957D7E750216D74B = _0x957D7E750216D74B;
    /**
     * No comment provided
     *
     * Hash: 0xEBA51A294C73292E | Since: 1207
     */
    function _0xEBA51A294C73292E() {
        return Citizen.invokeNative('0xEBA51A294C73292E');
    }
    aicoverpoint._0xEBA51A294C73292E = _0xEBA51A294C73292E;
    /**
     * args: f_0 = Volume Handle
     * f_1 = integer (?) (only the number 1 is ever used here, or is not used at all)
     * f_2 = integer (-1 to 32 in R* Scripts)
     *
     * Hash: 0x733077295AB51304 | Since: 1207
     */
    function addCoverBlockingArea() {
        return Citizen.invokeNative('0x733077295AB51304');
    }
    aicoverpoint.addCoverBlockingArea = addCoverBlockingArea;
    /**
     * No comment provided
     *
     * Hash: 0x975BD6351648935F | Since: 1207
     */
    function addScriptedCoverPoint() {
        return AddScriptedCoverPoint();
    }
    aicoverpoint.addScriptedCoverPoint = addScriptedCoverPoint;
    /**
     * No comment provided
     *
     * Hash: 0x8CBE916CFC64AD5C | Since: 1207
     */
    function areLoadCoverAnimsLoaded(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return AreLoadCoverAnimsLoaded(_ped);
    }
    aicoverpoint.areLoadCoverAnimsLoaded = areLoadCoverAnimsLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xC276FE69DDA22BAD | Since: 1207
     */
    function doesCoverPointExist(handle) {
        return DoesCoverPointExist(handle);
    }
    aicoverpoint.doesCoverPointExist = doesCoverPointExist;
    /**
     * 1 = In cover while crouched
     * 2 = In cover while standing
     * 3 = Not in cover
     *
     * Hash: 0x5F5B1B7E8E8F94C6 | Since: 1207
     */
    function getCoverPointStateFromPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCoverPointStateFromPed(_ped);
    }
    aicoverpoint.getCoverPointStateFromPed = getCoverPointStateFromPed;
    /**
     * Makes ped flinch (if in cover) like they have been shot at
     *
     * Hash: 0x2A31D13C5F021D0D | Since: 1207
     */
    function requestFlinchCoverAnim(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RequestFlinchCoverAnim(_ped);
    }
    aicoverpoint.requestFlinchCoverAnim = requestFlinchCoverAnim;
    /**
     * Stops running cover anims and releases them
     * _STOP_RENDERING_* - _STOP_SCRIPTED*
     *
     * Hash: 0x1A7A802B2301EDC0 | Since: 1207
     */
    function stopRunningCoverAnims(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        StopRunningCoverAnims(_ped);
    }
    aicoverpoint.stopRunningCoverAnims = stopRunningCoverAnims;
    /**
     * No comment provided
     *
     * Hash: 0x89783FDDF079C88D | Since: 1207
     */
    function taskAiSeekCoverToCoverPoint() {
        return TaskAiSeekCoverToCoverPoint();
    }
    aicoverpoint.taskAiSeekCoverToCoverPoint = taskAiSeekCoverToCoverPoint;
})(aicoverpoint || (aicoverpoint = {}));
export var aitransport;
(function (aitransport) {
    /**
     * flagId: see SET_TRANSPORT_CONFIG_FLAG
     *
     * Hash: 0xF382C92CCC1CCDBC | Since: 1207
     */
    function getTransportConfigFlag(transportEntity, flagId) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        return GetTransportConfigFlag(_transportEntity, flagId, false);
    }
    aitransport.getTransportConfigFlag = getTransportConfigFlag;
    /**
     * No comment provided
     *
     * Hash: 0x619E63980BFC0096 | Since: 1207
     */
    function isPedEnteringTransport(ped, transportEntity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        return IsPedEnteringTransport(_ped, _transportEntity, false);
    }
    aitransport.isPedEnteringTransport = isPedEnteringTransport;
    /**
     * No comment provided
     *
     * Hash: 0x660639BC60157048 | Since: 1207
     */
    function isPedExitingTransport(ped, transportEntity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        return IsPedExitingTransport(_ped, _transportEntity);
    }
    aitransport.isPedExitingTransport = isPedExitingTransport;
    /**
     * No comment provided
     *
     * Hash: 0x8886D83A430537FD | Since: 1207
     */
    function setPedOffTransportSeat(ped, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedOffTransportSeat(_ped, flags);
    }
    aitransport.setPedOffTransportSeat = setPedOffTransportSeat;
    /**
     * seat: see CREATE_PED_INSIDE_VEHICLE
     *
     * Hash: 0xE588B5A8A005CB5E | Since: 1207
     */
    function setPedOnTransportSeat(ped, transportEntity, seat, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        SetPedOnTransportSeat(_ped, _transportEntity, seat, flags);
    }
    aitransport.setPedOnTransportSeat = setPedOnTransportSeat;
    /**
     * No comment provided
     *
     * Hash: 0xDD0660C997DE94FD | Since: 1207
     */
    function setTransportAccessibleSeatFlags(transportEntity, flags) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        SetTransportAccessibleSeatFlags(_transportEntity, flags);
    }
    aitransport.setTransportAccessibleSeatFlags = setTransportAccessibleSeatFlags;
    /**
     * flagId:
     * enum eTransportConfigFlags
     * {
     * TCF_NotConsideredForEntryByLocalPlayer,
     * TCF_0xB78D6624,
     * TCF_0xA9700425,
     * TCF_0x8D7E4641,
     * TCF_0xF24BAA1F,
     * TCF_0x63B77935,
     * TCF_NotConsideredForEntryByAllPlayers,
     * TCF_0xD17A2AFD,
     * TCF_0xD4E4FDD5,
     * TCF_0x8227C929,
     * TCF_0x812C1070,
     * TCF_0x0E1AB26F,
     * TCF_0xBF4EC863,
     * TCF_0x75660C36,
     * TCF_0xA2539E20,
     * TCF_0x9162C633,
     * TCF_DisableHonorModifiers,
     * TCF_0xF9E71CB6,
     * TCF_0x933ECD3F,
     * TCF_0x18513A34
     * };
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/TRANSPORT_CONFIG_FLAGS
     *
     * Hash: 0xBA8818212633500A | Since: 1207
     */
    function setTransportConfigFlag(transportEntity, flagId, value) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        SetTransportConfigFlag(_transportEntity, flagId, value);
    }
    aitransport.setTransportConfigFlag = setTransportConfigFlag;
    /**
     * No comment provided
     *
     * Hash: 0xAEE3ADD08829CB6F | Since: 1207
     */
    function taskEnterTransport() {
        return TaskEnterTransport();
    }
    aitransport.taskEnterTransport = taskEnterTransport;
    /**
     * No comment provided
     *
     * Hash: 0xC273A5B8488F7838 | Since: 1207
     */
    function taskExitTransport() {
        return TaskExitTransport();
    }
    aitransport.taskExitTransport = taskExitTransport;
    /**
     * _SET_TRANSPORT_*
     *
     * Hash: 0x4248AB2EEB3C75AD | Since: 1207
     */
    function _0x4248AB2EEB3C75AD(transportEntity, ped) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x4248AB2EEB3C75AD', _transportEntity, _ped, false);
    }
    aitransport._0x4248AB2EEB3C75AD = _0x4248AB2EEB3C75AD;
    /**
     * No comment provided
     *
     * Hash: 0x4B6C9A43F7D9109B | Since: 1207
     */
    function _0x4B6C9A43F7D9109B() {
        Citizen.invokeNative('0x4B6C9A43F7D9109B', undefined, undefined);
    }
    aitransport._0x4B6C9A43F7D9109B = _0x4B6C9A43F7D9109B;
    /**
     * _CLEAR_A*
     *
     * Hash: 0x5639FBEA922788DA | Since: 1207
     */
    function _0x5639FBEA922788DA(transportEntity) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        Citizen.invokeNative('0x5639FBEA922788DA', _transportEntity);
    }
    aitransport._0x5639FBEA922788DA = _0x5639FBEA922788DA;
    /**
     * _SET_TRANSPORT_*
     *
     * Hash: 0x8C8371EDFAF014A0 | Since: 1207
     */
    function _0x8C8371EDFAF014A0(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8C8371EDFAF014A0', _ped, 0);
    }
    aitransport._0x8C8371EDFAF014A0 = _0x8C8371EDFAF014A0;
    /**
     * _SET_TRANSPORT_*
     *
     * Hash: 0xF8C20282B237E3F7 | Since: 1207
     */
    function _0xF8C20282B237E3F7(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xF8C20282B237E3F7', _ped);
    }
    aitransport._0xF8C20282B237E3F7 = _0xF8C20282B237E3F7;
    /**
     * seatIndex: see CREATE_PED_INSIDE_VEHICLE
     *
     * Hash: 0xFFEC4B0A1A3ED515 | Since: 1207
     */
    function getPedInTransportSeat(transportEntity, seatIndex) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        return GetPedInTransportSeat(_transportEntity, seatIndex);
    }
    aitransport.getPedInTransportSeat = getPedInTransportSeat;
    /**
     * See _SET_TRANSPORT_USAGE_FLAGS
     *
     * Hash: 0xE195C5A82156321D | Since: 1207
     */
    function getTransportUsageFlags(transportEntity) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        return GetTransportUsageFlags(_transportEntity);
    }
    aitransport.getTransportUsageFlags = getTransportUsageFlags;
    /**
     * Checks if ped is placed on target transportEntity
     *
     * Hash: 0x159EF5B6EDCE00E8 | Since: 1207
     */
    function isPedOnTransportEntity(ped, transportEntity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        return IsPedOnTransportEntity(_ped, _transportEntity);
    }
    aitransport.isPedOnTransportEntity = isPedOnTransportEntity;
    /**
     * No comment provided
     *
     * Hash: 0xDC44F405A6B98D03 | Since: 1207
     */
    function isPedOnTransportSeat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedOnTransportSeat(_ped, false);
    }
    aitransport.isPedOnTransportSeat = isPedOnTransportSeat;
    /**
     * Called together with IS_VEHICLE_SEAT_FREE
     *
     * Hash: 0x43FF27FC1829C202 | Since: 1207
     */
    function isTransportSeatFree(transportEntity, seatIndex) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        return IsTransportSeatFree(_transportEntity, seatIndex);
    }
    aitransport.isTransportSeatFree = isTransportSeatFree;
    /**
     * No comment provided
     *
     * Hash: 0x2E2E06023D07631E | Since: 1207
     */
    function isTransportSeatOccupied(transportEntity, seatIndex) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        return IsTransportSeatOccupied(_transportEntity, seatIndex);
    }
    aitransport.isTransportSeatOccupied = isTransportSeatOccupied;
    /**
     * No comment provided
     *
     * Hash: 0x67F7CEAC2391E114 | Since: 1207
     */
    function setAiCanUseTransport(transportEntity, state) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        SetAiCanUseTransport(_transportEntity, state);
    }
    aitransport.setAiCanUseTransport = setAiCanUseTransport;
    /**
     * No comment provided
     *
     * Hash: 0xB7079F4C72896756 | Since: 1207
     */
    function setPedUseTransportSeatPreference(ped, transportEntity, preferenceSlot, seatIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        SetPedUseTransportSeatPreference(_ped, _transportEntity, preferenceSlot, 0, seatIndex);
    }
    aitransport.setPedUseTransportSeatPreference = setPedUseTransportSeatPreference;
    /**
     * No comment provided
     *
     * Hash: 0x13F138225C202F66 | Since: 1207
     */
    function setTransportPrioritySeat(transportEntity, seatIndex) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        SetTransportPrioritySeat(_transportEntity, seatIndex);
    }
    aitransport.setTransportPrioritySeat = setTransportPrioritySeat;
    /**
     * enum eTransportUsageFlags
     * {
     * TUF_INVALID = 0,
     * TUF_ALLOW_DRIVER_ME = (1 << 0),
     * TUF_ALLOW_DRIVER_GANG = (1 << 1),
     * TUF_ALLOW_DRIVER_CREW = (1 << 2),
     * TUF_ALLOW_DRIVER_FRIENDS = (1 << 3),
     * TUF_ALLOW_DRIVER_ANYONE = (1 << 4),
     * TUF_ALLOW_PASSENGER_ME = (1 << 5),
     * TUF_ALLOW_PASSENGER_GANG = (1 << 6),
     * TUF_ALLOW_PASSENGER_CREW = (1 << 7),
     * TUF_ALLOW_PASSENGER_FRIENDS = (1 << 8),
     * TUF_ALLOW_PASSENGER_ANYONE = (1 << 9),
     * TUF_ALLOW_ACCESS_AI = (1 << 10)
     * };
     *
     * Hash: 0xE2487779957FE897 | Since: 1207
     */
    function setTransportUsageFlags(transportEntity, flags) {
        const _transportEntity = transportEntity instanceof Entity ? transportEntity.handle() : transportEntity;
        SetTransportUsageFlags(_transportEntity, flags);
    }
    aitransport.setTransportUsageFlags = setTransportUsageFlags;
})(aitransport || (aitransport = {}));
export var animscene;
(function (animscene) {
    /**
     * No comment provided
     *
     * Hash: 0x718CF1328D20C2B3 | Since: 1207
     */
    function abort(animScene) {
        AbortAnimScene(animScene, false);
    }
    animscene.abort = abort;
    /**
     * No comment provided
     *
     * Hash: 0xDC418495DBA327A1 | Since: 1207
     */
    function attachToEntity(animScene, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AttachAnimSceneToEntity(animScene, _entity, 0);
    }
    animscene.attachToEntity = attachToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x1C0B105C3F30B88D | Since: 1207
     */
    function attachToEntityPreservingLocation(animScene, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AttachAnimSceneToEntityPreservingLocation(animScene, _entity, 0);
    }
    animscene.attachToEntityPreservingLocation = attachToEntityPreservingLocation;
    /**
     * No comment provided
     *
     * Hash: 0x1B70811D3BF75DB9 | Since: 1207
     */
    function blockFadingNextFrame() {
        BlockAnimSceneFadingNextFrame(false, false);
    }
    animscene.blockFadingNextFrame = blockFadingNextFrame;
    /**
     * No comment provided
     *
     * Hash: 0x661B8683611B9B97 | Since: 1207
     */
    function checkOwnershipOf(animScene) {
        return CheckOwnershipOfAnimScene(animScene);
    }
    animscene.checkOwnershipOf = checkOwnershipOf;
    /**
     * No comment provided
     *
     * Hash: 0x73616E64696C616E | Since: 1207
     */
    function couldEntityReachExitNextFrame(animScene, entityName) {
        return CouldAnimSceneEntityReachExitNextFrame(animScene, entityName, undefined, undefined);
    }
    animscene.couldEntityReachExitNextFrame = couldEntityReachExitNextFrame;
    /**
     * No comment provided
     *
     * Hash: 0x6843A1AA3A336DFF | Since: 1207
     */
    function detach(animScene) {
        DetachAnimScene(animScene);
    }
    animscene.detach = detach;
    /**
     * No comment provided
     *
     * Hash: 0xA2507C4948C83D2E | Since: 1207
     */
    function detachPreservingLocation(animScene) {
        DetachAnimScenePreservingLocation(animScene);
    }
    animscene.detachPreservingLocation = detachPreservingLocation;
    /**
     * No comment provided
     *
     * Hash: 0x25557E324489393C | Since: 1207
     */
    function doesExist(animScene) {
        return DoesAnimSceneExist(animScene);
    }
    animscene.doesExist = doesExist;
    /**
     * No comment provided
     *
     * Hash: 0xA41351EA2A18A0AD | Since: 1207
     */
    function fadeAudioIn(animScene) {
        FadeAnimSceneAudioIn(animScene, 0);
    }
    animscene.fadeAudioIn = fadeAudioIn;
    /**
     * No comment provided
     *
     * Hash: 0x323E3AD772BA5D57 | Since: 1207
     */
    function fadeAudioOut(animScene) {
        FadeAnimSceneAudioOut(animScene, 0);
    }
    animscene.fadeAudioOut = fadeAudioOut;
    /**
     * No comment provided
     *
     * Hash: 0x07A6F6447ECA9B64 | Since: 1207
     */
    function getBool(animScene, name) {
        return GetAnimSceneBool(animScene, name);
    }
    animscene.getBool = getBool;
    /**
     * No comment provided
     *
     * Hash: 0x4822A65D5AF64E69 | Since: 1207
     */
    function getCurrentActiveCameraCount(animScene) {
        return GetAnimSceneCurrentActiveCameraCount(animScene);
    }
    animscene.getCurrentActiveCameraCount = getCurrentActiveCameraCount;
    /**
     * No comment provided
     *
     * Hash: 0x8398438D8F14F56D | Since: 1207
     */
    function getEntityLocationData(animScene, entityName, playbackListName) {
        return GetAnimSceneEntityLocationData(animScene, entityName, false, playbackListName, 0);
    }
    animscene.getEntityLocationData = getEntityLocationData;
    /**
     * No comment provided
     *
     * Hash: 0xCC24CB07F60B496E | Since: 1207
     */
    function getFloat(animScene, name) {
        return GetAnimSceneFloat(animScene, name);
    }
    animscene.getFloat = getFloat;
    /**
     * No comment provided
     *
     * Hash: 0x2B7277484CC095FD | Since: 1207
     */
    function getInt(animScene, name) {
        return GetAnimSceneInt(animScene, name);
    }
    animscene.getInt = getInt;
    /**
     * No comment provided
     *
     * Hash: 0xADF1D53F3B1FE0A7 | Since: 1207
     */
    function getOrigin(animScene, order) {
        return GetAnimSceneOrigin(animScene, order);
    }
    animscene.getOrigin = getOrigin;
    /**
     * No comment provided
     *
     * Hash: 0x3FBC3F51BF12DFBF | Since: 1207
     */
    function getPhase(animScene) {
        return GetAnimScenePhase(animScene);
    }
    animscene.getPhase = getPhase;
    /**
     * No comment provided
     *
     * Hash: 0xF94692EB9DC15D74 | Since: 1207
     */
    function hasExited(animScene) {
        return HasAnimSceneExited(animScene, false);
    }
    animscene.hasExited = hasExited;
    /**
     * No comment provided
     *
     * Hash: 0xB89FCFF19DAFFF28 | Since: 1207
     */
    function hasEntityExited(animScene, entityName) {
        return HasEntityExitedAnimScene(animScene, entityName);
    }
    animscene.hasEntityExited = hasEntityExited;
    /**
     * No comment provided
     *
     * Hash: 0xCDC5512A407CF08D | Since: 1207
     */
    function isExitingThisFrame(animScene) {
        return IsAnimSceneExitingThisFrame(animScene);
    }
    animscene.isExitingThisFrame = isExitingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xD8254CB2C586412B | Since: 1207
     */
    function isFinished(animScene) {
        return IsAnimSceneFinished(animScene, false);
    }
    animscene.isFinished = isFinished;
    /**
     * No comment provided
     *
     * Hash: 0x8D81E7824B7753F7 | Since: 1207
     */
    function isInSection(animScene, sectionName) {
        return IsAnimSceneInSection(animScene, sectionName, false);
    }
    animscene.isInSection = isInSection;
    /**
     * No comment provided
     *
     * Hash: 0x477122B8D05E7968 | Since: 1207
     */
    function isLoaded(animScene) {
        return IsAnimSceneLoaded(animScene, false, false);
    }
    animscene.isLoaded = isLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x95531A4A20CCE7BC | Since: 1207
     */
    function isMetadataLoaded(animScene) {
        return IsAnimSceneMetadataLoaded(animScene, false);
    }
    animscene.isMetadataLoaded = isMetadataLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xCBFC7725DE6CE2E0 | Since: 1207
     */
    function isRunning(animScene) {
        return IsAnimSceneRunning(animScene, false);
    }
    animscene.isRunning = isRunning;
    /**
     * No comment provided
     *
     * Hash: 0x005E6F28DD7ED58D | Since: 1207
     */
    function isEntityExitingThisFrame(animScene, entityName) {
        return IsEntityExitingAnimSceneThisFrame(animScene, entityName);
    }
    animscene.isEntityExitingThisFrame = isEntityExitingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x3AB6C7B0BB0DF4B1 | Since: 1207
     */
    function isEntityPlaying(entity, animScene) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityPlayingAnimScene(_entity, animScene);
    }
    animscene.isEntityPlaying = isEntityPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xAF068580194D9DC7 | Since: 1207
     */
    function load(animScene) {
        LoadAnimScene(animScene);
    }
    animscene.load = load;
    /**
     * No comment provided
     *
     * Hash: 0x2BF96692C67F3E53 | Since: 1207
     */
    function removeEntity(animScene, entityName, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RemoveAnimSceneEntity(animScene, entityName, _entity);
    }
    animscene.removeEntity = removeEntity;
    /**
     * No comment provided
     *
     * Hash: 0xDF7B5144E25CD3FE | Since: 1207
     */
    function requestPlayList(animScene, playlistName) {
        return RequestAnimScenePlayList(animScene, playlistName);
    }
    animscene.requestPlayList = requestPlayList;
    /**
     * No comment provided
     *
     * Hash: 0x8FDF221F13537936 | Since: 1207
     */
    function reset(animScene, playbackListName) {
        ResetAnimScene(animScene, playbackListName);
    }
    animscene.reset = reset;
    /**
     * No comment provided
     *
     * Hash: 0x8E1BA705F63C1925 | Since: 1207
     */
    function resumeFromLastCheckpoint(animScene) {
        ResumeAnimSceneFromLastCheckpoint(animScene);
    }
    animscene.resumeFromLastCheckpoint = resumeFromLastCheckpoint;
    /**
     * No comment provided
     *
     * Hash: 0x519E96C2C68B404B | Since: 1207
     */
    function setBool(animScene, name, value) {
        SetAnimSceneBool(animScene, name, value, false);
    }
    animscene.setBool = setBool;
    /**
     * No comment provided
     *
     * Hash: 0x8B720AD451CA2AB3 | Since: 1207
     */
    function setEntity(animScene, entityName, entity, flags) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetAnimSceneEntity(animScene, entityName, _entity, flags);
    }
    animscene.setEntity = setEntity;
    /**
     * No comment provided
     *
     * Hash: 0x6BC5104E68CBEFE8 | Since: 1207
     */
    function setFloat(animScene, name, value) {
        SetAnimSceneFloat(animScene, name, value, false, false);
    }
    animscene.setFloat = setFloat;
    /**
     * No comment provided
     *
     * Hash: 0x3A379D2166CF5B92 | Since: 1207
     */
    function setInt(animScene, name, value) {
        SetAnimSceneInt(animScene, name, value, false);
    }
    animscene.setInt = setInt;
    /**
     * No comment provided
     *
     * Hash: 0x020894BF17A02EF2 | Since: 1207
     */
    function setOrigin(animScene, pos, rot, order) {
        SetAnimSceneOrigin(animScene, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, order);
    }
    animscene.setOrigin = setOrigin;
    /**
     * No comment provided
     *
     * Hash: 0xD6824B7D24DC0CE0 | Since: 1207
     */
    function setPaused(animScene, toggle) {
        SetAnimScenePaused(animScene, toggle);
    }
    animscene.setPaused = setPaused;
    /**
     * No comment provided
     *
     * Hash: 0xAB5E7CAB074D6B84 | Since: 1207
     */
    function setPlaybackList(animScene, playbackListName) {
        SetAnimScenePlaybackList(animScene, playbackListName);
    }
    animscene.setPlaybackList = setPlaybackList;
    /**
     * No comment provided
     *
     * Hash: 0x15598CFB25F3DC7E | Since: 1207
     */
    function setPlayList(animScene, playlistName) {
        SetAnimScenePlayList(animScene, playlistName, false);
    }
    animscene.setPlayList = setPlayList;
    /**
     * No comment provided
     *
     * Hash: 0x75820B801CFF262A | Since: 1207
     */
    function setRate(animScene, rate) {
        SetAnimSceneRate(animScene, rate);
    }
    animscene.setRate = setRate;
    /**
     * No comment provided
     *
     * Hash: 0xF4D94AF761768700 | Since: 1207
     */
    function start(animScene) {
        StartAnimScene(animScene);
    }
    animscene.start = start;
    /**
     * No comment provided
     *
     * Hash: 0xF7A4C571E572D237 | Since: 1207
     */
    function takeOwnershipOf(animScene) {
        TakeOwnershipOfAnimScene(animScene);
    }
    animscene.takeOwnershipOf = takeOwnershipOf;
    /**
     * No comment provided
     *
     * Hash: 0x4B85B3CF9197AEDF | Since: 1207
     */
    function triggerSkip(animScene) {
        TriggerAnimSceneSkip(animScene);
    }
    animscene.triggerSkip = triggerSkip;
    /**
     * No comment provided
     *
     * Hash: 0xEF324E9550A394D5 | Since: 1207
     */
    function wasSkipped(animScene) {
        return WasAnimSceneSkipped(animScene);
    }
    animscene.wasSkipped = wasSkipped;
    /**
     * Used in SP R* Scripts only
     * Params: p1 = 2B-LowHonor, 2A-HighHonor
     *
     * Hash: 0x1407F5115FB9583E | Since: 1207
     */
    function _0x1407F5115FB9583E(animScene) {
        return Citizen.invokeNative('0x1407F5115FB9583E', animScene, undefined);
    }
    animscene._0x1407F5115FB9583E = _0x1407F5115FB9583E;
    /**
     * Used in braithwaites2 SP R* Scripts only
     * _A*
     *
     * Hash: 0x1AD896BF43619551 | Since: 1207
     */
    function _0x1AD896BF43619551() {
        Citizen.invokeNative('0x1AD896BF43619551');
    }
    animscene._0x1AD896BF43619551 = _0x1AD896BF43619551;
    /**
     * Used in SP R* Scripts only
     * _IS_ANIM_SCENE_P*
     *
     * Hash: 0x1C5D33A4293E6DDE | Since: 1207
     */
    function _0x1C5D33A4293E6DDE(animScene, phaseName) {
        return Citizen.invokeNative('0x1C5D33A4293E6DDE', animScene, phaseName);
    }
    animscene._0x1C5D33A4293E6DDE = _0x1C5D33A4293E6DDE;
    /**
     * Used in SP R* Scripts only
     * _IS_PED_* - _IS_SC*
     *
     * Hash: 0x2DB524750DC41ED4 | Since: 1207
     */
    function _0x2DB524750DC41ED4() {
        return Citizen.invokeNative('0x2DB524750DC41ED4');
    }
    animscene._0x2DB524750DC41ED4 = _0x2DB524750DC41ED4;
    /**
     * p2: MINIGAME_GET_SECONDARY_VOICE_STRING
     * _SET_*
     *
     * Hash: 0x3641FCD53E59B335 | Since: 1207
     */
    function _0x3641FCD53E59B335(mgmHandle, ped, secondaryVoiceString) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x3641FCD53E59B335', mgmHandle, _ped, secondaryVoiceString);
    }
    animscene._0x3641FCD53E59B335 = _0x3641FCD53E59B335;
    /**
     * Used in SP R* Scripts only
     * _IS_*
     *
     * Hash: 0x3B393716C3FD8237 | Since: 1207
     */
    function _0x3B393716C3FD8237(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x3B393716C3FD8237', _ped);
    }
    animscene._0x3B393716C3FD8237 = _0x3B393716C3FD8237;
    /**
     * Used in Script Function CUTSCENE_MANAGE_SKIP
     * _CHECK_* (?)
     *
     * Hash: 0x4B85B3CF91972222 | Since: 1207
     */
    function _0x4B85B3CF91972222(animScene) {
        return Citizen.invokeNative('0x4B85B3CF91972222', animScene);
    }
    animscene._0x4B85B3CF91972222 = _0x4B85B3CF91972222;
    /**
     * Used in SP R* Scripts only
     * _IS_ANIM_SCENE_R* - _IS_ANIM_SCENE_S*
     *
     * Hash: 0x5D7BFDA2290B4E39 | Since: 1207
     */
    function _0x5D7BFDA2290B4E39() {
        return Citizen.invokeNative('0x5D7BFDA2290B4E39', undefined);
    }
    animscene._0x5D7BFDA2290B4E39 = _0x5D7BFDA2290B4E39;
    /**
     * Only used in tg_p R* Script
     * Returns true when mgm event success
     * _PREPARE_* - _REGISTER_*
     *
     * Hash: 0x61B2AAEF645DDAF0 | Since: 1207
     */
    function _0x61B2AAEF645DDAF0(mgmEventHandle, seatId) {
        return Citizen.invokeNative('0x61B2AAEF645DDAF0', mgmEventHandle, undefined, seatId, 0, false);
    }
    animscene._0x61B2AAEF645DDAF0 = _0x61B2AAEF645DDAF0;
    /**
     * Used in SP R* Scripts only
     * _CO* - _CR*
     *
     * Hash: 0x73616E64696C132E | Since: 1207
     */
    function _0x73616E64696C132E(animScene) {
        return Citizen.invokeNative('0x73616E64696C132E', animScene, false);
    }
    animscene._0x73616E64696C132E = _0x73616E64696C132E;
    /**
     * Used in SP R* Scripts only
     * _IS_ANIM_SCENE_*
     *
     * Hash: 0x9AAE3C1148A09BCA | Since: 1207
     */
    function _0x9AAE3C1148A09BCA(animScene) {
        return Citizen.invokeNative('0x9AAE3C1148A09BCA', animScene);
    }
    animscene._0x9AAE3C1148A09BCA = _0x9AAE3C1148A09BCA;
    /**
     * Used in SP R* Scripts only
     * _WAS_ANIM_SCENE_*
     *
     * Hash: 0xA96619FE85159ED2 | Since: 1207
     */
    function _0xA96619FE85159ED2(animScene) {
        return Citizen.invokeNative('0xA96619FE85159ED2', animScene);
    }
    animscene._0xA96619FE85159ED2 = _0xA96619FE85159ED2;
    /**
     * _UNLOAD_* - _WAS_ANIM_SCENE_*
     *
     * Hash: 0xAE6DE22DE0ED4554 | Since: 1207
     */
    function _0xAE6DE22DE0ED4554(mgmHandle, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xAE6DE22DE0ED4554', mgmHandle, _ped);
    }
    animscene._0xAE6DE22DE0ED4554 = _0xAE6DE22DE0ED4554;
    /**
     * _PREPARE_* - _REGISTER_*
     *
     * Hash: 0xB1A196BAFE650402 | Since: 1207
     */
    function _0xB1A196BAFE650402(mgmHandle, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xB1A196BAFE650402', mgmHandle, _ped);
    }
    animscene._0xB1A196BAFE650402 = _0xB1A196BAFE650402;
    /**
     * Used in SP R* Scripts only
     * _RESUME_* - _SET_A*
     *
     * Hash: 0xC1193521E3B9FADD | Since: 1207
     */
    function _0xC1193521E3B9FADD(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xC1193521E3B9FADD', _entity, false);
    }
    animscene._0xC1193521E3B9FADD = _0xC1193521E3B9FADD;
    /**
     * Used in SP R* Scripts only
     * _SET_P*
     *
     * Hash: 0xCDCD7B2D49AEE73A | Since: 1207
     */
    function _0xCDCD7B2D49AEE73A() {
        Citizen.invokeNative('0xCDCD7B2D49AEE73A', false);
    }
    animscene._0xCDCD7B2D49AEE73A = _0xCDCD7B2D49AEE73A;
    /**
     * Used in SP R* Scripts only
     * _IS_ANIM_SCENE_*
     *
     * Hash: 0xD70C7A30412F8FA0 | Since: 1207
     */
    function _0xD70C7A30412F8FA0(animScene) {
        return Citizen.invokeNative('0xD70C7A30412F8FA0', animScene);
    }
    animscene._0xD70C7A30412F8FA0 = _0xD70C7A30412F8FA0;
    /**
     * Used in SP R* Scripts only
     * _SET_B* - _SET_C*
     *
     * Hash: 0xE12D7B4B959644CD | Since: 1207
     */
    function _0xE12D7B4B959644CD() {
        Citizen.invokeNative('0xE12D7B4B959644CD');
    }
    animscene._0xE12D7B4B959644CD = _0xE12D7B4B959644CD;
    /**
     * Used in SP R* Scripts only
     * _PAUSE_* - _PLAY_*
     *
     * Hash: 0xEA41D44A8D42057B | Since: 1207
     */
    function _0xEA41D44A8D42057B() {
        return Citizen.invokeNative('0xEA41D44A8D42057B');
    }
    animscene._0xEA41D44A8D42057B = _0xEA41D44A8D42057B;
    /**
     * No comment provided
     *
     * Hash: 0x8A8208AE92BF87A5 | Since: 1207
     */
    function clearWasSkipped(animScene) {
        ClearAnimSceneWasSkipped(animScene);
    }
    animscene.clearWasSkipped = clearWasSkipped;
    /**
     * No comment provided
     *
     * Hash: 0xBC781D24AA11F179 | Since: 1207
     */
    function clearBreakoutArchetype(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearBreakoutArchetype(_ped);
    }
    animscene.clearBreakoutArchetype = clearBreakoutArchetype;
    /**
     * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimSceneFlag
     *
     * Hash: 0x1FCA98E33C1437B3 | Since: 1207
     */
    function create(flags) {
        return CreateAnimScene(flags, false, false);
    }
    animscene.create = create;
    /**
     * Returns mgmHandle
     *
     * Hash: 0xA1300DE03E5D1973 | Since: 1207
     */
    function createMgmSystem(mgmFilename) {
        return CreateMgmSystem(mgmFilename);
    }
    animscene.createMgmSystem = createMgmSystem;
    /**
     * No comment provided
     *
     * Hash: 0x84EEDB2C6E650000 | Since: 1207
     */
    function deleteAnimScene(animScene) {
        DeleteAnimScene(animScene);
    }
    animscene.deleteAnimScene = deleteAnimScene;
    /**
     * No comment provided
     *
     * Hash: 0x53CB3970BA02E3CC | Since: 1207
     */
    function deleteMgmSystem(mgmHandle) {
        DeleteMgmSystem(mgmHandle);
    }
    animscene.deleteMgmSystem = deleteMgmSystem;
    /**
     * No comment provided
     *
     * Hash: 0x9D1ECA9337BE9FC3 | Since: 1207
     */
    function doesOwnershipOfEntityExist(animScene, entityName) {
        return DoesAnimSceneOwnershipOfEntityExist(animScene, entityName);
    }
    animscene.doesOwnershipOfEntityExist = doesOwnershipOfEntityExist;
    /**
     * No comment provided
     *
     * Hash: 0xA9016536015DE29D | Since: 1207
     */
    function doesPlayListExist(animScene, playbackListName) {
        return DoesAnimScenePlayListExist(animScene, playbackListName);
    }
    animscene.doesPlayListExist = doesPlayListExist;
    /**
     * No comment provided
     *
     * Hash: 0x6F1F0B17109309DA | Since: 1207
     */
    function doesEntityWithIdExistIn(animScene, entityId) {
        return DoesEntityWithIdExistInAnimScene(animScene, entityId);
    }
    animscene.doesEntityWithIdExistIn = doesEntityWithIdExistIn;
    /**
     * No comment provided
     *
     * Hash: 0xAE5ADA4FE3E21ADC | Since: 1207
     */
    function getDict(animScene) {
        return GetAnimSceneDict(animScene);
    }
    animscene.getDict = getDict;
    /**
     * No comment provided
     *
     * Hash: 0x49F1D143ADE32656 | Since: 1207
     */
    function getDuration(animScene) {
        return GetAnimSceneDuration(animScene);
    }
    animscene.getDuration = getDuration;
    /**
     * No comment provided
     *
     * Hash: 0xFB5674687A1B2814 | Since: 1207
     */
    function getObject(animScene, name, isNetwork) {
        return GetAnimSceneObject(animScene, name, isNetwork);
    }
    animscene.getObject = getObject;
    /**
     * No comment provided
     *
     * Hash: 0xE5822422197BBBA3 | Since: 1207
     */
    function getPed(animScene, name, isNetwork) {
        return GetAnimScenePed(animScene, name, isNetwork);
    }
    animscene.getPed = getPed;
    /**
     * No comment provided
     *
     * Hash: 0x9E036D5204FFBBC8 | Since: 1207
     */
    function getPlaybackListPhaseAudioLoadStress(animScene, phaseName) {
        return GetAnimScenePlaybackListPhaseAudioLoadStress(animScene, phaseName);
    }
    animscene.getPlaybackListPhaseAudioLoadStress = getPlaybackListPhaseAudioLoadStress;
    /**
     * No comment provided
     *
     * Hash: 0x43C21623E42B821B | Since: 1207
     */
    function getRate(animScene) {
        return GetAnimSceneRate(animScene);
    }
    animscene.getRate = getRate;
    /**
     * No comment provided
     *
     * Hash: 0x61BE7D6186260002 | Since: 1207
     */
    function getTime(animScene) {
        return GetAnimSceneTime(animScene);
    }
    animscene.getTime = getTime;
    /**
     * No comment provided
     *
     * Hash: 0x430EE0A19BC5A287 | Since: 1207
     */
    function getVehicle(animScene, name, isNetwork) {
        return GetAnimSceneVehicle(animScene, name, isNetwork);
    }
    animscene.getVehicle = getVehicle;
    /**
     * _HAS_L* (?)
     *
     * Hash: 0x337F1CC8EE895601 | Since: 1207
     */
    function hasEntityEntered(animScene, entityName) {
        return HasEntityEnteredAnimScene(animScene, entityName);
    }
    animscene.hasEntityEntered = hasEntityEntered;
    /**
     * No comment provided
     *
     * Hash: 0x34A0671BE613D3D0 | Since: 1207
     */
    function isAborted(animScene) {
        return IsAnimSceneAborted(animScene);
    }
    animscene.isAborted = isAborted;
    /**
     * No comment provided
     *
     * Hash: 0x59606519FF9D3EC2 | Since: 1207
     */
    function isLoading(animScene) {
        return IsAnimSceneLoading(animScene, false);
    }
    animscene.isLoading = isLoading;
    /**
     * No comment provided
     *
     * Hash: 0xF8D1D2DAB6007EEF | Since: 1207
     */
    function isMetadataAssetInRangeLoading(animScene) {
        return IsAnimSceneMetadataAssetInRangeLoading(animScene, false);
    }
    animscene.isMetadataAssetInRangeLoading = isMetadataAssetInRangeLoading;
    /**
     * No comment provided
     *
     * Hash: 0x4B4038796F0D6566 | Since: 1207
     */
    function isPaused(animScene) {
        return IsAnimScenePaused(animScene);
    }
    animscene.isPaused = isPaused;
    /**
     * No comment provided
     *
     * Hash: 0x1F0E401031E20146 | Since: 1207
     */
    function isPlaybackListPhaseActive(animScene, phaseName) {
        return IsAnimScenePlaybackListPhaseActive(animScene, phaseName);
    }
    animscene.isPlaybackListPhaseActive = isPlaybackListPhaseActive;
    /**
     * No comment provided
     *
     * Hash: 0x23E33CB9F4A3F547 | Since: 1207
     */
    function isPlaybackListPhaseLoaded(animScene, phaseName) {
        return IsAnimScenePlaybackListPhaseLoaded(animScene, phaseName);
    }
    animscene.isPlaybackListPhaseLoaded = isPlaybackListPhaseLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x0DF57F86FE71DBE5 | Since: 1207
     */
    function isPlaybackListPhaseLoading(animScene, phaseName) {
        return IsAnimScenePlaybackListPhaseLoading(animScene, phaseName);
    }
    animscene.isPlaybackListPhaseLoading = isPlaybackListPhaseLoading;
    /**
     * No comment provided
     *
     * Hash: 0x4CDFFE3189EBDBD0 | Since: 1207
     */
    function isSkippable(animScene) {
        return IsAnimSceneSkippable(animScene);
    }
    animscene.isSkippable = isSkippable;
    /**
     * MGM stands for MiniGameMoments.
     *
     * Hash: 0xFDFC14799373283F | Since: 1207
     */
    function isMgmSystemLoaded(mgmFilename) {
        return IsMgmSystemLoaded(mgmFilename);
    }
    animscene.isMgmSystemLoaded = isMgmSystemLoaded;
    /**
     * Used to request MiniGameMoments Assets.
     *
     * mgmFilename's:
     * Poker
     * PokerArthur
     * PokerArthurCamp
     * PokerJohn
     * PokerJohnCamp
     *
     * Hash: 0xB727A847862CB00A | Since: 1207
     */
    function loadMgmAssets(mgmFilename) {
        return LoadMgmAssets(mgmFilename);
    }
    animscene.loadMgmAssets = loadMgmAssets;
    /**
     * Pauses all script threads except the one that called it.
     *
     * Hash: 0x37C1257849DEF24A | Since: 1207
     */
    function pauseScriptThreads(toggle) {
        PauseScriptThreads(toggle);
    }
    animscene.pauseScriptThreads = pauseScriptThreads;
    /**
     * No comment provided
     *
     * Hash: 0xAE6ADA8FE7E84ACC | Since: 1207
     */
    function releasePlayList(animScene, playlistName) {
        return ReleaseAnimScenePlayList(animScene, playlistName);
    }
    animscene.releasePlayList = releasePlayList;
    /**
     * No comment provided
     *
     * Hash: 0x41AFA5F228B0B6B0 | Since: 1207
     */
    function requestPhotoModeDefreeze() {
        RequestPhotoModeDefreeze();
    }
    animscene.requestPhotoModeDefreeze = requestPhotoModeDefreeze;
    /**
     * No comment provided
     *
     * Hash: 0x7C709C01D43D94CD | Since: 1207
     */
    function requestPhotoModeFreeze() {
        RequestPhotoModeFreeze();
    }
    animscene.requestPhotoModeFreeze = requestPhotoModeFreeze;
    /**
     * No comment provided
     *
     * Hash: 0x99B2A2E3655DEAF1 | Since: 1207
     */
    function setBreakoutArchetype(ped, archetype) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetBreakoutArchetype(_ped, archetype);
    }
    animscene.setBreakoutArchetype = setBreakoutArchetype;
    /**
     * No comment provided
     *
     * Hash: 0x07706C4CC9C6CC9E | Since: 1207
     */
    function setMgmEvent(mgmEventHandle, seatId) {
        SetMgmEvent(mgmEventHandle, undefined, seatId, 0, 0);
    }
    animscene.setMgmEvent = setMgmEvent;
})(animscene || (animscene = {}));
export var attribute;
(function (attribute) {
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x75415EE0CB583760 | Since: 1207
     */
    function addPoints(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddAttributePoints(_ped, attributeIndex, 0);
    }
    attribute.addPoints = addPoints;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0xF8DAC3D85636C241 | Since: 1207
     */
    function disableOverpower(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        DisableAttributeOverpower(_ped, attributeIndex);
    }
    attribute.disableOverpower = disableOverpower;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Old name: _SET_ATTRIBUTE_OVERPOWER_VALUE
     *
     * Hash: 0xF6A7C08DF2E28B28 | Since: 1207
     */
    function enableOverpower(ped, attributeIndex, value, makeSound) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        EnableAttributeOverpower(_ped, attributeIndex, value, makeSound);
    }
    attribute.enableOverpower = enableOverpower;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x147149F2E909323C | Since: 1207
     */
    function getBaseRank(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAttributeBaseRank(_ped, attributeIndex);
    }
    attribute.getBaseRank = getBaseRank;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x0EFA71F4B4330E04 | Since: 1207
     */
    function getBonusRank(ped, coreIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAttributeBonusRank(_ped, coreIndex);
    }
    attribute.getBonusRank = getBonusRank;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x219DA04BAA9CB065 | Since: 1207
     */
    function getPoints(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAttributePoints(_ped, attributeIndex);
    }
    attribute.getPoints = getPoints;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0xA4C8E23E29040DE0 | Since: 1207
     */
    function getRank(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAttributeRank(_ped, attributeIndex);
    }
    attribute.getRank = getRank;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x94A7F191DB49A44D | Since: 1207
     */
    function getDefaultPointsNeededForRank(modelHash, attributeIndex, rank) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetDefaultAttributePointsNeededForRank(modelHash, attributeIndex, rank);
    }
    attribute.getDefaultPointsNeededForRank = getDefaultPointsNeededForRank;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x958DD43D41F89A47 | Since: 1207
     */
    function getDefaultRank(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetDefaultAttributeRank(_ped, attributeIndex);
    }
    attribute.getDefaultRank = getDefaultRank;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x7C059C55AD940CB4 | Since: 1207
     */
    function getDefaultMaxRank(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetDefaultMaxAttributeRank(_ped, attributeIndex);
    }
    attribute.getDefaultMaxRank = getDefaultMaxRank;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x223BF310F854871C | Since: 1207
     */
    function getMaxPoints(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetMaxAttributePoints(_ped, attributeIndex);
    }
    attribute.getMaxPoints = getMaxPoints;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x704674A0535A471D | Since: 1207
     */
    function getMaxRank(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetMaxAttributeRank(_ped, attributeIndex);
    }
    attribute.getMaxRank = getMaxRank;
    /**
     * attributeIndex:
     * enum ePedAttribute
     * {
     * PA_HEALTH,
     * PA_STAMINA,
     * PA_SPECIALABILITY,
     * PA_COURAGE,
     * PA_AGILITY,
     * PA_SPEED,
     * PA_ACCELERATION,
     * PA_BONDING,
     * SA_HUNGER,
     * SA_FATIGUED,
     * SA_INEBRIATED,
     * SA_POISONED,
     * SA_BODYHEAT,
     * SA_BODYWEIGHT,
     * SA_OVERFED,
     * SA_SICKNESS,
     * SA_DIRTINESS,
     * SA_DIRTINESSHAT,
     * MTR_STRENGTH,
     * MTR_GRIT,
     * MTR_INSTINCT,
     * PA_UNRULINESS,
     * SA_DIRTINESSSKIN
     * };
     *
     * Hash: 0x5DA12E025D47D4E5 | Since: 1207
     */
    function setBaseRank(ped, attributeIndex, newValue) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAttributeBaseRank(_ped, attributeIndex, newValue);
    }
    attribute.setBaseRank = setBaseRank;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x920F9488BD115EFB | Since: 1207
     */
    function setBonusRank(ped, attributeIndex, newValue) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAttributeBonusRank(_ped, attributeIndex, newValue);
    }
    attribute.setBonusRank = setBonusRank;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x09A59688C26D88DF | Since: 1207
     */
    function setPoints(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAttributePoints(_ped, attributeIndex, 0);
    }
    attribute.setPoints = setPoints;
    /**
     * No comment provided
     *
     * Hash: 0xD962F8579D702DB5 | Since: 1207
     */
    function stopItemPreview() {
        StopItemPreview();
    }
    attribute.stopItemPreview = stopItemPreview;
    /**
     * coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
     *
     * Previously incorrectly named ENABLE_ATTRIBUTE_OVERPOWER
     *
     * Hash: 0x4AF5A4C7B9157D14 | Since: 1207
     */
    function enableCoreOverpower(ped, coreIndex, value, makeSound) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        EnableAttributeCoreOverpower(_ped, coreIndex, value, makeSound);
    }
    attribute.enableCoreOverpower = enableCoreOverpower;
    /**
     * No comment provided
     *
     * Hash: 0xB429F58803D285B1 | Since: 1207
     */
    function getCoreOverpowerSecondsLeft(ped, coreIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAttributeCoreOverpowerSecondsLeft(_ped, coreIndex);
    }
    attribute.getCoreOverpowerSecondsLeft = getCoreOverpowerSecondsLeft;
    /**
     * Gets the ped's core value on a scale of 0 to 100.
     * coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
     *
     * Hash: 0x36731AC041289BB1 | Since: 1207
     */
    function getCoreValue(ped, coreIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAttributeCoreValue(_ped, coreIndex);
    }
    attribute.getCoreValue = getCoreValue;
    /**
     * No comment provided
     *
     * Hash: 0x4C9F782180712742 | Since: 1207
     */
    function getOverpowerSecondsLeft(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAttributeOverpowerSecondsLeft(_ped, attributeIndex);
    }
    attribute.getOverpowerSecondsLeft = getOverpowerSecondsLeft;
    /**
     * No comment provided
     *
     * Hash: 0x200373A8DF081F22 | Since: 1207
     */
    function isCoreOverpowered(ped, coreIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsAttributeCoreOverpowered(_ped, coreIndex);
    }
    attribute.isCoreOverpowered = isCoreOverpowered;
    /**
     * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
     *
     * Hash: 0x103C2F885ABEB00B | Since: 1207
     */
    function isOverpowered(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsAttributeOverpowered(_ped, attributeIndex);
    }
    attribute.isOverpowered = isOverpowered;
    /**
     * coreIndex:
     * enum eAttributeCore
     * {
     * ATTRIBUTE_CORE_HEALTH,
     * ATTRIBUTE_CORE_STAMINA,
     * ATTRIBUTE_CORE_DEADEYE
     * };
     *
     * Hash: 0xC6258F41D86676E0 | Since: 1207
     */
    function setCoreValue(ped, coreIndex, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAttributeCoreValue(_ped, coreIndex, value);
    }
    attribute.setCoreValue = setCoreValue;
    /**
     * Displays status effects on core icons (includes warnings).
     *
     * enum eUiRpgStatusEffect
     * {
     * STATUS_NONE,
     * STATUS_COLD,
     * STATUS_HOT,
     * STATUS_OVERFED,
     * STATUS_DIRTY,
     * STATUS_SNAKE_VENOM,
     * STATUS_ARROW_WOUNDED,
     * STATUS_ARROW_DRAINED,
     * STATUS_ARROW_DISORIENTED,
     * STATUS_ARROW_TRACKED,
     * STATUS_ARROW_CONFUSION,
     * STATUS_UNDERWEIGHT,
     * STATUS_OVERWEIGHT,
     * STATUS_SICK_1,
     * STATUS_SICK_2,
     * STATUS_PREDATOR_INVULNERABLE
     * };
     *
     * Hash: 0xA4D3A1C008F250DF | Since: 1207
     */
    function setStatusEffectCoreIcon(statusEffectType) {
        SetStatusEffectCoreIcon(statusEffectType);
    }
    attribute.setStatusEffectCoreIcon = setStatusEffectCoreIcon;
    /**
     * Starts core periodic icon.
     * statusEffectType: see 0xA4D3A1C008F250DF
     *
     * Hash: 0xFB6E111908502871 | Since: 1207
     */
    function setStatusEffectPeriodicIcon(statusEffectType) {
        SetStatusEffectPeriodicIcon(statusEffectType);
    }
    attribute.setStatusEffectPeriodicIcon = setStatusEffectPeriodicIcon;
    /**
     * Params: p1 is related to satchel_category
     *
     * Hash: 0x7E2C766ADB2C5F1A | Since: 1207
     */
    function startItemPreview() {
        StartItemPreview(undefined, 0);
    }
    attribute.startItemPreview = startItemPreview;
    /**
     * Stops periodic icon.
     * statusEffectType: see 0xA4D3A1C008F250DF
     *
     * Hash: 0x3FC4C027FD0936F4 | Since: 1207
     */
    function stopStatusEffectPeriodicIcon(statusEffectType) {
        StopStatusEffectPeriodicIcon(statusEffectType);
    }
    attribute.stopStatusEffectPeriodicIcon = stopStatusEffectPeriodicIcon;
})(attribute || (attribute = {}));
export var audio;
(function (audio) {
    /**
     * No comment provided
     *
     * Hash: 0x153973AB99FE8980 | Since: 1207
     */
    function addEntityToMixGroup(entity, groupName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AddEntityToAudioMixGroup(_entity, groupName, 0);
    }
    audio.addEntityToMixGroup = addEntityToMixGroup;
    /**
     * No comment provided
     *
     * Hash: 0x95D9F4BC443956E7 | Since: 1207
     */
    function addPedToConversation(convoRoot, ped, characterName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddPedToConversation(convoRoot, _ped, characterName);
    }
    audio.addPedToConversation = addPedToConversation;
    /**
     * Old name: AUDIO_IS_SCRIPTED_MUSIC_PLAYING
     *
     * Hash: 0x845FFC3A4FEEFA3E | Since: 1207
     */
    function isMusicPlaying() {
        return AudioIsMusicPlaying();
    }
    audio.isMusicPlaying = isMusicPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x374F0E716BFCDE82 | Since: 1207
     */
    function triggerExplosion(name, pos) {
        AudioTriggerExplosion(name, pos.x, pos.y, pos.z);
    }
    audio.triggerExplosion = triggerExplosion;
    /**
     * No comment provided
     *
     * Hash: 0x5B17A90291133DA5 | Since: 1207
     */
    function cancelMusicEvent(eventName) {
        return CancelMusicEvent(eventName);
    }
    audio.cancelMusicEvent = cancelMusicEvent;
    /**
     * No comment provided
     *
     * Hash: 0x120C48C614909FA4 | Since: 1207
     */
    function clearAmbientZoneListState(ambientZone) {
        ClearAmbientZoneListState(ambientZone, false);
    }
    audio.clearAmbientZoneListState = clearAmbientZoneListState;
    /**
     * No comment provided
     *
     * Hash: 0x218DD44AAAC964FF | Since: 1207
     */
    function clearAmbientZoneState(zoneName) {
        ClearAmbientZoneState(zoneName, false);
    }
    audio.clearAmbientZoneState = clearAmbientZoneState;
    /**
     * No comment provided
     *
     * Hash: 0x33D51F801CB16E4F | Since: 1207
     */
    function clearConversationHistory() {
        ClearConversationHistory();
    }
    audio.clearConversationHistory = clearConversationHistory;
    /**
     * No comment provided
     *
     * Hash: 0xD2C91A0B572AAE56 | Since: 1207
     */
    function createNewScriptedConversation(convoRoot) {
        return CreateNewScriptedConversation(convoRoot);
    }
    audio.createNewScriptedConversation = createNewScriptedConversation;
    /**
     * No comment provided
     *
     * Hash: 0xA9A41C1E940FB0E8 | Since: 1207
     */
    function disablePedPain(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        DisablePedPainAudio(_ped, toggle);
    }
    audio.disablePedPain = disablePedPain;
    /**
     * Checks if the ped can play the speech or has the speech file, last parameter is usually false.
     *
     * Hash: 0x49B99BF3FDA89A7A | Since: 1207
     */
    function doesContextExistForThisPed(ped, speechName, unk) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return DoesContextExistForThisPed(_ped, speechName, unk);
    }
    audio.doesContextExistForThisPed = doesContextExistForThisPed;
    /**
     * No comment provided
     *
     * Hash: 0x062D5EAD4DA2FA6A | Since: 1207
     */
    function forcePedPanicWalla() {
        ForcePedPanicWalla();
    }
    audio.forcePedPanicWalla = forcePedPanicWalla;
    /**
     * Old name: _FORCE_VEHICLE_ENGINE_AUDIO
     *
     * Hash: 0x4F0C413926060B38 | Since: 1207
     */
    function forceUseGameObject(vehicle, audioName) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        ForceUseAudioGameObject(_vehicle, audioName);
    }
    audio.forceUseGameObject = forceUseGameObject;
    /**
     * No comment provided
     *
     * Hash: 0x480357EE890C295A | Since: 1207
     */
    function getCurrentScriptedConversationLine() {
        return GetCurrentScriptedConversationLine(undefined);
    }
    audio.getCurrentScriptedConversationLine = getCurrentScriptedConversationLine;
    /**
     * No comment provided
     *
     * Hash: 0xE7A0D23DC414507B | Since: 1207
     */
    function getMusicPlaytime() {
        return GetMusicPlaytime();
    }
    audio.getMusicPlaytime = getMusicPlaytime;
    /**
     * No comment provided
     *
     * Hash: 0x430386FE9BF80B45 | Since: 1207
     */
    function getSoundId() {
        return GetSoundId();
    }
    audio.getSoundId = getSoundId;
    /**
     * No comment provided
     *
     * Hash: 0x932C2D096A2C3FFF | Since: 1207
     */
    function isAmbientSpeechDisabled(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsAmbientSpeechDisabled(_ped);
    }
    audio.isAmbientSpeechDisabled = isAmbientSpeechDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x9072C8B49907BFAD | Since: 1207
     */
    function isAmbientSpeechPlaying(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsAmbientSpeechPlaying(_ped);
    }
    audio.isAmbientSpeechPlaying = isAmbientSpeechPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xC265DF9FB44A9FBD | Since: 1207
     */
    function isAnimalVocalizationPlaying(pedHandle) {
        const _pedHandle = pedHandle instanceof Ped ? pedHandle.handle() : pedHandle;
        return IsAnimalVocalizationPlaying(_pedHandle);
    }
    audio.isAnimalVocalizationPlaying = isAnimalVocalizationPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x729072355FA39EC9 | Since: 1207
     */
    function isAnySpeechPlaying(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsAnySpeechPlaying(_ped);
    }
    audio.isAnySpeechPlaying = isAnySpeechPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xB65B60556E2A9225 | Since: 1207
     */
    function isSceneActive(scene) {
        return IsAudioSceneActive(scene);
    }
    audio.isSceneActive = isSceneActive;
    /**
     * Checks whether the horn of a vehicle is currently played.
     *
     * Hash: 0x9D6BFC12B05C6121 | Since: 1207
     */
    function isHornActive(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsHornActive(_vehicle);
    }
    audio.isHornActive = isHornActive;
    /**
     * No comment provided
     *
     * Hash: 0x049E937F18F4020C | Since: 1207
     */
    function isPedInCurrentConversation(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInCurrentConversation(undefined, _ped, undefined);
    }
    audio.isPedInCurrentConversation = isPedInCurrentConversation;
    /**
     * No comment provided
     *
     * Hash: 0xDF0D54BE7A776737 | Since: 1207
     */
    function isScriptedConversationLoaded(convoRoot) {
        return IsScriptedConversationLoaded(convoRoot);
    }
    audio.isScriptedConversationLoaded = isScriptedConversationLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x1ECC76792F661CF5 | Since: 1207
     */
    function isScriptedConversationPlaying() {
        return IsScriptedConversationPlaying(undefined);
    }
    audio.isScriptedConversationPlaying = isScriptedConversationPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xCC9AA18DCC7084F4 | Since: 1207
     */
    function isScriptedSpeechPlaying() {
        return IsScriptedSpeechPlaying(undefined);
    }
    audio.isScriptedSpeechPlaying = isScriptedSpeechPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xD11FA52EB849D978 | Since: 1207
     */
    function isStreamPlaying(streamId) {
        return IsStreamPlaying(streamId);
    }
    audio.isStreamPlaying = isStreamPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x1F1F957154EC51DF | Since: 1207
     */
    function loadStream(streamName, soundSet) {
        return LoadStream(streamName, soundSet);
    }
    audio.loadStream = loadStream;
    /**
     * No comment provided
     *
     * Hash: 0x8530AD776CD72B12 | Since: 1207
     */
    function pauseScriptedConversation() {
        PauseScriptedConversation(undefined, false, false, false, false);
    }
    audio.pauseScriptedConversation = pauseScriptedConversation;
    /**
     * Old name: _PLAY_AMBIENT_SPEECH_AT_COORDS
     *
     * Hash: 0xED640017ED337E45 | Since: 1207
     */
    function playAmbientSpeechFromPositionNative(pos) {
        return PlayAmbientSpeechFromPositionNative(pos.x, pos.y, pos.z);
    }
    audio.playAmbientSpeechFromPositionNative = playAmbientSpeechFromPositionNative;
    /**
     * No comment provided
     *
     * Hash: 0xEE066C7006C49C0A | Since: 1207
     */
    function playAnimalVocalization(ped, vocalizationName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        PlayAnimalVocalization(_ped, vocalizationName, false);
    }
    audio.playAnimalVocalization = playAnimalVocalization;
    /**
     * No comment provided
     *
     * Hash: 0xCD536C4D33DCC900 | Since: 1207
     */
    function playEndCreditsMusic(play) {
        PlayEndCreditsMusic(play);
    }
    audio.playEndCreditsMusic = playEndCreditsMusic;
    /**
     * Valid pain IDs: 0..12  these names are not official, but here is a list of the IDs:
     * 1 burning,
     * 2 drowning,
     * 3 coughing,
     * 4 nothing,
     * 5 nothing,
     * 6 coughing_2,
     * 7 nothing,
     * 8 nothing,
     * 9 hurtingSick?,
     * 10 hurtingFall?,
     * 11 nothing,
     * 12 choking
     *
     * Hash: 0xBC9AE166038A5CEC | Since: 1207
     */
    function playPain(ped, painId, isNetwork) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        PlayPain(_ped, painId, 0, false, isNetwork);
    }
    audio.playPain = playPain;
    /**
     * struct ScriptedSpeechParams
     * {
     * const char* speechName;
     * const char* voiceName;
     * alignas(8) int variation;
     * alignas(8) Hash speechParamHash;
     * alignas(8) Ped listenerPed;
     * alignas(8) BOOL syncOverNetwork;
     * alignas(8) int v7;
     * alignas(8) int v8;
     * };
     *
     * static_assert(sizeof(ScriptedSpeechParams) == 0x40, "incorrect ScriptedSpeechParams size");
     *
     *
     * Example:
     *
     * ScriptedSpeechParams params{"RE_PH_RHD_V3_AGGRO", "0405_U_M_M_RhdSheriff_01", 1, joaat("SPEECH_PARAMS_BEAT_SHOUTED_CLEAR"), 0, true, 1, 1};
     * PLAY_PED_AMBIENT_SPEECH_NATIVE(PLAYER_PED_ID(), (Any*)&params);
     *
     * Old name: _PLAY_AMBIENT_SPEECH1
     * https://github.com/femga/rdr3_discoveries/tree/master/audio/audio_banks
     *
     * Hash: 0x8E04FEDD28D42462 | Since: 1207
     */
    function playPedAmbientSpeechNative(speaker) {
        const _speaker = speaker instanceof Ped ? speaker.handle() : speaker;
        return PlayPedAmbientSpeechNative(_speaker);
    }
    audio.playPedAmbientSpeechNative = playPedAmbientSpeechNative;
    /**
     * No comment provided
     *
     * Hash: 0x7FF4944CC209192D | Since: 1207
     */
    function playSound(audioName, audioRef) {
        PlaySound(audioName, audioRef, false, undefined, false, undefined);
    }
    audio.playSound = playSound;
    /**
     * No comment provided
     *
     * Hash: 0x6FB1DA3CA9DA7D90 | Since: 1207
     */
    function playSoundFromEntity(audioName, entity, audioRef, isNetwork) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        PlaySoundFromEntity(audioName, _entity, audioRef, isNetwork, undefined, undefined);
    }
    audio.playSoundFromEntity = playSoundFromEntity;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/audio/frontend_soundsets
     *
     * Hash: 0x67C540AA08E4A6F5 | Since: 1207
     */
    function playSoundFrontend(audioName, audioRef) {
        PlaySoundFrontend(audioName, audioRef, false, undefined);
    }
    audio.playSoundFrontend = playSoundFrontend;
    /**
     * No comment provided
     *
     * Hash: 0x89049DD63C08B5D1 | Since: 1207
     */
    function playStreamFromPed(ped, streamId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        PlayStreamFromPed(_ped, streamId);
    }
    audio.playStreamFromPed = playStreamFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x21442F412E8DE56B | Since: 1207
     */
    function playStreamFromPosition(pos, streamId) {
        PlayStreamFromPosition(pos.x, pos.y, pos.z, streamId);
    }
    audio.playStreamFromPosition = playStreamFromPosition;
    /**
     * No comment provided
     *
     * Hash: 0x58FCE43488F9F5F4 | Since: 1207
     */
    function playStreamFrontend(streamId) {
        PlayStreamFrontend(streamId);
    }
    audio.playStreamFrontend = playStreamFrontend;
    /**
     * No comment provided
     *
     * Hash: 0x3B3CAD6166916D87 | Since: 1207
     */
    function preloadScriptConversation(convoRoot, clone) {
        PreloadScriptConversation(convoRoot, false, false, clone);
    }
    audio.preloadScriptConversation = preloadScriptConversation;
    /**
     * No comment provided
     *
     * Hash: 0x1E5185B72EF5158A | Since: 1207
     */
    function prepareMusicEvent(eventName) {
        return PrepareMusicEvent(eventName);
    }
    audio.prepareMusicEvent = prepareMusicEvent;
    /**
     * soundId maybe be incorrect name for param p2, in the decompiles is always -2
     *
     * Hash: 0xE368E8422C860BA7 | Since: 1207
     */
    function prepareSound(soundName, soundsetName, soundId) {
        return PrepareSound(soundName, soundsetName, soundId);
    }
    audio.prepareSound = prepareSound;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/audio/soundsets
     *
     * Hash: 0xD9130842D7226045 | Since: 1207
     */
    function prepareSoundset(soundsetName) {
        return PrepareSoundset(soundsetName, false);
    }
    audio.prepareSoundset = prepareSoundset;
    /**
     * No comment provided
     *
     * Hash: 0x4AD019591E94C064 | Since: 1207
     */
    function prepareSoundWithEntity(soundName, entity, soundsetName, soundId) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return PrepareSoundWithEntity(soundName, _entity, soundsetName, soundId);
    }
    audio.prepareSoundWithEntity = prepareSoundWithEntity;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xC6ED9D5092438D91 | Since: 1207
     */
    function registerScriptWith() {
        RegisterScriptWithAudio(false);
    }
    audio.registerScriptWith = registerScriptWith;
    /**
     * No comment provided
     *
     * Hash: 0x77ED170667F50170 | Since: 1207
     */
    function releaseNamedScriptBank(audioBank) {
        ReleaseNamedScriptAudioBank(audioBank);
    }
    audio.releaseNamedScriptBank = releaseNamedScriptBank;
    /**
     * No comment provided
     *
     * Hash: 0x7A2D8AD0A9EB9C3F | Since: 1207
     */
    function releaseScriptBank() {
        ReleaseScriptAudioBank();
    }
    audio.releaseScriptBank = releaseScriptBank;
    /**
     * No comment provided
     *
     * Hash: 0x353FC880830B88FA | Since: 1207
     */
    function releaseSoundId(soundId) {
        ReleaseSoundId(soundId);
    }
    audio.releaseSoundId = releaseSoundId;
    /**
     * No comment provided
     *
     * Hash: 0x18EB48CFC41F2EA0 | Since: 1207
     */
    function removeEntityFromMixGroup(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RemoveEntityFromAudioMixGroup(_entity, 0);
    }
    audio.removeEntityFromMixGroup = removeEntityFromMixGroup;
    /**
     * No comment provided
     *
     * Hash: 0xB4BBFD9CD8B3922B | Since: 1207
     */
    function removePortalSettingsOverride() {
        RemovePortalSettingsOverride(undefined);
    }
    audio.removePortalSettingsOverride = removePortalSettingsOverride;
    /**
     * No comment provided
     *
     * Hash: 0x2F844A8B08D76685 | Since: 1207
     */
    function requestScriptBank(audioBank) {
        return RequestScriptAudioBank(audioBank);
    }
    audio.requestScriptBank = requestScriptBank;
    /**
     * No comment provided
     *
     * Hash: 0x9AEB285D1818C9AC | Since: 1207
     */
    function restartScriptedConversation() {
        RestartScriptedConversation(undefined);
    }
    audio.restartScriptedConversation = restartScriptedConversation;
    /**
     * No comment provided
     *
     * Hash: 0x6C8065A3B780185B | Since: 1207
     */
    function setAmbientVoiceName(ped, name) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAmbientVoiceName(_ped, name);
    }
    audio.setAmbientVoiceName = setAmbientVoiceName;
    /**
     * No comment provided
     *
     * Hash: 0x9748FA4DE50CCE3E | Since: 1207
     */
    function setAmbientZoneListState(ambientZone) {
        SetAmbientZoneListState(ambientZone, false, false);
    }
    audio.setAmbientZoneListState = setAmbientZoneListState;
    /**
     * No comment provided
     *
     * Hash: 0xF3638DAE8C4045E1 | Since: 1207
     */
    function setAmbientZoneListStatePersistent(ambientZone) {
        SetAmbientZoneListStatePersistent(ambientZone, false, false);
    }
    audio.setAmbientZoneListStatePersistent = setAmbientZoneListStatePersistent;
    /**
     * No comment provided
     *
     * Hash: 0xBDA07E5950085E46 | Since: 1207
     */
    function setAmbientZoneState(zoneName, isEnabled) {
        SetAmbientZoneState(zoneName, isEnabled, false);
    }
    audio.setAmbientZoneState = setAmbientZoneState;
    /**
     * No comment provided
     *
     * Hash: 0x1D6650420CEC9D3B | Since: 1207
     */
    function setAmbientZoneStatePersistent(ambientZone) {
        SetAmbientZoneStatePersistent(ambientZone, false, false);
    }
    audio.setAmbientZoneStatePersistent = setAmbientZoneStatePersistent;
    /**
     * Not implemented.
     *
     * Hash: 0xCC97B29285B1DC3B | Since: 1207
     */
    function setAnimalMood(animal, mood) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        SetAnimalMood(_animal, mood);
    }
    audio.setAnimalMood = setAnimalMood;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/audio/audio_flags
     *
     * Hash: 0xB9EFD5C25018725A | Since: 1207
     */
    function setFlag(flagName, toggle) {
        SetAudioFlag(flagName, toggle);
    }
    audio.setFlag = setFlag;
    /**
     * No comment provided
     *
     * Hash: 0x9B1FC259187C97C0 | Since: 1207
     */
    function setOnlineTransitionStage() {
        SetAudioOnlineTransitionStage(undefined);
    }
    audio.setOnlineTransitionStage = setOnlineTransitionStage;
    /**
     * No comment provided
     *
     * Hash: 0xEF21A9EF089A2668 | Since: 1207
     */
    function setSceneVariable(scene, variable, value) {
        SetAudioSceneVariable(scene, variable, value);
    }
    audio.setSceneVariable = setSceneVariable;
    /**
     * No comment provided
     *
     * Hash: 0xE5564483E407F914 | Since: 1207
     */
    function setVehiclePriority(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetAudioVehiclePriority(_vehicle, undefined);
    }
    audio.setVehiclePriority = setVehiclePriority;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x3BD3F52BA9B1E4E8 | Since: 1207
     */
    function setGpsActive(active) {
        SetGpsActive(active);
    }
    audio.setGpsActive = setGpsActive;
    /**
     * No comment provided
     *
     * Hash: 0x76D683C108594D0E | Since: 1207
     */
    function setHornEnabled(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetHornEnabled(_vehicle, toggle);
    }
    audio.setHornEnabled = setHornEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xB2DE3AEBE31150E2 | Since: 1207
     */
    function setIsScriptedSpeechDisabled(ped, disabled) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetIsScriptedSpeechDisabled(_ped, disabled);
    }
    audio.setIsScriptedSpeechDisabled = setIsScriptedSpeechDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x8BF907833BE275DE | Since: 1207
     */
    function setPedInteriorWallaDensity() {
        SetPedInteriorWallaDensity(0, 0);
    }
    audio.setPedInteriorWallaDensity = setPedInteriorWallaDensity;
    /**
     * No comment provided
     *
     * Hash: 0x95D2D383D5396B8A | Since: 1207
     */
    function setPedIsDrunk(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedIsDrunk(_ped, toggle);
    }
    audio.setPedIsDrunk = setPedIsDrunk;
    /**
     * https://en.m.wikipedia.org/wiki/Walla
     *
     * Hash: 0x149AEE66F0CB3A99 | Since: 1207
     */
    function setPedWallaDensity() {
        SetPedWallaDensity(0, 0);
    }
    audio.setPedWallaDensity = setPedWallaDensity;
    /**
     * No comment provided
     *
     * Hash: 0x044DBAD7A7FA2BE5 | Since: 1207
     */
    function setPortalSettingsOverride() {
        SetPortalSettingsOverride(undefined, undefined);
    }
    audio.setPortalSettingsOverride = setPortalSettingsOverride;
    /**
     * No comment provided
     *
     * Hash: 0x399D2D3B33F1B8EB | Since: 1207
     */
    function setStaticEmitterEnabled(emitterName, toggle) {
        SetStaticEmitterEnabled(emitterName, toggle);
    }
    audio.setStaticEmitterEnabled = setStaticEmitterEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x9663FE6B7A61EB00 | Since: 1207
     */
    function skipToNextScriptedConversationLine() {
        SkipToNextScriptedConversationLine(undefined);
    }
    audio.skipToNextScriptedConversationLine = skipToNextScriptedConversationLine;
    /**
     * No comment provided
     *
     * Hash: 0x013A80FC08F6E4F2 | Since: 1207
     */
    function startScene(scene) {
        return StartAudioScene(scene);
    }
    audio.startScene = startScene;
    /**
     * No comment provided
     *
     * Hash: 0x23641AFE870AF385 | Since: 1207
     */
    function startPreloadedConversation(convoRoot) {
        StartPreloadedConversation(convoRoot);
    }
    audio.startPreloadedConversation = startPreloadedConversation;
    /**
     * No comment provided
     *
     * Hash: 0x6B17C62C9635D2DC | Since: 1207
     */
    function startScriptConversation(convoRoot, clone) {
        StartScriptConversation(convoRoot, false, false, clone);
    }
    audio.startScriptConversation = startScriptConversation;
    /**
     * No comment provided
     *
     * Hash: 0xDFE8422B3B94E688 | Since: 1207
     */
    function stopScene(scene) {
        StopAudioScene(scene);
    }
    audio.stopScene = stopScene;
    /**
     * No comment provided
     *
     * Hash: 0xBAC7FC81A75EC1A1 | Since: 1207
     */
    function stopScenes() {
        StopAudioScenes();
    }
    audio.stopScenes = stopScenes;
    /**
     * No comment provided
     *
     * Hash: 0xB8BEC0CA6F0EDB0F | Since: 1207
     */
    function stopCurrentPlayingAmbientSpeech(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        StopCurrentPlayingAmbientSpeech(_ped, undefined);
    }
    audio.stopCurrentPlayingAmbientSpeech = stopCurrentPlayingAmbientSpeech;
    /**
     * No comment provided
     *
     * Hash: 0x79D2F0E66F81D90D | Since: 1207
     */
    function stopCurrentPlayingSpeech(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        StopCurrentPlayingSpeech(_ped, undefined);
    }
    audio.stopCurrentPlayingSpeech = stopCurrentPlayingSpeech;
    /**
     * No comment provided
     *
     * Hash: 0x9D64D7405520E3D3 | Since: 1207
     */
    function stopPedSpeaking(ped, shaking) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        StopPedSpeaking(_ped, shaking);
    }
    audio.stopPedSpeaking = stopPedSpeaking;
    /**
     * No comment provided
     *
     * Hash: 0xD79DEEFB53455EBA | Since: 1207
     */
    function stopScriptedConversation() {
        return StopScriptedConversation(undefined, false, false);
    }
    audio.stopScriptedConversation = stopScriptedConversation;
    /**
     * No comment provided
     *
     * Hash: 0xA4718A1419D18151 | Since: 1207
     */
    function stopStream(streamId) {
        StopStream(streamId);
    }
    audio.stopStream = stopStream;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/audio/music_events/music_events.lua
     *
     * Hash: 0x706D57B0F50DA710 | Since: 1207
     */
    function triggerMusicEvent(eventName) {
        return TriggerMusicEvent(eventName);
    }
    audio.triggerMusicEvent = triggerMusicEvent;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xA8638BE228D4751A | Since: 1207
     */
    function unregisterScriptWith() {
        UnregisterScriptWithAudio();
    }
    audio.unregisterScriptWith = unregisterScriptWith;
    /**
     * No comment provided
     *
     * Hash: 0xBF4DC1784BE94DFA | Since: 1207
     */
    function useFootstepScriptSweeteners(ped, hash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        UseFootstepScriptSweeteners(_ped, false, hash);
    }
    audio.useFootstepScriptSweeteners = useFootstepScriptSweeteners;
    /**
     * No comment provided
     *
     * Hash: 0x017492B2201E3428 | Since: 1207
     */
    function _0x017492B2201E3428() {
        Citizen.invokeNative('0x017492B2201E3428', undefined, undefined, undefined, undefined);
    }
    audio._0x017492B2201E3428 = _0x017492B2201E3428;
    /**
     * No comment provided
     *
     * Hash: 0x018ABE833CA64D2A | Since: 1232
     */
    function _0x018ABE833CA64D2A() {
        Citizen.invokeNative('0x018ABE833CA64D2A', undefined, undefined);
    }
    audio._0x018ABE833CA64D2A = _0x018ABE833CA64D2A;
    /**
     * No comment provided
     *
     * Hash: 0x06C5DF5EE444BC6B | Since: 1207
     */
    function _0x06C5DF5EE444BC6B() {
        Citizen.invokeNative('0x06C5DF5EE444BC6B', undefined, undefined, undefined, undefined, undefined);
    }
    audio._0x06C5DF5EE444BC6B = _0x06C5DF5EE444BC6B;
    /**
     * No comment provided
     *
     * Hash: 0x078F77FD1A43EAB3 | Since: 1207
     */
    function _0x078F77FD1A43EAB3() {
        Citizen.invokeNative('0x078F77FD1A43EAB3', undefined, undefined);
    }
    audio._0x078F77FD1A43EAB3 = _0x078F77FD1A43EAB3;
    /**
     * No comment provided
     *
     * Hash: 0x0CB3D1919E8D7CBA | Since: 1207
     */
    function _0x0CB3D1919E8D7CBA(convoRoot) {
        return Citizen.invokeNative('0x0CB3D1919E8D7CBA', convoRoot);
    }
    audio._0x0CB3D1919E8D7CBA = _0x0CB3D1919E8D7CBA;
    /**
     * speechEventType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/naSpeechEventType
     * p1 is possibly naSpeechAudibility, naSpeechType, or naSpeechEventTypeRequestPriority
     * SKIP_* - START_*
     *
     * Hash: 0x0D7FD6A55FD63AEF | Since: 1207
     */
    function _0x0D7FD6A55FD63AEF(speechEventType) {
        Citizen.invokeNative('0x0D7FD6A55FD63AEF', speechEventType, 0, false);
    }
    audio._0x0D7FD6A55FD63AEF = _0x0D7FD6A55FD63AEF;
    /**
     * No comment provided
     *
     * Hash: 0x0FAF7171BF613B80 | Since: 1207
     */
    function _0x0FAF7171BF613B80() {
        Citizen.invokeNative('0x0FAF7171BF613B80', undefined);
    }
    audio._0x0FAF7171BF613B80 = _0x0FAF7171BF613B80;
    /**
     * No comment provided
     *
     * Hash: 0x131EC9247E7A2903 | Since: 1207
     */
    function _0x131EC9247E7A2903() {
        return Citizen.invokeNative('0x131EC9247E7A2903', undefined);
    }
    audio._0x131EC9247E7A2903 = _0x131EC9247E7A2903;
    /**
     * No comment provided
     *
     * Hash: 0x138ADB94F8B90616 | Since: 1207
     */
    function _0x138ADB94F8B90616() {
        Citizen.invokeNative('0x138ADB94F8B90616');
    }
    audio._0x138ADB94F8B90616 = _0x138ADB94F8B90616;
    /**
     * No comment provided
     *
     * Hash: 0x139A4B9DF2D26CBF | Since: 1232
     */
    function _0x139A4B9DF2D26CBF() {
        Citizen.invokeNative('0x139A4B9DF2D26CBF', undefined, undefined);
    }
    audio._0x139A4B9DF2D26CBF = _0x139A4B9DF2D26CBF;
    /**
     * No comment provided
     *
     * Hash: 0x152ED1B56E8F1F50 | Since: 1207
     */
    function _0x152ED1B56E8F1F50(currentScriptedConvoLine) {
        return Citizen.invokeNative('0x152ED1B56E8F1F50', undefined, currentScriptedConvoLine);
    }
    audio._0x152ED1B56E8F1F50 = _0x152ED1B56E8F1F50;
    /**
     * No comment provided
     *
     * Hash: 0x1E6F9A9FE1A99F36 | Since: 1207
     */
    function _0x1E6F9A9FE1A99F36(audSpeechEvent) {
        Citizen.invokeNative('0x1E6F9A9FE1A99F36', audSpeechEvent);
    }
    audio._0x1E6F9A9FE1A99F36 = _0x1E6F9A9FE1A99F36;
    /**
     * No comment provided
     *
     * Hash: 0x254B0241E964B450 | Since: 1207
     */
    function _0x254B0241E964B450(currentScriptedConvoLine) {
        return Citizen.invokeNative('0x254B0241E964B450', undefined, currentScriptedConvoLine);
    }
    audio._0x254B0241E964B450 = _0x254B0241E964B450;
    /**
     * No comment provided
     *
     * Hash: 0x259ACC5B52A2B2D9 | Since: 1207
     */
    function _0x259ACC5B52A2B2D9() {
        Citizen.invokeNative('0x259ACC5B52A2B2D9', undefined, undefined);
    }
    audio._0x259ACC5B52A2B2D9 = _0x259ACC5B52A2B2D9;
    /**
     * No comment provided
     *
     * Hash: 0x2651DDC0EA269073 | Since: 1207
     */
    function _0x2651DDC0EA269073(ropeId) {
        Citizen.invokeNative('0x2651DDC0EA269073', ropeId, 0);
    }
    audio._0x2651DDC0EA269073 = _0x2651DDC0EA269073;
    /**
     * No comment provided
     *
     * Hash: 0x295859EB18F48D82 | Since: 1207
     */
    function _0x295859EB18F48D82() {
        return Citizen.invokeNative('0x295859EB18F48D82', undefined);
    }
    audio._0x295859EB18F48D82 = _0x295859EB18F48D82;
    /**
     * No comment provided
     *
     * Hash: 0x2B101AD9F651243A | Since: 1207
     */
    function _0x2B101AD9F651243A() {
        return Citizen.invokeNative('0x2B101AD9F651243A');
    }
    audio._0x2B101AD9F651243A = _0x2B101AD9F651243A;
    /**
     * No comment provided
     *
     * Hash: 0x2B9C37C01BF25EDB | Since: 1207
     */
    function _0x2B9C37C01BF25EDB() {
        return Citizen.invokeNative('0x2B9C37C01BF25EDB', undefined);
    }
    audio._0x2B9C37C01BF25EDB = _0x2B9C37C01BF25EDB;
    /**
     * No comment provided
     *
     * Hash: 0x2FFF4A78384AFFDF | Since: 1436
     */
    function _0x2FFF4A78384AFFDF(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x2FFF4A78384AFFDF', _entity);
    }
    audio._0x2FFF4A78384AFFDF = _0x2FFF4A78384AFFDF;
    /**
     * No comment provided
     *
     * Hash: 0x341CDD17EFC2472E | Since: 1207
     */
    function _0x341CDD17EFC2472E() {
        Citizen.invokeNative('0x341CDD17EFC2472E', undefined, undefined);
    }
    audio._0x341CDD17EFC2472E = _0x341CDD17EFC2472E;
    /**
     * No comment provided
     *
     * Hash: 0x35B8C070E0C16E2F | Since: 1207
     */
    function _0x35B8C070E0C16E2F() {
        Citizen.invokeNative('0x35B8C070E0C16E2F', undefined, undefined);
    }
    audio._0x35B8C070E0C16E2F = _0x35B8C070E0C16E2F;
    /**
     * No comment provided
     *
     * Hash: 0x380A2E353AD30917 | Since: 1207
     */
    function _0x380A2E353AD30917() {
        Citizen.invokeNative('0x380A2E353AD30917', undefined, undefined, undefined);
    }
    audio._0x380A2E353AD30917 = _0x380A2E353AD30917;
    /**
     * No comment provided
     *
     * Hash: 0x3A00D87B20A2A5E4 | Since: 1207
     */
    function _0x3A00D87B20A2A5E4() {
        Citizen.invokeNative('0x3A00D87B20A2A5E4', undefined, undefined);
    }
    audio._0x3A00D87B20A2A5E4 = _0x3A00D87B20A2A5E4;
    /**
     * No comment provided
     *
     * Hash: 0x3A3BE6B920525237 | Since: 1207
     */
    function _0x3A3BE6B920525237() {
        Citizen.invokeNative('0x3A3BE6B920525237', undefined, undefined);
    }
    audio._0x3A3BE6B920525237 = _0x3A3BE6B920525237;
    /**
     * No comment provided
     *
     * Hash: 0x3D0BBCCF401B5FDB | Since: 1207
     */
    function _0x3D0BBCCF401B5FDB() {
        Citizen.invokeNative('0x3D0BBCCF401B5FDB');
    }
    audio._0x3D0BBCCF401B5FDB = _0x3D0BBCCF401B5FDB;
    /**
     * No comment provided
     *
     * Hash: 0x3E93DDDCBB6111E4 | Since: 1207
     */
    function _0x3E93DDDCBB6111E4() {
        Citizen.invokeNative('0x3E93DDDCBB6111E4', undefined, 0);
    }
    audio._0x3E93DDDCBB6111E4 = _0x3E93DDDCBB6111E4;
    /**
     * No comment provided
     *
     * Hash: 0x3E98AC9D8C56C62C | Since: 1207
     */
    function _0x3E98AC9D8C56C62C() {
        Citizen.invokeNative('0x3E98AC9D8C56C62C', undefined);
    }
    audio._0x3E98AC9D8C56C62C = _0x3E98AC9D8C56C62C;
    /**
     * No comment provided
     *
     * Hash: 0x40CA665AB9D8D505 | Since: 1207
     */
    function _0x40CA665AB9D8D505(convoRoot, singleLineIndex) {
        Citizen.invokeNative('0x40CA665AB9D8D505', convoRoot, singleLineIndex);
    }
    audio._0x40CA665AB9D8D505 = _0x40CA665AB9D8D505;
    /**
     * No comment provided
     *
     * Hash: 0x43037ABFE214A851 | Since: 1207
     */
    function _0x43037ABFE214A851() {
        Citizen.invokeNative('0x43037ABFE214A851');
    }
    audio._0x43037ABFE214A851 = _0x43037ABFE214A851;
    /**
     * No comment provided
     *
     * Hash: 0x448F2647DD6F2E27 | Since: 1232
     */
    function _0x448F2647DD6F2E27() {
        Citizen.invokeNative('0x448F2647DD6F2E27', undefined, undefined, undefined, undefined, undefined);
    }
    audio._0x448F2647DD6F2E27 = _0x448F2647DD6F2E27;
    /**
     * No comment provided
     *
     * Hash: 0x44A5EEF54F62E823 | Since: 1207
     */
    function _0x44A5EEF54F62E823() {
        return Citizen.invokeNative('0x44A5EEF54F62E823', undefined);
    }
    audio._0x44A5EEF54F62E823 = _0x44A5EEF54F62E823;
    /**
     * No comment provided
     *
     * Hash: 0x4A98E228A936DBCC | Since: 1207
     */
    function _0x4A98E228A936DBCC() {
        return Citizen.invokeNative('0x4A98E228A936DBCC', undefined);
    }
    audio._0x4A98E228A936DBCC = _0x4A98E228A936DBCC;
    /**
     * No comment provided
     *
     * Hash: 0x4BE3EC91C01F0FE8 | Since: 1207
     */
    function _0x4BE3EC91C01F0FE8() {
        Citizen.invokeNative('0x4BE3EC91C01F0FE8');
    }
    audio._0x4BE3EC91C01F0FE8 = _0x4BE3EC91C01F0FE8;
    /**
     * No comment provided
     *
     * Hash: 0x569ABC36E28DDEAA | Since: 1207
     */
    function _0x569ABC36E28DDEAA() {
        Citizen.invokeNative('0x569ABC36E28DDEAA');
    }
    audio._0x569ABC36E28DDEAA = _0x569ABC36E28DDEAA;
    /**
     * _IS_SOUND_RUNNING(?)
     *
     * Hash: 0x580D71DFE0088E34 | Since: 1207
     */
    function _0x580D71DFE0088E34(audioName, audioRef) {
        return Citizen.invokeNative('0x580D71DFE0088E34', audioName, audioRef);
    }
    audio._0x580D71DFE0088E34 = _0x580D71DFE0088E34;
    /**
     * No comment provided
     *
     * Hash: 0x5A13586A9447931F | Since: 1207
     */
    function _0x5A13586A9447931F() {
        return Citizen.invokeNative('0x5A13586A9447931F', false);
    }
    audio._0x5A13586A9447931F = _0x5A13586A9447931F;
    /**
     * No comment provided
     *
     * Hash: 0x5AE0CB5F35F034FD | Since: 1207
     */
    function _0x5AE0CB5F35F034FD() {
        Citizen.invokeNative('0x5AE0CB5F35F034FD', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    audio._0x5AE0CB5F35F034FD = _0x5AE0CB5F35F034FD;
    /**
     * No comment provided
     *
     * Hash: 0x5BC885EBD75FAA7D | Since: 1207
     */
    function _0x5BC885EBD75FAA7D() {
        Citizen.invokeNative('0x5BC885EBD75FAA7D', undefined, undefined);
    }
    audio._0x5BC885EBD75FAA7D = _0x5BC885EBD75FAA7D;
    /**
     * No comment provided
     *
     * Hash: 0x5E3CCF03995388B5 | Since: 1207
     */
    function _0x5E3CCF03995388B5() {
        Citizen.invokeNative('0x5E3CCF03995388B5', undefined, undefined, undefined, undefined);
    }
    audio._0x5E3CCF03995388B5 = _0x5E3CCF03995388B5;
    /**
     * No comment provided
     *
     * Hash: 0x62377977E4F08668 | Since: 1436
     */
    function _0x62377977E4F08668(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x62377977E4F08668', _entity);
    }
    audio._0x62377977E4F08668 = _0x62377977E4F08668;
    /**
     * No comment provided
     *
     * Hash: 0x64B956F4E761DF5C | Since: 1207
     */
    function _0x64B956F4E761DF5C() {
        Citizen.invokeNative('0x64B956F4E761DF5C', undefined);
    }
    audio._0x64B956F4E761DF5C = _0x64B956F4E761DF5C;
    /**
     * speechEventType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/naSpeechEventType
     * SKIP_* - START_*
     *
     * Hash: 0x660A8F876DF1D4F8 | Since: 1207
     */
    function _0x660A8F876DF1D4F8(speechEventType) {
        Citizen.invokeNative('0x660A8F876DF1D4F8', speechEventType);
    }
    audio._0x660A8F876DF1D4F8 = _0x660A8F876DF1D4F8;
    /**
     * No comment provided
     *
     * Hash: 0x6652B0C8F3D414D0 | Since: 1207
     */
    function _0x6652B0C8F3D414D0() {
        Citizen.invokeNative('0x6652B0C8F3D414D0', undefined);
    }
    audio._0x6652B0C8F3D414D0 = _0x6652B0C8F3D414D0;
    /**
     * _STOP_AUDIO_*
     *
     * Hash: 0x6AB944DF68B512D3 | Since: 1207
     */
    function _0x6AB944DF68B512D3() {
        Citizen.invokeNative('0x6AB944DF68B512D3', undefined);
    }
    audio._0x6AB944DF68B512D3 = _0x6AB944DF68B512D3;
    /**
     * No comment provided
     *
     * Hash: 0x6B7A88A61B41E589 | Since: 1207
     */
    function _0x6B7A88A61B41E589() {
        Citizen.invokeNative('0x6B7A88A61B41E589', undefined);
    }
    audio._0x6B7A88A61B41E589 = _0x6B7A88A61B41E589;
    /**
     * Gets the hash for the last played speech line.
     *
     * Hash: 0x6BFFB7C276866996 | Since: 1207
     */
    function getLastPlayedSpeechForPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x6BFFB7C276866996', _ped);
    }
    audio.getLastPlayedSpeechForPed = getLastPlayedSpeechForPed;
    /**
     * No comment provided
     *
     * Hash: 0x6DA15746D5CC1A92 | Since: 1207
     */
    function _0x6DA15746D5CC1A92() {
        Citizen.invokeNative('0x6DA15746D5CC1A92', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    audio._0x6DA15746D5CC1A92 = _0x6DA15746D5CC1A92;
    /**
     * No comment provided
     *
     * Hash: 0x72E4D1C4639BC465 | Since: 1207
     */
    function _0x72E4D1C4639BC465(p0) {
        const _p0 = p0 instanceof Entity ? p0.handle() : p0;
        return Citizen.invokeNative('0x72E4D1C4639BC465', _p0, undefined);
    }
    audio._0x72E4D1C4639BC465 = _0x72E4D1C4639BC465;
    /**
     * _AUDIO_IS_* - _AUDIO_TRIGGER*
     *
     * Hash: 0x7455CD705F7E933E | Since: 1207
     */
    function _0x7455CD705F7E933E() {
        Citizen.invokeNative('0x7455CD705F7E933E');
    }
    audio._0x7455CD705F7E933E = _0x7455CD705F7E933E;
    /**
     * No comment provided
     *
     * Hash: 0x7678FE0455ED1145 | Since: 1207
     */
    function _0x7678FE0455ED1145() {
        return Citizen.invokeNative('0x7678FE0455ED1145', undefined, undefined, undefined);
    }
    audio._0x7678FE0455ED1145 = _0x7678FE0455ED1145;
    /**
     * Only used in R* SP Script cv_mus_shared
     *
     * Hash: 0x79F9C57B8D0DFE90 | Since: 1207
     */
    function _0x79F9C57B8D0DFE90(convoRoot, animScene) {
        return Citizen.invokeNative('0x79F9C57B8D0DFE90', convoRoot, animScene);
    }
    audio._0x79F9C57B8D0DFE90 = _0x79F9C57B8D0DFE90;
    /**
     * No comment provided
     *
     * Hash: 0x7E176C676F8652A9 | Since: 1207
     */
    function _0x7E176C676F8652A9() {
        Citizen.invokeNative('0x7E176C676F8652A9', undefined);
    }
    audio._0x7E176C676F8652A9 = _0x7E176C676F8652A9;
    /**
     * No comment provided
     *
     * Hash: 0x821C32C728B24477 | Since: 1207
     */
    function _0x821C32C728B24477() {
        Citizen.invokeNative('0x821C32C728B24477', undefined, undefined, undefined);
    }
    audio._0x821C32C728B24477 = _0x821C32C728B24477;
    /**
     * No comment provided
     *
     * Hash: 0x839C9F124BE74D94 | Since: 1207
     */
    function _0x839C9F124BE74D94() {
        Citizen.invokeNative('0x839C9F124BE74D94', undefined, undefined, undefined, undefined, undefined);
    }
    audio._0x839C9F124BE74D94 = _0x839C9F124BE74D94;
    /**
     * No comment provided
     *
     * Hash: 0x847748AE5D7B1071 | Since: 1207
     */
    function _0x847748AE5D7B1071() {
        return Citizen.invokeNative('0x847748AE5D7B1071', false);
    }
    audio._0x847748AE5D7B1071 = _0x847748AE5D7B1071;
    /**
     * Not implemented.
     *
     * Hash: 0x864A842B86993851 | Since: 1207
     */
    function _0x864A842B86993851(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x864A842B86993851', _ped);
    }
    audio._0x864A842B86993851 = _0x864A842B86993851;
    /**
     * No comment provided
     *
     * Hash: 0x886657C5B3D8EDE3 | Since: 1232
     */
    function _0x886657C5B3D8EDE3(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x886657C5B3D8EDE3', _entity);
    }
    audio._0x886657C5B3D8EDE3 = _0x886657C5B3D8EDE3;
    /**
     * No comment provided
     *
     * Hash: 0x8D29FDF565DED9AE | Since: 1232
     */
    function _0x8D29FDF565DED9AE() {
        Citizen.invokeNative('0x8D29FDF565DED9AE', undefined, undefined, undefined);
    }
    audio._0x8D29FDF565DED9AE = _0x8D29FDF565DED9AE;
    /**
     * No comment provided
     *
     * Hash: 0x8E901B65206C2D3E | Since: 1207
     */
    function _0x8E901B65206C2D3E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8E901B65206C2D3E', _ped);
    }
    audio._0x8E901B65206C2D3E = _0x8E901B65206C2D3E;
    /**
     * No comment provided
     *
     * Hash: 0x935DBD96D4A3DA1F | Since: 1207
     */
    function _0x935DBD96D4A3DA1F(currentScriptedConvoLine) {
        return Citizen.invokeNative('0x935DBD96D4A3DA1F', undefined, currentScriptedConvoLine);
    }
    audio._0x935DBD96D4A3DA1F = _0x935DBD96D4A3DA1F;
    /**
     * No comment provided
     *
     * Hash: 0x9D6DEC9791A4E501 | Since: 1207
     */
    function _0x9D6DEC9791A4E501() {
        return Citizen.invokeNative('0x9D6DEC9791A4E501', undefined, undefined, undefined, undefined);
    }
    audio._0x9D6DEC9791A4E501 = _0x9D6DEC9791A4E501;
    /**
     * No comment provided
     *
     * Hash: 0x9EB779765E68C52E | Since: 1207
     */
    function _0x9EB779765E68C52E() {
        Citizen.invokeNative('0x9EB779765E68C52E', undefined, undefined);
    }
    audio._0x9EB779765E68C52E = _0x9EB779765E68C52E;
    /**
     * No comment provided
     *
     * Hash: 0xA2323A2EAE32A290 | Since: 1207
     */
    function _0xA2323A2EAE32A290(listeningToPed, ped, listenerName) {
        const _listeningToPed = listeningToPed instanceof Ped ? listeningToPed.handle() : listeningToPed;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xA2323A2EAE32A290', _listeningToPed, _ped, listenerName);
    }
    audio._0xA2323A2EAE32A290 = _0xA2323A2EAE32A290;
    /**
     * No comment provided
     *
     * Hash: 0xA2B851605748AD0E | Since: 1207
     */
    function _0xA2B851605748AD0E() {
        Citizen.invokeNative('0xA2B851605748AD0E');
    }
    audio._0xA2B851605748AD0E = _0xA2B851605748AD0E;
    /**
     * No comment provided
     *
     * Hash: 0xA6847BBA4FCDD13F | Since: 1207
     */
    function _0xA6847BBA4FCDD13F() {
        Citizen.invokeNative('0xA6847BBA4FCDD13F', undefined, undefined);
    }
    audio._0xA6847BBA4FCDD13F = _0xA6847BBA4FCDD13F;
    /**
     * No comment provided
     *
     * Hash: 0xA6A3A3F96B8B030E | Since: 1207
     */
    function _0xA6A3A3F96B8B030E() {
        return Citizen.invokeNative('0xA6A3A3F96B8B030E');
    }
    audio._0xA6A3A3F96B8B030E = _0xA6A3A3F96B8B030E;
    /**
     * No comment provided
     *
     * Hash: 0xABDB4863D3D72021 | Since: 1207
     */
    function _0xABDB4863D3D72021(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xABDB4863D3D72021', _entity, undefined, undefined, 0, undefined);
    }
    audio._0xABDB4863D3D72021 = _0xABDB4863D3D72021;
    /**
     * No comment provided
     *
     * Hash: 0xB18FEC133C7C6C69 | Since: 1207
     */
    function _0xB18FEC133C7C6C69() {
        return Citizen.invokeNative('0xB18FEC133C7C6C69', undefined);
    }
    audio._0xB18FEC133C7C6C69 = _0xB18FEC133C7C6C69;
    /**
     * Used in Script Function NET_CAMP_CLIENT_UPDATE_PED_ROLE_STATE_SHOP: hash exists! Playing hash
     *
     * Hash: 0xB93A769B8B726950 | Since: 1207
     */
    function _0xB93A769B8B726950(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xB93A769B8B726950', _ped, p1);
    }
    audio._0xB93A769B8B726950 = _0xB93A769B8B726950;
    /**
     * No comment provided
     *
     * Hash: 0xBC07CA8FD710E7FD | Since: 1232
     */
    function _0xBC07CA8FD710E7FD() {
        Citizen.invokeNative('0xBC07CA8FD710E7FD', undefined, undefined);
    }
    audio._0xBC07CA8FD710E7FD = _0xBC07CA8FD710E7FD;
    /**
     * Checks for MOONSHINE_BAND
     *
     * Hash: 0xBE28DB99556FF8D9 | Since: 1207
     */
    function _0xBE28DB99556FF8D9(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0xBE28DB99556FF8D9', _entity);
    }
    audio._0xBE28DB99556FF8D9 = _0xBE28DB99556FF8D9;
    /**
     * No comment provided
     *
     * Hash: 0xC369E2234E34A0CA | Since: 1207
     */
    function _0xC369E2234E34A0CA() {
        return Citizen.invokeNative('0xC369E2234E34A0CA', undefined, undefined);
    }
    audio._0xC369E2234E34A0CA = _0xC369E2234E34A0CA;
    /**
     * No comment provided
     *
     * Hash: 0xC4CFCE4C656EF480 | Since: 1207
     */
    function _0xC4CFCE4C656EF480(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC4CFCE4C656EF480', _ped);
    }
    audio._0xC4CFCE4C656EF480 = _0xC4CFCE4C656EF480;
    /**
     * No comment provided
     *
     * Hash: 0xC68C02DE259C927C | Since: 1232
     */
    function _0xC68C02DE259C927C() {
        return Citizen.invokeNative('0xC68C02DE259C927C', undefined);
    }
    audio._0xC68C02DE259C927C = _0xC68C02DE259C927C;
    /**
     * No comment provided
     *
     * Hash: 0xC886CD666ADD42E1 | Since: 1207
     */
    function _0xC886CD666ADD42E1() {
        Citizen.invokeNative('0xC886CD666ADD42E1', undefined, undefined);
    }
    audio._0xC886CD666ADD42E1 = _0xC886CD666ADD42E1;
    /**
     * No comment provided
     *
     * Hash: 0xCBF2BEBB468A34F3 | Since: 1207
     */
    function _0xCBF2BEBB468A34F3() {
        Citizen.invokeNative('0xCBF2BEBB468A34F3', undefined);
    }
    audio._0xCBF2BEBB468A34F3 = _0xCBF2BEBB468A34F3;
    /**
     * No comment provided
     *
     * Hash: 0xCFAD2C8CD1054523 | Since: 1207
     */
    function _0xCFAD2C8CD1054523() {
        Citizen.invokeNative('0xCFAD2C8CD1054523', undefined, undefined, undefined, undefined);
    }
    audio._0xCFAD2C8CD1054523 = _0xCFAD2C8CD1054523;
    /**
     * No comment provided
     *
     * Hash: 0xD05A460328560477 | Since: 1232
     */
    function _0xD05A460328560477() {
        return Citizen.invokeNative('0xD05A460328560477', undefined);
    }
    audio._0xD05A460328560477 = _0xD05A460328560477;
    /**
     * _IS_SCRIPTED_CONVERSATION_*
     *
     * Hash: 0xD0730C1FA40348D9 | Since: 1207
     */
    function _0xD0730C1FA40348D9(convoRoot) {
        return Citizen.invokeNative('0xD0730C1FA40348D9', convoRoot);
    }
    audio._0xD0730C1FA40348D9 = _0xD0730C1FA40348D9;
    /**
     * No comment provided
     *
     * Hash: 0xD47D47EFBF103FB8 | Since: 1207
     */
    function _0xD47D47EFBF103FB8() {
        Citizen.invokeNative('0xD47D47EFBF103FB8', undefined, undefined);
    }
    audio._0xD47D47EFBF103FB8 = _0xD47D47EFBF103FB8;
    /**
     * No comment provided
     *
     * Hash: 0xD733528B6C35647A | Since: 1207
     */
    function _0xD733528B6C35647A() {
        Citizen.invokeNative('0xD733528B6C35647A', undefined, undefined);
    }
    audio._0xD733528B6C35647A = _0xD733528B6C35647A;
    /**
     * No comment provided
     *
     * Hash: 0xDAD6CD07CAA4F382 | Since: 1207
     */
    function _0xDAD6CD07CAA4F382() {
        Citizen.invokeNative('0xDAD6CD07CAA4F382');
    }
    audio._0xDAD6CD07CAA4F382 = _0xDAD6CD07CAA4F382;
    /**
     * No comment provided
     *
     * Hash: 0xDC2F83A0612CA34D | Since: 1207
     */
    function _0xDC2F83A0612CA34D() {
        return Citizen.invokeNative('0xDC2F83A0612CA34D', undefined);
    }
    audio._0xDC2F83A0612CA34D = _0xDC2F83A0612CA34D;
    /**
     * No comment provided
     *
     * Hash: 0xDC93F0948F2C28F4 | Since: 1207
     */
    function _0xDC93F0948F2C28F4() {
        Citizen.invokeNative('0xDC93F0948F2C28F4', undefined);
    }
    audio._0xDC93F0948F2C28F4 = _0xDC93F0948F2C28F4;
    /**
     * No comment provided
     *
     * Hash: 0xDF947FE0D551684E | Since: 1207
     */
    function _0xDF947FE0D551684E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xDF947FE0D551684E', _ped, undefined);
    }
    audio._0xDF947FE0D551684E = _0xDF947FE0D551684E;
    /**
     * No comment provided
     *
     * Hash: 0xE600F61F54A444A6 | Since: 1207
     */
    function _0xE600F61F54A444A6() {
        return Citizen.invokeNative('0xE600F61F54A444A6');
    }
    audio._0xE600F61F54A444A6 = _0xE600F61F54A444A6;
    /**
     * No comment provided
     *
     * Hash: 0xE7E6CB8B713ED190 | Since: 1207
     */
    function _0xE7E6CB8B713ED190() {
        Citizen.invokeNative('0xE7E6CB8B713ED190');
    }
    audio._0xE7E6CB8B713ED190 = _0xE7E6CB8B713ED190;
    /**
     * No comment provided
     *
     * Hash: 0xE891504B2F0E2DBA | Since: 1207
     */
    function _0xE891504B2F0E2DBA() {
        Citizen.invokeNative('0xE891504B2F0E2DBA', undefined, undefined);
    }
    audio._0xE891504B2F0E2DBA = _0xE891504B2F0E2DBA;
    /**
     * No comment provided
     *
     * Hash: 0xE9694B2D6CB87B06 | Since: 1232
     */
    function _0xE9694B2D6CB87B06(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xE9694B2D6CB87B06', _entity, undefined);
    }
    audio._0xE9694B2D6CB87B06 = _0xE9694B2D6CB87B06;
    /**
     * No comment provided
     *
     * Hash: 0xEA546C31FD45F8CD | Since: 1207
     */
    function _0xEA546C31FD45F8CD() {
        Citizen.invokeNative('0xEA546C31FD45F8CD', undefined);
    }
    audio._0xEA546C31FD45F8CD = _0xEA546C31FD45F8CD;
    /**
     * No comment provided
     *
     * Hash: 0xEB4D592620B8C209 | Since: 1207
     */
    function _0xEB4D592620B8C209() {
        Citizen.invokeNative('0xEB4D592620B8C209', undefined);
    }
    audio._0xEB4D592620B8C209 = _0xEB4D592620B8C209;
    /**
     * Name: ROPE_SETTINGS_DEFAULT
     *
     * Hash: 0xF092B6030D6FD49C | Since: 1207
     */
    function _0xF092B6030D6FD49C(ropeId, name) {
        Citizen.invokeNative('0xF092B6030D6FD49C', ropeId, name);
    }
    audio._0xF092B6030D6FD49C = _0xF092B6030D6FD49C;
    /**
     * No comment provided
     *
     * Hash: 0xF0EE69F500952FA5 | Since: 1207
     */
    function _0xF0EE69F500952FA5() {
        return Citizen.invokeNative('0xF0EE69F500952FA5', undefined);
    }
    audio._0xF0EE69F500952FA5 = _0xF0EE69F500952FA5;
    /**
     * No comment provided
     *
     * Hash: 0xF232C2C546AC16D0 | Since: 1207
     */
    function _0xF232C2C546AC16D0() {
        Citizen.invokeNative('0xF232C2C546AC16D0', undefined);
    }
    audio._0xF232C2C546AC16D0 = _0xF232C2C546AC16D0;
    /**
     * No comment provided
     *
     * Hash: 0xF336E9F989B3518F | Since: 1207
     */
    function _0xF336E9F989B3518F() {
        return Citizen.invokeNative('0xF336E9F989B3518F', undefined);
    }
    audio._0xF336E9F989B3518F = _0xF336E9F989B3518F;
    /**
     * No comment provided
     *
     * Hash: 0xF64034D533CE8AAC | Since: 1207
     */
    function _0xF64034D533CE8AAC() {
        Citizen.invokeNative('0xF64034D533CE8AAC', undefined, undefined, undefined);
    }
    audio._0xF64034D533CE8AAC = _0xF64034D533CE8AAC;
    /**
     * No comment provided
     *
     * Hash: 0xFCDEC42B1C78B7F8 | Since: 1207
     */
    function _0xFCDEC42B1C78B7F8() {
        Citizen.invokeNative('0xFCDEC42B1C78B7F8', undefined, undefined);
    }
    audio._0xFCDEC42B1C78B7F8 = _0xFCDEC42B1C78B7F8;
    /**
     * No comment provided
     *
     * Hash: 0xFD461D0ABA5559B1 | Since: 1207
     */
    function _0xFD461D0ABA5559B1() {
        Citizen.invokeNative('0xFD461D0ABA5559B1', undefined, undefined);
    }
    audio._0xFD461D0ABA5559B1 = _0xFD461D0ABA5559B1;
    /**
     * No comment provided
     *
     * Hash: 0xFE5C6177064BD390 | Since: 1207
     */
    function _0xFE5C6177064BD390() {
        return Citizen.invokeNative('0xFE5C6177064BD390', false);
    }
    audio._0xFE5C6177064BD390 = _0xFE5C6177064BD390;
    /**
     * No comment provided
     *
     * Hash: 0xFFE9C53DEEA3DB0B | Since: 1207
     */
    function _0xFFE9C53DEEA3DB0B(pos, isSrlLoaded) {
        return Citizen.invokeNative('0xFFE9C53DEEA3DB0B', undefined, undefined, pos.x, pos.y, pos.z, isSrlLoaded, undefined);
    }
    audio._0xFFE9C53DEEA3DB0B = _0xFFE9C53DEEA3DB0B;
    /**
     * No comment provided
     *
     * Hash: 0x6378A235374B852F | Since: 1207
     */
    function blockSpeechContext(context, block) {
        BlockSpeechContext(context, block);
    }
    audio.blockSpeechContext = blockSpeechContext;
    /**
     * No comment provided
     *
     * Hash: 0xEF51242E35242B47 | Since: 1207
     */
    function clearConversationHistoryForScriptedConversation(convoRoot) {
        ClearConversationHistoryForScriptedConversation(convoRoot);
    }
    audio.clearConversationHistoryForScriptedConversation = clearConversationHistoryForScriptedConversation;
    /**
     * No comment provided
     *
     * Hash: 0x8B25A18E390F75BF | Since: 1207
     */
    function getEntityMixGroup(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityAudioMixGroup(_entity);
    }
    audio.getEntityMixGroup = getEntityMixGroup;
    /**
     * Creates stream and returns streamId handle to be used with PLAY_STREAM_* natives
     * https://github.com/femga/rdr3_discoveries/tree/master/audio/create_stream
     *
     * Hash: 0x0556C784FA056628 | Since: 1207
     */
    function getLoadedStreamIdFromCreation(streamName, soundSet) {
        return GetLoadedStreamIdFromCreation(streamName, soundSet);
    }
    audio.getLoadedStreamIdFromCreation = getLoadedStreamIdFromCreation;
    /**
     * No comment provided
     *
     * Hash: 0x2DBBF0C5E19383EE | Since: 1232
     */
    function getPedSongIndexHost(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedSongIndexHost(_ped);
    }
    audio.getPedSongIndexHost = getPedSongIndexHost;
    /**
     * No comment provided
     *
     * Hash: 0x714A0EA7DE1167BE | Since: 1207
     */
    function hasSoundNameFinished(audioName, soundsetName) {
        return HasSoundAudioNameFinished(audioName, soundsetName);
    }
    audio.hasSoundNameFinished = hasSoundNameFinished;
    /**
     * No comment provided
     *
     * Hash: 0x84848E1C0FC67DBB | Since: 1207
     */
    function hasSoundIdFinished(soundId) {
        return HasSoundIdFinished(soundId);
    }
    audio.hasSoundIdFinished = hasSoundIdFinished;
    /**
     * No comment provided
     *
     * Hash: 0xA2CAC9DEF0195E6F | Since: 1207
     */
    function isAnyConversationPlaying() {
        return IsAnyConversationPlaying(false);
    }
    audio.isAnyConversationPlaying = isAnyConversationPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x54B187F111D9C6F8 | Since: 1207
     */
    function isPedInAnyConversation(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInAnyConversation(_ped, false);
    }
    audio.isPedInAnyConversation = isPedInAnyConversation;
    /**
     * item: FUSE, value returned from 0x2E1CDC1FF3B8473E
     * soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
     *
     * Hash: 0x6DF942C4179BE5AB | Since: 1207
     */
    function isScriptedCustom(item, soundSet) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof soundSet === 'string')
            soundSet = misc.getHashKey(soundSet);
        return IsScriptedAudioCustom(item, soundSet);
    }
    audio.isScriptedCustom = isScriptedCustom;
    /**
     * No comment provided
     *
     * Hash: 0xD89504D9D7D5057D | Since: 1207
     */
    function isScriptedConversationCreated(convoRoot) {
        return IsScriptedConversationCreated(convoRoot);
    }
    audio.isScriptedConversationCreated = isScriptedConversationCreated;
    /**
     * No comment provided
     *
     * Hash: 0xF01C570E0A0A1E67 | Since: 1207
     */
    function isScriptedConversionOngoing() {
        return IsScriptedConversionOngoing(undefined);
    }
    audio.isScriptedConversionOngoing = isScriptedConversionOngoing;
    /**
     * No comment provided
     *
     * Hash: 0x0E53530D9B2DB01D | Since: 1311
     */
    function playAnimalVocalizationPheromoneVialResponse(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        PlayAnimalVocalizationPheromoneVialResponse(_ped, p1, false);
    }
    audio.playAnimalVocalizationPheromoneVialResponse = playAnimalVocalizationPheromoneVialResponse;
    /**
     * Params: p5 seems to be always 0
     *
     * Hash: 0xF1C5310FEAA36B48 | Since: 1207
     */
    function playSoundFromEntityWithSet(soundId, soundName, entity, soundsetName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        PlaySoundFromEntityWithSet(soundId, soundName, _entity, soundsetName, false, undefined);
    }
    audio.playSoundFromEntityWithSet = playSoundFromEntityWithSet;
    /**
     * item: value returned from 0x2E1CDC1FF3B8473E
     * soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
     *
     * Hash: 0xE8EAFF7B41EDD291 | Since: 1207
     */
    function playSoundFromItem(item, soundSet) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof soundSet === 'string')
            soundSet = misc.getHashKey(soundSet);
        PlaySoundFromItem(item, soundSet, undefined);
    }
    audio.playSoundFromItem = playSoundFromItem;
    /**
     * Old name: _PLAY_SOUND_FROM_POSITION
     *
     * Hash: 0xCCE219C922737BFA | Since: 1207
     */
    function playSoundFromCoord(SoundName, positionX, positionY, positionZ, SetName, bOverNetwork, nNetworkRange, isExteriorLoc) {
        PlaySoundFromPosition(SoundName, positionX, positionY, positionZ, SetName, bOverNetwork, nNetworkRange, isExteriorLoc, 0);
    }
    audio.playSoundFromCoord = playSoundFromCoord;
    /**
     * Starts Audio Loop
     * _PLAY_SOUND_FROM_ENTITY* - _PLAY_SOUND_FRONTEND*
     *
     * Hash: 0xDCF5BA95BBF0FABA | Since: 1207
     */
    function playSoundFromPositionWithId(soundId, soundName, pos, soundsetName) {
        PlaySoundFromPositionWithId(soundId, soundName, pos.x, pos.y, pos.z, soundsetName, false, 0, false);
    }
    audio.playSoundFromPositionWithId = playSoundFromPositionWithId;
    /**
     * No comment provided
     *
     * Hash: 0xCE5D0FFE83939AF1 | Since: 1207
     */
    function playSoundFrontendWithSoundId(soundId, name, soundSet) {
        PlaySoundFrontendWithSoundId(soundId, name, soundSet, false);
    }
    audio.playSoundFrontendWithSoundId = playSoundFrontendWithSoundId;
    /**
     * No comment provided
     *
     * Hash: 0x9D746964E0CF2C5F | Since: 1207
     */
    function releaseShardSounds(soundName, soundsetName) {
        ReleaseShardSounds(soundName, soundsetName);
    }
    audio.releaseShardSounds = releaseShardSounds;
    /**
     * No comment provided
     *
     * Hash: 0x531A78D6BF27014B | Since: 1207
     */
    function releaseSoundset(soundsetName) {
        ReleaseSoundset(soundsetName);
    }
    audio.releaseSoundset = releaseSoundset;
    /**
     * No comment provided
     *
     * Hash: 0x3743CE6948194349 | Since: 1207
     */
    function setAmbientZonePosition(ambientZone, pos, heading) {
        SetAmbientZonePosition(ambientZone, pos.x, pos.y, pos.z, heading);
    }
    audio.setAmbientZonePosition = setAmbientZonePosition;
    /**
     * No comment provided
     *
     * Hash: 0xAC84686C06184B0D | Since: 1207
     */
    function setSceneset(audioName, sceneset) {
        return SetAudioSceneset(audioName, sceneset);
    }
    audio.setSceneset = setSceneset;
    /**
     * p1: Entity.Relationship
     * p2: Player, Enemy, Teammate, Neutral
     *
     * Hash: 0x2E31ACA7477CF00F | Since: 1207
     */
    function setSoundRelationshipOnPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetSoundRelationshipOnPed(_ped, undefined, undefined);
    }
    audio.setSoundRelationshipOnPed = setSoundRelationshipOnPed;
    /**
     * Old Name: _SET_VARIABLE_ON_SOUND_WITH_ID
     *
     * Hash: 0x503703EC1781B7D6 | Since: 1207
     */
    function setVariableOnSound(soundId, variableName, variableValue) {
        SetVariableOnSoundWithId(soundId, variableName, variableValue);
    }
    audio.setVariableOnSound = setVariableOnSound;
    /**
     * No comment provided
     *
     * Hash: 0x9821B68CD3E05F2B | Since: 1207
     */
    function setVariableOnSoundWithName(variableName, variableValue, audioName, audioRef) {
        SetVariableOnSoundWithName(variableName, variableValue, audioName, audioRef);
    }
    audio.setVariableOnSoundWithName = setVariableOnSoundWithName;
    /**
     * Hashes: VOFX_PLAYER_MALE01, VOFX_PLAYER_MALE02, VOFX_PLAYER_MALE03, VOFX_PLAYER_FEMALE01, VOFX_PLAYER_FEMALE02, VOFX_PLAYER_FEMALE03
     *
     * Hash: 0x2703EFB583F0949A | Since: 1207
     */
    function setVofxPedVoice(ped, voice) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof voice === 'string')
            voice = misc.getHashKey(voice);
        SetVofxPedVoice(_ped, voice);
    }
    audio.setVofxPedVoice = setVofxPedVoice;
    /**
     * whistleConfig: Ped.WhistlePitch (0.0 - 1.0), Ped.WhistleClarity (0.0 - 1.0), Ped.WhistleShape (0.0 - 10.0)
     *
     * Hash: 0x9963681A8BC69BF3 | Since: 1207
     */
    function setWhistleConfigForPed(ped, whistleConfig, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetWhistleConfigForPed(_ped, whistleConfig, value);
    }
    audio.setWhistleConfigForPed = setWhistleConfigForPed;
    /**
     * No comment provided
     *
     * Hash: 0x6339C1EA3979B5F7 | Since: 1207
     */
    function startSceneset(audioName, sceneset) {
        return StartAudioSceneset(audioName, sceneset);
    }
    audio.startSceneset = startSceneset;
    /**
     * No comment provided
     *
     * Hash: 0x2E399EAFBEEA74D5 | Since: 1207
     */
    function stopAllScriptedSounds() {
        StopAllScriptedAudioSounds();
    }
    audio.stopAllScriptedSounds = stopAllScriptedSounds;
    /**
     * No comment provided
     *
     * Hash: 0x36559148B78853B3 | Since: 1207
     */
    function stopAllScriptedConversions() {
        StopAllScriptedConversions(false, false, false);
    }
    audio.stopAllScriptedConversions = stopAllScriptedConversions;
    /**
     * No comment provided
     *
     * Hash: 0x9428447DED71FC7E | Since: 1207
     */
    function stopSceneset(sceneset) {
        StopAudioSceneset(sceneset);
    }
    audio.stopSceneset = stopSceneset;
    /**
     * Old Name: _STOP_SOUND_WITH_ID
     *
     * Hash: 0x3210BCB36AF7621B | Since: 1207
     */
    function stopSound(soundId) {
        StopSoundWithId(soundId);
    }
    audio.stopSound = stopSound;
    /**
     * No comment provided
     *
     * Hash: 0x0F2A2175734926D8 | Since: 1207
     */
    function stopSoundWithName(audioName, audioRef) {
        StopSoundWithName(audioName, audioRef);
    }
    audio.stopSoundWithName = stopSoundWithName;
    /**
     * No comment provided
     *
     * Hash: 0x05D6195FB4D428F4 | Since: 1207
     */
    function triggerMusicEventWithHash(eventName) {
        if (typeof eventName === 'string')
            eventName = misc.getHashKey(eventName);
        return TriggerMusicEventWithHash(eventName);
    }
    audio.triggerMusicEventWithHash = triggerMusicEventWithHash;
    /**
     * _UNLOAD_[A-C]* - USE_*
     *
     * Hash: 0x87E6302FC61208CC | Since: 1207
     */
    function unloadSpeechContext(speechContext) {
        UnloadSpeechContext(speechContext);
    }
    audio.unloadSpeechContext = unloadSpeechContext;
    /**
     * Only used in R* SP Scripts
     * Old Name: _UPDATE_SOUND_POSITION
     *
     * Hash: 0x0286617C8FC50A53 | Since: 1207
     */
    function updateSoundCoord(soundId, pos) {
        UpdateSoundPosition(soundId, pos.x, pos.y, pos.z);
    }
    audio.updateSoundCoord = updateSoundCoord;
})(audio || (audio = {}));
export var badsport;
(function (badsport) {
    /**
     * nullsub, doesn't do anything
     * however it is being used in tty scripts: [NET_BAD_SPORT_REPORT_PLAYER] Detected bad sport behavior from Player
     * badSportBehavior: BS_QUITTER = 0, BS_VEHICLE_DESTRUCTION = 1, BS_VOTED_OUT = 2
     *
     * Hash: 0xC31C44C43B48FDE3 | Since: 1207
     */
    function reportPlayerBehavior(badSportBehaviorType) {
        return ReportPlayerBadSportBehavior(badSportBehaviorType);
    }
    badsport.reportPlayerBehavior = reportPlayerBehavior;
})(badsport || (badsport = {}));
export var bounty;
(function (bounty) {
    /**
     * No comment provided
     *
     * Hash: 0x4EF23E04A0C8FF51 | Since: 1207
     */
    function getBountyOnPlayer() {
        return BountyGetBountyOnPlayer();
    }
    bounty.getBountyOnPlayer = getBountyOnPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x8FAF4D262FABA99C | Since: 1207
     */
    function getCooldownCollection() {
        return BountyGetCooldownCollection();
    }
    bounty.getCooldownCollection = getCooldownCollection;
    /**
     * No comment provided
     *
     * Hash: 0x85E4D7B225A30ED1 | Since: 1207
     */
    function getLegendaryTarget() {
        return BountyGetLegendaryTarget(undefined);
    }
    bounty.getLegendaryTarget = getLegendaryTarget;
    /**
     * No comment provided
     *
     * Hash: 0xB395A44A0C7CA615 | Since: 1207
     */
    function getWantedPosterSlot(p0, p1) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return BountyGetWantedPosterSlot(p0, p1);
    }
    bounty.getWantedPosterSlot = getWantedPosterSlot;
    /**
     * No comment provided
     *
     * Hash: 0xFC81D7C7A151CFAA | Since: 1207
     */
    function requestBeginLegendaryMission() {
        return BountyRequestBeginLegendaryMission(0, 0);
    }
    bounty.requestBeginLegendaryMission = requestBeginLegendaryMission;
    /**
     * No comment provided
     *
     * Hash: 0x48E4E23F1739E197 | Since: 1311
     */
    function requestBeginLegendaryMissionForPosse() {
        return BountyRequestBeginLegendaryMissionForPosse(0, 0);
    }
    bounty.requestBeginLegendaryMissionForPosse = requestBeginLegendaryMissionForPosse;
    /**
     * _BOUNTY_IS_* or _BOUNTY_REQUEST_*
     *
     * Hash: 0x27D3A0E1FE090A43 | Since: 1207
     */
    function _0x27D3A0E1FE090A43() {
        return Citizen.invokeNative('0x27D3A0E1FE090A43');
    }
    bounty._0x27D3A0E1FE090A43 = _0x27D3A0E1FE090A43;
    /**
     * No comment provided
     *
     * Hash: 0x81847C2134039BDC | Since: 1207
     */
    function _0x81847C2134039BDC() {
        return Citizen.invokeNative('0x81847C2134039BDC');
    }
    bounty._0x81847C2134039BDC = _0x81847C2134039BDC;
    /**
     * _BOUNTY_C* or _BOUNTY_GET_*
     *
     * Hash: 0x86EC5F83867C4B70 | Since: 1436
     */
    function _0x86EC5F83867C4B70() {
        return Citizen.invokeNative('0x86EC5F83867C4B70');
    }
    bounty._0x86EC5F83867C4B70 = _0x86EC5F83867C4B70;
    /**
     * No comment provided
     *
     * Hash: 0xC1F04FB37E3F0E57 | Since: unknown
     */
    function _0xC1F04FB37E3F0E57() {
        return Citizen.invokeNative('0xC1F04FB37E3F0E57', undefined, undefined);
    }
    bounty._0xC1F04FB37E3F0E57 = _0xC1F04FB37E3F0E57;
    /**
     * _BOUNTY_GET_*
     *
     * Hash: 0xD6A67E2FF373D0E3 | Since: 1355
     */
    function _0xD6A67E2FF373D0E3() {
        return Citizen.invokeNative('0xD6A67E2FF373D0E3', 0);
    }
    bounty._0xD6A67E2FF373D0E3 = _0xD6A67E2FF373D0E3;
    /**
     * _BOUNTY_GET_*
     *
     * Hash: 0xF8BCC5ECA33AC9C1 | Since: 1207
     */
    function _0xF8BCC5ECA33AC9C1() {
        return Citizen.invokeNative('0xF8BCC5ECA33AC9C1');
    }
    bounty._0xF8BCC5ECA33AC9C1 = _0xF8BCC5ECA33AC9C1;
    /**
     * No comment provided
     *
     * Hash: 0x2BA1BCC99826CDA2 | Since: 1207
     */
    function cancelLegendaryMission() {
        BountyCancelLegendaryMission();
    }
    bounty.cancelLegendaryMission = cancelLegendaryMission;
    /**
     * No comment provided
     *
     * Hash: 0x6A9DF0FCD0C87FF9 | Since: 1207
     */
    function cancelWantedPoster() {
        BountyCancelWantedPoster();
    }
    bounty.cancelWantedPoster = cancelWantedPoster;
    /**
     * No comment provided
     *
     * Hash: 0xA59D1997ECD99F0A | Since: 1207
     */
    function clearBeingBountyHunter() {
        BountyClearBeingBountyHunter();
    }
    bounty.clearBeingBountyHunter = clearBeingBountyHunter;
    /**
     * No comment provided
     *
     * Hash: 0x932DB3C05A7465D1 | Since: 1207
     */
    function clearBeingTarget() {
        BountyClearBeingTarget();
    }
    bounty.clearBeingTarget = clearBeingTarget;
    /**
     * No comment provided
     *
     * Hash: 0x03B61CD51097DE60 | Since: 1207
     */
    function isRequestPending() {
        return BountyIsRequestPending();
    }
    bounty.isRequestPending = isRequestPending;
    /**
     * No comment provided
     *
     * Hash: 0xB096547D61868254 | Since: 1207
     */
    function requestBecomeTargetOfCharacterBountyHunt() {
        return BountyRequestBecomeTargetOfCharacterBountyHunt();
    }
    bounty.requestBecomeTargetOfCharacterBountyHunt = requestBecomeTargetOfCharacterBountyHunt;
    /**
     * No comment provided
     *
     * Hash: 0xFFA13742E43507E3 | Since: 1207
     */
    function requestBeginWantedPoster() {
        return BountyRequestBeginWantedPoster(0);
    }
    bounty.requestBeginWantedPoster = requestBeginWantedPoster;
    /**
     * No comment provided
     *
     * Hash: 0x28717806D3BDD0D0 | Since: 1207
     */
    function requestBribeJailGuard() {
        return BountyRequestBribeJailGuard(0);
    }
    bounty.requestBribeJailGuard = requestBribeJailGuard;
    /**
     * No comment provided
     *
     * Hash: 0xA9C3B0F746375162 | Since: 1207
     */
    function requestClaimCharacterBounty() {
        return BountyRequestClaimCharacterBounty(0);
    }
    bounty.requestClaimCharacterBounty = requestClaimCharacterBounty;
    /**
     * No comment provided
     *
     * Hash: 0xA7309AC0DCF6D950 | Since: 1207
     */
    function requestCompleteLegendaryMission() {
        return BountyRequestCompleteLegendaryMission();
    }
    bounty.requestCompleteLegendaryMission = requestCompleteLegendaryMission;
    /**
     * No comment provided
     *
     * Hash: 0xFBD137BF0EC50FC9 | Since: 1207
     */
    function requestCompleteSplitWantedPoster() {
        return BountyRequestCompleteSplitWantedPoster();
    }
    bounty.requestCompleteSplitWantedPoster = requestCompleteSplitWantedPoster;
    /**
     * No comment provided
     *
     * Hash: 0x727AB6F008BB9F29 | Since: 1207
     */
    function requestCompleteWantedPoster() {
        return BountyRequestCompleteWantedPoster();
    }
    bounty.requestCompleteWantedPoster = requestCompleteWantedPoster;
    /**
     * No comment provided
     *
     * Hash: 0x12E981D53B07BF48 | Since: 1207
     */
    function requestEscapedCharacterBountyHunt() {
        return BountyRequestEscapedCharacterBountyHunt();
    }
    bounty.requestEscapedCharacterBountyHunt = requestEscapedCharacterBountyHunt;
    /**
     * No comment provided
     *
     * Hash: 0x537CE992BD2D7BCB | Since: 1207
     */
    function requestPayOffBounty() {
        return BountyRequestPayOffBounty();
    }
    bounty.requestPayOffBounty = requestPayOffBounty;
    /**
     * No comment provided
     *
     * Hash: 0x587BCEC31D64F382 | Since: 1232
     */
    function requestPayOffBountyEx(p1, costType) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof costType === 'string')
            costType = misc.getHashKey(costType);
        return BountyRequestPayOffBountyEx(p1, costType);
    }
    bounty.requestPayOffBountyEx = requestPayOffBountyEx;
    /**
     * No comment provided
     *
     * Hash: 0x5B53CA0E2AC3FF45 | Since: 1207
     */
    function requestPosseLeaderClaimCharacterBounty() {
        return BountyRequestPosseLeaderClaimCharacterBounty(0);
    }
    bounty.requestPosseLeaderClaimCharacterBounty = requestPosseLeaderClaimCharacterBounty;
    /**
     * No comment provided
     *
     * Hash: 0x2D874BA20E8E1F20 | Since: 1207
     */
    function requestPosseLeaderEscapedCharacterBountyHunt() {
        return BountyRequestPosseLeaderEscapedCharacterBountyHunt();
    }
    bounty.requestPosseLeaderEscapedCharacterBountyHunt = requestPosseLeaderEscapedCharacterBountyHunt;
    /**
     * No comment provided
     *
     * Hash: 0x22D3A61CE053270C | Since: 1207
     */
    function requestPosseMemberClaimCharacterBountyShare() {
        return BountyRequestPosseMemberClaimCharacterBountyShare();
    }
    bounty.requestPosseMemberClaimCharacterBountyShare = requestPosseMemberClaimCharacterBountyShare;
    /**
     * No comment provided
     *
     * Hash: 0x8521C2E235558278 | Since: 1207
     */
    function requestPosseMemberEscapedCharacterBountyHunt() {
        return BountyRequestPosseMemberEscapedCharacterBountyHunt();
    }
    bounty.requestPosseMemberEscapedCharacterBountyHunt = requestPosseMemberEscapedCharacterBountyHunt;
    /**
     * crimeType: see _REPORT_CRIME
     *
     * Hash: 0x188B748861B5BA17 | Since: 1207
     */
    function requestSelfReportCrime(crimeType) {
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        return BountyRequestSelfReportCrime(crimeType, false);
    }
    bounty.requestSelfReportCrime = requestSelfReportCrime;
    /**
     * No comment provided
     *
     * Hash: 0xB462D69D406A2602 | Since: 1207
     */
    function requestSelfReportKilledByBountyHunter() {
        return BountyRequestSelfReportKilledByBountyHunter();
    }
    bounty.requestSelfReportKilledByBountyHunter = requestSelfReportKilledByBountyHunter;
    /**
     * No comment provided
     *
     * Hash: 0x3F73AED12A5EF0FF | Since: 1207
     */
    function requestServedFullJailSentence() {
        return BountyRequestServedFullJailSentence();
    }
    bounty.requestServedFullJailSentence = requestServedFullJailSentence;
})(bounty || (bounty = {}));
export var brain;
(function (brain) {
    /**
     * No comment provided
     *
     * Hash: 0x3F44EA613A5B2676 | Since: 1207
     */
    function disableScriptSet(brainSet) {
        DisableScriptBrainSet(brainSet);
    }
    brain.disableScriptSet = disableScriptSet;
    /**
     * No comment provided
     *
     * Hash: 0x1CF6E5C6750EADBD | Since: 1207
     */
    function enableScriptSet(brainSet) {
        EnableScriptBrainSet(brainSet);
    }
    brain.enableScriptSet = enableScriptSet;
    /**
     * Called before starting a new thread_monitor script thread in startup_mp/startup_tlg
     * Alternative name _REGISTER_SCRIPT_BRAIN
     *
     * Old name: _PREPARE_SCRIPT_BRAIN
     *
     * Hash: 0xA32B0B05EFF75730 | Since: 1207
     */
    function reactivateAllObjectsThatAreWaitingTillOutOfRange() {
        ReactivateAllObjectBrainsThatAreWaitingTillOutOfRange();
    }
    brain.reactivateAllObjectsThatAreWaitingTillOutOfRange = reactivateAllObjectsThatAreWaitingTillOutOfRange;
    /**
     * No comment provided
     *
     * Hash: 0x74C333E34DF74E8A | Since: 1207
     */
    function reactivateNamedObjectsWaitingTillOutOfRange(scriptName) {
        ReactivateNamedObjectBrainsWaitingTillOutOfRange(scriptName);
    }
    brain.reactivateNamedObjectsWaitingTillOutOfRange = reactivateNamedObjectsWaitingTillOutOfRange;
    /**
     * Registers a script for any object with a specific model hash.
     *
     * Hash: 0x16AF9B4EEAC3B305 | Since: 1207
     */
    function registerObjectScript(scriptName, modelHash, activationRange) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        RegisterObjectScriptBrain(scriptName, modelHash, 0, activationRange, 0, 0);
    }
    brain.registerObjectScript = registerObjectScript;
    /**
     * Called with flag 0 before 0xA6AC35DB4A7957A8 in net_entity_brain
     * _SET_SCRIPT_BRAIN*
     *
     * Hash: 0x4AA5EA1EDFB25786 | Since: 1207
     */
    function _0x4AA5EA1EDFB25786(flag) {
        Citizen.invokeNative('0x4AA5EA1EDFB25786', flag);
    }
    brain._0x4AA5EA1EDFB25786 = _0x4AA5EA1EDFB25786;
    /**
     * Common flags: 250, 99999
     * _SET_SCRIPT_BRAIN*
     *
     * Hash: 0xA6AC35DB4A7957A8 | Since: 1207
     */
    function _0xA6AC35DB4A7957A8(flag) {
        Citizen.invokeNative('0xA6AC35DB4A7957A8', flag);
    }
    brain._0xA6AC35DB4A7957A8 = _0xA6AC35DB4A7957A8;
    /**
     * No comment provided
     *
     * Hash: 0x6818D1A194E29983 | Since: 1207
     */
    function getScriptEntity() {
        return GetScriptBrainEntity();
    }
    brain.getScriptEntity = getScriptEntity;
    /**
     * No comment provided
     *
     * Hash: 0x38F1E09224EECA09 | Since: 1311
     */
    function removeScriptEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RemoveScriptBrainEntity(_entity);
    }
    brain.removeScriptEntity = removeScriptEntity;
    /**
     * Returns threadId
     *
     * Hash: 0x4E4507CC5E4DB869 | Since: 1207
     */
    function startPreloadedScript(entity, scriptName, scriptStackSize) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartPreloadedScriptBrain(_entity, scriptName, scriptStackSize, false);
    }
    brain.startPreloadedScript = startPreloadedScript;
    /**
     * Returns threadId
     *
     * Hash: 0x6F62FAE266DCFC81 | Since: 1207
     */
    function startScript(entity, scriptName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartScriptBrain(_entity, scriptName, 0, 0, false);
    }
    brain.startScript = startScript;
})(brain || (brain = {}));
export var builtin;
(function (builtin) {
    /**
     * Rounds a float value up to the next whole number
     *
     * Hash: 0x11E019C8F43ACC8A | Since: 1207
     */
    function ceil(value) {
        return Ceil(value);
    }
    builtin.ceil = ceil;
    /**
     * No comment provided
     *
     * Hash: 0xD0FFB162F40A139C | Since: 1207
     */
    function cos(value) {
        return Cos(value);
    }
    builtin.cos = cos;
    /**
     * Rounds a float value down to the next whole number
     *
     * Hash: 0xF34EE736CF047844 | Since: 1207
     */
    function floor(value) {
        return Floor(value);
    }
    builtin.floor = floor;
    /**
     * Old name: _LOG10
     *
     * Hash: 0xE816E655DE37FE20 | Since: 1232
     */
    function log10(value) {
        return Log10(value);
    }
    builtin.log10 = log10;
    /**
     * No comment provided
     *
     * Hash: 0xE3621CC40F31FE2E | Since: 1207
     */
    function pow(base, exponent) {
        return Pow(base, exponent);
    }
    builtin.pow = pow;
    /**
     * No comment provided
     *
     * Hash: 0xF2DB717A73826179 | Since: 1207
     */
    function round(value) {
        return Round(value);
    }
    builtin.round = round;
    /**
     * No comment provided
     *
     * Hash: 0xC1B1E9A034A63A62 | Since: 1207
     */
    function settimera(value) {
        Settimera(value);
    }
    builtin.settimera = settimera;
    /**
     * No comment provided
     *
     * Hash: 0x5AE11BC36633DE4E | Since: 1207
     */
    function settimerb(value) {
        Settimerb(value);
    }
    builtin.settimerb = settimerb;
    /**
     * THREAD_PRIO_HIGHEST = 0
     * THREAD_PRIO_NORMAL = 1
     * THREAD_PRIO_LOWEST = 2
     * THREAD_PRIO_MANUAL_UPDATE = 100
     *
     * Hash: 0x42B65DEEF2EDF2A1 | Since: 1207
     */
    function setThisThreadPriority(priority) {
        SetThisThreadPriority(priority);
    }
    builtin.setThisThreadPriority = setThisThreadPriority;
    /**
     * No comment provided
     *
     * Hash: 0xEDD95A39E5544DE8 | Since: 1207
     */
    function shiftLeft(value, bitShift) {
        return ShiftLeft(value, bitShift);
    }
    builtin.shiftLeft = shiftLeft;
    /**
     * No comment provided
     *
     * Hash: 0x97EF1E5BCE9DC075 | Since: 1207
     */
    function shiftRight(value, bitShift) {
        return ShiftRight(value, bitShift);
    }
    builtin.shiftRight = shiftRight;
    /**
     * No comment provided
     *
     * Hash: 0x0BADBFA3B172435F | Since: 1207
     */
    function sin(value) {
        return Sin(value);
    }
    builtin.sin = sin;
    /**
     * No comment provided
     *
     * Hash: 0x71D93B57D07F9804 | Since: 1207
     */
    function sqrt(value) {
        return Sqrt(value);
    }
    builtin.sqrt = sqrt;
    /**
     * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
     *
     * Hash: 0x83666F9FB8FEBD4B | Since: 1207
     */
    function timera() {
        return Timera();
    }
    builtin.timera = timera;
    /**
     * No comment provided
     *
     * Hash: 0xC9D9444186B5A374 | Since: 1207
     */
    function timerb() {
        return Timerb();
    }
    builtin.timerb = timerb;
    /**
     * Gets the current frame time.
     *
     * Hash: 0x0000000050597EE2 | Since: 1207
     */
    function timestep() {
        return Timestep();
    }
    builtin.timestep = timestep;
    /**
     * No comment provided
     *
     * Hash: 0xBBDA792448DB5A89 | Since: 1207
     */
    function toFloat(value) {
        return ToFloat(value);
    }
    builtin.toFloat = toFloat;
    /**
     * Calculates distance between vectors.
     * The value returned will be in meters.
     *
     * Hash: 0x2A488C176D52CCA5 | Since: 1207
     */
    function vdist(x1, y1, z1, x2, y2, z2) {
        return Vdist(x1, y1, z1, x2, y2, z2);
    }
    builtin.vdist = vdist;
    /**
     * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
     * The value returned will be in RAGE units.
     *
     * Hash: 0xB7A628320EFF8E47 | Since: 1207
     */
    function vdist2(x1, y1, z1, x2, y2, z2) {
        return Vdist2(x1, y1, z1, x2, y2, z2);
    }
    builtin.vdist2 = vdist2;
    /**
     * Calculates the magnitude of a vector.
     *
     * Hash: 0x652D2EEEF1D3E62C | Since: 1207
     */
    function vmag(pos) {
        return Vmag(pos.x, pos.y, pos.z);
    }
    builtin.vmag = vmag;
    /**
     * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
     *
     * Hash: 0xA8CEACB4F35AE058 | Since: 1207
     */
    function vmag2(pos) {
        return Vmag2(pos.x, pos.y, pos.z);
    }
    builtin.vmag2 = vmag2;
    /**
     * No comment provided
     *
     * Hash: 0x4EDE34FBADD967A6 | Since: 1207
     */
    function wait(ms) {
        Wait(ms);
    }
    builtin.wait = wait;
})(builtin || (builtin = {}));
export var camera;
(function (camera_1) {
    /**
     * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
     *
     * p8 big values ~100 will slow down the camera movement before reaching this node
     *
     * p9 != 0 seems to override the rotation/pitch (bool?)
     *
     * Hash: 0xF1F57F9D230F9CD1 | Since: 1207
     */
    function addCamSplineNode(camera, pos, rot, length) {
        const _camera = camera instanceof Camera ? camera.handle() : camera;
        AddCamSplineNode(_camera, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, length, 0, 0);
    }
    camera_1.addCamSplineNode = addCamSplineNode;
    /**
     * No comment provided
     *
     * Hash: 0x42ED56B02E05D109 | Since: 1207
     */
    function allowMotionBlurDecay(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        AllowMotionBlurDecay(_cam, false);
    }
    camera_1.allowMotionBlurDecay = allowMotionBlurDecay;
    /**
     * Last param determines if its relative to the Entity
     *
     * Hash: 0xFDC0DF7F6FB0A592 | Since: 1207
     */
    function attachCamToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AttachCamToEntity(_cam, _entity, xOffset, yOffset, zOffset, isRelative);
    }
    camera_1.attachCamToEntity = attachCamToEntity;
    /**
     * boneIndex: https://github.com/femga/rdr3_discoveries/tree/master/boneNames
     *
     * Hash: 0xDFC1E4A44C0324CA | Since: 1207
     */
    function attachCamToPedBone(cam, ped, boneIndex, pos, heading) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AttachCamToPedBone(_cam, _ped, boneIndex, pos.x, pos.y, pos.z, heading);
    }
    camera_1.attachCamToPedBone = attachCamToPedBone;
    /**
     * Only used in R* Script fm_mission_controller
     *
     * Hash: 0x0B0F914459731F60 | Since: 1311
     */
    function cinematicLocationOverrideTargetEntityThisUpdate(name, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        CinematicLocationOverrideTargetEntityThisUpdate(name, _entity);
    }
    camera_1.cinematicLocationOverrideTargetEntityThisUpdate = cinematicLocationOverrideTargetEntityThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x6D4D25C2137FF511 | Since: 1207
     */
    function cinematicLocationStopScriptedShotEvent() {
        CinematicLocationStopScriptedShotEvent(undefined, undefined, undefined);
    }
    camera_1.cinematicLocationStopScriptedShotEvent = cinematicLocationStopScriptedShotEvent;
    /**
     * No comment provided
     *
     * Hash: 0x02389579A53C3276 | Since: 1207
     */
    function cinematicLocationTriggerScriptedShotEvent(dictionary, shotName, cameraName) {
        CinematicLocationTriggerScriptedShotEvent(dictionary, shotName, cameraName, undefined);
    }
    camera_1.cinematicLocationTriggerScriptedShotEvent = cinematicLocationTriggerScriptedShotEvent;
    /**
     * No comment provided
     *
     * Hash: 0xE72CDBA7F0A02DD6 | Since: 1207
     */
    function createCam(camName) {
        return CreateCam(camName, false);
    }
    camera_1.createCam = createCam;
    /**
     * No comment provided
     *
     * Hash: 0x57CDF879EA466C46 | Since: 1207
     */
    function create(camHash) {
        if (typeof camHash === 'string')
            camHash = misc.getHashKey(camHash);
        return CreateCamera(camHash, false);
    }
    camera_1.create = create;
    /**
     * No comment provided
     *
     * Hash: 0x98B99B9F27E2D60B | Since: 1207
     */
    function createWithParams(camHash, pos, rot, fov) {
        if (typeof camHash === 'string')
            camHash = misc.getHashKey(camHash);
        return CreateCameraWithParams(camHash, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fov, false, undefined);
    }
    camera_1.createWithParams = createWithParams;
    /**
     * No comment provided
     *
     * Hash: 0x40C23491CE83708E | Since: 1207
     */
    function createCamWithParams(camName, pos, rot, fov) {
        return CreateCamWithParams(camName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fov, false, 0);
    }
    camera_1.createCamWithParams = createCamWithParams;
    /**
     * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
     *
     * Hash: 0x163600D6E136C9F8 | Since: 1207
     */
    function destroyAllCams() {
        DestroyAllCams(false);
    }
    camera_1.destroyAllCams = destroyAllCams;
    /**
     * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
     *
     * Hash: 0x4E67E0B6D7FD5145 | Since: 1207
     */
    function destroyCam(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        DestroyCam(_cam, false);
    }
    camera_1.destroyCam = destroyCam;
    /**
     * No comment provided
     *
     * Hash: 0x05B41DDBEB559556 | Since: 1207
     */
    function detachCam(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        DetachCam(_cam);
    }
    camera_1.detachCam = detachCam;
    /**
     * No comment provided
     *
     * Hash: 0x7E3F546ACFE6C8D9 | Since: 1207
     */
    function disableCamCollisionForObject(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DisableCamCollisionForObject(_entity);
    }
    camera_1.disableCamCollisionForObject = disableCamCollisionForObject;
    /**
     * Old name: _DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME
     *
     * Hash: 0xA5929C2E57AC90D1 | Since: 1207
     */
    function disableCinematicBonnetThisUpdate() {
        DisableCinematicBonnetCameraThisUpdate();
    }
    camera_1.disableCinematicBonnetThisUpdate = disableCinematicBonnetThisUpdate;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x77D65669A05D1A1A | Since: 1207
     */
    function disableFirstPersonFlashEffectThisUpdate() {
        DisableFirstPersonFlashEffectThisUpdate();
    }
    camera_1.disableFirstPersonFlashEffectThisUpdate = disableFirstPersonFlashEffectThisUpdate;
    /**
     * Old name: _DISABLE_FIRST_PERSON_CAM_THIS_FRAME
     *
     * Hash: 0x9C473089A934C930 | Since: 1207
     */
    function disableOnFootFirstPersonViewThisUpdate() {
        DisableOnFootFirstPersonViewThisUpdate();
    }
    camera_1.disableOnFootFirstPersonViewThisUpdate = disableOnFootFirstPersonViewThisUpdate;
    /**
     * Returns whether or not the passed camera handle exists.
     *
     * Hash: 0x153AD457764FD704 | Since: 1207
     */
    function doesCamExist(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return DoesCamExist(_cam);
    }
    camera_1.doesCamExist = doesCamExist;
    /**
     * Fades the screen in.
     *
     * duration: The time the fade should take, in milliseconds.
     *
     * Hash: 0x6A053CF596F67DF7 | Since: 1207
     */
    function doScreenFadeIn(duration) {
        DoScreenFadeIn(duration);
    }
    camera_1.doScreenFadeIn = doScreenFadeIn;
    /**
     * Fades the screen out.
     *
     * duration: The time the fade should take, in milliseconds.
     *
     * Hash: 0x40C719A5E410B9E4 | Since: 1207
     */
    function doScreenFadeOut(duration) {
        DoScreenFadeOut(duration);
    }
    camera_1.doScreenFadeOut = doScreenFadeOut;
    /**
     * No comment provided
     *
     * Hash: 0x702B75DC9D3EDE56 | Since: 1207
     */
    function forceCinematicRenderingThisUpdate() {
        ForceCinematicRenderingThisUpdate(false);
    }
    camera_1.forceCinematicRenderingThisUpdate = forceCinematicRenderingThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x6B12F11C2A9F0344 | Since: 1207
     */
    function getCamCoord(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return new Vector3(GetCamCoord(_cam));
    }
    camera_1.getCamCoord = getCamCoord;
    /**
     * No comment provided
     *
     * Hash: 0x8101D32A0A6B0F60 | Since: 1207
     */
    function getCamFov(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return GetCamFov(_cam);
    }
    camera_1.getCamFov = getCamFov;
    /**
     * rotationOrder: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEulerRotationOrder
     *
     * Hash: 0x9BF96B57254E7889 | Since: 1207
     */
    function getCamRot(cam, rotationOrder) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return new Vector3(GetCamRot(_cam, rotationOrder));
    }
    camera_1.getCamRot = getCamRot;
    /**
     * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
     *
     * (returns 1.0f when no nodes has been added, reached end of non existing spline)
     *
     * Hash: 0x095EDCD24D90033A | Since: 1207
     */
    function getCamSplinePhase(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return GetCamSplinePhase(_cam);
    }
    camera_1.getCamSplinePhase = getCamSplinePhase;
    /**
     * No comment provided
     *
     * Hash: 0x5352E025EC2B416F | Since: 1207
     */
    function getFinalRenderedCamCoord() {
        return new Vector3(GetFinalRenderedCamCoord());
    }
    camera_1.getFinalRenderedCamCoord = getFinalRenderedCamCoord;
    /**
     * No comment provided
     *
     * Hash: 0x04AF77971E508F6A | Since: 1207
     */
    function getFinalRenderedCamFov() {
        return GetFinalRenderedCamFov();
    }
    camera_1.getFinalRenderedCamFov = getFinalRenderedCamFov;
    /**
     * No comment provided
     *
     * Hash: 0x602685BD85DD26CA | Since: 1207
     */
    function getFinalRenderedCamRot(rotationOrder) {
        return new Vector3(GetFinalRenderedCamRot(rotationOrder));
    }
    camera_1.getFinalRenderedCamRot = getFinalRenderedCamRot;
    /**
     * No comment provided
     *
     * Hash: 0xB4132CA1B0EE1365 | Since: 1207
     */
    function getFirstPersonAimCamZoomFactor() {
        return GetFirstPersonAimCamZoomFactor();
    }
    camera_1.getFirstPersonAimCamZoomFactor = getFirstPersonAimCamZoomFactor;
    /**
     * No comment provided
     *
     * Hash: 0x595320200B98596E | Since: 1207
     */
    function getGameplayCamCoord() {
        return new Vector3(GetGameplayCamCoord());
    }
    camera_1.getGameplayCamCoord = getGameplayCamCoord;
    /**
     * No comment provided
     *
     * Hash: 0xF6A96E5ACEEC6E50 | Since: 1207
     */
    function getGameplayCamFov() {
        return GetGameplayCamFov();
    }
    camera_1.getGameplayCamFov = getGameplayCamFov;
    /**
     * No comment provided
     *
     * Hash: 0xC4ABF536048998AA | Since: 1207
     */
    function getGameplayCamRelativeHeading() {
        return GetGameplayCamRelativeHeading();
    }
    camera_1.getGameplayCamRelativeHeading = getGameplayCamRelativeHeading;
    /**
     * No comment provided
     *
     * Hash: 0x99AADEBBA803F827 | Since: 1207
     */
    function getGameplayCamRelativePitch() {
        return GetGameplayCamRelativePitch();
    }
    camera_1.getGameplayCamRelativePitch = getGameplayCamRelativePitch;
    /**
     * No comment provided
     *
     * Hash: 0x0252D2B5582957A6 | Since: 1207
     */
    function getGameplayCamRot(rotationOrder) {
        return new Vector3(GetGameplayCamRot(rotationOrder));
    }
    camera_1.getGameplayCamRot = getGameplayCamRot;
    /**
     * More info: see HAS_LETTER_BOX
     *
     * Hash: 0xA2B1C7EF759A63CE | Since: 1207
     */
    function getLetterBoxRatio() {
        return GetLetterBoxRatio();
    }
    camera_1.getLetterBoxRatio = getLetterBoxRatio;
    /**
     * No comment provided
     *
     * Hash: 0x03A8931ECC8015D6 | Since: 1207
     */
    function getRenderingCam() {
        return GetRenderingCam();
    }
    camera_1.getRenderingCam = getRenderingCam;
    /**
     * More info: https://en.wikipedia.org/wiki/Letterboxing_(filming)
     *
     * Hash: 0x81DCFD13CF39920E | Since: 1207
     */
    function hasLetterBox() {
        return HasLetterBox();
    }
    camera_1.hasLetterBox = hasLetterBox;
    /**
     * Old name: _INVALIDATE_VEHICLE_IDLE_CAM
     *
     * Hash: 0x634F4A0562CF19B8 | Since: 1207
     */
    function invalidateCinematicVehicleIdleMode() {
        InvalidateCinematicVehicleIdleMode();
    }
    camera_1.invalidateCinematicVehicleIdleMode = invalidateCinematicVehicleIdleMode;
    /**
     * No comment provided
     *
     * Hash: 0x698F456FB909E077 | Since: 1232
     */
    function isAimCamActive() {
        return IsAimCamActive();
    }
    camera_1.isAimCamActive = isAimCamActive;
    /**
     * Returns whether or not the passed camera handle is active.
     *
     * Hash: 0x63EFCC7E1810B8E6 | Since: 1207
     */
    function isCamActive(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return IsCamActive(_cam);
    }
    camera_1.isCamActive = isCamActive;
    /**
     * No comment provided
     *
     * Hash: 0x578F8F1CAA17BD2B | Since: 1207
     */
    function isCamInterpolating(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return IsCamInterpolating(_cam);
    }
    camera_1.isCamInterpolating = isCamInterpolating;
    /**
     * No comment provided
     *
     * Hash: 0x4415F8A6C536D39F | Since: 1207
     */
    function isCamRendering(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return IsCamRendering(_cam);
    }
    camera_1.isCamRendering = isCamRendering;
    /**
     * No comment provided
     *
     * Hash: 0x2EEB402BD7320159 | Since: 1207
     */
    function isCamShaking(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return IsCamShaking(_cam);
    }
    camera_1.isCamShaking = isCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0xBF7C780731AADBF8 | Since: 1207
     */
    function isCinematicCamRendering() {
        return IsCinematicCamRendering();
    }
    camera_1.isCinematicCamRendering = isCinematicCamRendering;
    /**
     * No comment provided
     *
     * Hash: 0x139EFB0A71DD9011 | Since: 1207
     */
    function isDeathFailRunning() {
        return IsDeathFailCameraRunning();
    }
    camera_1.isDeathFailRunning = isDeathFailRunning;
    /**
     * No comment provided
     *
     * Hash: 0xF63134C54B6EC212 | Since: 1207
     */
    function isFirstPersonAimCamActive() {
        return IsFirstPersonAimCamActive();
    }
    camera_1.isFirstPersonAimCamActive = isFirstPersonAimCamActive;
    /**
     * No comment provided
     *
     * Hash: 0xA24C1D341C6E0D53 | Since: 1207
     */
    function isFirstPersonActive() {
        return IsFirstPersonCameraActive(undefined, undefined, undefined);
    }
    camera_1.isFirstPersonActive = isFirstPersonActive;
    /**
     * No comment provided
     *
     * Hash: 0xA40C2F51FB589E9A | Since: 1207
     */
    function isFollowVehicleCamActive() {
        return IsFollowVehicleCamActive();
    }
    camera_1.isFollowVehicleCamActive = isFollowVehicleCamActive;
    /**
     * No comment provided
     *
     * Hash: 0x8FE0D24FFD04D5A2 | Since: 1207
     */
    function isGameplayCamLookingBehind() {
        return IsGameplayCamLookingBehind();
    }
    camera_1.isGameplayCamLookingBehind = isGameplayCamLookingBehind;
    /**
     * No comment provided
     *
     * Hash: 0x8660EA714834E412 | Since: 1207
     */
    function isGameplayCamRendering() {
        return IsGameplayCamRendering();
    }
    camera_1.isGameplayCamRendering = isGameplayCamRendering;
    /**
     * No comment provided
     *
     * Hash: 0xEA4C5F4AA0A4DBEF | Since: 1207
     */
    function isGameplayCamShaking() {
        return IsGameplayCamShaking();
    }
    camera_1.isGameplayCamShaking = isGameplayCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0x2E04AB5FEE042D4A | Since: 1207
     */
    function isGameplayHintActive() {
        return IsGameplayHintActive();
    }
    camera_1.isGameplayHintActive = isGameplayHintActive;
    /**
     * No comment provided
     *
     * Hash: 0x251241CAEC707106 | Since: 1207
     */
    function isInterpolatingFromScriptCams() {
        return IsInterpolatingFromScriptCams();
    }
    camera_1.isInterpolatingFromScriptCams = isInterpolatingFromScriptCams;
    /**
     * No comment provided
     *
     * Hash: 0x43AB9D5A7D415478 | Since: 1207
     */
    function isInterpolatingToScriptCams() {
        return IsInterpolatingToScriptCams();
    }
    camera_1.isInterpolatingToScriptCams = isInterpolatingToScriptCams;
    /**
     * No comment provided
     *
     * Hash: 0x37F9A426FBCF4AF2 | Since: 1207
     */
    function isScreenFadedIn() {
        return IsScreenFadedIn();
    }
    camera_1.isScreenFadedIn = isScreenFadedIn;
    /**
     * No comment provided
     *
     * Hash: 0xF5472C80DF2FF847 | Since: 1207
     */
    function isScreenFadedOut() {
        return IsScreenFadedOut();
    }
    camera_1.isScreenFadedOut = isScreenFadedOut;
    /**
     * No comment provided
     *
     * Hash: 0x0CECCC63FFA2EF24 | Since: 1207
     */
    function isScreenFadingIn() {
        return IsScreenFadingIn();
    }
    camera_1.isScreenFadingIn = isScreenFadingIn;
    /**
     * No comment provided
     *
     * Hash: 0x02F39BEFE7B88D00 | Since: 1207
     */
    function isScreenFadingOut() {
        return IsScreenFadingOut();
    }
    camera_1.isScreenFadingOut = isScreenFadingOut;
    /**
     * No comment provided
     *
     * Hash: 0x2E941B5FFA2989C6 | Since: 1207
     */
    function isSphereVisible(pos, radius) {
        return IsSphereVisible(pos.x, pos.y, pos.z, radius);
    }
    camera_1.isSphereVisible = isSphereVisible;
    /**
     * No comment provided
     *
     * Hash: 0xA263DDF694D563F6 | Since: 1207
     */
    function playCamAnim(cam, animName, animDictionary, pos, rot, animFlags, rotOrder) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return PlayCamAnim(_cam, animName, animDictionary, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, animFlags, rotOrder);
    }
    camera_1.playCamAnim = playCamAnim;
    /**
     * No comment provided
     *
     * Hash: 0x948B39341C3A40C2 | Since: 1207
     */
    function pointCamAtCoord(cam, pos) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        PointCamAtCoord(_cam, pos.x, pos.y, pos.z);
    }
    camera_1.pointCamAtCoord = pointCamAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xFC2867E6074D3A61 | Since: 1207
     */
    function pointCamAtEntity(cam, entity) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        PointCamAtEntity(_cam, _entity, 0, 0, 0, false);
    }
    camera_1.pointCamAtEntity = pointCamAtEntity;
    /**
     * ease - smooth transition between the camera's positions
     * easeTime - Time in milliseconds for the transition to happen
     *
     * If you have created a script (rendering) camera, and want to go back to the
     * character (gameplay) camera, call this native with render set to FALSE.
     * Setting ease to TRUE will smooth the transition.
     *
     * Hash: 0x33281167E4942E4F | Since: 1207
     */
    function renderScriptCams(render, ease, easeTime) {
        RenderScriptCams(render, ease, easeTime, false, false, 0);
    }
    camera_1.renderScriptCams = renderScriptCams;
    /**
     * Set camera as active/inactive.
     *
     * Hash: 0x87295BCA613800C8 | Since: 1207
     */
    function setCamActive(cam, active) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamActive(_cam, active);
    }
    camera_1.setCamActive = setCamActive;
    /**
     * No comment provided
     *
     * Hash: 0x8B15AE2987C1AC8F | Since: 1207
     */
    function setCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation) {
        const _camTo = camTo instanceof Camera ? camTo.handle() : camTo;
        const _camFrom = camFrom instanceof Camera ? camFrom.handle() : camFrom;
        SetCamActiveWithInterp(_camTo, _camFrom, duration, easeLocation, easeRotation);
    }
    camera_1.setCamActiveWithInterp = setCamActiveWithInterp;
    /**
     * Allows you to aim and shoot at the direction the camera is facing.
     *
     * Hash: 0x3CB9E8BDE5E76F33 | Since: 1207
     */
    function setCamAffectsAiming(cam, toggle) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamAffectsAiming(_cam, toggle);
    }
    camera_1.setCamAffectsAiming = setCamAffectsAiming;
    /**
     * No comment provided
     *
     * Hash: 0x1B8F3CE5A6001298 | Since: 1207
     */
    function setCamControlsMiniMapHeading(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamControlsMiniMapHeading(_cam, false);
    }
    camera_1.setCamControlsMiniMapHeading = setCamControlsMiniMapHeading;
    /**
     * Sets the position of the cam.
     *
     * Hash: 0xF9EE7D419EE49DE6 | Since: 1207
     */
    function setCamCoord(cam, pos) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamCoord(_cam, pos.x, pos.y, pos.z);
    }
    camera_1.setCamCoord = setCamCoord;
    /**
     * No comment provided
     *
     * Hash: 0x5E32817BF6302111 | Since: 1207
     */
    function setCamFarClip(cam, farClip) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamFarClip(_cam, farClip);
    }
    camera_1.setCamFarClip = setCamFarClip;
    /**
     * Sets the field of view of the cam.
     *
     * Min: 1.0f
     * Max: 130.0f
     *
     * Hash: 0x27666E5988D9D429 | Since: 1207
     */
    function setCamFov(cam, fieldOfView) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamFov(_cam, fieldOfView);
    }
    camera_1.setCamFov = setCamFov;
    /**
     * No comment provided
     *
     * Hash: 0x45FD891364181F9E | Since: 1207
     */
    function setCamMotionBlurStrength(cam, strength) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamMotionBlurStrength(_cam, strength);
    }
    camera_1.setCamMotionBlurStrength = setCamMotionBlurStrength;
    /**
     * No comment provided
     *
     * Hash: 0xA924028272A61364 | Since: 1207
     */
    function setCamNearClip(cam, nearClip) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamNearClip(_cam, nearClip);
    }
    camera_1.setCamNearClip = setCamNearClip;
    /**
     * No comment provided
     *
     * Hash: 0xA47BBFFFB83D4D0A | Since: 1207
     */
    function setCamParams(cam, pos, rot, fieldOfView) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamParams(_cam, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fieldOfView, undefined, 0, 0, 0, undefined, undefined);
    }
    camera_1.setCamParams = setCamParams;
    /**
     * Sets the rotation of the cam.
     *
     * Hash: 0x63DFA6810AD78719 | Since: 1207
     */
    function setCamRot(cam, rot, rotationOrder) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamRot(_cam, rot.x, rot.y, rot.z, rotationOrder);
    }
    camera_1.setCamRot = setCamRot;
    /**
     * No comment provided
     *
     * Hash: 0xFF6311652CA91015 | Since: 1207
     */
    function setCamSplineDuration(cam, timeDuration) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamSplineDuration(_cam, timeDuration);
    }
    camera_1.setCamSplineDuration = setCamSplineDuration;
    /**
     * No comment provided
     *
     * Hash: 0xF1898A68E7C15636 | Since: 1207
     */
    function setCamSplinePhase(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamSplinePhase(_cam, 0);
    }
    camera_1.setCamSplinePhase = setCamSplinePhase;
    /**
     * No comment provided
     *
     * Hash: 0x84B3645618E726B0 | Since: 1207
     */
    function setCamSplineSmoothingStyle(cam, smoothingStyle) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamSplineSmoothingStyle(_cam, smoothingStyle);
    }
    camera_1.setCamSplineSmoothingStyle = setCamSplineSmoothingStyle;
    /**
     * No comment provided
     *
     * Hash: 0xB90411F480457A6C | Since: 1207
     */
    function setCinematicButtonActive() {
        SetCinematicButtonActive(false);
    }
    camera_1.setCinematicButtonActive = setCinematicButtonActive;
    /**
     * No comment provided
     *
     * Hash: 0xCE7A90B160F75046 | Since: 1207
     */
    function setCinematicModeActive() {
        SetCinematicModeActive(false);
    }
    camera_1.setCinematicModeActive = setCinematicModeActive;
    /**
     * No comment provided
     *
     * Hash: 0x05BD5E4088B30A66 | Since: 1207
     */
    function setFirstPersonAimCamRelativeHeadingLimitsThisUpdate() {
        SetFirstPersonAimCamRelativeHeadingLimitsThisUpdate(0, 0);
    }
    camera_1.setFirstPersonAimCamRelativeHeadingLimitsThisUpdate = setFirstPersonAimCamRelativeHeadingLimitsThisUpdate;
    /**
     * Old name: _SET_FIRST_PERSON_CAM_PITCH_RANGE
     *
     * Hash: 0x715B7F5E8BED32A2 | Since: 1207
     */
    function setFirstPersonAimCamRelativePitchLimitsThisUpdate() {
        SetFirstPersonAimCamRelativePitchLimitsThisUpdate(0, 0);
    }
    camera_1.setFirstPersonAimCamRelativePitchLimitsThisUpdate = setFirstPersonAimCamRelativePitchLimitsThisUpdate;
    /**
     * Forces gameplay cam to specified ped as if you were the ped or spectating it
     *
     * Hash: 0x82E41D6ADE924FCA | Since: 1207
     */
    function setGameplayCamFollowPedThisUpdate(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetGameplayCamFollowPedThisUpdate(_ped);
    }
    camera_1.setGameplayCamFollowPedThisUpdate = setGameplayCamFollowPedThisUpdate;
    /**
     * Old name: _DISABLE_CAM_COLLISION_FOR_ENTITY
     *
     * Hash: 0xD904F75DBD7AB865 | Since: 1207
     */
    function setGameplayCamIgnoreEntityCollisionThisUpdate(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetGameplayCamIgnoreEntityCollisionThisUpdate(_entity);
    }
    camera_1.setGameplayCamIgnoreEntityCollisionThisUpdate = setGameplayCamIgnoreEntityCollisionThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x8459B3E64257B21D | Since: 1207
     */
    function setGameplayCamMaxMotionBlurStrengthThisUpdate() {
        SetGameplayCamMaxMotionBlurStrengthThisUpdate(0);
    }
    camera_1.setGameplayCamMaxMotionBlurStrengthThisUpdate = setGameplayCamMaxMotionBlurStrengthThisUpdate;
    /**
     * Sets the camera position relative to heading in float from -360 to +360.
     *
     * Heading is always 0 in aiming camera.
     *
     * Hash: 0x5D1EB123EAC5D071 | Since: 1207
     */
    function setGameplayCamRelativeHeading(heading) {
        SetGameplayCamRelativeHeading(heading, 0);
    }
    camera_1.setGameplayCamRelativeHeading = setGameplayCamRelativeHeading;
    /**
     * Sets the camera pitch.
     *
     * Parameters:
     * x = pitches the camera on the x axis.
     * Value2 = always seems to be hex 0x3F800000 (1.000000 float).
     *
     * Hash: 0xFB760AF4F537B8BF | Since: 1207
     */
    function setGameplayCamRelativePitch(x, Value2) {
        SetGameplayCamRelativePitch(x, Value2);
    }
    camera_1.setGameplayCamRelativePitch = setGameplayCamRelativePitch;
    /**
     * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake.
     *
     * Hash: 0x570E35F5C4A44838 | Since: 1207
     */
    function setGameplayCamShakeAmplitude(amplitude) {
        SetGameplayCamShakeAmplitude(amplitude);
    }
    camera_1.setGameplayCamShakeAmplitude = setGameplayCamShakeAmplitude;
    /**
     * Hash used in finale1.ysc: 1726668277
     *
     * Hash: 0xFA33B8C69A4A6A0F | Since: 1207
     */
    function setGameplayCoordHint(pos, duration, blendOutDuration, blendInDuration, p6) {
        if (typeof p6 === 'string')
            p6 = misc.getHashKey(p6);
        SetGameplayCoordHint(pos.x, pos.y, pos.z, duration, blendOutDuration, blendInDuration, p6);
    }
    camera_1.setGameplayCoordHint = setGameplayCoordHint;
    /**
     * p6 & p7 - possibly length or time
     *
     * Hash: 0xD1F7F32640ADFD12 | Since: 1207
     */
    function setGameplayEntityHint(entity, xOffset, yOffset, zOffset) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetGameplayEntityHint(_entity, xOffset, yOffset, zOffset, false, 0, 0, 0, undefined);
    }
    camera_1.setGameplayEntityHint = setGameplayEntityHint;
    /**
     * No comment provided
     *
     * Hash: 0x421192A2DA48FD01 | Since: 1207
     */
    function setGameplayHintBaseOrbitPitchOffset() {
        SetGameplayHintBaseOrbitPitchOffset(0);
    }
    camera_1.setGameplayHintBaseOrbitPitchOffset = setGameplayHintBaseOrbitPitchOffset;
    /**
     * Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETX
     *
     * Hash: 0xF86B6F93727C59C9 | Since: 1207
     */
    function setGameplayHintRelativeSideOffset() {
        SetGameplayHintCameraRelativeSideOffset(0);
    }
    camera_1.setGameplayHintRelativeSideOffset = setGameplayHintRelativeSideOffset;
    /**
     * Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETY
     *
     * Hash: 0x29E74F819150CC32 | Since: 1207
     */
    function setGameplayHintRelativeVerticalOffset() {
        SetGameplayHintCameraRelativeVerticalOffset(0);
    }
    camera_1.setGameplayHintRelativeVerticalOffset = setGameplayHintRelativeVerticalOffset;
    /**
     * No comment provided
     *
     * Hash: 0xDDDC54181868F81F | Since: 1207
     */
    function setGameplayHintFollowDistanceScalar() {
        SetGameplayHintFollowDistanceScalar(0);
    }
    camera_1.setGameplayHintFollowDistanceScalar = setGameplayHintFollowDistanceScalar;
    /**
     * No comment provided
     *
     * Hash: 0x661E58BC6F00A49A | Since: 1207
     */
    function setGameplayHintFov(FOV) {
        SetGameplayHintFov(FOV);
    }
    camera_1.setGameplayHintFov = setGameplayHintFov;
    /**
     * No comment provided
     *
     * Hash: 0xC40551D65F2BF297 | Since: 1207
     */
    function setGameplayObjectHint() {
        SetGameplayObjectHint(undefined, 0, 0, 0, false, undefined, undefined, undefined);
    }
    camera_1.setGameplayObjectHint = setGameplayObjectHint;
    /**
     * No comment provided
     *
     * Hash: 0x90FB951648851733 | Since: 1207
     */
    function setGameplayPedHint(p0, x1, y1, z1) {
        const _p0 = p0 instanceof Ped ? p0.handle() : p0;
        SetGameplayPedHint(_p0, x1, y1, z1, false, undefined, undefined, undefined);
    }
    camera_1.setGameplayPedHint = setGameplayPedHint;
    /**
     * No comment provided
     *
     * Hash: 0xE2B2BB7DAC280515 | Since: 1207
     */
    function setGameplayVehicleHint() {
        SetGameplayVehicleHint(undefined, 0, 0, 0, false, undefined, undefined, undefined);
    }
    camera_1.setGameplayVehicleHint = setGameplayVehicleHint;
    /**
     * Forces gameplay cam to specified vehicle as if you were in it
     *
     * Hash: 0xFA1D5E8D1C3CCD67 | Since: 1207
     */
    function setInVehicleCamStateThisUpdate(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetInVehicleCamStateThisUpdate(_vehicle, 0);
    }
    camera_1.setInVehicleCamStateThisUpdate = setInVehicleCamStateThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x1DD95A8D6B24A0C9 | Since: 1207
     */
    function setScriptedIsFirstPersonThisFrame() {
        SetScriptedCameraIsFirstPersonThisFrame(false);
    }
    camera_1.setScriptedIsFirstPersonThisFrame = setScriptedIsFirstPersonThisFrame;
    /**
     * Old name: _ANIMATE_GAMEPLAY_CAM_ZOOM
     *
     * Hash: 0x2126C740A4AC370B | Since: 1207
     */
    function setThirdPersonCamOrbitDistanceLimitsThisUpdate(distance) {
        SetThirdPersonCamOrbitDistanceLimitsThisUpdate(0, distance);
    }
    camera_1.setThirdPersonCamOrbitDistanceLimitsThisUpdate = setThirdPersonCamOrbitDistanceLimitsThisUpdate;
    /**
     * minimum: Degrees between -180f and 180f.
     * maximum: Degrees between -180f and 180f.
     *
     * Clamps the gameplay camera's current yaw.
     *
     * Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
     *
     * Old name: _CLAMP_GAMEPLAY_CAM_YAW
     *
     * Hash: 0x14F3947318CA8AD2 | Since: 1207
     */
    function setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum, maximum) {
        SetThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum, maximum);
    }
    camera_1.setThirdPersonCamRelativeHeadingLimitsThisUpdate = setThirdPersonCamRelativeHeadingLimitsThisUpdate;
    /**
     * minimum: Degrees between -90f and 90f.
     * maximum: Degrees between -90f and 90f.
     *
     * Clamps the gameplay camera's current pitch.
     *
     * Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
     *
     * Old name: _CLAMP_GAMEPLAY_CAM_PITCH
     *
     * Hash: 0x326C7AA308F3DF6A | Since: 1207
     */
    function setThirdPersonCamRelativePitchLimitsThisUpdate(minimum, maximum) {
        SetThirdPersonCamRelativePitchLimitsThisUpdate(minimum, maximum);
    }
    camera_1.setThirdPersonCamRelativePitchLimitsThisUpdate = setThirdPersonCamRelativePitchLimitsThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xD7F4D54CF80AFA34 | Since: 1207
     */
    function setWidescreenBorders() {
        SetWidescreenBorders(false, 0);
    }
    camera_1.setWidescreenBorders = setWidescreenBorders;
    /**
     * No comment provided
     *
     * Hash: 0xF9A7BCF5D050D4E7 | Since: 1207
     */
    function shakeCam(cam, _type, amplitude) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        ShakeCam(_cam, _type, amplitude);
    }
    camera_1.shakeCam = shakeCam;
    /**
     * No comment provided
     *
     * Hash: 0xD9B31B4650520529 | Since: 1207
     */
    function shakeGameplayCam(shakeName, intensity) {
        ShakeGameplayCam(shakeName, intensity);
    }
    camera_1.shakeGameplayCam = shakeGameplayCam;
    /**
     * No comment provided
     *
     * Hash: 0xCA1B30A3357C71F1 | Since: 1207
     */
    function stopCamPointing(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        StopCamPointing(_cam);
    }
    camera_1.stopCamPointing = stopCamPointing;
    /**
     * No comment provided
     *
     * Hash: 0xB78CC4B4706614B0 | Since: 1207
     */
    function stopCamShaking(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        StopCamShaking(_cam, false);
    }
    camera_1.stopCamShaking = stopCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0x93759A83D0D844E7 | Since: 1207
     */
    function stopCodeGameplayHint() {
        StopCodeGameplayHint(false);
    }
    camera_1.stopCodeGameplayHint = stopCodeGameplayHint;
    /**
     * No comment provided
     *
     * Hash: 0xE0DE43D290FB65F9 | Since: 1207
     */
    function stopGameplayCamShaking() {
        StopGameplayCamShaking(false);
    }
    camera_1.stopGameplayCamShaking = stopGameplayCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0x1BCEC33D54CFCA8A | Since: 1207
     */
    function stopGameplayHint() {
        StopGameplayHint(false);
    }
    camera_1.stopGameplayHint = stopGameplayHint;
    /**
     * This native makes the gameplay camera zoom into first person/third person with a special effect.
     * blendBackSmoothingType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eBlendBackSmoothing
     *
     * Hash: 0x8C7C7FF7CF0E5153 | Since: 1207
     */
    function stopRenderingScriptCamsUsingCatchUp(render, distance, blendBackSmoothingType) {
        StopRenderingScriptCamsUsingCatchUp(render, distance, blendBackSmoothingType, false, false, false);
    }
    camera_1.stopRenderingScriptCamsUsingCatchUp = stopRenderingScriptCamsUsingCatchUp;
    /**
     * shakeNames in script_rel: CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, POV_DRUNK_SHAKE, DRUNK_SHAKE, MINIGAME_TRAIN_SHAKE
     * _IS_GAMEPLAY_*
     *
     * Hash: 0x0060B31968E60E41 | Since: 1207
     */
    function _0x0060B31968E60E41(shakeName) {
        return Citizen.invokeNative('0x0060B31968E60E41', shakeName);
    }
    camera_1._0x0060B31968E60E41 = _0x0060B31968E60E41;
    /**
     * No comment provided
     *
     * Hash: 0x04084490CC302CFB | Since: 1207
     */
    function _0x04084490CC302CFB() {
        Citizen.invokeNative('0x04084490CC302CFB');
    }
    camera_1._0x04084490CC302CFB = _0x04084490CC302CFB;
    /**
     * No comment provided
     *
     * Hash: 0x06557F6D96C86881 | Since: 1207
     */
    function _0x06557F6D96C86881() {
        Citizen.invokeNative('0x06557F6D96C86881');
    }
    camera_1._0x06557F6D96C86881 = _0x06557F6D96C86881;
    /**
     * Not official name
     * This native allows to move the gameplay cam with the given speed, enableSlide will allow to move the cam to the slideOffset, enableZoom will allow to move the cam to the zoomOffset.
     *
     * EXAMPLE:
     * Citizen.InvokeNative(0x066167c63111d8cf,1.0, true, -1.0, true, 2.0)
     *
     * Hash: 0x066167C63111D8CF | Since: 1207
     */
    function setGameplayCamParamsThisUpdate(camSpeed, enableSlide, slideOffset, enableZoom, zoomOffset) {
        Citizen.invokeNative('0x066167C63111D8CF', camSpeed, enableSlide, slideOffset, enableZoom, zoomOffset);
    }
    camera_1.setGameplayCamParamsThisUpdate = setGameplayCamParamsThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x0961B089947BA6D0 | Since: 1207
     */
    function _0x0961B089947BA6D0() {
        Citizen.invokeNative('0x0961B089947BA6D0', undefined);
    }
    camera_1._0x0961B089947BA6D0 = _0x0961B089947BA6D0;
    /**
     * NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
     * _DISABLE_*
     *
     * Hash: 0x0F1FFEF5D54AE832 | Since: 1207
     */
    function _0x0F1FFEF5D54AE832() {
        Citizen.invokeNative('0x0F1FFEF5D54AE832');
    }
    camera_1._0x0F1FFEF5D54AE832 = _0x0F1FFEF5D54AE832;
    /**
     * No comment provided
     *
     * Hash: 0x0FF7125F07DEB84F | Since: 1207
     */
    function _0x0FF7125F07DEB84F() {
        Citizen.invokeNative('0x0FF7125F07DEB84F', undefined, undefined);
    }
    camera_1._0x0FF7125F07DEB84F = _0x0FF7125F07DEB84F;
    /**
     * Used for DUELING_LOCK_CAMERA_CONTROLS_THIS_FRAME: Disabling look/aim controls
     * _IS_SC(REEN_)* (?)
     *
     * Hash: 0x1204EB53A5FBC63D | Since: 1207
     */
    function _0x1204EB53A5FBC63D() {
        return Citizen.invokeNative('0x1204EB53A5FBC63D');
    }
    camera_1._0x1204EB53A5FBC63D = _0x1204EB53A5FBC63D;
    /**
     * No comment provided
     *
     * Hash: 0x14C4A49E36C29E49 | Since: 1207
     */
    function _0x14C4A49E36C29E49() {
        return Citizen.invokeNative('0x14C4A49E36C29E49');
    }
    camera_1._0x14C4A49E36C29E49 = _0x14C4A49E36C29E49;
    /**
     * No comment provided
     *
     * Hash: 0x16E9ABDD34DDD931 | Since: 1207
     */
    function _0x16E9ABDD34DDD931() {
        Citizen.invokeNative('0x16E9ABDD34DDD931');
    }
    camera_1._0x16E9ABDD34DDD931 = _0x16E9ABDD34DDD931;
    /**
     * No comment provided
     *
     * Hash: 0x1811A02277A9E49D | Since: 1207
     */
    function _0x1811A02277A9E49D() {
        return Citizen.invokeNative('0x1811A02277A9E49D');
    }
    camera_1._0x1811A02277A9E49D = _0x1811A02277A9E49D;
    /**
     * No comment provided
     *
     * Hash: 0x18C3DFAC458783BB | Since: 1207
     */
    function _0x18C3DFAC458783BB() {
        Citizen.invokeNative('0x18C3DFAC458783BB');
    }
    camera_1._0x18C3DFAC458783BB = _0x18C3DFAC458783BB;
    /**
     * No comment provided
     *
     * Hash: 0x190F7DA1AC09A8EF | Since: 1207
     */
    function _0x190F7DA1AC09A8EF() {
        return Citizen.invokeNative('0x190F7DA1AC09A8EF');
    }
    camera_1._0x190F7DA1AC09A8EF = _0x190F7DA1AC09A8EF;
    /**
     * No comment provided
     *
     * Hash: 0x1D931B7CC0EE3956 | Since: 1436
     */
    function _0x1D931B7CC0EE3956(dictionary, shotName, cameraName) {
        return Citizen.invokeNative('0x1D931B7CC0EE3956', dictionary, shotName, cameraName);
    }
    camera_1._0x1D931B7CC0EE3956 = _0x1D931B7CC0EE3956;
    /**
     * No comment provided
     *
     * Hash: 0x1D9F72DD4FD9A9D7 | Since: 1207
     */
    function _0x1D9F72DD4FD9A9D7() {
        Citizen.invokeNative('0x1D9F72DD4FD9A9D7', undefined);
    }
    camera_1._0x1D9F72DD4FD9A9D7 = _0x1D9F72DD4FD9A9D7;
    /**
     * No comment provided
     *
     * Hash: 0x1F6EBD94680252CE | Since: 1207
     */
    function _0x1F6EBD94680252CE() {
        Citizen.invokeNative('0x1F6EBD94680252CE', undefined, undefined);
    }
    camera_1._0x1F6EBD94680252CE = _0x1F6EBD94680252CE;
    /**
     * No comment provided
     *
     * Hash: 0x1FC6C727D30FFDDE | Since: 1207
     */
    function _0x1FC6C727D30FFDDE() {
        Citizen.invokeNative('0x1FC6C727D30FFDDE', undefined);
    }
    camera_1._0x1FC6C727D30FFDDE = _0x1FC6C727D30FFDDE;
    /**
     * No comment provided
     *
     * Hash: 0x29E6655DF3590B0D | Since: 1207
     */
    function _0x29E6655DF3590B0D() {
        Citizen.invokeNative('0x29E6655DF3590B0D', undefined);
    }
    camera_1._0x29E6655DF3590B0D = _0x29E6655DF3590B0D;
    /**
     * No comment provided
     *
     * Hash: 0x2AB7C81B3F70570C | Since: 1207
     */
    function _0x2AB7C81B3F70570C() {
        return Citizen.invokeNative('0x2AB7C81B3F70570C');
    }
    camera_1._0x2AB7C81B3F70570C = _0x2AB7C81B3F70570C;
    /**
     * No comment provided
     *
     * Hash: 0x2DD3149DC34A3F4C | Since: 1207
     */
    function _0x2DD3149DC34A3F4C() {
        Citizen.invokeNative('0x2DD3149DC34A3F4C', undefined);
    }
    camera_1._0x2DD3149DC34A3F4C = _0x2DD3149DC34A3F4C;
    /**
     * No comment provided
     *
     * Hash: 0x39073DA4EDDBC91D | Since: 1207
     */
    function _0x39073DA4EDDBC91D() {
        Citizen.invokeNative('0x39073DA4EDDBC91D', undefined);
    }
    camera_1._0x39073DA4EDDBC91D = _0x39073DA4EDDBC91D;
    /**
     * No comment provided
     *
     * Hash: 0x3B8E3AD9677CE12B | Since: 1207
     */
    function _0x3B8E3AD9677CE12B() {
        Citizen.invokeNative('0x3B8E3AD9677CE12B', undefined, undefined, undefined);
    }
    camera_1._0x3B8E3AD9677CE12B = _0x3B8E3AD9677CE12B;
    /**
     * No comment provided
     *
     * Hash: 0x3C486E334520579D | Since: 1207
     */
    function _0x3C486E334520579D() {
        Citizen.invokeNative('0x3C486E334520579D');
    }
    camera_1._0x3C486E334520579D = _0x3C486E334520579D;
    /**
     * No comment provided
     *
     * Hash: 0x3C8F74E8FE751614 | Since: 1207
     */
    function _0x3C8F74E8FE751614() {
        Citizen.invokeNative('0x3C8F74E8FE751614');
    }
    camera_1._0x3C8F74E8FE751614 = _0x3C8F74E8FE751614;
    /**
     * No comment provided
     *
     * Hash: 0x4138EE36BC3DC0A7 | Since: 1207
     */
    function _0x4138EE36BC3DC0A7() {
        return Citizen.invokeNative('0x4138EE36BC3DC0A7', undefined, undefined);
    }
    camera_1._0x4138EE36BC3DC0A7 = _0x4138EE36BC3DC0A7;
    /**
     * No comment provided
     *
     * Hash: 0x41E452A3C580D1A7 | Since: 1207
     */
    function _0x41E452A3C580D1A7() {
        Citizen.invokeNative('0x41E452A3C580D1A7');
    }
    camera_1._0x41E452A3C580D1A7 = _0x41E452A3C580D1A7;
    /**
     * No comment provided
     *
     * Hash: 0x450769C833D58844 | Since: 1207
     */
    function _0x450769C833D58844() {
        return Citizen.invokeNative('0x450769C833D58844');
    }
    camera_1._0x450769C833D58844 = _0x450769C833D58844;
    /**
     * No comment provided
     *
     * Hash: 0x465F04F68AD38197 | Since: 1207
     */
    function _0x465F04F68AD38197(dictionary, shotName, duration) {
        return Citizen.invokeNative('0x465F04F68AD38197', dictionary, shotName, duration);
    }
    camera_1._0x465F04F68AD38197 = _0x465F04F68AD38197;
    /**
     * No comment provided
     *
     * Hash: 0x4D2F46D1B28D90FB | Since: 1207
     */
    function _0x4D2F46D1B28D90FB() {
        Citizen.invokeNative('0x4D2F46D1B28D90FB', undefined, undefined);
    }
    camera_1._0x4D2F46D1B28D90FB = _0x4D2F46D1B28D90FB;
    /**
     * No comment provided
     *
     * Hash: 0x5060FA977CEA4455 | Since: 1207
     */
    function _0x5060FA977CEA4455() {
        return Citizen.invokeNative('0x5060FA977CEA4455');
    }
    camera_1._0x5060FA977CEA4455 = _0x5060FA977CEA4455;
    /**
     * No comment provided
     *
     * Hash: 0x5B637D6F3B67716A | Since: 1207
     */
    function _0x5B637D6F3B67716A() {
        Citizen.invokeNative('0x5B637D6F3B67716A', undefined);
    }
    camera_1._0x5B637D6F3B67716A = _0x5B637D6F3B67716A;
    /**
     * No comment provided
     *
     * Hash: 0x6072B7420A83A03F | Since: 1207
     */
    function _0x6072B7420A83A03F() {
        return Citizen.invokeNative('0x6072B7420A83A03F');
    }
    camera_1._0x6072B7420A83A03F = _0x6072B7420A83A03F;
    /**
     * Zooms in the gameplay camera to the next zoom level?
     * USE_* - WAS_*
     *
     * Hash: 0x632BE8D84846FA56 | Since: 1207
     */
    function _0x632BE8D84846FA56() {
        Citizen.invokeNative('0x632BE8D84846FA56');
    }
    camera_1._0x632BE8D84846FA56 = _0x632BE8D84846FA56;
    /**
     * Maintains the death camera after respawn
     *
     * Hash: 0x63E5841A9264D016 | Since: 1207
     */
    function _0x63E5841A9264D016(toggle) {
        Citizen.invokeNative('0x63E5841A9264D016', toggle);
    }
    camera_1._0x63E5841A9264D016 = _0x63E5841A9264D016;
    /**
     * No comment provided
     *
     * Hash: 0x641092322A8852AB | Since: 1207
     */
    function _0x641092322A8852AB() {
        Citizen.invokeNative('0x641092322A8852AB');
    }
    camera_1._0x641092322A8852AB = _0x641092322A8852AB;
    /**
     * No comment provided
     *
     * Hash: 0x6519238858AF5479 | Since: 1207
     */
    function _0x6519238858AF5479() {
        Citizen.invokeNative('0x6519238858AF5479', undefined);
    }
    camera_1._0x6519238858AF5479 = _0x6519238858AF5479;
    /**
     * No comment provided
     *
     * Hash: 0x6CAB0BA160B168D2 | Since: 1207
     */
    function _0x6CAB0BA160B168D2() {
        Citizen.invokeNative('0x6CAB0BA160B168D2');
    }
    camera_1._0x6CAB0BA160B168D2 = _0x6CAB0BA160B168D2;
    /**
     * No comment provided
     *
     * Hash: 0x6DFD37E586D4F44F | Since: 1207
     */
    function _0x6DFD37E586D4F44F() {
        return Citizen.invokeNative('0x6DFD37E586D4F44F');
    }
    camera_1._0x6DFD37E586D4F44F = _0x6DFD37E586D4F44F;
    /**
     * No comment provided
     *
     * Hash: 0x70A6658D476C6187 | Since: 1207
     */
    function _0x70A6658D476C6187() {
        Citizen.invokeNative('0x70A6658D476C6187');
    }
    camera_1._0x70A6658D476C6187 = _0x70A6658D476C6187;
    /**
     * Forces camera position to closest 3rd person
     *
     * Hash: 0x718C6ECF5E8CBDD4 | Since: 1207
     */
    function forceThirdPersonCloseThisFrame() {
        Citizen.invokeNative('0x718C6ECF5E8CBDD4');
    }
    camera_1.forceThirdPersonCloseThisFrame = forceThirdPersonCloseThisFrame;
    /**
     * Zooms in the third person camera closer to ground level.
     * Must be called every frame to interpolate.
     * Pass false to reset.
     *
     * Hash: 0x71D71E08A7ED5BD7 | Since: 1207
     */
    function _0x71D71E08A7ED5BD7(toggle) {
        Citizen.invokeNative('0x71D71E08A7ED5BD7', toggle);
    }
    camera_1._0x71D71E08A7ED5BD7 = _0x71D71E08A7ED5BD7;
    /**
     * No comment provided
     *
     * Hash: 0x728491FB3DFFEF99 | Since: 1207
     */
    function _0x728491FB3DFFEF99() {
        Citizen.invokeNative('0x728491FB3DFFEF99', undefined);
    }
    camera_1._0x728491FB3DFFEF99 = _0x728491FB3DFFEF99;
    /**
     * No comment provided
     *
     * Hash: 0x73FF6BE63DC18819 | Since: 1207
     */
    function _0x73FF6BE63DC18819() {
        return Citizen.invokeNative('0x73FF6BE63DC18819');
    }
    camera_1._0x73FF6BE63DC18819 = _0x73FF6BE63DC18819;
    /**
     * No comment provided
     *
     * Hash: 0x796085220ADCC847 | Since: 1207
     */
    function _0x796085220ADCC847() {
        return Citizen.invokeNative('0x796085220ADCC847');
    }
    camera_1._0x796085220ADCC847 = _0x796085220ADCC847;
    /**
     * No comment provided
     *
     * Hash: 0x7CE9DC58E3E4755F | Since: 1207
     */
    function _0x7CE9DC58E3E4755F() {
        return Citizen.invokeNative('0x7CE9DC58E3E4755F');
    }
    camera_1._0x7CE9DC58E3E4755F = _0x7CE9DC58E3E4755F;
    /**
     * No comment provided
     *
     * Hash: 0x7E40A01B11398FCB | Since: 1207
     */
    function _0x7E40A01B11398FCB() {
        Citizen.invokeNative('0x7E40A01B11398FCB');
    }
    camera_1._0x7E40A01B11398FCB = _0x7E40A01B11398FCB;
    /**
     * No comment provided
     *
     * Hash: 0x80D7A3E39B120BC4 | Since: 1207
     */
    function _0x80D7A3E39B120BC4() {
        return Citizen.invokeNative('0x80D7A3E39B120BC4');
    }
    camera_1._0x80D7A3E39B120BC4 = _0x80D7A3E39B120BC4;
    /**
     * No comment provided
     *
     * Hash: 0x8505E05FC8822843 | Since: 1207
     */
    function _0x8505E05FC8822843() {
        Citizen.invokeNative('0x8505E05FC8822843', undefined);
    }
    camera_1._0x8505E05FC8822843 = _0x8505E05FC8822843;
    /**
     * UPDATE_PLAYER_PLAYING_STATE - Releasing Lasso Hint Cam
     * Return type char in ida
     * _SET_GAMEPLAY_HINT_*
     *
     * Hash: 0x88544C0E3291DCAE | Since: 1207
     */
    function _0x88544C0E3291DCAE() {
        Citizen.invokeNative('0x88544C0E3291DCAE', false);
    }
    camera_1._0x88544C0E3291DCAE = _0x88544C0E3291DCAE;
    /**
     * No comment provided
     *
     * Hash: 0x8B1A5FE7E41E52B2 | Since: 1311
     */
    function _0x8B1A5FE7E41E52B2() {
        return Citizen.invokeNative('0x8B1A5FE7E41E52B2');
    }
    camera_1._0x8B1A5FE7E41E52B2 = _0x8B1A5FE7E41E52B2;
    /**
     * No comment provided
     *
     * Hash: 0x8E036B41C37D0E5F | Since: 1207
     */
    function _0x8E036B41C37D0E5F() {
        Citizen.invokeNative('0x8E036B41C37D0E5F', undefined);
    }
    camera_1._0x8E036B41C37D0E5F = _0x8E036B41C37D0E5F;
    /**
     * _IS_SCRIPTED_S*
     *
     * Hash: 0x975F6EBB62632FE3 | Since: 1207
     */
    function _0x975F6EBB62632FE3() {
        return Citizen.invokeNative('0x975F6EBB62632FE3');
    }
    camera_1._0x975F6EBB62632FE3 = _0x975F6EBB62632FE3;
    /**
     * No comment provided
     *
     * Hash: 0x9AC65A36D3C0C189 | Since: 1207
     */
    function _0x9AC65A36D3C0C189() {
        Citizen.invokeNative('0x9AC65A36D3C0C189', undefined);
    }
    camera_1._0x9AC65A36D3C0C189 = _0x9AC65A36D3C0C189;
    /**
     * No comment provided
     *
     * Hash: 0xA54D643D0773EB65 | Since: 1207
     */
    function _0xA54D643D0773EB65(dictionary, shotName, duration) {
        Citizen.invokeNative('0xA54D643D0773EB65', dictionary, shotName, duration);
    }
    camera_1._0xA54D643D0773EB65 = _0xA54D643D0773EB65;
    /**
     * NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
     * _DISABLE_*
     *
     * Hash: 0xA8BA2E0204D8486F | Since: 1355
     */
    function _0xA8BA2E0204D8486F() {
        Citizen.invokeNative('0xA8BA2E0204D8486F');
    }
    camera_1._0xA8BA2E0204D8486F = _0xA8BA2E0204D8486F;
    /**
     * No comment provided
     *
     * Hash: 0xAC77757C05DE9E5A | Since: 1207
     */
    function _0xAC77757C05DE9E5A(cameraDictionary) {
        Citizen.invokeNative('0xAC77757C05DE9E5A', cameraDictionary);
    }
    camera_1._0xAC77757C05DE9E5A = _0xAC77757C05DE9E5A;
    /**
     * No comment provided
     *
     * Hash: 0xB6A80E1E3A5444F1 | Since: 1311
     */
    function _0xB6A80E1E3A5444F1() {
        return Citizen.invokeNative('0xB6A80E1E3A5444F1');
    }
    camera_1._0xB6A80E1E3A5444F1 = _0xB6A80E1E3A5444F1;
    /**
     * No comment provided
     *
     * Hash: 0xB85C13E0BF1F2A1C | Since: 1207
     */
    function _0xB85C13E0BF1F2A1C() {
        Citizen.invokeNative('0xB85C13E0BF1F2A1C', undefined);
    }
    camera_1._0xB85C13E0BF1F2A1C = _0xB85C13E0BF1F2A1C;
    /**
     * No comment provided
     *
     * Hash: 0xC205B3C54C6A4E37 | Since: 1207
     */
    function _0xC205B3C54C6A4E37() {
        Citizen.invokeNative('0xC205B3C54C6A4E37', undefined);
    }
    camera_1._0xC205B3C54C6A4E37 = _0xC205B3C54C6A4E37;
    /**
     * No comment provided
     *
     * Hash: 0xC252C0CC969AF79A | Since: 1207
     */
    function _0xC252C0CC969AF79A() {
        Citizen.invokeNative('0xC252C0CC969AF79A', undefined);
    }
    camera_1._0xC252C0CC969AF79A = _0xC252C0CC969AF79A;
    /**
     * No comment provided
     *
     * Hash: 0xC285FD21294A1C49 | Since: 1207
     */
    function _0xC285FD21294A1C49(cameraDictionary) {
        return Citizen.invokeNative('0xC285FD21294A1C49', cameraDictionary);
    }
    camera_1._0xC285FD21294A1C49 = _0xC285FD21294A1C49;
    /**
     * Camera will be or is running
     *
     * Hash: 0xC3742F1FDF0A6824 | Since: 1355
     */
    function _0xC3742F1FDF0A6824() {
        Citizen.invokeNative('0xC3742F1FDF0A6824');
    }
    camera_1._0xC3742F1FDF0A6824 = _0xC3742F1FDF0A6824;
    /**
     * No comment provided
     *
     * Hash: 0xC3AEBB276825A359 | Since: 1436
     */
    function _0xC3AEBB276825A359(dictionary, shotName, duration) {
        return Citizen.invokeNative('0xC3AEBB276825A359', dictionary, shotName, duration);
    }
    camera_1._0xC3AEBB276825A359 = _0xC3AEBB276825A359;
    /**
     * shakeName: REINFORCED_LASSO_STRUGGLE_SHAKE
     * _RES*
     *
     * Hash: 0xC3E9E5D4F413B773 | Since: 1207
     */
    function _0xC3E9E5D4F413B773(shakeName, intensity) {
        Citizen.invokeNative('0xC3E9E5D4F413B773', shakeName, intensity);
    }
    camera_1._0xC3E9E5D4F413B773 = _0xC3E9E5D4F413B773;
    /**
     * No comment provided
     *
     * Hash: 0xCF69EA05CD9C33C9 | Since: 1207
     */
    function _0xCF69EA05CD9C33C9() {
        Citizen.invokeNative('0xCF69EA05CD9C33C9');
    }
    camera_1._0xCF69EA05CD9C33C9 = _0xCF69EA05CD9C33C9;
    /**
     * No comment provided
     *
     * Hash: 0xDB382FE20C2DA222 | Since: 1207
     */
    function _0xDB382FE20C2DA222() {
        Citizen.invokeNative('0xDB382FE20C2DA222', undefined);
    }
    camera_1._0xDB382FE20C2DA222 = _0xDB382FE20C2DA222;
    /**
     * No comment provided
     *
     * Hash: 0xDC62CD70658E7A02 | Since: 1207
     */
    function _0xDC62CD70658E7A02() {
        return Citizen.invokeNative('0xDC62CD70658E7A02');
    }
    camera_1._0xDC62CD70658E7A02 = _0xDC62CD70658E7A02;
    /**
     * No comment provided
     *
     * Hash: 0xDF7F5BE9150E47E4 | Since: 1207
     */
    function _0xDF7F5BE9150E47E4() {
        Citizen.invokeNative('0xDF7F5BE9150E47E4', undefined);
    }
    camera_1._0xDF7F5BE9150E47E4 = _0xDF7F5BE9150E47E4;
    /**
     * No comment provided
     *
     * Hash: 0xE28F73212A813E82 | Since: 1207
     */
    function _0xE28F73212A813E82() {
        Citizen.invokeNative('0xE28F73212A813E82', undefined, undefined, undefined, undefined);
    }
    camera_1._0xE28F73212A813E82 = _0xE28F73212A813E82;
    /**
     * No comment provided
     *
     * Hash: 0xE2BB2D6A9FE2ECDE | Since: 1207
     */
    function _0xE2BB2D6A9FE2ECDE() {
        Citizen.invokeNative('0xE2BB2D6A9FE2ECDE', undefined);
    }
    camera_1._0xE2BB2D6A9FE2ECDE = _0xE2BB2D6A9FE2ECDE;
    /**
     * No comment provided
     *
     * Hash: 0xE4B7945EF4F1BFB2 | Since: 1207
     */
    function _0xE4B7945EF4F1BFB2(cam) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        return Citizen.invokeNative('0xE4B7945EF4F1BFB2', _cam);
    }
    camera_1._0xE4B7945EF4F1BFB2 = _0xE4B7945EF4F1BFB2;
    /**
     * No comment provided
     *
     * Hash: 0xE6F364DE6C2FDEFE | Since: 1207
     */
    function _0xE6F364DE6C2FDEFE() {
        Citizen.invokeNative('0xE6F364DE6C2FDEFE');
    }
    camera_1._0xE6F364DE6C2FDEFE = _0xE6F364DE6C2FDEFE;
    /**
     * No comment provided
     *
     * Hash: 0xEA113BF9B0C0C5D7 | Since: 1207
     */
    function _0xEA113BF9B0C0C5D7(dictionary, shotName, duration) {
        return Citizen.invokeNative('0xEA113BF9B0C0C5D7', dictionary, shotName, duration);
    }
    camera_1._0xEA113BF9B0C0C5D7 = _0xEA113BF9B0C0C5D7;
    /**
     * No comment provided
     *
     * Hash: 0xEF9A3132A0AA6B19 | Since: 1207
     */
    function _0xEF9A3132A0AA6B19() {
        return Citizen.invokeNative('0xEF9A3132A0AA6B19');
    }
    camera_1._0xEF9A3132A0AA6B19 = _0xEF9A3132A0AA6B19;
    /**
     * No comment provided
     *
     * Hash: 0xF1A6FEEDF3776EF9 | Since: 1207
     */
    function _0xF1A6FEEDF3776EF9() {
        Citizen.invokeNative('0xF1A6FEEDF3776EF9');
    }
    camera_1._0xF1A6FEEDF3776EF9 = _0xF1A6FEEDF3776EF9;
    /**
     * No comment provided
     *
     * Hash: 0xF48664E9C83825E3 | Since: 1207
     */
    function _0xF48664E9C83825E3() {
        Citizen.invokeNative('0xF48664E9C83825E3', undefined, undefined);
    }
    camera_1._0xF48664E9C83825E3 = _0xF48664E9C83825E3;
    /**
     * No comment provided
     *
     * Hash: 0xF824530B612FE0CE | Since: 1207
     */
    function _0xF824530B612FE0CE() {
        return Citizen.invokeNative('0xF824530B612FE0CE');
    }
    camera_1._0xF824530B612FE0CE = _0xF824530B612FE0CE;
    /**
     * No comment provided
     *
     * Hash: 0xFC3F638BE2B6BB02 | Since: 1207
     */
    function _0xFC3F638BE2B6BB02() {
        Citizen.invokeNative('0xFC3F638BE2B6BB02');
    }
    camera_1._0xFC3F638BE2B6BB02 = _0xFC3F638BE2B6BB02;
    /**
     * No comment provided
     *
     * Hash: 0xFEB8646818294C75 | Since: 1207
     */
    function _0xFEB8646818294C75() {
        Citizen.invokeNative('0xFEB8646818294C75', undefined, undefined);
    }
    camera_1._0xFEB8646818294C75 = _0xFEB8646818294C75;
    /**
     * _SET_GAMEPLAY_P* - _SET_GAMEPLAY_V*
     *
     * Hash: 0xFEFDDC6E8FDF8A75 | Since: 1207
     */
    function _0xFEFDDC6E8FDF8A75(shakeName, intensity) {
        Citizen.invokeNative('0xFEFDDC6E8FDF8A75', shakeName, intensity);
    }
    camera_1._0xFEFDDC6E8FDF8A75 = _0xFEFDDC6E8FDF8A75;
    /**
     * No comment provided
     *
     * Hash: 0xB8B207C34285E978 | Since: 1207
     */
    function camCreate(cameraDictionary) {
        CamCreate(cameraDictionary);
    }
    camera_1.camCreate = camCreate;
    /**
     * No comment provided
     *
     * Hash: 0x7B0279170961A73F | Since: 1207
     */
    function camCreate2(cameraDictionary) {
        CamCreate2(cameraDictionary);
    }
    camera_1.camCreate2 = camCreate2;
    /**
     * No comment provided
     *
     * Hash: 0x0A5A4F1979ABB40E | Since: 1207
     */
    function camDestroy(cameraDictionary) {
        CamDestroy(cameraDictionary);
    }
    camera_1.camDestroy = camDestroy;
    /**
     * No comment provided
     *
     * Hash: 0x0E94C95EC3185FA9 | Since: 1207
     */
    function cinematicLocationSetLocationAndRotation(name, pos, rot) {
        CinematicLocationSetLocationAndRotation(name, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z);
    }
    camera_1.cinematicLocationSetLocationAndRotation = cinematicLocationSetLocationAndRotation;
    /**
     * No comment provided
     *
     * Hash: 0xBC016635D6A73B31 | Since: 1207
     */
    function cinematicLocationTriggerScriptedShotEvent2(dictionary, shotName, duration) {
        CinematicLocationTriggerScriptedShotEvent2(dictionary, shotName, duration);
    }
    camera_1.cinematicLocationTriggerScriptedShotEvent2 = cinematicLocationTriggerScriptedShotEvent2;
    /**
     * Creates Kill Cam for specified Ped Handle
     *
     * Hash: 0x2F994CC29CAA9D22 | Since: 1207
     */
    function createKillCam(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        CreateKillCam(_ped);
    }
    camera_1.createKillCam = createKillCam;
    /**
     * No comment provided
     *
     * Hash: 0x8910C24B7E0046EC | Since: 1207
     */
    function disableCinematicModeThisFrame() {
        DisableCinematicModeThisFrame();
    }
    camera_1.disableCinematicModeThisFrame = disableCinematicModeThisFrame;
    /**
     * Does the same as 0x9C473089A934C930 (DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE)
     *
     * Hash: 0x05AB44D906738426 | Since: 1207
     */
    function disableOnFootFirstPersonViewThisUpdate2() {
        DisableOnFootFirstPersonViewThisUpdate2();
    }
    camera_1.disableOnFootFirstPersonViewThisUpdate2 = disableOnFootFirstPersonViewThisUpdate2;
    /**
     * Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
     * Params: targetPed = death cam focuses on it
     *
     * Hash: 0xE3639DB78B3B5400 | Since: 1207
     */
    function forceCinematicDeathCamOnPed(targetPed) {
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        ForceCinematicDeathCamOnPed(_targetPed);
    }
    camera_1.forceCinematicDeathCamOnPed = forceCinematicDeathCamOnPed;
    /**
     * Returns true if first person camera is active in saloon1.ysc
     *
     * Hash: 0x90DA5BA5C2635416 | Since: 1207
     */
    function forceFirstPersonCamThisFrame() {
        return ForceFirstPersonCamThisFrame();
    }
    camera_1.forceFirstPersonCamThisFrame = forceFirstPersonCamThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xC64ABC0676AF262B | Since: 1207
     */
    function forceLetterBoxThisUpdate() {
        ForceLetterBoxThisUpdate();
    }
    camera_1.forceLetterBoxThisUpdate = forceLetterBoxThisUpdate;
    /**
     * Forces camera position to furthest 3rd person
     *
     * Hash: 0x1CFB749AD4317BDE | Since: 1207
     */
    function forceThirdPersonCamFarThisFrame() {
        ForceThirdPersonCamFarThisFrame();
    }
    camera_1.forceThirdPersonCamFarThisFrame = forceThirdPersonCamFarThisFrame;
    /**
     * Forces camera position to second furthest 3rd person
     *
     * Hash: 0x8370D34BD2E60B73 | Since: 1207
     */
    function forceThirdPersonCamThisFrame() {
        ForceThirdPersonCamThisFrame();
    }
    camera_1.forceThirdPersonCamThisFrame = forceThirdPersonCamThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x027CAB2C3AF27010 | Since: 1207
     */
    function freezeGameplayCamThisFrame() {
        FreezeGameplayCamThisFrame();
    }
    camera_1.freezeGameplayCamThisFrame = freezeGameplayCamThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x4653A741D17F2CD0 | Since: 1207
     */
    function getPhotoModeDof() {
        return GetPhotoModeDof();
    }
    camera_1.getPhotoModeDof = getPhotoModeDof;
    /**
     * No comment provided
     *
     * Hash: 0x2533BAFFBE737E54 | Since: 1207
     */
    function getPhotoModeFocalLength() {
        return GetPhotoModeFocalLength();
    }
    camera_1.getPhotoModeFocalLength = getPhotoModeFocalLength;
    /**
     * No comment provided
     *
     * Hash: 0x18FC740FFDCD7454 | Since: 1207
     */
    function getPhotoModeFocusDistance() {
        return GetPhotoModeFocusDistance();
    }
    camera_1.getPhotoModeFocusDistance = getPhotoModeFocusDistance;
    /**
     * Only used in R* Script camera_photomode
     *
     * Hash: 0x20389408F0E93B9A | Since: 1207
     */
    function isAnimSceneCamActive() {
        return IsAnimSceneCamActive();
    }
    camera_1.isAnimSceneCamActive = isAnimSceneCamActive;
    /**
     * No comment provided
     *
     * Hash: 0x927B810E43E99932 | Since: 1207
     */
    function isAvailable(cameraDictionary) {
        return IsCameraAvailable(cameraDictionary);
    }
    camera_1.isAvailable = isAvailable;
    /**
     * No comment provided
     *
     * Hash: 0xDD0B7C5AE58F721D | Since: 1207
     */
    function isCamDataDictLoaded(cameraDictionary) {
        return IsCamDataDictLoaded(cameraDictionary);
    }
    camera_1.isCamDataDictLoaded = isCamDataDictLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xA14D5FE82BCB1D9E | Since: 1207
     */
    function isCamPhotofxRunning() {
        return IsCamPhotofxRunning();
    }
    camera_1.isCamPhotofxRunning = isCamPhotofxRunning;
    /**
     * No comment provided
     *
     * Hash: 0xAA235E2F2C09E952 | Since: 1207
     */
    function isCinematicCamLocationLoaded(sLocationDictName) {
        return IsCinematicCamLocationLoaded(sLocationDictName);
    }
    camera_1.isCinematicCamLocationLoaded = isCinematicCamLocationLoaded;
    /**
     * Checks data related to Cinematic Cam Locations, if the check fails, the location is being loaded using 0x1B3C2D961F5FC0E1.
     *
     * Hash: 0x595550376B7EA230 | Since: 1207
     */
    function isCinematicCamLocationLoaded2(locationDictName) {
        return IsCinematicCamLocationLoaded2(locationDictName);
    }
    camera_1.isCinematicCamLocationLoaded2 = isCinematicCamLocationLoaded2;
    /**
     * No comment provided
     *
     * Hash: 0x74F1D22EFA71FAB8 | Since: 1207
     */
    function isInCinematicMode() {
        return IsInCinematicMode();
    }
    camera_1.isInCinematicMode = isInCinematicMode;
    /**
     * Returns true if player is in first person
     *
     * Hash: 0xD1BA66940E94C547 | Since: 1207
     */
    function isInFullFirstPersonMode() {
        return IsInFullFirstPersonMode();
    }
    camera_1.isInFullFirstPersonMode = isInFullFirstPersonMode;
    /**
     * No comment provided
     *
     * Hash: 0x6A4D224FC7643941 | Since: 1207
     */
    function loadDataDict(cameraDictionary) {
        LoadCameraDataDict(cameraDictionary);
    }
    camera_1.loadDataDict = loadDataDict;
    /**
     * No comment provided
     *
     * Hash: 0x1B3C2D961F5FC0E1 | Since: 1207
     */
    function loadCinematicCamLocation(locationDictName) {
        LoadCinematicCamLocation(locationDictName);
    }
    camera_1.loadCinematicCamLocation = loadCinematicCamLocation;
    /**
     * No comment provided
     *
     * Hash: 0x9F97E85EC142255E | Since: 1207
     */
    function pauseFocus(cam, pause) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        PauseCameraFocus(_cam, pause);
    }
    camera_1.pauseFocus = pauseFocus;
    /**
     * Used to enable headshot kill replay when you headshot set ped.
     * Params: p1 seems to be 0 or 1 in R* Scripts
     *
     * Hash: 0x986F7A51EE3E1F92 | Since: 1207
     */
    function reactivatePedHeadshotExecuteSlowcam(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ReactivatePedHeadshotExecuteSlowcam(_ped, 0);
    }
    camera_1.reactivatePedHeadshotExecuteSlowcam = reactivatePedHeadshotExecuteSlowcam;
    /**
     * Creates Cinematic Black Bars (at top and bottom)
     * Disable instantly: false/false, Enable instantly: true/true
     *
     * Hash: 0x69D65E89FFD72313 | Since: 1207
     */
    function requestLetterBoxNow() {
        RequestLetterBoxNow(false, false);
    }
    camera_1.requestLetterBoxNow = requestLetterBoxNow;
    /**
     * No comment provided
     *
     * Hash: 0xE296208C273BD7F0 | Since: 1207
     */
    function requestLetterBoxOvertime() {
        RequestLetterBoxOvertime(0, 0, false, 0, false, false);
    }
    camera_1.requestLetterBoxOvertime = requestLetterBoxOvertime;
    /**
     * No comment provided
     *
     * Hash: 0x11F32BB61B756732 | Since: 1207
     */
    function setCamFocusDistance(cam, distance) {
        const _cam = cam instanceof Camera ? cam.handle() : cam;
        SetCamFocusDistance(_cam, distance);
    }
    camera_1.setCamFocusDistance = setCamFocusDistance;
    /**
     * No comment provided
     *
     * Hash: 0x6C1053C433A573CF | Since: 1207
     */
    function setGameplayCamInitialHeading(camInitialHeading) {
        SetGameplayCamInitialHeading(camInitialHeading);
    }
    camera_1.setGameplayCamInitialHeading = setGameplayCamInitialHeading;
    /**
     * No comment provided
     *
     * Hash: 0x449995EA846D3FC2 | Since: 1207
     */
    function setGameplayCamInitialPitch(camInitialPitch) {
        SetGameplayCamInitialPitch(camInitialPitch);
    }
    camera_1.setGameplayCamInitialPitch = setGameplayCamInitialPitch;
    /**
     * Used in Script Function SHOP_CAMERA_SUPPORT_START_NEW_ORBIT
     *
     * Hash: 0xBCDA0BA8762FACB9 | Since: 1207
     */
    function setGameplayCamInitialZoom(camInitialZoom) {
        SetGameplayCamInitialZoom(camInitialZoom);
    }
    camera_1.setGameplayCamInitialZoom = setGameplayCamInitialZoom;
    /**
     * Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
     * _SET_P* - _SET_S*
     *
     * Hash: 0x6E969927CF632608 | Since: 1207
     */
    function setStartCinematicDeathCam() {
        SetStartCinematicDeathCam(false);
    }
    camera_1.setStartCinematicDeathCam = setStartCinematicDeathCam;
    /**
     * [SHOP_CAMERA_SUPPORT_START_NEW_ORBIT]
     * p0: struct<32> \/\*256\*\/
     *
     * Hash: 0x65B205BF30C13DDB | Since: 1207
     */
    function startOrbit() {
        return StartCameraOrbit();
    }
    camera_1.startOrbit = startOrbit;
    /**
     * script_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE, CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, HAND_SHAKE, MINIGAME_TRAIN_SHAKE
     * script_mp_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE
     * _STOP_GAMEPLAY_CAM* - _STOP_I*
     *
     * Hash: 0x4285804FD65D8066 | Since: 1207
     */
    function stopGameplayCamShakingWithName(shakeName) {
        StopGameplayCamShakingWithName(shakeName, false);
    }
    camera_1.stopGameplayCamShakingWithName = stopGameplayCamShakingWithName;
    /**
     * No comment provided
     *
     * Hash: 0x9A92C06ACBAF9731 | Since: 1207
     */
    function triggerMissionFailedCam() {
        TriggerMissionFailedCam();
    }
    camera_1.triggerMissionFailedCam = triggerMissionFailedCam;
    /**
     * No comment provided
     *
     * Hash: 0x798BE43C9393632B | Since: 1207
     */
    function unloadDataDict(cameraDictionary) {
        UnloadCameraDataDict(cameraDictionary);
    }
    camera_1.unloadDataDict = unloadDataDict;
    /**
     * No comment provided
     *
     * Hash: 0x2412216FCC7B4E3E | Since: 1207
     */
    function unloadCinematicLocation(dictionaryName) {
        UnloadCinematicCameraLocation(dictionaryName);
    }
    camera_1.unloadCinematicLocation = unloadCinematicLocation;
})(camera || (camera = {}));
export var clock;
(function (clock) {
    /**
     * No comment provided
     *
     * Hash: 0xAB7C251C7701D336 | Since: 1207
     */
    function addToTime(hours, minutes, seconds) {
        AddToClockTime(hours, minutes, seconds);
    }
    clock.addToTime = addToTime;
    /**
     * No comment provided
     *
     * Hash: 0x0184750AE88D0B1D | Since: 1207
     */
    function advanceTimeTo(hour, minute, second) {
        AdvanceClockTimeTo(hour, minute, second);
    }
    clock.advanceTimeTo = advanceTimeTo;
    /**
     * No comment provided
     *
     * Hash: 0xDF2FD796C54480A5 | Since: 1207
     */
    function getDayOfMonth() {
        return GetClockDayOfMonth();
    }
    clock.getDayOfMonth = getDayOfMonth;
    /**
     * Gets the current day of the week.
     *
     * 0: Sunday
     * 1: Monday
     * 2: Tuesday
     * 3: Wednesday
     * 4: Thursday
     * 5: Friday
     * 6: Saturday
     *
     * Hash: 0x4DD02D4C7FB30076 | Since: 1207
     */
    function getDayOfWeek() {
        return GetClockDayOfWeek();
    }
    clock.getDayOfWeek = getDayOfWeek;
    /**
     * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
     *
     * Hash: 0xC82CF208C2B19199 | Since: 1207
     */
    function getHours() {
        return GetClockHours();
    }
    clock.getHours = getHours;
    /**
     * Gets the current ingame clock minute.
     *
     * Hash: 0x4E162231B823DBBF | Since: 1207
     */
    function getMinutes() {
        return GetClockMinutes();
    }
    clock.getMinutes = getMinutes;
    /**
     * No comment provided
     *
     * Hash: 0x2D44E8FC79EAB1AC | Since: 1207
     */
    function getMonth() {
        return GetClockMonth();
    }
    clock.getMonth = getMonth;
    /**
     * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in RDR is only 48 minutes in real life.
     *
     * Hash: 0xB6101ABE62B5F080 | Since: 1207
     */
    function getSeconds() {
        return GetClockSeconds();
    }
    clock.getSeconds = getSeconds;
    /**
     * No comment provided
     *
     * Hash: 0xE136DCA28C4A48BA | Since: 1207
     */
    function getYear() {
        return GetClockYear();
    }
    clock.getYear = getYear;
    /**
     * No comment provided
     *
     * Hash: 0xE4CB8D126501EC52 | Since: 1207
     */
    function getMillisecondsPerGameMinute() {
        return GetMillisecondsPerGameMinute();
    }
    clock.getMillisecondsPerGameMinute = getMillisecondsPerGameMinute;
    /**
     * No comment provided
     *
     * Hash: 0x90338AD4A784E455 | Since: 1207
     */
    function getPosixTime() {
        return GetPosixTime();
    }
    clock.getPosixTime = getPosixTime;
    /**
     * No comment provided
     *
     * Hash: 0x4D1A590C92BF377E | Since: 1207
     */
    function pause(toggle, unused) {
        PauseClock(toggle, unused);
    }
    clock.pause = pause;
    /**
     * No comment provided
     *
     * Hash: 0x02AD3092562941E2 | Since: 1207
     */
    function setDate(day, month, year) {
        SetClockDate(day, month, year);
    }
    clock.setDate = setDate;
    /**
     * SET_CLOCK_TIME(12, 34, 56);
     *
     * Hash: 0x3A52C59FFB2DEED8 | Since: 1207
     */
    function setTime(hour, minute, second) {
        SetClockTime(hour, minute, second);
    }
    clock.setTime = setTime;
    /**
     * No comment provided
     *
     * Hash: 0x28EEACE9B43D9597 | Since: 1207
     */
    function addTimeToDateTime() {
        return AddTimeToDateTime();
    }
    clock.addTimeToDateTime = addTimeToDateTime;
    /**
     * Same as GET_POSIX_TIME except that it takes a single pointer to a struct.
     *
     * Hash: 0x86A68E84E5884951 | Since: 1207
     */
    function getPosixTimeStruct() {
        return GetPosixTimeStruct();
    }
    clock.getPosixTimeStruct = getPosixTimeStruct;
    /**
     * Base year is 1898.
     *
     * Hash: 0x78FD8BE812E436B2 | Since: 1207
     */
    function getSecondsSinceBaseYear() {
        return GetSecondsSinceBaseYear();
    }
    clock.getSecondsSinceBaseYear = getSecondsSinceBaseYear;
    /**
     * No comment provided
     *
     * Hash: 0x568D998A9FF96774 | Since: 1207
     */
    function pauseThisFrame(toggle) {
        PauseClockThisFrame(toggle);
    }
    clock.pauseThisFrame = pauseThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x04EEDB3848DACF68 | Since: 1207
     */
    function setMillisecondsPerGameMinute(ms) {
        SetMillisecondsPerGameMinute(ms);
    }
    clock.setMillisecondsPerGameMinute = setMillisecondsPerGameMinute;
})(clock || (clock = {}));
export var collection;
(function (collection) {
    /**
     * No comment provided
     *
     * Hash: 0x0B6D275D2F242E17 | Since: 1207
     */
    function collectableCategorySetHasReceivedList() {
        CollectableCategorySetHasReceivedList(undefined, undefined, undefined);
    }
    collection.collectableCategorySetHasReceivedList = collectableCategorySetHasReceivedList;
    /**
     * collectableCategory: ANTIQUE_BOTTLES, BIRD_EGGS, ARROWHEADS, FAMILY_HEIRLOOMS, WILD_FLOWERS, COINS, LOST_JEWELRY_RINGS, LOST_JEWELRY_BRACELETS, LOST_JEWELRY_EARRINGS, LOST_JEWELRY_NECKLACES, TAROT_CARDS_CUPS, TAROT_CARDS_PENTACLES, TAROT_CARDS_SWORDS, TAROT_CARDS_WANDS, FOSSILS_COMMON, FOSSILS_UNCOMMON, FOSSILS_RARE
     *
     * Hash: 0xCC644BC1DD655269 | Since: 1207
     */
    function collectableGetCategoryItemSetBuyAward(collectableCategory, p1) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return CollectableGetCategoryItemSetBuyAward(collectableCategory, p1);
    }
    collection.collectableGetCategoryItemSetBuyAward = collectableGetCategoryItemSetBuyAward;
    /**
     * No comment provided
     *
     * Hash: 0x33825A7388A6B9F6 | Since: 1207
     */
    function _0x33825A7388A6B9F6(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0x33825A7388A6B9F6', collectableCategory, 0);
    }
    collection._0x33825A7388A6B9F6 = _0x33825A7388A6B9F6;
    /**
     * No comment provided
     *
     * Hash: 0x3FD91F1A148A0468 | Since: 1232
     */
    function _0x3FD91F1A148A0468(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0x3FD91F1A148A0468', collectableCategory, 0);
    }
    collection._0x3FD91F1A148A0468 = _0x3FD91F1A148A0468;
    /**
     * Params: collectableCategory = WEEKLY_COLLECTABLES
     *
     * Hash: 0x61BEFBA3CE7A3BC8 | Since: 1232
     */
    function _0x61BEFBA3CE7A3BC8(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0x61BEFBA3CE7A3BC8', collectableCategory, 0);
    }
    collection._0x61BEFBA3CE7A3BC8 = _0x61BEFBA3CE7A3BC8;
    /**
     * Params: collectableCategory = WEEKLY_COLLECTABLES
     *
     * Hash: 0x6BAB7ACED1017204 | Since: 1207
     */
    function _0x6BAB7ACED1017204(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0x6BAB7ACED1017204', collectableCategory, 0);
    }
    collection._0x6BAB7ACED1017204 = _0x6BAB7ACED1017204;
    /**
     * Returns p2 (index?) for 0xB9020EC89C07DF04
     *
     * Hash: 0x755901C7598B97BC | Since: 1207
     */
    function _0x755901C7598B97BC(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0x755901C7598B97BC', collectableCategory, 0);
    }
    collection._0x755901C7598B97BC = _0x755901C7598B97BC;
    /**
     * No comment provided
     *
     * Hash: 0x775FA1FC87666847 | Since: 1232
     */
    function _0x775FA1FC87666847(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0x775FA1FC87666847', collectableCategory, 0);
    }
    collection._0x775FA1FC87666847 = _0x775FA1FC87666847;
    /**
     * No comment provided
     *
     * Hash: 0x93F2E7B5DB85657B | Since: 1207
     */
    function _0x93F2E7B5DB85657B() {
        return Citizen.invokeNative('0x93F2E7B5DB85657B', undefined, undefined);
    }
    collection._0x93F2E7B5DB85657B = _0x93F2E7B5DB85657B;
    /**
     * Params: collectableCategory = WEEKLY_COLLECTABLES
     *
     * Hash: 0x9ADEE485726025D4 | Since: 1207
     */
    function _0x9ADEE485726025D4(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0x9ADEE485726025D4', collectableCategory);
    }
    collection._0x9ADEE485726025D4 = _0x9ADEE485726025D4;
    /**
     * Accepts more hashes than 0xCC644BC1DD655269
     * Such as: CAROLINA_PARAKEETS, DINO_BONES, EGRET_FEATHERS, ...
     *
     * Hash: 0xB9020EC89C07DF04 | Since: 1207
     */
    function _0xB9020EC89C07DF04(collectableCategory, index) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0xB9020EC89C07DF04', collectableCategory, 0, index);
    }
    collection._0xB9020EC89C07DF04 = _0xB9020EC89C07DF04;
    /**
     * No comment provided
     *
     * Hash: 0xC3CA424E1F12ED0C | Since: 1232
     */
    function _0xC3CA424E1F12ED0C(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0xC3CA424E1F12ED0C', collectableCategory, 0);
    }
    collection._0xC3CA424E1F12ED0C = _0xC3CA424E1F12ED0C;
    /**
     * No comment provided
     *
     * Hash: 0xC4AC39719C1BB559 | Since: 1232
     */
    function _0xC4AC39719C1BB559(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0xC4AC39719C1BB559', collectableCategory, undefined);
    }
    collection._0xC4AC39719C1BB559 = _0xC4AC39719C1BB559;
    /**
     * No comment provided
     *
     * Hash: 0xD1806FB3EDED6D11 | Since: 1232
     */
    function _0xD1806FB3EDED6D11(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0xD1806FB3EDED6D11', collectableCategory, 0);
    }
    collection._0xD1806FB3EDED6D11 = _0xD1806FB3EDED6D11;
    /**
     * No comment provided
     *
     * Hash: 0xD297F68928A58130 | Since: 1232
     */
    function _0xD297F68928A58130(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0xD297F68928A58130', collectableCategory, 0);
    }
    collection._0xD297F68928A58130 = _0xD297F68928A58130;
    /**
     * Returns discoveredItemHash
     * _COLLECTABLE_C* - _COLLECTABLE_G*
     *
     * Hash: 0xEC3959E9950BF56B | Since: 1207
     */
    function collectableSetItemHashDiscovered(collectableItem) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        return Citizen.invokeNative('0xEC3959E9950BF56B', collectableItem);
    }
    collection.collectableSetItemHashDiscovered = collectableSetItemHashDiscovered;
    /**
     * No comment provided
     *
     * Hash: 0xFC832B06127D8E99 | Since: 1207
     */
    function _0xFC832B06127D8E99(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0xFC832B06127D8E99', collectableCategory, 0);
    }
    collection._0xFC832B06127D8E99 = _0xFC832B06127D8E99;
    /**
     * No comment provided
     *
     * Hash: 0x62CAB7DB62EAD434 | Since: 1207
     */
    function collectableCategoryGetNumCollectables(collectableCategory, collectableSubcategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        if (typeof collectableSubcategory === 'string')
            collectableSubcategory = misc.getHashKey(collectableSubcategory);
        return CollectableCategoryGetNumCollectables(collectableCategory, collectableSubcategory);
    }
    collection.collectableCategoryGetNumCollectables = collectableCategoryGetNumCollectables;
    /**
     * No comment provided
     *
     * Hash: 0x5461C821D00FE15A | Since: 1207
     */
    function collectableCategoryGetNumFound(collectableCategory, collectableSubcategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        if (typeof collectableSubcategory === 'string')
            collectableSubcategory = misc.getHashKey(collectableSubcategory);
        return CollectableCategoryGetNumFound(collectableCategory, collectableSubcategory);
    }
    collection.collectableCategoryGetNumFound = collectableCategoryGetNumFound;
    /**
     * No comment provided
     *
     * Hash: 0x3A65F4844913A047 | Since: 1207
     */
    function collectableCategoryGetNumTurnedIn(collectableCategory, collectableSubcategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        if (typeof collectableSubcategory === 'string')
            collectableSubcategory = misc.getHashKey(collectableSubcategory);
        return CollectableCategoryGetNumTurnedIn(collectableCategory, collectableSubcategory);
    }
    collection.collectableCategoryGetNumTurnedIn = collectableCategoryGetNumTurnedIn;
    /**
     * No comment provided
     *
     * Hash: 0x13AAECDA43318BFE | Since: 1207
     */
    function collectableCategoryGetToastTextureDictionary(collectableCategory, collectableSubcategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        if (typeof collectableSubcategory === 'string')
            collectableSubcategory = misc.getHashKey(collectableSubcategory);
        return CollectableCategoryGetToastTextureDictionary(collectableCategory, collectableSubcategory);
    }
    collection.collectableCategoryGetToastTextureDictionary = collectableCategoryGetToastTextureDictionary;
    /**
     * No comment provided
     *
     * Hash: 0xD52D20B0C76BB26D | Since: 1207
     */
    function collectableCategoryGetToastTextureName(collectableCategory, collectableSubcategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        if (typeof collectableSubcategory === 'string')
            collectableSubcategory = misc.getHashKey(collectableSubcategory);
        return CollectableCategoryGetToastTextureName(collectableCategory, collectableSubcategory);
    }
    collection.collectableCategoryGetToastTextureName = collectableCategoryGetToastTextureName;
    /**
     * Used in Script Function NET_COLLECTABLES_HANDLE_ITEM_ADDED
     * Returns collectableCategory Hash
     *
     * Hash: 0x725D52F21A5E9EF6 | Since: 1207
     */
    function collectableGetCategory(collectableItem) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        return CollectableGetCategory(collectableItem);
    }
    collection.collectableGetCategory = collectableGetCategory;
    /**
     * No comment provided
     *
     * Hash: 0x126CBEBBA46693CF | Since: 1207
     */
    function collectableGetCollectableItemHash(index, collectableCategory, collectableSubcategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        if (typeof collectableSubcategory === 'string')
            collectableSubcategory = misc.getHashKey(collectableSubcategory);
        return CollectableGetCollectableItemHash(index, collectableCategory, collectableSubcategory);
    }
    collection.collectableGetCollectableItemHash = collectableGetCollectableItemHash;
    /**
     * No comment provided
     *
     * Hash: 0x922A79CD4A033B8B | Since: 1207
     */
    function collectableGetIpl(collectableItem) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        return CollectableGetIpl(collectableItem);
    }
    collection.collectableGetIpl = collectableGetIpl;
    /**
     * No comment provided
     *
     * Hash: 0xF83D3DDA4D3C8169 | Since: 1207
     */
    function collectableGetNumFound(collectableItem) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        return CollectableGetNumFound(collectableItem);
    }
    collection.collectableGetNumFound = collectableGetNumFound;
    /**
     * No comment provided
     *
     * Hash: 0x9A03F22AD446EEAC | Since: 1207
     */
    function collectableGetNumTurnedIn(collectableItem) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        return CollectableGetNumTurnedIn(collectableItem);
    }
    collection.collectableGetNumTurnedIn = collectableGetNumTurnedIn;
    /**
     * No comment provided
     *
     * Hash: 0x1F1DD794908C2BFA | Since: 1207
     */
    function collectableGetPlacementLocation(collectableItem) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        return new Vector3(CollectableGetPlacementLocation(collectableItem));
    }
    collection.collectableGetPlacementLocation = collectableGetPlacementLocation;
    /**
     * No comment provided
     *
     * Hash: 0x6052B4DE6657684F | Since: 1207
     */
    function collectableGetSubcategory(collectableItem) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        return CollectableGetSubcategory(collectableItem);
    }
    collection.collectableGetSubcategory = collectableGetSubcategory;
    /**
     * No comment provided
     *
     * Hash: 0x3EA62E56F386C997 | Since: 1207
     */
    function collectableIncrementNumFound(collectableItem, amount) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        CollectableIncrementNumFound(collectableItem, amount);
    }
    collection.collectableIncrementNumFound = collectableIncrementNumFound;
    /**
     * No comment provided
     *
     * Hash: 0x398FAB9C96A81924 | Since: 1207
     */
    function collectableIncrementNumTurnedIn(collectableItem, amount) {
        if (typeof collectableItem === 'string')
            collectableItem = misc.getHashKey(collectableItem);
        CollectableIncrementNumTurnedIn(collectableItem, amount);
    }
    collection.collectableIncrementNumTurnedIn = collectableIncrementNumTurnedIn;
})(collection || (collection = {}));
export var companion;
(function (companion) {
    /**
     * No comment provided
     *
     * Hash: 0x0A8FD91EDE7B328A | Since: 1207
     */
    function _0x0A8FD91EDE7B328A() {
        Citizen.invokeNative('0x0A8FD91EDE7B328A', undefined, undefined);
    }
    companion._0x0A8FD91EDE7B328A = _0x0A8FD91EDE7B328A;
    /**
     * No comment provided
     *
     * Hash: 0x0C6A00DAE896614C | Since: 1207
     */
    function _0x0C6A00DAE896614C() {
        Citizen.invokeNative('0x0C6A00DAE896614C', undefined, undefined);
    }
    companion._0x0C6A00DAE896614C = _0x0C6A00DAE896614C;
    /**
     * No comment provided
     *
     * Hash: 0x0DE02DA3C0F66955 | Since: 1207
     */
    function _0x0DE02DA3C0F66955(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x0DE02DA3C0F66955', _ped, p1);
    }
    companion._0x0DE02DA3C0F66955 = _0x0DE02DA3C0F66955;
    /**
     * No comment provided
     *
     * Hash: 0x2917E634206B9E17 | Since: 1207
     */
    function _0x2917E634206B9E17(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x2917E634206B9E17', _ped, 0);
    }
    companion._0x2917E634206B9E17 = _0x2917E634206B9E17;
    /**
     * No comment provided
     *
     * Hash: 0x3CAAD93FA5B9579A | Since: 1207
     */
    function _0x3CAAD93FA5B9579A(volume) {
        Citizen.invokeNative('0x3CAAD93FA5B9579A', volume, 0, 0);
    }
    companion._0x3CAAD93FA5B9579A = _0x3CAAD93FA5B9579A;
    /**
     * No comment provided
     *
     * Hash: 0x61BDA07407754A5C | Since: 1207
     */
    function _0x61BDA07407754A5C() {
        Citizen.invokeNative('0x61BDA07407754A5C', undefined, undefined, undefined, undefined);
    }
    companion._0x61BDA07407754A5C = _0x61BDA07407754A5C;
    /**
     * No comment provided
     *
     * Hash: 0x722FBE08EF5B87BD | Since: 1207
     */
    function _0x722FBE08EF5B87BD() {
        return Citizen.invokeNative('0x722FBE08EF5B87BD', undefined, undefined, undefined, undefined, undefined);
    }
    companion._0x722FBE08EF5B87BD = _0x722FBE08EF5B87BD;
    /**
     * No comment provided
     *
     * Hash: 0x7274F84B1501B523 | Since: 1207
     */
    function _0x7274F84B1501B523() {
        Citizen.invokeNative('0x7274F84B1501B523', undefined);
    }
    companion._0x7274F84B1501B523 = _0x7274F84B1501B523;
    /**
     * No comment provided
     *
     * Hash: 0x8FB98B719AA0075A | Since: 1207
     */
    function _0x8FB98B719AA0075A() {
        Citizen.invokeNative('0x8FB98B719AA0075A', undefined, undefined, undefined, undefined, undefined);
    }
    companion._0x8FB98B719AA0075A = _0x8FB98B719AA0075A;
    /**
     * No comment provided
     *
     * Hash: 0x991E3346D788F20F | Since: 1207
     */
    function _0x991E3346D788F20F() {
        Citizen.invokeNative('0x991E3346D788F20F', undefined, undefined);
    }
    companion._0x991E3346D788F20F = _0x991E3346D788F20F;
    /**
     * No comment provided
     *
     * Hash: 0x9C902084F48D2E6C | Since: 1207
     */
    function _0x9C902084F48D2E6C() {
        Citizen.invokeNative('0x9C902084F48D2E6C', undefined);
    }
    companion._0x9C902084F48D2E6C = _0x9C902084F48D2E6C;
    /**
     * No comment provided
     *
     * Hash: 0xA079FF7CFB9AC8BD | Since: 1207
     */
    function _0xA079FF7CFB9AC8BD() {
        Citizen.invokeNative('0xA079FF7CFB9AC8BD', undefined, undefined);
    }
    companion._0xA079FF7CFB9AC8BD = _0xA079FF7CFB9AC8BD;
    /**
     * No comment provided
     *
     * Hash: 0xBF6583E926D13890 | Since: 1207
     */
    function _0xBF6583E926D13890() {
        Citizen.invokeNative('0xBF6583E926D13890', undefined, undefined);
    }
    companion._0xBF6583E926D13890 = _0xBF6583E926D13890;
    /**
     * No comment provided
     *
     * Hash: 0xCE27824B5968B79A | Since: 1207
     */
    function _0xCE27824B5968B79A() {
        Citizen.invokeNative('0xCE27824B5968B79A', undefined, undefined);
    }
    companion._0xCE27824B5968B79A = _0xCE27824B5968B79A;
    /**
     * No comment provided
     *
     * Hash: 0xD428C3F92FC3F6F8 | Since: 1207
     */
    function _0xD428C3F92FC3F6F8(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xD428C3F92FC3F6F8', _ped, undefined);
    }
    companion._0xD428C3F92FC3F6F8 = _0xD428C3F92FC3F6F8;
    /**
     * No comment provided
     *
     * Hash: 0xD55A871E1CE3481B | Since: 1207
     */
    function _0xD55A871E1CE3481B() {
        Citizen.invokeNative('0xD55A871E1CE3481B', undefined, undefined, undefined, undefined);
    }
    companion._0xD55A871E1CE3481B = _0xD55A871E1CE3481B;
    /**
     * No comment provided
     *
     * Hash: 0xD730281E496621FB | Since: 1207
     */
    function _0xD730281E496621FB(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xD730281E496621FB', _ped, p1);
    }
    companion._0xD730281E496621FB = _0xD730281E496621FB;
    /**
     * No comment provided
     *
     * Hash: 0xD747979C053EFA7A | Since: 1207
     */
    function _0xD747979C053EFA7A() {
        Citizen.invokeNative('0xD747979C053EFA7A', undefined);
    }
    companion._0xD747979C053EFA7A = _0xD747979C053EFA7A;
    /**
     * No comment provided
     *
     * Hash: 0xF06CBB8CCCA823C0 | Since: 1207
     */
    function _0xF06CBB8CCCA823C0() {
        Citizen.invokeNative('0xF06CBB8CCCA823C0', undefined, undefined);
    }
    companion._0xF06CBB8CCCA823C0 = _0xF06CBB8CCCA823C0;
    /**
     * No comment provided
     *
     * Hash: 0xCBD9EC60495C728C | Since: 1207
     */
    function activateAnalysis(groupId) {
        ActivateCompanionAnalysis(groupId);
    }
    companion.activateAnalysis = activateAnalysis;
    /**
     * Used for Script Function NET_FETCH_CLIENT_ACTIVATE_COMAPNION_ANALYSIS: Hiding! Ped
     *
     * Hash: 0xDEB369F6AD168C58 | Since: 1207
     */
    function addFlag(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddCompanionFlag(_ped, 0);
    }
    companion.addFlag = addFlag;
    /**
     * No comment provided
     *
     * Hash: 0x72B7F65F11FC8896 | Since: 1207
     */
    function deactivateAnalysis(groupId) {
        DeactivateCompanionAnalysis(groupId);
    }
    companion.deactivateAnalysis = deactivateAnalysis;
    /**
     * enum _0x18F77396
     *
     * Hash: 0xB7E0590C86E1711F | Since: 1207
     */
    function getActivity(groupId) {
        return GetCompanionActivity(groupId);
    }
    companion.getActivity = getActivity;
    /**
     * No comment provided
     *
     * Hash: 0x1740E3DEE0AE4D27 | Since: 1207
     */
    function removeFlag(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemoveCompanionFlag(_ped, 0);
    }
    companion.removeFlag = removeFlag;
    /**
     * enum _0x18F77396
     *
     * Hash: 0x0F1CD8CA9E65D5F6 | Since: 1207
     */
    function setActivity(groupId, activity) {
        if (typeof activity === 'string')
            activity = misc.getHashKey(activity);
        SetCompanionActivity(groupId, activity);
    }
    companion.setActivity = setActivity;
})(companion || (companion = {}));
export var compapp;
(function (compapp) {
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x29C733459A9011EB | Since: 1207
     */
    function _0x29C733459A9011EB(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        Citizen.invokeNative('0x29C733459A9011EB', p0, undefined);
    }
    compapp._0x29C733459A9011EB = _0x29C733459A9011EB;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x74BCCEB233AD95B2 | Since: 1207
     */
    function _0x74BCCEB233AD95B2(p0, p1) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x74BCCEB233AD95B2', p0, p1);
    }
    compapp._0x74BCCEB233AD95B2 = _0x74BCCEB233AD95B2;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x7AF1BB4504EA5ED9 | Since: 1207
     */
    function _0x7AF1BB4504EA5ED9() {
        return Citizen.invokeNative('0x7AF1BB4504EA5ED9');
    }
    compapp._0x7AF1BB4504EA5ED9 = _0x7AF1BB4504EA5ED9;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xB6FD96420C0126A1 | Since: 1207
     */
    function _0xB6FD96420C0126A1(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        Citizen.invokeNative('0xB6FD96420C0126A1', p0, false);
    }
    compapp._0xB6FD96420C0126A1 = _0xB6FD96420C0126A1;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xCCB4635A071FB62D | Since: 1207
     */
    function _0xCCB4635A071FB62D() {
        Citizen.invokeNative('0xCCB4635A071FB62D');
    }
    compapp._0xCCB4635A071FB62D = _0xCCB4635A071FB62D;
})(compapp || (compapp = {}));
export var compendium;
(function (compendium) {
    /**
     * No comment provided
     *
     * Hash: 0x4E4ACAE1C671A9DA | Since: 1311
     */
    function animalGetSampleInventoryItem(compendiumEntry) {
        return CompendiumAnimalGetSampleInventoryItem(compendiumEntry);
    }
    compendium.animalGetSampleInventoryItem = animalGetSampleInventoryItem;
    /**
     * No comment provided
     *
     * Hash: 0x6FC24625E4FCAC27 | Since: 1311
     */
    function animalHasSample(compendiumEntry) {
        return CompendiumAnimalHasSample(compendiumEntry);
    }
    compendium.animalHasSample = animalHasSample;
    /**
     * No comment provided
     *
     * Hash: 0xBCF569FC32FFF456 | Since: 1311
     */
    function animalHasStamp(compendiumEntry) {
        return CompendiumAnimalHasStamp(compendiumEntry);
    }
    compendium.animalHasStamp = animalHasStamp;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F26A5E9E10 | Since: 1207
     */
    function animalObservedByStatName(animalType, disableCompendiumToast) {
        if (typeof animalType === 'string')
            animalType = misc.getHashKey(animalType);
        CompendiumAnimalObservedByStatName(animalType, disableCompendiumToast);
    }
    compendium.animalObservedByStatName = animalObservedByStatName;
    /**
     * No comment provided
     *
     * Hash: 0x67F35C7C9F2BDCFE | Since: 1311
     */
    function animalSetDiscovered(compendiumEntry) {
        CompendiumAnimalSetDiscovered(compendiumEntry);
    }
    compendium.animalSetDiscovered = animalSetDiscovered;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E00 | Since: 1207
     */
    function fishCaught(ped, category) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        CompendiumFishCaught(_ped, category);
    }
    compendium.fishCaught = fishCaught;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E81 | Since: 1207
     */
    function fishGetLureSuitabilityByStatItem(animalType, baitType) {
        if (typeof animalType === 'string')
            animalType = misc.getHashKey(animalType);
        if (typeof baitType === 'string')
            baitType = misc.getHashKey(baitType);
        return CompendiumFishGetLureSuitabilityByStatItem(animalType, baitType);
    }
    compendium.fishGetLureSuitabilityByStatItem = fishGetLureSuitabilityByStatItem;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E04 | Since: 1207
     */
    function gangAmbushSurvived() {
        CompendiumGangAmbushSurvived(undefined);
    }
    compendium.gangAmbushSurvived = gangAmbushSurvived;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E06 | Since: 1207
     */
    function gangBountyCaptured() {
        CompendiumGangBountyCaptured(undefined);
    }
    compendium.gangBountyCaptured = gangBountyCaptured;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E03 | Since: 1207
     */
    function gangCampFound() {
        CompendiumGangCampFound(undefined, undefined);
    }
    compendium.gangCampFound = gangCampFound;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E05 | Since: 1207
     */
    function gangEncountered() {
        CompendiumGangEncountered(undefined);
    }
    compendium.gangEncountered = gangEncountered;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E08 | Since: 1207
     */
    function gangHideoutFound() {
        CompendiumGangHideoutFound(undefined, undefined);
    }
    compendium.gangHideoutFound = gangHideoutFound;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E07 | Since: 1207
     */
    function gangMemberKilled() {
        CompendiumGangMemberKilled(undefined);
    }
    compendium.gangMemberKilled = gangMemberKilled;
    /**
     * No comment provided
     *
     * Hash: 0x5CEB63B2E3D9895F | Since: 1311
     */
    function getEntryByIndexInSubcategory(category, subcategory, count) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof subcategory === 'string')
            subcategory = misc.getHashKey(subcategory);
        return CompendiumGetEntryByIndexInSubcategory(category, subcategory, count);
    }
    compendium.getEntryByIndexInSubcategory = getEntryByIndexInSubcategory;
    /**
     * No comment provided
     *
     * Hash: 0x1CFA0219D8E1CF25 | Since: 1311
     */
    function getEntryByPedIndex(category, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return CompendiumGetEntryByPedIndex(category, _ped);
    }
    compendium.getEntryByPedIndex = getEntryByPedIndex;
    /**
     * No comment provided
     *
     * Hash: 0x66EC938394D76C85 | Since: 1355
     */
    function getEntryByStatItem(category, animalType) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof animalType === 'string')
            animalType = misc.getHashKey(animalType);
        return CompendiumGetEntryByStatItem(category, animalType);
    }
    compendium.getEntryByStatItem = getEntryByStatItem;
    /**
     * No comment provided
     *
     * Hash: 0x729D54121A5E9E20 | Since: 1207
     */
    function getMapDiscoverableFromStatItem(animalStatItem, pos) {
        if (typeof animalStatItem === 'string')
            animalStatItem = misc.getHashKey(animalStatItem);
        return CompendiumGetMapDiscoverableFromStatItem(animalStatItem, pos.x, pos.y, pos.z);
    }
    compendium.getMapDiscoverableFromStatItem = getMapDiscoverableFromStatItem;
    /**
     * No comment provided
     *
     * Hash: 0xF58A0C0E086E8E36 | Since: 1311
     */
    function getNumEntriesInSubcategory(category, subcategory) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof subcategory === 'string')
            subcategory = misc.getHashKey(subcategory);
        return CompendiumGetNumEntriesInSubcategory(category, subcategory);
    }
    compendium.getNumEntriesInSubcategory = getNumEntriesInSubcategory;
    /**
     * No comment provided
     *
     * Hash: 0x6C5E5D48E48B4C65 | Since: 1207
     */
    function getShortDescriptionFromPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CompendiumGetShortDescriptionFromPed(_ped);
    }
    compendium.getShortDescriptionFromPed = getShortDescriptionFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x9F678782720349E4 | Since: 1311
     */
    function getStudyAwardId(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CompendiumGetStudyAwardId(_ped);
    }
    compendium.getStudyAwardId = getStudyAwardId;
    /**
     * No comment provided
     *
     * Hash: 0x9B657550DF55EC96 | Since: 1311
     */
    function getSubcategoryPedIsIn(category, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return CompendiumGetSubcategoryPedIsIn(category, _ped);
    }
    compendium.getSubcategoryPedIsIn = getSubcategoryPedIsIn;
    /**
     * No comment provided
     *
     * Hash: 0x59D4D68CDB82427C | Since: 1311
     */
    function getSubcategorySampleToastDescComplete(category, subcategory) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof subcategory === 'string')
            subcategory = misc.getHashKey(subcategory);
        return CompendiumGetSubcategorySampleToastDescComplete(category, subcategory);
    }
    compendium.getSubcategorySampleToastDescComplete = getSubcategorySampleToastDescComplete;
    /**
     * No comment provided
     *
     * Hash: 0x82BFB5B367957699 | Since: 1311
     */
    function getSubcategorySampleToastDescProgress(category, subcategory) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof subcategory === 'string')
            subcategory = misc.getHashKey(subcategory);
        return CompendiumGetSubcategorySampleToastDescProgress(category, subcategory);
    }
    compendium.getSubcategorySampleToastDescProgress = getSubcategorySampleToastDescProgress;
    /**
     * No comment provided
     *
     * Hash: 0x5E50C67EB60951E6 | Since: 1311
     */
    function getSubcategorySampleToastTitle(category, subcategory) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof subcategory === 'string')
            subcategory = misc.getHashKey(subcategory);
        return CompendiumGetSubcategorySampleToastTitle(category, subcategory);
    }
    compendium.getSubcategorySampleToastTitle = getSubcategorySampleToastTitle;
    /**
     * No comment provided
     *
     * Hash: 0x2BF30D9D4D680112 | Since: 1311
     */
    function getSubcategoryToastAppId(category, subcategory) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof subcategory === 'string')
            subcategory = misc.getHashKey(subcategory);
        return CompendiumGetSubcategoryToastAppId(category, subcategory);
    }
    compendium.getSubcategoryToastAppId = getSubcategoryToastAppId;
    /**
     * herbType: https://alloc8or.re/rdr3/doc/enums/eHerbType.txt
     * Vector3: Player Location
     *
     * Hash: 0x725D52F21A5E9E09 | Since: 1207
     */
    function herbPicked(herbType, pos) {
        if (typeof herbType === 'string')
            herbType = misc.getHashKey(herbType);
        CompendiumHerbPicked(herbType, pos.x, pos.y, pos.z);
    }
    compendium.herbPicked = herbPicked;
    /**
     * No comment provided
     *
     * Hash: 0x725D52F21A5E9E50 | Since: 1207
     */
    function horseBonding(ped, bondingLevel) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        CompendiumHorseBonding(_ped, bondingLevel);
    }
    compendium.horseBonding = horseBonding;
    /**
     * Only gets called if bSetObserved is true and animalType is matching
     *
     * Hash: 0x725D58F2125E5E50 | Since: 1207
     */
    function horseObserved(ped, disableCompendiumToast) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        CompendiumHorseObserved(_ped, disableCompendiumToast);
    }
    compendium.horseObserved = horseObserved;
    /**
     * NET_PLAYER_HORSE_PROCESS_EVENT_HORSE_BREAKING
     *
     * Hash: 0x725852D21A2E9E50 | Since: 1207
     */
    function horseWildBroken(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        CompendiumHorseWildBroken(_ped);
    }
    compendium.horseWildBroken = horseWildBroken;
    /**
     * No comment provided
     *
     * Hash: 0x23B5E9C5160BC04F | Since: 1311
     */
    function wasAnimalObserved(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CompendiumWasAnimalObserved(_ped);
    }
    compendium.wasAnimalObserved = wasAnimalObserved;
    /**
     * Only used in R* SP Scripts, category = GANGS
     * _COMPENDIUM_GET_*
     *
     * Hash: 0x725D52F21A5E9E22 | Since: 1207
     */
    function _0x725D52F21A5E9E22(category) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return Citizen.invokeNative('0x725D52F21A5E9E22', category);
    }
    compendium._0x725D52F21A5E9E22 = _0x725D52F21A5E9E22;
    /**
     * Only used in R* SP Scripts, category = GANGS
     * _COMPENDIUM_GET_NUM_OF_ENTRIES_IN_*
     *
     * Hash: 0x729D52461AEA9E22 | Since: 1207
     */
    function _0x729D52461AEA9E22(category) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return Citizen.invokeNative('0x729D52461AEA9E22', category);
    }
    compendium._0x729D52461AEA9E22 = _0x729D52461AEA9E22;
    /**
     * No comment provided
     *
     * Hash: 0x729D52F61A5A9E22 | Since: 1207
     */
    function getNumOfEntriesInCategory(category) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return CompendiumGetNumOfEntriesInCategory(category);
    }
    compendium.getNumOfEntriesInCategory = getNumOfEntriesInCategory;
    /**
     * No comment provided
     *
     * Hash: 0xCD278B6BFBDBDC22 | Since: 1355
     */
    function getSubcategoryHashFromAnimalType(category, animalType) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof animalType === 'string')
            animalType = misc.getHashKey(animalType);
        return CompendiumGetSubcategoryHashFromAnimalType(category, animalType);
    }
    compendium.getSubcategoryHashFromAnimalType = getSubcategoryHashFromAnimalType;
})(compendium || (compendium = {}));
export var crashlog;
(function (crashlog) {
    /**
     * No comment provided
     *
     * Hash: 0x0FD3ECF9D0C8655F | Since: 1207
     */
    function _0x0FD3ECF9D0C8655F() {
        Citizen.invokeNative('0x0FD3ECF9D0C8655F', undefined);
    }
    crashlog._0x0FD3ECF9D0C8655F = _0x0FD3ECF9D0C8655F;
    /**
     * No comment provided
     *
     * Hash: 0x23CCAB8F40B9CBEE | Since: 1207
     */
    function _0x23CCAB8F40B9CBEE(pos) {
        return Citizen.invokeNative('0x23CCAB8F40B9CBEE', pos.x, pos.y, pos.z);
    }
    crashlog._0x23CCAB8F40B9CBEE = _0x23CCAB8F40B9CBEE;
    /**
     * No comment provided
     *
     * Hash: 0x33C1D63E55FA4284 | Since: 1207
     */
    function _0x33C1D63E55FA4284() {
        return Citizen.invokeNative('0x33C1D63E55FA4284', undefined);
    }
    crashlog._0x33C1D63E55FA4284 = _0x33C1D63E55FA4284;
    /**
     * No comment provided
     *
     * Hash: 0x3A66F1963B223F61 | Since: 1207
     */
    function _0x3A66F1963B223F61() {
        return Citizen.invokeNative('0x3A66F1963B223F61', undefined);
    }
    crashlog._0x3A66F1963B223F61 = _0x3A66F1963B223F61;
    /**
     * No comment provided
     *
     * Hash: 0x4E42CA5BCD45444A | Since: 1207
     */
    function _0x4E42CA5BCD45444A() {
        Citizen.invokeNative('0x4E42CA5BCD45444A');
    }
    crashlog._0x4E42CA5BCD45444A = _0x4E42CA5BCD45444A;
    /**
     * No comment provided
     *
     * Hash: 0x7C680FF55617F82F | Since: 1207
     */
    function _0x7C680FF55617F82F() {
        return Citizen.invokeNative('0x7C680FF55617F82F');
    }
    crashlog._0x7C680FF55617F82F = _0x7C680FF55617F82F;
    /**
     * No comment provided
     *
     * Hash: 0x87F005C969EF1563 | Since: 1207
     */
    function _0x87F005C969EF1563() {
        return Citizen.invokeNative('0x87F005C969EF1563', 0);
    }
    crashlog._0x87F005C969EF1563 = _0x87F005C969EF1563;
    /**
     * No comment provided
     *
     * Hash: 0xA67F0B039D9CD513 | Since: 1207
     */
    function _0xA67F0B039D9CD513() {
        return Citizen.invokeNative('0xA67F0B039D9CD513', false);
    }
    crashlog._0xA67F0B039D9CD513 = _0xA67F0B039D9CD513;
    /**
     * No comment provided
     *
     * Hash: 0xCA0BAC376C541978 | Since: 1207
     */
    function _0xCA0BAC376C541978() {
        Citizen.invokeNative('0xCA0BAC376C541978', undefined);
    }
    crashlog._0xCA0BAC376C541978 = _0xCA0BAC376C541978;
    /**
     * No comment provided
     *
     * Hash: 0xD8E3D22AA4F0E0A5 | Since: 1207
     */
    function _0xD8E3D22AA4F0E0A5() {
        return Citizen.invokeNative('0xD8E3D22AA4F0E0A5', undefined);
    }
    crashlog._0xD8E3D22AA4F0E0A5 = _0xD8E3D22AA4F0E0A5;
    /**
     * unused = true
     *
     * Hash: 0xDA05310EA94DC8C6 | Since: 1436
     */
    function _0xDA05310EA94DC8C6() {
        Citizen.invokeNative('0xDA05310EA94DC8C6', undefined, undefined);
    }
    crashlog._0xDA05310EA94DC8C6 = _0xDA05310EA94DC8C6;
    /**
     * No comment provided
     *
     * Hash: 0xE72E234B30DA7B7A | Since: 1207
     */
    function _0xE72E234B30DA7B7A() {
        return Citizen.invokeNative('0xE72E234B30DA7B7A', 0);
    }
    crashlog._0xE72E234B30DA7B7A = _0xE72E234B30DA7B7A;
    /**
     * No comment provided
     *
     * Hash: 0xF0D545C1EEAD614A | Since: 1207
     */
    function _0xF0D545C1EEAD614A() {
        return Citizen.invokeNative('0xF0D545C1EEAD614A');
    }
    crashlog._0xF0D545C1EEAD614A = _0xF0D545C1EEAD614A;
})(crashlog || (crashlog = {}));
export var crew;
(function (crew) {
    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC90BEF | Since: 1207
     */
    function networkClanGetLocalMembershipsCount() {
        return NetworkClanGetLocalMembershipsCount();
    }
    crew.networkClanGetLocalMembershipsCount = networkClanGetLocalMembershipsCount;
    /**
     * No comment provided
     *
     * Hash: 0x48DE78AF2C8885B8 | Since: 1207
     */
    function networkClanGetMembershipDesc() {
        return NetworkClanGetMembershipDesc(0);
    }
    crew.networkClanGetMembershipDesc = networkClanGetMembershipDesc;
    /**
     * No comment provided
     *
     * Hash: 0xA134777FF7F33331 | Since: 1207
     */
    function networkClanIsEmblemReady() {
        return NetworkClanIsEmblemReady(undefined);
    }
    crew.networkClanIsEmblemReady = networkClanIsEmblemReady;
    /**
     * No comment provided
     *
     * Hash: 0xEEE6EACBE8874FBA | Since: 1207
     */
    function networkClanPlayerGetDesc(bufferSize) {
        return NetworkClanPlayerGetDesc(bufferSize);
    }
    crew.networkClanPlayerGetDesc = networkClanPlayerGetDesc;
    /**
     * No comment provided
     *
     * Hash: 0xB124B57F571D8F18 | Since: 1207
     */
    function networkClanPlayerIsActive() {
        return NetworkClanPlayerIsActive();
    }
    crew.networkClanPlayerIsActive = networkClanPlayerIsActive;
    /**
     * No comment provided
     *
     * Hash: 0x113E6E3E50E286B0 | Since: 1207
     */
    function networkClanReleaseEmblem() {
        NetworkClanReleaseEmblem(undefined);
    }
    crew.networkClanReleaseEmblem = networkClanReleaseEmblem;
    /**
     * No comment provided
     *
     * Hash: 0x13518FF1C6B28938 | Since: 1207
     */
    function networkClanRequestEmblem() {
        return NetworkClanRequestEmblem(undefined);
    }
    crew.networkClanRequestEmblem = networkClanRequestEmblem;
    /**
     * No comment provided
     *
     * Hash: 0x579CCED0265D4896 | Since: 1207
     */
    function networkClanServiceIsValid() {
        return NetworkClanServiceIsValid();
    }
    crew.networkClanServiceIsValid = networkClanServiceIsValid;
    /**
     * No comment provided
     *
     * Hash: 0xE532D6811B3A4D2A | Since: 1207
     */
    function networkFindGamersIn(crewId) {
        return NetworkFindGamersInCrew(crewId);
    }
    crew.networkFindGamersIn = networkFindGamersIn;
    /**
     * No comment provided
     *
     * Hash: 0x9AA46BADAD0E27ED | Since: 1207
     */
    function networkGetPrimaryClanDataClear() {
        return NetworkGetPrimaryClanDataClear();
    }
    crew.networkGetPrimaryClanDataClear = networkGetPrimaryClanDataClear;
    /**
     * No comment provided
     *
     * Hash: 0xC080FF658B2E41DA | Since: 1207
     */
    function networkGetPrimaryClanDataNew() {
        return NetworkGetPrimaryClanDataNew();
    }
    crew.networkGetPrimaryClanDataNew = networkGetPrimaryClanDataNew;
    /**
     * No comment provided
     *
     * Hash: 0xB5074DB804E28CE7 | Since: 1207
     */
    function networkGetPrimaryClanDataPending() {
        return NetworkGetPrimaryClanDataPending();
    }
    crew.networkGetPrimaryClanDataPending = networkGetPrimaryClanDataPending;
    /**
     * No comment provided
     *
     * Hash: 0xCE86D8191B762107 | Since: 1207
     */
    function networkGetPrimaryClanDataStart() {
        return NetworkGetPrimaryClanDataStart(undefined);
    }
    crew.networkGetPrimaryClanDataStart = networkGetPrimaryClanDataStart;
    /**
     * No comment provided
     *
     * Hash: 0x5B4F04F19376A0BA | Since: 1207
     */
    function networkGetPrimaryClanDataSuccess() {
        return NetworkGetPrimaryClanDataSuccess();
    }
    crew.networkGetPrimaryClanDataSuccess = networkGetPrimaryClanDataSuccess;
    /**
     * No comment provided
     *
     * Hash: 0x58D378AF2C8765B7 | Since: 1207
     */
    function _0x58D378AF2C8765B7() {
        return Citizen.invokeNative('0x58D378AF2C8765B7', undefined);
    }
    crew._0x58D378AF2C8765B7 = _0x58D378AF2C8765B7;
    /**
     * No comment provided
     *
     * Hash: 0x8E2143144B8E188D | Since: 1207
     */
    function networkAcceptClanInvite(crewInviteIndex) {
        return NetworkAcceptClanInvite(crewInviteIndex);
    }
    crew.networkAcceptClanInvite = networkAcceptClanInvite;
    /**
     * No comment provided
     *
     * Hash: 0xC685B014CE3D988B | Since: 1207
     */
    function networkClanInvitePlayer() {
        return NetworkClanInvitePlayer(undefined);
    }
    crew.networkClanInvitePlayer = networkClanInvitePlayer;
    /**
     * No comment provided
     *
     * Hash: 0xC080FF658B2E51DA | Since: 1207
     */
    function networkClanSetActive() {
        return NetworkClanSetActive(undefined);
    }
    crew.networkClanSetActive = networkClanSetActive;
})(crew || (crew = {}));
export var databinding;
(function (databinding) {
    /**
     * No comment provided
     *
     * Hash: 0x1E7130793AAAAB8D | Since: 1207
     */
    function isEntryValid(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        return DatabindingIsEntryValid(entryId);
    }
    databinding.isEntryValid = isEntryValid;
    /**
     * No comment provided
     *
     * Hash: 0x570784D782597512 | Since: 1207
     */
    function readInt() {
        return DatabindingReadInt(undefined);
    }
    databinding.readInt = readInt;
    /**
     * No comment provided
     *
     * Hash: 0x4FF713B2F17A391E | Since: 1207
     */
    function writeStringFromParent() {
        DatabindingWriteStringFromParent(undefined, undefined, undefined);
    }
    databinding.writeStringFromParent = writeStringFromParent;
    /**
     * No comment provided
     *
     * Hash: 0x02B21B6BEEDD83CC | Since: 1207
     */
    function _0x02B21B6BEEDD83CC(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        return Citizen.invokeNative('0x02B21B6BEEDD83CC', entryId, 0);
    }
    databinding._0x02B21B6BEEDD83CC = _0x02B21B6BEEDD83CC;
    /**
     * _DATABINDING_WRITE_DATA_*
     *
     * Hash: 0x05AC9E1E02975AFB | Since: 1207
     */
    function _0x05AC9E1E02975AFB() {
        Citizen.invokeNative('0x05AC9E1E02975AFB', undefined, undefined, 0);
    }
    databinding._0x05AC9E1E02975AFB = _0x05AC9E1E02975AFB;
    /**
     * No comment provided
     *
     * Hash: 0x1919D59E60FD516E | Since: 1207
     */
    function _0x1919D59E60FD516E() {
        Citizen.invokeNative('0x1919D59E60FD516E', undefined, 0, 0);
    }
    databinding._0x1919D59E60FD516E = _0x1919D59E60FD516E;
    /**
     * No comment provided
     *
     * Hash: 0x294AF5323F44B053 | Since: 1207
     */
    function _0x294AF5323F44B053() {
        return Citizen.invokeNative('0x294AF5323F44B053', undefined, undefined, undefined);
    }
    databinding._0x294AF5323F44B053 = _0x294AF5323F44B053;
    /**
     * No comment provided
     *
     * Hash: 0x3BF0767CF33FCC88 | Since: 1207
     */
    function _0x3BF0767CF33FCC88(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        Citizen.invokeNative('0x3BF0767CF33FCC88', entryId);
    }
    databinding._0x3BF0767CF33FCC88 = _0x3BF0767CF33FCC88;
    /**
     * No comment provided
     *
     * Hash: 0x422179C7F6AD9304 | Since: 1207
     */
    function _0x422179C7F6AD9304() {
        return Citizen.invokeNative('0x422179C7F6AD9304', undefined);
    }
    databinding._0x422179C7F6AD9304 = _0x422179C7F6AD9304;
    /**
     * No comment provided
     *
     * Hash: 0x6318FB3BE37E11B3 | Since: 1207
     */
    function _0x6318FB3BE37E11B3(entryId, index) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        Citizen.invokeNative('0x6318FB3BE37E11B3', entryId, index);
    }
    databinding._0x6318FB3BE37E11B3 = _0x6318FB3BE37E11B3;
    /**
     * No comment provided
     *
     * Hash: 0x6329C34BEE5BFF4B | Since: 1207
     */
    function _0x6329C34BEE5BFF4B(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0x6329C34BEE5BFF4B', undefined, p1);
    }
    databinding._0x6329C34BEE5BFF4B = _0x6329C34BEE5BFF4B;
    /**
     * No comment provided
     *
     * Hash: 0x7FC60C94C83C5CD7 | Since: 1207
     */
    function _0x7FC60C94C83C5CD7(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x7FC60C94C83C5CD7', undefined, p1, 0);
    }
    databinding._0x7FC60C94C83C5CD7 = _0x7FC60C94C83C5CD7;
    /**
     * No comment provided
     *
     * Hash: 0xB138CA787F3DD858 | Since: 1207
     */
    function _0xB138CA787F3DD858() {
        Citizen.invokeNative('0xB138CA787F3DD858', undefined, undefined, undefined);
    }
    databinding._0xB138CA787F3DD858 = _0xB138CA787F3DD858;
    /**
     * _DATABINDING_WRITE_DATA_*
     *
     * Hash: 0xBFC83DA249BEFCC9 | Since: 1207
     */
    function _0xBFC83DA249BEFCC9(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xBFC83DA249BEFCC9', undefined, p1, undefined);
    }
    databinding._0xBFC83DA249BEFCC9 = _0xBFC83DA249BEFCC9;
    /**
     * No comment provided
     *
     * Hash: 0xC900CEC8A172375B | Since: 1207
     */
    function _0xC900CEC8A172375B() {
        Citizen.invokeNative('0xC900CEC8A172375B', undefined, undefined, 0);
    }
    databinding._0xC900CEC8A172375B = _0xC900CEC8A172375B;
    /**
     * No comment provided
     *
     * Hash: 0xD48993A61938C64D | Since: 1207
     */
    function _0xD48993A61938C64D() {
        return Citizen.invokeNative('0xD48993A61938C64D', undefined, undefined);
    }
    databinding._0xD48993A61938C64D = _0xD48993A61938C64D;
    /**
     * p0 seems to always be empty string, p1 is the hash of the path
     *
     * Hash: 0xD7DB94AB78E8EBE4 | Since: 1207
     */
    function addDataContainerFromPathByHash(path) {
        if (typeof path === 'string')
            path = misc.getHashKey(path);
        return Citizen.invokeNative('0xD7DB94AB78E8EBE4', undefined, path);
    }
    databinding.addDataContainerFromPathByHash = addDataContainerFromPathByHash;
    /**
     * No comment provided
     *
     * Hash: 0xE6AAB897120492D6 | Since: 1207
     */
    function _0xE6AAB897120492D6() {
        return Citizen.invokeNative('0xE6AAB897120492D6', undefined, undefined);
    }
    databinding._0xE6AAB897120492D6 = _0xE6AAB897120492D6;
    /**
     * No comment provided
     *
     * Hash: 0xE6AAB897120492D7 | Since: 1207
     */
    function _0xE6AAB897120492D7() {
        Citizen.invokeNative('0xE6AAB897120492D7', undefined, undefined, undefined);
    }
    databinding._0xE6AAB897120492D7 = _0xE6AAB897120492D7;
    /**
     * No comment provided
     *
     * Hash: 0xF47E33F8D2523825 | Since: 1207
     */
    function _0xF47E33F8D2523825() {
        return Citizen.invokeNative('0xF47E33F8D2523825', undefined, 0);
    }
    databinding._0xF47E33F8D2523825 = _0xF47E33F8D2523825;
    /**
     * No comment provided
     *
     * Hash: 0x58BAA5F635DA2FF4 | Since: 1207
     */
    function addDataBool() {
        return DatabindingAddDataBool(undefined, undefined, false);
    }
    databinding.addDataBool = addDataBool;
    /**
     * No comment provided
     *
     * Hash: 0xBC95D3AE2ECA70D6 | Since: 1207
     */
    function addDataBoolByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return DatabindingAddDataBoolByHash(undefined, p1, false);
    }
    databinding.addDataBoolByHash = addDataBoolByHash;
    /**
     * No comment provided
     *
     * Hash: 0x37BB86A751148A6A | Since: 1207
     */
    function addDataBoolFromPath() {
        return DatabindingAddDataBoolFromPath(undefined, undefined, false);
    }
    databinding.addDataBoolFromPath = addDataBoolFromPath;
    /**
     * Returns entryId Hash
     *
     * Hash: 0xEB4F9A3537EEABCD | Since: 1207
     */
    function addDataContainer(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        return DatabindingAddDataContainer(entryId, undefined);
    }
    databinding.addDataContainer = addDataContainer;
    /**
     * No comment provided
     *
     * Hash: 0x98BB14345BB68257 | Since: 1207
     */
    function addDataContainerByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return DatabindingAddDataContainerByHash(undefined, p1);
    }
    databinding.addDataContainerByHash = addDataContainerByHash;
    /**
     * No comment provided
     *
     * Hash: 0x0C827D175F1292F4 | Since: 1207
     */
    function addDataContainerFromPath() {
        return DatabindingAddDataContainerFromPath(undefined, undefined);
    }
    databinding.addDataContainerFromPath = addDataContainerFromPath;
    /**
     * No comment provided
     *
     * Hash: 0x5154228273ADB9A6 | Since: 1207
     */
    function addDataFloat() {
        return DatabindingAddDataFloat(undefined, undefined, 0);
    }
    databinding.addDataFloat = addDataFloat;
    /**
     * No comment provided
     *
     * Hash: 0x7D0F2014DB28DD00 | Since: 1207
     */
    function addDataGangId(gangId) {
        return DatabindingAddDataGangId(undefined, undefined, gangId);
    }
    databinding.addDataGangId = addDataGangId;
    /**
     * No comment provided
     *
     * Hash: 0x8538F1205D60ECA6 | Since: 1207
     */
    function addDataHash(p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return DatabindingAddDataHash(undefined, undefined, p2);
    }
    databinding.addDataHash = addDataHash;
    /**
     * No comment provided
     *
     * Hash: 0x8E173DFB041993C6 | Since: 1207
     */
    function addDataHashByHash(p1, p2) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return DatabindingAddDataHashByHash(undefined, p1, p2);
    }
    databinding.addDataHashByHash = addDataHashByHash;
    /**
     * No comment provided
     *
     * Hash: 0x307A3247C5457BDE | Since: 1207
     */
    function addDataInt(p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return DatabindingAddDataInt(undefined, undefined, p2);
    }
    databinding.addDataInt = addDataInt;
    /**
     * No comment provided
     *
     * Hash: 0x267F9527F4350ADE | Since: 1207
     */
    function addDataIntByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return DatabindingAddDataIntByHash(undefined, p1, 0);
    }
    databinding.addDataIntByHash = addDataIntByHash;
    /**
     * No comment provided
     *
     * Hash: 0x7D0F2014DB28DD01 | Since: 1207
     */
    function addDataPosseId(posseId) {
        return DatabindingAddDataPosseId(undefined, undefined, posseId);
    }
    databinding.addDataPosseId = addDataPosseId;
    /**
     * No comment provided
     *
     * Hash: 0x617FCA1C5652BBAD | Since: 1207
     */
    function addDataString() {
        return DatabindingAddDataString(undefined, undefined, undefined);
    }
    databinding.addDataString = addDataString;
    /**
     * No comment provided
     *
     * Hash: 0xEAD09E76E22630C3 | Since: 1207
     */
    function addDataStringByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return DatabindingAddDataStringByHash(undefined, p1, undefined);
    }
    databinding.addDataStringByHash = addDataStringByHash;
    /**
     * No comment provided
     *
     * Hash: 0xA381DE86EE170C4A | Since: 1207
     */
    function addDataStringFromPath() {
        return DatabindingAddDataStringFromPath(undefined, undefined, undefined);
    }
    databinding.addDataStringFromPath = addDataStringFromPath;
    /**
     * No comment provided
     *
     * Hash: 0x52F5F08278EA5D75 | Since: 1207
     */
    function addHashArray() {
        return DatabindingAddHashArray(undefined, undefined);
    }
    databinding.addHashArray = addHashArray;
    /**
     * No comment provided
     *
     * Hash: 0x1B23E0627BDBFE85 | Since: 1207
     */
    function addStringArray() {
        return DatabindingAddStringArray(undefined, undefined);
    }
    databinding.addStringArray = addStringArray;
    /**
     * No comment provided
     *
     * Hash: 0xFE74FA57E0CE6824 | Since: 1207
     */
    function addUiItemList() {
        return DatabindingAddUiItemList(undefined, undefined);
    }
    databinding.addUiItemList = addUiItemList;
    /**
     * No comment provided
     *
     * Hash: 0x3C7799283325181B | Since: 1207
     */
    function addUiItemListByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return DatabindingAddUiItemListByHash(undefined, p1);
    }
    databinding.addUiItemListByHash = addUiItemListByHash;
    /**
     * No comment provided
     *
     * Hash: 0xDB5B9A474148F699 | Since: 1207
     */
    function addUiItemListFromPath() {
        return DatabindingAddUiItemListFromPath(undefined, undefined);
    }
    databinding.addUiItemListFromPath = addUiItemListFromPath;
    /**
     * No comment provided
     *
     * Hash: 0xA1F15C1D03DF802D | Since: 1207
     */
    function clearBindingArray(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        DatabindingClearBindingArray(entryId);
    }
    databinding.clearBindingArray = clearBindingArray;
    /**
     * No comment provided
     *
     * Hash: 0xD23F5DE04FE717E2 | Since: 1207
     */
    function getArrayCount(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        return DatabindingGetArrayCount(entryId);
    }
    databinding.getArrayCount = getArrayCount;
    /**
     * No comment provided
     *
     * Hash: 0x0C827D175F1292F3 | Since: 1207
     */
    function getDataContainerFromChildIndex(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        return DatabindingGetDataContainerFromChildIndex(entryId, 0);
    }
    databinding.getDataContainerFromChildIndex = getDataContainerFromChildIndex;
    /**
     * No comment provided
     *
     * Hash: 0x0C827D175F1292F2 | Since: 1207
     */
    function getDataContainerFromPath() {
        return DatabindingGetDataContainerFromPath(undefined);
    }
    databinding.getDataContainerFromPath = getDataContainerFromPath;
    /**
     * No comment provided
     *
     * Hash: 0xE96D7F9FEFCC105F | Since: 1207
     */
    function getItemContextByIndex(index) {
        return DatabindingGetItemContextByIndex(undefined, index);
    }
    databinding.getItemContextByIndex = getItemContextByIndex;
    /**
     * No comment provided
     *
     * Hash: 0xEE97A05C05F16E41 | Since: 1207
     */
    function insertUiItemToListFromContextHashAlias(index, p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        DatabindingInsertUiItemToListFromContextHashAlias(undefined, index, p2, undefined);
    }
    databinding.insertUiItemToListFromContextHashAlias = insertUiItemToListFromContextHashAlias;
    /**
     * No comment provided
     *
     * Hash: 0x5859E970794D92F3 | Since: 1207
     */
    function insertUiItemToListFromContextStringAlias(index) {
        DatabindingInsertUiItemToListFromContextStringAlias(undefined, index, undefined, undefined);
    }
    databinding.insertUiItemToListFromContextStringAlias = insertUiItemToListFromContextStringAlias;
    /**
     * No comment provided
     *
     * Hash: 0x5740774F608E4FC8 | Since: 1207
     */
    function insertUiItemToListFromPathStringAlias() {
        DatabindingInsertUiItemToListFromPathStringAlias(undefined, undefined, undefined, undefined);
    }
    databinding.insertUiItemToListFromPathStringAlias = insertUiItemToListFromPathStringAlias;
    /**
     * No comment provided
     *
     * Hash: 0x5EEFBD4B6D7CD6EB | Since: 1207
     */
    function readDataBool() {
        return DatabindingReadDataBool(undefined);
    }
    databinding.readDataBool = readDataBool;
    /**
     * No comment provided
     *
     * Hash: 0xA8EDE09FE07BD77F | Since: 1207
     */
    function readDataBoolFromParent() {
        return DatabindingReadDataBoolFromParent(undefined, undefined);
    }
    databinding.readDataBoolFromParent = readDataBoolFromParent;
    /**
     * No comment provided
     *
     * Hash: 0x4CDC3FDDFAE07EB3 | Since: 1207
     */
    function readDataBoolFromParentByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return DatabindingReadDataBoolFromParentByHash(undefined, p1);
    }
    databinding.readDataBoolFromParentByHash = readDataBoolFromParentByHash;
    /**
     * No comment provided
     *
     * Hash: 0x9B535990B01B62DE | Since: 1207
     */
    function readDataHashStringFromParent() {
        return DatabindingReadDataHashStringFromParent(undefined, undefined);
    }
    databinding.readDataHashStringFromParent = readDataHashStringFromParent;
    /**
     * No comment provided
     *
     * Hash: 0x1F43BC25A119B252 | Since: 1207
     */
    function readDataHashStringFromParentByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return DatabindingReadDataHashStringFromParentByHash(undefined, p1);
    }
    databinding.readDataHashStringFromParentByHash = readDataHashStringFromParentByHash;
    /**
     * No comment provided
     *
     * Hash: 0xFFC566A4801F6B40 | Since: 1207
     */
    function readDataIntFromParent() {
        return DatabindingReadDataIntFromParent(undefined, undefined);
    }
    databinding.readDataIntFromParent = readDataIntFromParent;
    /**
     * No comment provided
     *
     * Hash: 0xB5F668B648EC0970 | Since: 1207
     */
    function readDataIntFromParentByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return DatabindingReadDataIntFromParentByHash(undefined, p1);
    }
    databinding.readDataIntFromParentByHash = readDataIntFromParentByHash;
    /**
     * No comment provided
     *
     * Hash: 0x3D290B5FFA7C5151 | Since: 1207
     */
    function readDataString() {
        return DatabindingReadDataString(undefined);
    }
    databinding.readDataString = readDataString;
    /**
     * No comment provided
     *
     * Hash: 0x6323AD277C4A2AFB | Since: 1207
     */
    function readDataStringFromParent() {
        return DatabindingReadDataStringFromParent(undefined, undefined);
    }
    databinding.readDataStringFromParent = readDataStringFromParent;
    /**
     * No comment provided
     *
     * Hash: 0x5FE444EB67C70AD4 | Since: 1207
     */
    function readFloat(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        return DatabindingReadFloat(entryId);
    }
    databinding.readFloat = readFloat;
    /**
     * No comment provided
     *
     * Hash: 0x81D7183E7A8ECA72 | Since: 1207
     */
    function readHash(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        return DatabindingReadHash(entryId);
    }
    databinding.readHash = readHash;
    /**
     * No comment provided
     *
     * Hash: 0xF68B1726EAF7B285 | Since: 1207
     */
    function removeBindingArrayItemByDataContextId(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        DatabindingRemoveBindingArrayItemByDataContextId(undefined, entryId);
    }
    databinding.removeBindingArrayItemByDataContextId = removeBindingArrayItemByDataContextId;
    /**
     * No comment provided
     *
     * Hash: 0x0AE9938D0541F2DA | Since: 1207
     */
    function removeDataEntry(entryId) {
        if (typeof entryId === 'string')
            entryId = misc.getHashKey(entryId);
        DatabindingRemoveDataEntry(entryId);
    }
    databinding.removeDataEntry = removeDataEntry;
    /**
     * No comment provided
     *
     * Hash: 0x0AE7138D0541F2DE | Since: 1207
     */
    function setTemplatedUiItemHashAlias(p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        DatabindingSetTemplatedUiItemHashAlias(undefined, 0, p2);
    }
    databinding.setTemplatedUiItemHashAlias = setTemplatedUiItemHashAlias;
    /**
     * No comment provided
     *
     * Hash: 0xFE74FA57E0CE6825 | Since: 1207
     */
    function setTemplatedUiItemListSize() {
        DatabindingSetTemplatedUiItemListSize(undefined, 0);
    }
    databinding.setTemplatedUiItemListSize = setTemplatedUiItemListSize;
    /**
     * No comment provided
     *
     * Hash: 0xAB888B4B91046770 | Since: 1207
     */
    function writeDataBool() {
        DatabindingWriteDataBool(undefined, false);
    }
    databinding.writeDataBool = writeDataBool;
    /**
     * No comment provided
     *
     * Hash: 0xBDFE546E4C2D0E21 | Since: 1207
     */
    function writeDataBoolFromParent() {
        DatabindingWriteDataBoolFromParent(undefined, undefined, false);
    }
    databinding.writeDataBoolFromParent = writeDataBoolFromParent;
    /**
     * No comment provided
     *
     * Hash: 0xDF504BECEB15DA93 | Since: 1207
     */
    function writeDataFloat() {
        DatabindingWriteDataFloat(undefined, 0);
    }
    databinding.writeDataFloat = writeDataFloat;
    /**
     * No comment provided
     *
     * Hash: 0xC70041408E16BE2D | Since: 1207
     */
    function writeDataGangId(gangId) {
        DatabindingWriteDataGangId(undefined, undefined, gangId);
    }
    databinding.writeDataGangId = writeDataGangId;
    /**
     * No comment provided
     *
     * Hash: 0xACDEF586BD71B1FD | Since: 1207
     */
    function writeDataHashString(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        DatabindingWriteDataHashString(undefined, p1);
    }
    databinding.writeDataHashString = writeDataHashString;
    /**
     * No comment provided
     *
     * Hash: 0x0971F04E1EAA7AE8 | Since: 1207
     */
    function writeDataHashStringFromParent(p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        DatabindingWriteDataHashStringFromParent(undefined, undefined, p2);
    }
    databinding.writeDataHashStringFromParent = writeDataHashStringFromParent;
    /**
     * No comment provided
     *
     * Hash: 0x20209529689E0953 | Since: 1207
     */
    function writeDataHashStringFromParentByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        DatabindingWriteDataHashStringFromParentByHash(undefined, p1, undefined);
    }
    databinding.writeDataHashStringFromParentByHash = writeDataHashStringFromParentByHash;
    /**
     * No comment provided
     *
     * Hash: 0x335C3F6B3766B8D9 | Since: 1207
     */
    function writeDataInt() {
        DatabindingWriteDataInt(undefined, 0);
    }
    databinding.writeDataInt = writeDataInt;
    /**
     * No comment provided
     *
     * Hash: 0x9EFA98238BA08FC4 | Since: 1207
     */
    function writeDataIntFromParent() {
        DatabindingWriteDataIntFromParent(undefined, undefined, 0);
    }
    databinding.writeDataIntFromParent = writeDataIntFromParent;
    /**
     * No comment provided
     *
     * Hash: 0x9D6E10A41D6ED6EC | Since: 1207
     */
    function writeDataIntFromParentByHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        DatabindingWriteDataIntFromParentByHash(undefined, p1, undefined);
    }
    databinding.writeDataIntFromParentByHash = writeDataIntFromParentByHash;
    /**
     * No comment provided
     *
     * Hash: 0xC70041408E16BE2E | Since: 1207
     */
    function writeDataPosseId(posseId) {
        DatabindingWriteDataPosseId(undefined, undefined, posseId);
    }
    databinding.writeDataPosseId = writeDataPosseId;
    /**
     * No comment provided
     *
     * Hash: 0xAB888B4B91046771 | Since: 1207
     */
    function writeDataScriptVariables(...params) {
        DatabindingWriteDataScriptVariables(0, 0, ...params);
    }
    databinding.writeDataScriptVariables = writeDataScriptVariables;
    /**
     * No comment provided
     *
     * Hash: 0xE1BD342F2872AEE9 | Since: 1207
     */
    function writeDataString() {
        DatabindingWriteDataString(undefined, undefined);
    }
    databinding.writeDataString = writeDataString;
    /**
     * No comment provided
     *
     * Hash: 0xA3BD6FF95E713EE5 | Since: 1207
     */
    function writeStringFromHash(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        DatabindingWriteStringFromHash(undefined, p1, undefined);
    }
    databinding.writeStringFromHash = writeStringFromHash;
    /**
     * No comment provided
     *
     * Hash: 0x37963B56755BFB35 | Since: 1207
     */
    function virtualCollectionExists() {
        return VirtualCollectionExists(undefined);
    }
    databinding.virtualCollectionExists = virtualCollectionExists;
    /**
     * No comment provided
     *
     * Hash: 0x6DCBF187221CF73D | Since: 1207
     */
    function virtualCollectionItemAdd(index, p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        VirtualCollectionItemAdd(undefined, index, p2, undefined);
    }
    databinding.virtualCollectionItemAdd = virtualCollectionItemAdd;
    /**
     * No comment provided
     *
     * Hash: 0x09D95666ED2B5F60 | Since: 1207
     */
    function virtualCollectionReset() {
        VirtualCollectionReset(undefined);
    }
    databinding.virtualCollectionReset = virtualCollectionReset;
    /**
     * No comment provided
     *
     * Hash: 0x49A8447533308BCF | Since: 1207
     */
    function virtualCollectionSetInterestIndex(interestIndex) {
        VirtualCollectionSetInterestIndex(undefined, interestIndex);
    }
    databinding.virtualCollectionSetInterestIndex = virtualCollectionSetInterestIndex;
    /**
     * No comment provided
     *
     * Hash: 0x9DCE9B01A93B58BC | Since: 1207
     */
    function virtualCollectionSetSize(size) {
        VirtualCollectionSetSize(undefined, size);
    }
    databinding.virtualCollectionSetSize = virtualCollectionSetSize;
})(databinding || (databinding = {}));
export var datafile;
(function (datafile) {
    /**
     * No comment provided
     *
     * Hash: 0xAB1231D2DE52F2D3 | Since: 1207
     */
    function dataarrayGetBool(arrayIndex) {
        return DataarrayGetBool(arrayIndex);
    }
    datafile.dataarrayGetBool = dataarrayGetBool;
    /**
     * No comment provided
     *
     * Hash: 0x6A885BF69239E539 | Since: 1207
     */
    function dataarrayGetCount() {
        return DataarrayGetCount();
    }
    datafile.dataarrayGetCount = dataarrayGetCount;
    /**
     * No comment provided
     *
     * Hash: 0xA010655985853485 | Since: 1207
     */
    function dataarrayGetDict(arrayIndex) {
        return DataarrayGetDict(arrayIndex);
    }
    datafile.dataarrayGetDict = dataarrayGetDict;
    /**
     * No comment provided
     *
     * Hash: 0xA9D003CF419CB81E | Since: 1207
     */
    function dataarrayGetFloat(arrayIndex) {
        return DataarrayGetFloat(arrayIndex);
    }
    datafile.dataarrayGetFloat = dataarrayGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x96DEA500B6EBBE53 | Since: 1207
     */
    function dataarrayGetInt(arrayIndex) {
        return DataarrayGetInt(arrayIndex);
    }
    datafile.dataarrayGetInt = dataarrayGetInt;
    /**
     * No comment provided
     *
     * Hash: 0xB6790A8FF80F889F | Since: 1207
     */
    function dataarrayGetString(arrayIndex) {
        return DataarrayGetString(arrayIndex);
    }
    datafile.dataarrayGetString = dataarrayGetString;
    /**
     * Types:
     * 1 = Boolean
     * 2 = Integer
     * 3 = Float
     * 4 = String
     * 5 = Vector3
     * 6 = Object
     * 7 = Array
     *
     * Hash: 0x151DAFE6B3B9888F | Since: 1207
     */
    function dataarrayGetType(arrayIndex) {
        return DataarrayGetType(arrayIndex);
    }
    datafile.dataarrayGetType = dataarrayGetType;
    /**
     * No comment provided
     *
     * Hash: 0x850DA2750DA14E9A | Since: 1207
     */
    function dataarrayGetVector(arrayIndex) {
        return new Vector3(DataarrayGetVector(arrayIndex));
    }
    datafile.dataarrayGetVector = dataarrayGetVector;
    /**
     * No comment provided
     *
     * Hash: 0x1B5447CF18544B18 | Since: 1207
     */
    function datadictGetArray(key) {
        return DatadictGetArray(key);
    }
    datafile.datadictGetArray = datadictGetArray;
    /**
     * No comment provided
     *
     * Hash: 0x175E915A486EE548 | Since: 1207
     */
    function datadictGetBool(key) {
        return DatadictGetBool(key);
    }
    datafile.datadictGetBool = datadictGetBool;
    /**
     * No comment provided
     *
     * Hash: 0x4D7A30130F46AC9C | Since: 1207
     */
    function datadictGetDict(key) {
        return DatadictGetDict(key);
    }
    datafile.datadictGetDict = datadictGetDict;
    /**
     * No comment provided
     *
     * Hash: 0x814643ECA258ADF5 | Since: 1207
     */
    function datadictGetFloat(key) {
        return DatadictGetFloat(key);
    }
    datafile.datadictGetFloat = datadictGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x9D896A3B87D96E2B | Since: 1207
     */
    function datadictGetInt(key) {
        return DatadictGetInt(key);
    }
    datafile.datadictGetInt = datadictGetInt;
    /**
     * No comment provided
     *
     * Hash: 0xE37B38C0B4E95DFA | Since: 1207
     */
    function datadictGetString(key) {
        return DatadictGetString(key);
    }
    datafile.datadictGetString = datadictGetString;
    /**
     * Types:
     * 1 = Boolean
     * 2 = Integer
     * 3 = Float
     * 4 = String
     * 5 = Vector3
     * 6 = Object
     * 7 = Array
     *
     * Hash: 0x92E11E3CA4C7CDF0 | Since: 1207
     */
    function datadictGetType(key) {
        return DatadictGetType(key);
    }
    datafile.datadictGetType = datadictGetType;
    /**
     * No comment provided
     *
     * Hash: 0xE459C941431E0FFA | Since: 1207
     */
    function datadictGetVector(key) {
        return new Vector3(DatadictGetVector(key));
    }
    datafile.datadictGetVector = datadictGetVector;
    /**
     * No comment provided
     *
     * Hash: 0xB04B69CF277D15C0 | Since: 1207
     */
    function datadictIsArrayValid() {
        return DatadictIsArrayValid();
    }
    datafile.datadictIsArrayValid = datadictIsArrayValid;
    /**
     * No comment provided
     *
     * Hash: 0x4607D57C5F7D332A | Since: 1207
     */
    function datadictIsDictValid() {
        return DatadictIsDictValid();
    }
    datafile.datadictIsDictValid = datadictIsDictValid;
    /**
     * No comment provided
     *
     * Hash: 0x26FDF5E99AA2F3E9 | Since: 1207
     */
    function datadictSetInt(key, value) {
        return DatadictSetInt(key, value);
    }
    datafile.datadictSetInt = datadictSetInt;
    /**
     * No comment provided
     *
     * Hash: 0x56B7291FB953DD51 | Since: 1207
     */
    function create(index) {
        DatafileCreate(index);
    }
    datafile.create = create;
    /**
     * No comment provided
     *
     * Hash: 0x9FB90EEDEA9F2D5C | Since: 1207
     */
    function datafileDelete(index) {
        DatafileDelete(index);
    }
    datafile.datafileDelete = datafileDelete;
    /**
     * No comment provided
     *
     * Hash: 0x604B8ED1A482F9DF | Since: 1207
     */
    function deleteRequestedFile() {
        return DatafileDeleteRequestedFile(undefined);
    }
    datafile.deleteRequestedFile = deleteRequestedFile;
    /**
     * No comment provided
     *
     * Hash: 0xBBD8CF823CAE557C | Since: 1207
     */
    function getFileDict(index) {
        return DatafileGetFileDict(index);
    }
    datafile.getFileDict = getFileDict;
    /**
     * No comment provided
     *
     * Hash: 0x17279C820464CEE0 | Since: 1207
     */
    function hasLoadedFileData() {
        return DatafileHasLoadedFileData(undefined);
    }
    datafile.hasLoadedFileData = hasLoadedFileData;
    /**
     * No comment provided
     *
     * Hash: 0xE60100389E50EADE | Since: 1207
     */
    function hasValidFileData() {
        return DatafileHasValidFileData(undefined);
    }
    datafile.hasValidFileData = hasValidFileData;
    /**
     * No comment provided
     *
     * Hash: 0x46102A0989AD80B5 | Since: 1207
     */
    function selectActiveFile() {
        return DatafileSelectActiveFile(undefined, undefined);
    }
    datafile.selectActiveFile = selectActiveFile;
    /**
     * Reloops value returned by UGC_QUERY_GET_CONTENT_NUM
     *
     * Hash: 0x790EC421078F5C4E | Since: 1207
     */
    function ugcSelectData(ugcRequestId, index) {
        return DatafileUgcSelectData(ugcRequestId, index, undefined);
    }
    datafile.ugcSelectData = ugcSelectData;
    /**
     * Adds the given request ID to the watch list.
     *
     * Hash: 0xA5834834CA8FD7FC | Since: 1207
     */
    function watchRequestId(id) {
        DatafileWatchRequestId(id);
    }
    datafile.watchRequestId = watchRequestId;
    /**
     * No comment provided
     *
     * Hash: 0x603AC35FD4602C76 | Since: 1207
     */
    function parseddataIsFileLoaded(fileHandle) {
        return ParseddataIsFileLoaded(fileHandle);
    }
    datafile.parseddataIsFileLoaded = parseddataIsFileLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x7907969497EA92F5 | Since: 1207
     */
    function parseddataIsFileValid(fileHandle) {
        return ParseddataIsFileValid(fileHandle);
    }
    datafile.parseddataIsFileValid = parseddataIsFileValid;
    /**
     * Old name: _DATAFILE_GET_HASH
     *
     * Hash: 0xFBFF3FF2F5E80C0B | Since: 1207
     */
    function parseddataRqFilloutHash() {
        return ParseddataRqFilloutHash();
    }
    datafile.parseddataRqFilloutHash = parseddataRqFilloutHash;
    /**
     * Old name: _DATAFILE_GET_DATA_NODE_INDEX
     *
     * Hash: 0x83C3ED532B6E5D07 | Since: 1207
     */
    function parseddataRqFilloutNode() {
        return ParseddataRqFilloutNode();
    }
    datafile.parseddataRqFilloutNode = parseddataRqFilloutNode;
    /**
     * No comment provided
     *
     * Hash: 0x951327435DC5164B | Since: 1232
     */
    function parseddataRqFilloutString127() {
        return ParseddataRqFilloutString127();
    }
    datafile.parseddataRqFilloutString127 = parseddataRqFilloutString127;
    /**
     * No comment provided
     *
     * Hash: 0xE79C70E77E0973C7 | Since: 1207
     */
    function ugc2SetPlayerData() {
        return Ugc2SetPlayerData(undefined, undefined, undefined, undefined);
    }
    datafile.ugc2SetPlayerData = ugc2SetPlayerData;
    /**
     * No comment provided
     *
     * Hash: 0x1C65CC931C0F946F | Since: 1207
     */
    function _0x1C65CC931C0F946F() {
        Citizen.invokeNative('0x1C65CC931C0F946F', undefined, undefined, undefined);
    }
    datafile._0x1C65CC931C0F946F = _0x1C65CC931C0F946F;
    /**
     * No comment provided
     *
     * Hash: 0x277251C161B4C3F4 | Since: 1207
     */
    function _0x277251C161B4C3F4() {
        Citizen.invokeNative('0x277251C161B4C3F4', undefined, undefined, undefined);
    }
    datafile._0x277251C161B4C3F4 = _0x277251C161B4C3F4;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x3168BA5D6DECE323 | Since: 1207
     */
    function _0x3168BA5D6DECE323() {
        Citizen.invokeNative('0x3168BA5D6DECE323');
    }
    datafile._0x3168BA5D6DECE323 = _0x3168BA5D6DECE323;
    /**
     * No comment provided
     *
     * Hash: 0x4F9E3ED7617123AC | Since: 1207
     */
    function _0x4F9E3ED7617123AC() {
        return Citizen.invokeNative('0x4F9E3ED7617123AC', undefined);
    }
    datafile._0x4F9E3ED7617123AC = _0x4F9E3ED7617123AC;
    /**
     * No comment provided
     *
     * Hash: 0x7681B677400C7071 | Since: 1207
     */
    function _0x7681B677400C7071() {
        Citizen.invokeNative('0x7681B677400C7071', undefined, undefined, undefined, undefined, undefined);
    }
    datafile._0x7681B677400C7071 = _0x7681B677400C7071;
    /**
     * No comment provided
     *
     * Hash: 0x9F130129EBC31B34 | Since: 1207
     */
    function _0x9F130129EBC31B34() {
        Citizen.invokeNative('0x9F130129EBC31B34', undefined, undefined, undefined);
    }
    datafile._0x9F130129EBC31B34 = _0x9F130129EBC31B34;
    /**
     * No comment provided
     *
     * Hash: 0xBC0DF006A4952C68 | Since: 1207
     */
    function _0xBC0DF006A4952C68() {
        Citizen.invokeNative('0xBC0DF006A4952C68', undefined, undefined, undefined);
    }
    datafile._0xBC0DF006A4952C68 = _0xBC0DF006A4952C68;
    /**
     * No comment provided
     *
     * Hash: 0xCA56DD6AB7A39F64 | Since: 1207
     */
    function _0xCA56DD6AB7A39F64() {
        return Citizen.invokeNative('0xCA56DD6AB7A39F64', undefined);
    }
    datafile._0xCA56DD6AB7A39F64 = _0xCA56DD6AB7A39F64;
    /**
     * No comment provided
     *
     * Hash: 0xE13634BB6BAF0734 | Since: 1207
     */
    function _0xE13634BB6BAF0734() {
        return Citizen.invokeNative('0xE13634BB6BAF0734', 0, 0);
    }
    datafile._0xE13634BB6BAF0734 = _0xE13634BB6BAF0734;
    /**
     * No comment provided
     *
     * Hash: 0xA63CD20F19B961AB | Since: 1207
     */
    function parseddataGetBool(p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return ParseddataGetBool(p2);
    }
    datafile.parseddataGetBool = parseddataGetBool;
    /**
     * Returns false when there are no entries.
     *
     * Hash: 0xED4413CEE1BF142C | Since: 1207
     */
    function parseddataGetEntries() {
        return ParseddataGetEntries();
    }
    datafile.parseddataGetEntries = parseddataGetEntries;
    /**
     * Opens file.
     *
     * Hash: 0x91DED5DD64BB2691 | Since: 1207
     */
    function parseddataGetFile() {
        return ParseddataGetFile();
    }
    datafile.parseddataGetFile = parseddataGetFile;
    /**
     * No comment provided
     *
     * Hash: 0xB2B42607F7867576 | Since: 1207
     */
    function parseddataGetFloat(p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return ParseddataGetFloat(p2);
    }
    datafile.parseddataGetFloat = parseddataGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x52FC26D2D2FC2987 | Since: 1207
     */
    function parseddataGetInt(p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return ParseddataGetInt(p2);
    }
    datafile.parseddataGetInt = parseddataGetInt;
    /**
     * No comment provided
     *
     * Hash: 0x6BEB168D5195E7AB | Since: 1207
     */
    function parseddataGetNumChildren() {
        return ParseddataGetNumChildren(undefined, undefined);
    }
    datafile.parseddataGetNumChildren = parseddataGetNumChildren;
    /**
     * No comment provided
     *
     * Hash: 0x44B3A36933AC009C | Since: 1207
     */
    function parseddataGetSection(section) {
        if (typeof section === 'string')
            section = misc.getHashKey(section);
        return ParseddataGetSection(section);
    }
    datafile.parseddataGetSection = parseddataGetSection;
    /**
     * LOAD_PARSEDDATA_FILE_FAILSAFE_HASH
     * Returns parseddata script fileHandle
     *
     * Hash: 0xD97D8D905F1562F2 | Since: 1207
     */
    function parseddataLoadFileHash(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return ParseddataLoadFileHash(p0);
    }
    datafile.parseddataLoadFileHash = parseddataLoadFileHash;
    /**
     * No comment provided
     *
     * Hash: 0xAE156A747C39A741 | Since: 1207
     */
    function parseddataRegisterQuery() {
        return ParseddataRegisterQuery(undefined, undefined, undefined);
    }
    datafile.parseddataRegisterQuery = parseddataRegisterQuery;
    /**
     * Old name: _DATAFILE_GET_BOOL
     *
     * Hash: 0x0D9138F3F8261DF7 | Since: 1207
     */
    function parseddataRqFilloutBool() {
        return ParseddataRqFilloutBool();
    }
    datafile.parseddataRqFilloutBool = parseddataRqFilloutBool;
    /**
     * Old name: _DATAFILE_GET_FLOAT
     *
     * Hash: 0x7F034FC3E891B57A | Since: 1207
     */
    function parseddataRqFilloutFloat() {
        return ParseddataRqFilloutFloat();
    }
    datafile.parseddataRqFilloutFloat = parseddataRqFilloutFloat;
    /**
     * Old name: _DATAFILE_GET_INT
     *
     * Hash: 0xEF44ACC657352A35 | Since: 1207
     */
    function parseddataRqFilloutInt() {
        return ParseddataRqFilloutInt();
    }
    datafile.parseddataRqFilloutInt = parseddataRqFilloutInt;
    /**
     * Old name: _DATAFILE_GET_STRING
     *
     * Hash: 0x08EAF8E9F2EB7B2E | Since: 1207
     */
    function parseddataRqFilloutString63() {
        return ParseddataRqFilloutString63();
    }
    datafile.parseddataRqFilloutString63 = parseddataRqFilloutString63;
    /**
     * Old name: _DATAFILE_GET_VECTOR
     *
     * Hash: 0x06FBF89B12DA279C | Since: 1207
     */
    function parseddataRqFilloutVector() {
        return ParseddataRqFilloutVector();
    }
    datafile.parseddataRqFilloutVector = parseddataRqFilloutVector;
    /**
     * No comment provided
     *
     * Hash: 0xDF01B1F7A886B42D | Since: 1207
     */
    function parseddataRqGetNumNodes() {
        return ParseddataRqGetNumNodes(undefined);
    }
    datafile.parseddataRqGetNumNodes = parseddataRqGetNumNodes;
    /**
     * No comment provided
     *
     * Hash: 0x129567F0C05F81B9 | Since: 1207
     */
    function parseddataUnloadFile(fileHandle) {
        ParseddataUnloadFile(fileHandle);
    }
    datafile.parseddataUnloadFile = parseddataUnloadFile;
})(datafile || (datafile = {}));
export var debug;
(function (debug) {
    /**
     * Return example: 1207.69_dev_pc, 1436.28_dev_live_tu
     *
     * Old name: _GET_GAME_BUILD_STRING
     *
     * Hash: 0x05A5F662AD35C573 | Since: 1207
     */
    function getGameVersionName() {
        return GetGameVersionName();
    }
    debug.getGameVersionName = getGameVersionName;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xA8D970D8A72640A6 | Since: 1207
     */
    function _0xA8D970D8A72640A6() {
        return Citizen.invokeNative('0xA8D970D8A72640A6');
    }
    debug._0xA8D970D8A72640A6 = _0xA8D970D8A72640A6;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xACF9CB705BEFA8CB | Since: 1207
     */
    function _0xACF9CB705BEFA8CB() {
        return Citizen.invokeNative('0xACF9CB705BEFA8CB');
    }
    debug._0xACF9CB705BEFA8CB = _0xACF9CB705BEFA8CB;
})(debug || (debug = {}));
export var decorator;
(function (decorator) {
    /**
     * Returns whether or not the specified property is set for the entity.
     *
     * Hash: 0xD9D1CDBF3464DCDF | Since: 1207
     */
    function decorExistOn(entity, propertyName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorExistOn(_entity, propertyName);
    }
    decorator.decorExistOn = decorExistOn;
    /**
     * No comment provided
     *
     * Hash: 0xDEF3F1B071ABB197 | Since: 1207
     */
    function decorGetBool(entity, propertyName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorGetBool(_entity, propertyName);
    }
    decorator.decorGetBool = decorGetBool;
    /**
     * No comment provided
     *
     * Hash: 0xE5FF70CD842CA9D4 | Since: 1207
     */
    function decorGetFloat(entity, propertyName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorGetFloat(_entity, propertyName);
    }
    decorator.decorGetFloat = decorGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x44DB62727762FD9B | Since: 1207
     */
    function decorGetInt(entity, propertyName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorGetInt(_entity, propertyName);
    }
    decorator.decorGetInt = decorGetInt;
    /**
     * type: see DECOR_REGISTER
     *
     * Hash: 0x72355278C069F272 | Since: 1207
     */
    function decorIsRegisteredAsType(propertyName, _type) {
        return DecorIsRegisteredAsType(propertyName, _type);
    }
    decorator.decorIsRegisteredAsType = decorIsRegisteredAsType;
    /**
     * No comment provided
     *
     * Hash: 0x0B253D644E3C36B3 | Since: 1207
     */
    function decorRegister(propertyName, _type) {
        DecorRegister(propertyName, _type);
    }
    decorator.decorRegister = decorRegister;
    /**
     * No comment provided
     *
     * Hash: 0x2BA7F5877A088A1D | Since: 1207
     */
    function decorRemove(entity, propertyName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorRemove(_entity, propertyName);
    }
    decorator.decorRemove = decorRemove;
    /**
     * No comment provided
     *
     * Hash: 0x88942780E0ADEA42 | Since: 1207
     */
    function decorRemoveAll(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorRemoveAll(_entity);
    }
    decorator.decorRemoveAll = decorRemoveAll;
    /**
     * This function sets metadata of type bool to specified entity.
     *
     *
     * Hash: 0xFE26E4609B1C3772 | Since: 1207
     */
    function decorSetBool(entity, propertyName, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorSetBool(_entity, propertyName, value);
    }
    decorator.decorSetBool = decorSetBool;
    /**
     * No comment provided
     *
     * Hash: 0x238F8B0C1C7FE834 | Since: 1207
     */
    function decorSetFloat(entity, propertyName, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorSetFloat(_entity, propertyName, value);
    }
    decorator.decorSetFloat = decorSetFloat;
    /**
     * Sets property to int.
     *
     * Hash: 0xE88F4D7F52A6090F | Since: 1207
     */
    function decorSetInt(entity, propertyName, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorSetInt(_entity, propertyName, value);
    }
    decorator.decorSetInt = decorSetInt;
    /**
     * No comment provided
     *
     * Hash: 0x0671C1A3FF7AFDFC | Since: 1207
     */
    function decorSetString(entity, propertyName, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorSetString(_entity, propertyName, value);
    }
    decorator.decorSetString = decorSetString;
    /**
     * No comment provided
     *
     * Hash: 0xB1682B2443F0540B | Since: 1207
     */
    function decorGetUint8(entity, propertyName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorGetUint8(_entity, propertyName);
    }
    decorator.decorGetUint8 = decorGetUint8;
    /**
     * No comment provided
     *
     * Hash: 0x4587374F88B7F6C2 | Since: 1207
     */
    function decorRegister2(propertyName, _type) {
        DecorRegister2(propertyName, _type, false);
    }
    decorator.decorRegister2 = decorRegister2;
    /**
     * No comment provided
     *
     * Hash: 0x4BDC83150D43772D | Since: 1207
     */
    function decorSetUint8(entity, propertyName, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DecorSetUint8(_entity, propertyName, value);
    }
    decorator.decorSetUint8 = decorSetUint8;
})(decorator || (decorator = {}));
export var dlc;
(function (dlc) {
    /**
     * No comment provided
     *
     * Hash: 0x71D4BF5890659B0C | Since: 1207
     */
    function getIsLoadingScreenActive() {
        return GetIsLoadingScreenActive();
    }
    dlc.getIsLoadingScreenActive = getIsLoadingScreenActive;
    /**
     * No comment provided
     *
     * Hash: 0x2763DC12BBE2BB6F | Since: 1207
     */
    function isPresent(dlcHash) {
        if (typeof dlcHash === 'string')
            dlcHash = misc.getHashKey(dlcHash);
        return IsDlcPresent(dlcHash);
    }
    dlc.isPresent = isPresent;
    /**
     * No comment provided
     *
     * Hash: 0x1DB9D61E505AE3FC | Since: 1207
     */
    function getSpecialEditionCashCampBonusEnabled() {
        return GetSpecialEditionCashCampBonusEnabled();
    }
    dlc.getSpecialEditionCashCampBonusEnabled = getSpecialEditionCashCampBonusEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xA16B4FBA7887D7BA | Since: 1207
     */
    function getSpecialEditionCoreStatsBonusEnabled() {
        return GetSpecialEditionCoreStatsBonusEnabled();
    }
    dlc.getSpecialEditionCoreStatsBonusEnabled = getSpecialEditionCoreStatsBonusEnabled;
})(dlc || (dlc = {}));
export var entity;
(function (entity_1) {
    /**
     * No comment provided
     *
     * Hash: 0xF15E8F5D333F09C4 | Since: 1207
     */
    function applyForceTo(entity, forceFlags, pos, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        ApplyForceToEntity(_entity, forceFlags, pos.x, pos.y, pos.z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, false, false);
    }
    entity_1.applyForceTo = applyForceTo;
    /**
     * p6/relative - makes the xyz force not relative to world coords, but to something else
     * p7/highForce - setting false will make the force really low
     *
     * Hash: 0x31DA7CEC5334DB37 | Since: 1207
     */
    function applyForceToCenterOfMass(entity, forceType, pos, component, isDirectionRel, isForceRel) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        ApplyForceToEntityCenterOfMass(_entity, forceType, pos.x, pos.y, pos.z, component, isDirectionRel, isForceRel, false);
    }
    entity_1.applyForceToCenterOfMass = applyForceToCenterOfMass;
    /**
     * Attaches entity1 to bone (boneIndex) of entity2.
     *
     * boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
     * https://github.com/femga/rdr3_discoveries/tree/master/boneNames
     *
     * useSoftPinning - if set to false attached entity will not detach when fixed
     * collision - controls collision between the two entities (FALSE disables collision).
     * isPed - pitch doesn't work when false and roll will only work on negative numbers (only peds)
     * vertexIndex - position of vertex
     * fixedRot - if false it ignores entity vector
     *
     * Hash: 0x6B9BBD38AB0796DF | Since: 1207
     */
    function attachToEntity(entity1, entity2, boneIndex, pos, rot, useSoftPinning, collision, isPed, vertexIndex, fixedRot) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        AttachEntityToEntity(_entity1, _entity2, boneIndex, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, false, useSoftPinning, collision, isPed, vertexIndex, fixedRot, false, false);
    }
    entity_1.attachToEntity = attachToEntity;
    /**
     * No comment provided
     *
     * Hash: 0xB629A43CA1643481 | Since: 1207
     */
    function attachToEntityPhysically(entity1, entity2, boneIndex, offsetX, offsetY, offsetZ) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        AttachEntityToEntityPhysically(_entity1, _entity2, 0, boneIndex, offsetX, offsetY, offsetZ, 0, 0, 0, 0, 0, 0, 0, false, false, false, false, 0, false, 0, 0);
    }
    entity_1.attachToEntityPhysically = attachToEntityPhysically;
    /**
     * No comment provided
     *
     * Hash: 0xBB19AC7D4DCEFD0F | Since: 1207
     */
    function clearLastDamageEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        ClearEntityLastDamageEntity(_entity);
    }
    entity_1.clearLastDamageEntity = clearLastDamageEntity;
    /**
     * No comment provided
     *
     * Hash: 0x0961A905AFBC34C7 | Since: 1207
     */
    function createForcedObject(pos, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        CreateForcedObject(pos.x, pos.y, pos.z, undefined, modelHash, false);
    }
    entity_1.createForcedObject = createForcedObject;
    /**
     * No comment provided
     *
     * Hash: 0x069848B3FB3C4426 | Since: 1207
     */
    function createModelHide(pos, radius, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        CreateModelHide(pos.x, pos.y, pos.z, radius, model, false);
    }
    entity_1.createModelHide = createModelHide;
    /**
     * No comment provided
     *
     * Hash: 0xD136090A9AAAB17D | Since: 1207
     */
    function createModelHideExcludingScriptObjects(pos, radius, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        CreateModelHideExcludingScriptObjects(pos.x, pos.y, pos.z, radius, model, false);
    }
    entity_1.createModelHideExcludingScriptObjects = createModelHideExcludingScriptObjects;
    /**
     * Only works with objects!
     *
     * Hash: 0x10B2218320B6F5AC | Since: 1207
     */
    function createModelSwap(pos, radius, originalModel, newModel) {
        if (typeof originalModel === 'string')
            originalModel = misc.getHashKey(originalModel);
        if (typeof newModel === 'string')
            newModel = misc.getHashKey(newModel);
        CreateModelSwap(pos.x, pos.y, pos.z, radius, originalModel, newModel, false);
    }
    entity_1.createModelSwap = createModelSwap;
    /**
     * Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0x4CD38C78BD19A497 | Since: 1207
     */
    function deleteEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DeleteEntity(_entity);
    }
    entity_1.deleteEntity = deleteEntity;
    /**
     * No comment provided
     *
     * Hash: 0x64CDE9D6BF8ECAD3 | Since: 1207
     */
    function detach(entity, collision) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DetachEntity(_entity, false, collision);
    }
    entity_1.detach = detach;
    /**
     * No comment provided
     *
     * Hash: 0x622B1980CBE13332 | Since: 1207
     */
    function doesBelongToThisScript(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DoesEntityBelongToThisScript(_entity, false);
    }
    entity_1.doesBelongToThisScript = doesBelongToThisScript;
    /**
     * Checks if the Entity exists
     *
     * Hash: 0xD42BD6EB2E0F1677 | Since: 1207
     */
    function doesExist(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DoesEntityExist(_entity);
    }
    entity_1.doesExist = doesExist;
    /**
     * No comment provided
     *
     * Hash: 0x20487F0DA9AF164A | Since: 1207
     */
    function doesHaveDrawable(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DoesEntityHaveDrawable(_entity);
    }
    entity_1.doesHaveDrawable = doesHaveDrawable;
    /**
     * No comment provided
     *
     * Hash: 0xA512B3F1B2A0B51C | Since: 1207
     */
    function doesHavePhysics(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DoesEntityHavePhysics(_entity);
    }
    entity_1.doesHavePhysics = doesHavePhysics;
    /**
     * No comment provided
     *
     * Hash: 0x42718CC559BD7776 | Since: 1207
     */
    function findAnimEventPhase(animDictionary, animName) {
        return FindAnimEventPhase(animDictionary, animName, undefined);
    }
    entity_1.findAnimEventPhase = findAnimEventPhase;
    /**
     * No comment provided
     *
     * Hash: 0x4C9E96473D4F1A88 | Since: 1207
     */
    function forceAiAndAnimationUpdate(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        ForceEntityAiAndAnimationUpdate(_entity, false);
    }
    entity_1.forceAiAndAnimationUpdate = forceAiAndAnimationUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x7D9EFB7AD6B19754 | Since: 1207
     */
    function freezePosition(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        FreezeEntityPosition(_entity, toggle);
    }
    entity_1.freezePosition = freezePosition;
    /**
     * No comment provided
     *
     * Hash: 0x9FFAF4940A54CC09 | Since: 1207
     */
    function getAnimDuration(animDict, animName) {
        return GetAnimDuration(animDict, animName);
    }
    entity_1.getAnimDuration = getAnimDuration;
    /**
     * enum eCarriableState
     * {
     * CARRIABLE_STATE_NONE,
     * CARRIABLE_STATE_TRANSITIONING_TO_HOGTIED,
     * CARRIABLE_STATE_CARRIABLE_INTRO,
     * CARRIABLE_STATE_CARRIABLE,
     * CARRIABLE_STATE_BEING_PICKED_UP_FROM_GROUND,
     * CARRIABLE_STATE_CARRIED_BY_HUMAN,
     * CARRIABLE_STATE_BEING_PLACED_ON_GROUND,
     * CARRIABLE_STATE_CARRIED_BY_MOUNT,
     * CARRIABLE_STATE_BEING_PLACED_ON_MOUNT,
     * CARRIABLE_STATE_BEING_PICKED_UP_FROM_MOUNT,
     * CARRIABLE_STATE_BEING_CUT_FREE,
     * CARRIABLE_STATE_BEING_PLACED_ON_GROUND_ESCAPE,
     * CARRIABLE_STATE_BEING_PLACED_IN_VEHICLE
     * };
     *
     * Hash: 0x61914209C36EFDDB | Since: 1207
     */
    function getCarriableState(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetCarriableEntityState(_entity);
    }
    entity_1.getCarriableState = getCarriableState;
    /**
     * No comment provided
     *
     * Hash: 0x1BB501624FAF2BEA | Since: 1207
     */
    function getAlpha(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityAlpha(_entity);
    }
    entity_1.getAlpha = getAlpha;
    /**
     * No comment provided
     *
     * Hash: 0x56D713888A566481 | Since: 1207
     */
    function getAttachedTo(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityAttachedTo(_entity);
    }
    entity_1.getAttachedTo = getAttachedTo;
    /**
     * No comment provided
     *
     * Hash: 0xBACA8FE9C76C124E | Since: 1207
     */
    function getBoneIndexByName(entity, boneName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityBoneIndexByName(_entity, boneName);
    }
    entity_1.getBoneIndexByName = getBoneIndexByName;
    /**
     * No comment provided
     *
     * Hash: 0xAA2FADD30F45A9DA | Since: 1207
     */
    function getCollisionDisabled(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityCollisionDisabled(_entity);
    }
    entity_1.getCollisionDisabled = getCollisionDisabled;
    /**
     * Gets the current coordinates for a specified entity.
     * `entity` = The entity to get the coordinates from.
     * `alive` = Unused by the game, potentially used by debug builds in order to assert whether or not an entity was alive.
     *
     * If entity is a ped and it's in a vehicle or on a mount the coords of that entity are returned. Set 'realCoords' to true when you need the true ped coords.
     *
     * Hash: 0xA86D5F069399F44D | Since: 1207
     */
    function getCoords(entity, alive, realCoords) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetEntityCoords(_entity, alive, realCoords));
    }
    entity_1.getCoords = getCoords;
    /**
     * Gets the entity's forward vector in XY(Z) eulers.
     *
     * Hash: 0x2412D9C05BB09B97 | Since: 1207
     */
    function getForwardVector(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetEntityForwardVector(_entity));
    }
    entity_1.getForwardVector = getForwardVector;
    /**
     * Gets the X-component of the entity's forward vector.
     *
     * Hash: 0xDB0954E9960F6457 | Since: 1207
     */
    function getForwardX(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityForwardX(_entity);
    }
    entity_1.getForwardX = getForwardX;
    /**
     * Gets the Y-component of the entity's forward vector.
     *
     * Hash: 0x9A5C073ECBDA7EE7 | Since: 1207
     */
    function getForwardY(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityForwardY(_entity);
    }
    entity_1.getForwardY = getForwardY;
    /**
     * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
     *
     * Hash: 0xC230DD956E2F5507 | Since: 1207
     */
    function getHeading(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityHeading(_entity);
    }
    entity_1.getHeading = getHeading;
    /**
     * No comment provided
     *
     * Hash: 0x82368787EA73C0F7 | Since: 1207
     */
    function getHealth(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityHealth(_entity);
    }
    entity_1.getHealth = getHealth;
    /**
     * No comment provided
     *
     * Hash: 0x296DEBC84474B375 | Since: 1207
     */
    function getHeight(entity, pos, atTop, inWorldCoords) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityHeight(_entity, pos.x, pos.y, pos.z, atTop, inWorldCoords);
    }
    entity_1.getHeight = getHeight;
    /**
     * No comment provided
     *
     * Hash: 0x0D3B5BAEA08F63E9 | Since: 1207
     */
    function getHeightAboveGround(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityHeightAboveGround(_entity);
    }
    entity_1.getHeightAboveGround = getHeightAboveGround;
    /**
     * Returns the LOD distance of an entity.
     *
     * Hash: 0xDF240D0C2A948683 | Since: 1207
     */
    function getLodDist(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityLodDist(_entity);
    }
    entity_1.getLodDist = getLodDist;
    /**
     * No comment provided
     *
     * Hash: 0x3A9B1120AF13FBF2 | Since: 1207
     */
    function getMatrix(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityMatrix(_entity);
    }
    entity_1.getMatrix = getMatrix;
    /**
     * No comment provided
     *
     * Hash: 0x15D757606D170C3C | Since: 1207
     */
    function getMaxHealth(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityMaxHealth(_entity, false);
    }
    entity_1.getMaxHealth = getMaxHealth;
    /**
     * Returns the model hash from the entity
     *
     * Hash: 0xDA76A9F39210D365 | Since: 1207
     */
    function getModel(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityModel(_entity);
    }
    entity_1.getModel = getModel;
    /**
     * No comment provided
     *
     * Hash: 0xEF355ABEFF7F5005 | Since: 1207
     */
    function getPitch(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityPitch(_entity);
    }
    entity_1.getPitch = getPitch;
    /**
     * No comment provided
     *
     * Hash: 0xADE28862B6D7B85B | Since: 1207
     */
    function getPopulationType(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityPopulationType(_entity);
    }
    entity_1.getPopulationType = getPopulationType;
    /**
     * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
     * (Sideways Roll) such as a vehicle tipped on its side
     *
     * Hash: 0xBF966536FA8B6879 | Since: 1207
     */
    function getRoll(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityRoll(_entity);
    }
    entity_1.getRoll = getRoll;
    /**
     * No comment provided
     *
     * Hash: 0xE09CAF86C32CB48F | Since: 1207
     */
    function getRotation(entity, rotationOrder) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetEntityRotation(_entity, rotationOrder));
    }
    entity_1.getRotation = getRotation;
    /**
     * Result is in meters per second (m/s)
     *
     * Hash: 0xFB6BA510A533DF81 | Since: 1207
     */
    function getSpeed(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntitySpeed(_entity);
    }
    entity_1.getSpeed = getSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xF2DB09816A419DC5 | Since: 1207
     */
    function getSpeedVector(entity, relative) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetEntitySpeedVector(_entity, relative));
    }
    entity_1.getSpeedVector = getSpeedVector;
    /**
     * Get how much of the entity is submerged.  1.0f is whole entity.
     *
     * Hash: 0x4A77C3F73FD9E831 | Since: 1207
     */
    function getSubmergedLevel(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntitySubmergedLevel(_entity);
    }
    entity_1.getSubmergedLevel = getSubmergedLevel;
    /**
     * Returns entityType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityType
     *
     * Hash: 0x97F696ACA466B4E0 | Since: 1207
     */
    function getType(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityType(_entity);
    }
    entity_1.getType = getType;
    /**
     * No comment provided
     *
     * Hash: 0x56398BE65160C3BE | Since: 1207
     */
    function getUprightValue(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityUprightValue(_entity);
    }
    entity_1.getUprightValue = getUprightValue;
    /**
     * No comment provided
     *
     * Hash: 0x4805D2B1D8CF94A9 | Since: 1207
     */
    function getVelocity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetEntityVelocity(_entity, 0));
    }
    entity_1.getVelocity = getVelocity;
    /**
     * No comment provided
     *
     * Hash: 0x9A100F1CF4546629 | Since: 1207
     */
    function getIsAnimal(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetIsAnimal(_entity);
    }
    entity_1.getIsAnimal = getIsAnimal;
    /**
     * No comment provided
     *
     * Hash: 0x84CCF9A12942C83D | Since: 1207
     */
    function getMatchingEntities(volume, itemSet, entityType, p4) {
        if (typeof p4 === 'string')
            p4 = misc.getHashKey(p4);
        return GetMatchingEntities(volume, itemSet, entityType, undefined, p4, undefined);
    }
    entity_1.getMatchingEntities = getMatchingEntities;
    /**
     * No comment provided
     *
     * Hash: 0x6888A43C35A5F630 | Since: 1207
     */
    function getNearestParticipantTo(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetNearestParticipantToEntity(_entity);
    }
    entity_1.getNearestParticipantTo = getNearestParticipantTo;
    /**
     * No comment provided
     *
     * Hash: 0x990E294FC387FB88 | Since: 1207
     */
    function getNearestPlayerTo(entity, playerPedToIgnore, flags) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _playerPedToIgnore = playerPedToIgnore instanceof Ped ? playerPedToIgnore.handle() : playerPedToIgnore;
        return GetNearestPlayerToEntity(_entity, _playerPedToIgnore, flags);
    }
    entity_1.getNearestPlayerTo = getNearestPlayerTo;
    /**
     * No comment provided
     *
     * Hash: 0xB2C30C3B4AFF718C | Since: 1207
     */
    function getNearestPlayerToOnTeam(entity, team, playerPedToIgnore, flags) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _playerPedToIgnore = playerPedToIgnore instanceof Ped ? playerPedToIgnore.handle() : playerPedToIgnore;
        return GetNearestPlayerToEntityOnTeam(_entity, team, _playerPedToIgnore, flags);
    }
    entity_1.getNearestPlayerToOnTeam = getNearestPlayerToOnTeam;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x280BBE5601EAA983 | Since: 1207
     */
    function getObjectIndexFromIndex(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetObjectIndexFromEntityIndex(_entity);
    }
    entity_1.getObjectIndexFromIndex = getObjectIndexFromIndex;
    /**
     * No comment provided
     *
     * Hash: 0x497C6B1A2C9AE69C | Since: 1207
     */
    function getOffsetFromGivenWorldCoords(entity, pos) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetOffsetFromEntityGivenWorldCoords(_entity, pos.x, pos.y, pos.z));
    }
    entity_1.getOffsetFromGivenWorldCoords = getOffsetFromGivenWorldCoords;
    /**
     * Offset values are relative to the entity.
     *
     * x = left/right
     * y = forward/backward
     * z = up/down
     *
     * Hash: 0x1899F328B0E12848 | Since: 1207
     */
    function getOffsetFromInWorldCoords(entity, offsetX, offsetY, offsetZ) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetOffsetFromEntityInWorldCoords(_entity, offsetX, offsetY, offsetZ));
    }
    entity_1.getOffsetFromInWorldCoords = getOffsetFromInWorldCoords;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x0F16D042BD640EA3 | Since: 1207
     */
    function getPedIndexFromIndex(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetPedIndexFromEntityIndex(_entity);
    }
    entity_1.getPedIndexFromIndex = getPedIndexFromIndex;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0xDF1E5AAC561AFC59 | Since: 1207
     */
    function getVehicleIndexFromIndex(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetVehicleIndexFromEntityIndex(_entity);
    }
    entity_1.getVehicleIndexFromIndex = getVehicleIndexFromIndex;
    /**
     * Returns the coordinates of an entity-bone.
     * https://github.com/femga/rdr3_discoveries/tree/master/boneNames
     *
     * Hash: 0x82CFA50E34681CA5 | Since: 1207
     */
    function getWorldPositionOfBone(entity, boneIndex) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetWorldPositionOfEntityBone(_entity, boneIndex));
    }
    entity_1.getWorldPositionOfBone = getWorldPositionOfBone;
    /**
     * No comment provided
     *
     * Hash: 0x5851CC48405F4A07 | Since: 1207
     */
    function hasAnimEventFired(entity, actionHash) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof actionHash === 'string')
            actionHash = misc.getHashKey(actionHash);
        return HasAnimEventFired(_entity, actionHash);
    }
    entity_1.hasAnimEventFired = hasAnimEventFired;
    /**
     * No comment provided
     *
     * Hash: 0xBEB1600952B9CF5C | Since: 1207
     */
    function hasCollisionLoadedAround(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return HasCollisionLoadedAroundEntity(_entity);
    }
    entity_1.hasCollisionLoadedAround = hasCollisionLoadedAround;
    /**
     * Old name: _HAS_COLLISION_LOADED_AT_COORDS
     *
     * Hash: 0x6BFBDC46139C45AB | Since: 1207
     */
    function hasCollisionLoadedAroundPosition(pos) {
        return HasCollisionLoadedAroundPosition(pos.x, pos.y, pos.z);
    }
    entity_1.hasCollisionLoadedAroundPosition = hasCollisionLoadedAroundPosition;
    /**
     * No comment provided
     *
     * Hash: 0xAEB40615337EF1E3 | Since: 1207
     */
    function hasAnimFinished(entity, animDict, animName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return HasEntityAnimFinished(_entity, animDict, animName, 0);
    }
    entity_1.hasAnimFinished = hasAnimFinished;
    /**
     * No comment provided
     *
     * Hash: 0x73BB763880CD23A6 | Since: 1207
     */
    function hasBeenDamagedByAnyObject(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return HasEntityBeenDamagedByAnyObject(_entity);
    }
    entity_1.hasBeenDamagedByAnyObject = hasBeenDamagedByAnyObject;
    /**
     * No comment provided
     *
     * Hash: 0x9934E9C42D52D87E | Since: 1207
     */
    function hasBeenDamagedByAnyPed(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return HasEntityBeenDamagedByAnyPed(_entity);
    }
    entity_1.hasBeenDamagedByAnyPed = hasBeenDamagedByAnyPed;
    /**
     * No comment provided
     *
     * Hash: 0x695D7C26DE65C423 | Since: 1207
     */
    function hasBeenDamagedByAnyVehicle(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return HasEntityBeenDamagedByAnyVehicle(_entity);
    }
    entity_1.hasBeenDamagedByAnyVehicle = hasBeenDamagedByAnyVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x7B6E7BEC1143AC86 | Since: 1207
     */
    function hasBeenDamagedByEntity(entity1, entity2) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        return HasEntityBeenDamagedByEntity(_entity1, _entity2, false, false);
    }
    entity_1.hasBeenDamagedByEntity = hasBeenDamagedByEntity;
    /**
     * No comment provided
     *
     * Hash: 0x0C9DBF48C6BA6E4C | Since: 1207
     */
    function hasClearLosToCoord(entity, pos, flags) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return HasEntityClearLosToCoord(_entity, pos.x, pos.y, pos.z, flags);
    }
    entity_1.hasClearLosToCoord = hasClearLosToCoord;
    /**
     * No comment provided
     *
     * Hash: 0xFCDFF7B72D23A1AC | Since: 1207
     */
    function hasClearLosToEntity(entity1, entity2, traceType) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        return HasEntityClearLosToEntity(_entity1, _entity2, traceType);
    }
    entity_1.hasClearLosToEntity = hasClearLosToEntity;
    /**
     * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
     *
     * Hash: 0xE88F19660651D566 | Since: 1207
     */
    function hasClearLosToEntityInFront(entity1, entity2, traceType) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        return HasEntityClearLosToEntityInFront(_entity1, _entity2, traceType);
    }
    entity_1.hasClearLosToEntityInFront = hasClearLosToEntityInFront;
    /**
     * No comment provided
     *
     * Hash: 0xDF18751EC74F90FF | Since: 1207
     */
    function hasCollidedWithAnything(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return HasEntityCollidedWithAnything(_entity);
    }
    entity_1.hasCollidedWithAnything = hasCollidedWithAnything;
    /**
     * No comment provided
     *
     * Hash: 0x27CFF3E5A286D3DF | Since: 1207
     */
    function isAn(handle) {
        return IsAnEntity(handle);
    }
    entity_1.isAn = isAn;
    /**
     * No comment provided
     *
     * Hash: 0x0A27A546A375FDEF | Since: 1207
     */
    function isAnObject(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAnObject(_entity);
    }
    entity_1.isAnObject = isAnObject;
    /**
     * No comment provided
     *
     * Hash: 0xEE6AD63ABF59C0B7 | Since: 1207
     */
    function isAttached(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAttached(_entity);
    }
    entity_1.isAttached = isAttached;
    /**
     * No comment provided
     *
     * Hash: 0x306C1F6178F01AB3 | Since: 1207
     */
    function isAttachedToAnyObject(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAttachedToAnyObject(_entity);
    }
    entity_1.isAttachedToAnyObject = isAttachedToAnyObject;
    /**
     * No comment provided
     *
     * Hash: 0xC841153DED2CA89A | Since: 1207
     */
    function isAttachedToAnyPed(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAttachedToAnyPed(_entity);
    }
    entity_1.isAttachedToAnyPed = isAttachedToAnyPed;
    /**
     * No comment provided
     *
     * Hash: 0x12DF6E0D2E736749 | Since: 1207
     */
    function isAttachedToAnyVehicle(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAttachedToAnyVehicle(_entity);
    }
    entity_1.isAttachedToAnyVehicle = isAttachedToAnyVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x154A3C529497053E | Since: 1207
     */
    function isAttachedToEntity(_from, to) {
        const __from = _from instanceof Entity ? _from.handle() : _from;
        const _to = to instanceof Entity ? to.handle() : to;
        return IsEntityAttachedToEntity(__from, _to);
    }
    entity_1.isAttachedToEntity = isAttachedToEntity;
    /**
     * Checks if entity is within x/y/zSize distance of x/y/z.
     *
     * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
     *
     * Hash: 0x5E58342602E94718 | Since: 1207
     */
    function isAtCoord(entity, pos, xSize, ySize, zSize) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAtCoord(_entity, pos.x, pos.y, pos.z, xSize, ySize, zSize, false, false, 0);
    }
    entity_1.isAtCoord = isAtCoord;
    /**
     * Checks if entity1 is within the box defined by x/y/zSize of entity2.
     *
     * Last three parameters are almost always p5 = 0, p6 = 1, p7 = 0
     *
     * Hash: 0xC057F02B837A27F6 | Since: 1207
     */
    function isAtEntity(entity1, entity2, xSize, ySize, zSize) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        return IsEntityAtEntity(_entity1, _entity2, xSize, ySize, zSize, false, false, 0);
    }
    entity_1.isAtEntity = isAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x138190F64DB4BBD1 | Since: 1207
     */
    function isAMissionEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAMissionEntity(_entity);
    }
    entity_1.isAMissionEntity = isAMissionEntity;
    /**
     * No comment provided
     *
     * Hash: 0xCF8176912DDA4EA5 | Since: 1207
     */
    function isAPed(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAPed(_entity);
    }
    entity_1.isAPed = isAPed;
    /**
     * No comment provided
     *
     * Hash: 0xC3D96AF45FCCEC4C | Since: 1207
     */
    function isAVehicle(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAVehicle(_entity);
    }
    entity_1.isAVehicle = isAVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x7D5B1F88E7504BBA | Since: 1207
     */
    function isDead(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityDead(_entity);
    }
    entity_1.isDead = isDead;
    /**
     * No comment provided
     *
     * Hash: 0x886E37EC497200B6 | Since: 1207
     */
    function isInAir(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityInAir(_entity, undefined);
    }
    entity_1.isInAir = isInAir;
    /**
     * Creates a spherical cone at origin that extends to surface with the angle specified. Then returns true if the entity is inside the spherical cone
     *
     * Angle is measured in degrees.
     *
     * Hash: 0xD3151E53134595E5 | Since: 1207
     */
    function isInAngledArea(entity, originX, originY, originZ, edgeX, edgeY, edgeZ, angle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityInAngledArea(_entity, originX, originY, originZ, edgeX, edgeY, edgeZ, angle, false, false, undefined);
    }
    entity_1.isInAngledArea = isInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x0C2634C40A16193E | Since: 1207
     */
    function isInArea(entity, x1, y1, z1, x2, y2, z2) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityInArea(_entity, x1, y1, z1, x2, y2, z2, false, false, undefined);
    }
    entity_1.isInArea = isInArea;
    /**
     * No comment provided
     *
     * Hash: 0x5A5526BC09C06623 | Since: 1207
     */
    function isInVolume(entity, volume) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityInVolume(_entity, volume, false, 0);
    }
    entity_1.isInVolume = isInVolume;
    /**
     * No comment provided
     *
     * Hash: 0xDDE5C125AC446723 | Since: 1207
     */
    function isInWater(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityInWater(_entity);
    }
    entity_1.isInWater = isInWater;
    /**
     * No comment provided
     *
     * Hash: 0x140188E884645624 | Since: 1207
     */
    function isOccluded(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityOccluded(_entity);
    }
    entity_1.isOccluded = isOccluded;
    /**
     * No comment provided
     *
     * Hash: 0x613C15D5D8DB781F | Since: 1207
     */
    function isOnScreen(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityOnScreen(_entity);
    }
    entity_1.isOnScreen = isOnScreen;
    /**
     * No comment provided
     *
     * Hash: 0xDEE49D5CA6C49148 | Since: 1207
     */
    function isPlayingAnim(entity, animDict, animName, animType) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityPlayingAnim(_entity, animDict, animName, animType);
    }
    entity_1.isPlayingAnim = isPlayingAnim;
    /**
     * No comment provided
     *
     * Hash: 0x86468ADFA0F6B861 | Since: 1207
     */
    function isStatic(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityStatic(_entity);
    }
    entity_1.isStatic = isStatic;
    /**
     * No comment provided
     *
     * Hash: 0x9A2304A64C3C8423 | Since: 1207
     */
    function isTouchingEntity(entity, targetEntity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        return IsEntityTouchingEntity(_entity, _targetEntity);
    }
    entity_1.isTouchingEntity = isTouchingEntity;
    /**
     * No comment provided
     *
     * Hash: 0x2AE3EBC8DEB9768B | Since: 1207
     */
    function isTouchingModel(entity, modelHash) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return IsEntityTouchingModel(_entity, modelHash);
    }
    entity_1.isTouchingModel = isTouchingModel;
    /**
     * No comment provided
     *
     * Hash: 0xF6F6AFD8D4FB2658 | Since: 1207
     */
    function isUpright(entity, angle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityUpright(_entity, angle);
    }
    entity_1.isUpright = isUpright;
    /**
     * No comment provided
     *
     * Hash: 0x109DE3DA41AAD94A | Since: 1207
     */
    function isUpsidedown(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityUpsidedown(_entity);
    }
    entity_1.isUpsidedown = isUpsidedown;
    /**
     * No comment provided
     *
     * Hash: 0xFFC96ECB7FA404CA | Since: 1207
     */
    function isVisible(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityVisible(_entity);
    }
    entity_1.isVisible = isVisible;
    /**
     * No comment provided
     *
     * Hash: 0xF213C724E77F321A | Since: 1207
     */
    function isVisibleToScript(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityVisibleToScript(_entity);
    }
    entity_1.isVisibleToScript = isVisibleToScript;
    /**
     * No comment provided
     *
     * Hash: 0x5E1CC2E8DC3111DD | Since: 1207
     */
    function isWaitingForWorldCollision(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityWaitingForWorldCollision(_entity);
    }
    entity_1.isWaitingForWorldCollision = isWaitingForWorldCollision;
    /**
     * No comment provided
     *
     * Hash: 0x1FF441D7954F8709 | Since: 1207
     */
    function isMapPinned() {
        return IsMapEntityPinned(undefined);
    }
    entity_1.isMapPinned = isMapPinned;
    /**
     * No comment provided
     *
     * Hash: 0x6F3068258A499E52 | Since: 1207
     */
    function pinClosestMap(modelHash, pos, flags) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return PinClosestMapEntity(modelHash, pos.x, pos.y, pos.z, flags);
    }
    entity_1.pinClosestMap = pinClosestMap;
    /**
     * No comment provided
     *
     * Hash: 0x9587913B9E772D29 | Since: 1207
     */
    function placeOnGroundProperly(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return PlaceEntityOnGroundProperly(_entity, false);
    }
    entity_1.placeOnGroundProperly = placeOnGroundProperly;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/animations
     *
     * Hash: 0xDC6D22FAB76D4874 | Since: 1207
     */
    function playAnim(entity, animName, animDict, loop, stayInAnim, delta, bitset) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return PlayEntityAnim(_entity, animName, animDict, 0, loop, stayInAnim, false, delta, bitset);
    }
    entity_1.playAnim = playAnim;
    /**
     * No comment provided
     *
     * Hash: 0x553FA683F2BCD814 | Since: 1207
     */
    function removeForcedObject() {
        RemoveForcedObject(undefined, undefined, undefined, undefined, undefined);
    }
    entity_1.removeForcedObject = removeForcedObject;
    /**
     * No comment provided
     *
     * Hash: 0x3F38A98576F6213A | Since: 1207
     */
    function removeModelHide() {
        RemoveModelHide(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    entity_1.removeModelHide = removeModelHide;
    /**
     * No comment provided
     *
     * Hash: 0x824E1C26A14CB817 | Since: 1207
     */
    function removeModelSwap(pos, radius, originalModel, newModel) {
        if (typeof originalModel === 'string')
            originalModel = misc.getHashKey(originalModel);
        if (typeof newModel === 'string')
            newModel = misc.getHashKey(newModel);
        RemoveModelSwap(pos.x, pos.y, pos.z, radius, originalModel, newModel, false);
    }
    entity_1.removeModelSwap = removeModelSwap;
    /**
     * No comment provided
     *
     * Hash: 0x744B9EF44779D9AB | Since: 1207
     */
    function resetAlpha(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        ResetEntityAlpha(_entity);
    }
    entity_1.resetAlpha = resetAlpha;
    /**
     * Sets the loot table an entity will carry. Returns true if loot table has been successfully set. Returns false if entity is not a ped or object.
     * https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/loot_rewards.lua
     *
     * Hash: 0x8C03CD6B5E0E85E8 | Since: 1207
     */
    function scriptOverrideLootTablePermanent(entity, lootTable) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof lootTable === 'string')
            lootTable = misc.getHashKey(lootTable);
        return ScriptOverrideEntityLootTablePermanent(_entity, lootTable);
    }
    entity_1.scriptOverrideLootTablePermanent = scriptOverrideLootTablePermanent;
    /**
     * No comment provided
     *
     * Hash: 0x80646744FA88F9D7 | Since: 1207
     */
    function setCanAutoVaultOn(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetCanAutoVaultOnEntity(_entity, toggle);
    }
    entity_1.setCanAutoVaultOn = setCanAutoVaultOn;
    /**
     * No comment provided
     *
     * Hash: 0x24AED2A608F93C4C | Since: 1207
     */
    function setCanClimbOn(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetCanClimbOnEntity(_entity, toggle);
    }
    entity_1.setCanClimbOn = setCanClimbOn;
    /**
     * skin - everything alpha except skin
     * Set entity alpha level. Ranging from 0 to 255 but changes occur after every 20 percent (after every 51).
     *
     * Hash: 0x0DF7692B1D9E7BA7 | Since: 1207
     */
    function setAlpha(entity, alphaLevel, skin) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityAlpha(_entity, alphaLevel, skin);
    }
    entity_1.setAlpha = setAlpha;
    /**
     * No comment provided
     *
     * Hash: 0xACAD101E1FB66689 | Since: 1207
     */
    function setAlwaysPrerender(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityAlwaysPrerender(_entity, toggle);
    }
    entity_1.setAlwaysPrerender = setAlwaysPrerender;
    /**
     * Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
     *
     * Hash: 0xDC19C288082E586E | Since: 1207
     */
    function setAsMissionEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityAsMissionEntity(_entity, false, false);
    }
    entity_1.setAsMissionEntity = setAsMissionEntity;
    /**
     * Marks the specified entity (ped, vehicle or object) as no longer needed.
     * Entities marked as no longer needed, will be deleted as the engine sees fit.
     *
     * Hash: 0x4971D2F8162B9674 | Since: 1207
     */
    function setAsNoLongerNeeded(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityAsNoLongerNeeded(_entity);
    }
    entity_1.setAsNoLongerNeeded = setAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x0D06D522B90E861F | Since: 1207
     */
    function setCanBeDamaged(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCanBeDamaged(_entity, toggle);
    }
    entity_1.setCanBeDamaged = setCanBeDamaged;
    /**
     * No comment provided
     *
     * Hash: 0x0EF1AFB18649E015 | Since: 1207
     */
    function setCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged, relGroup) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof relGroup === 'string')
            relGroup = misc.getHashKey(relGroup);
        SetEntityCanBeDamagedByRelationshipGroup(_entity, bCanBeDamaged, relGroup);
    }
    entity_1.setCanBeDamagedByRelationshipGroup = setCanBeDamagedByRelationshipGroup;
    /**
     * Sets whether the entity can be targeted without being in line-of-sight.
     *
     * Hash: 0x6D09F32E284D0FB7 | Since: 1207
     */
    function setCanBeTargetedWithoutLos(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCanBeTargetedWithoutLos(_entity, toggle);
    }
    entity_1.setCanBeTargetedWithoutLos = setCanBeTargetedWithoutLos;
    /**
     * No comment provided
     *
     * Hash: 0xF66F820909453B8C | Since: 1207
     */
    function setCollision(entity, toggle, keepPhysics) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCollision(_entity, toggle, keepPhysics);
    }
    entity_1.setCollision = setCollision;
    /**
     * No comment provided
     *
     * Hash: 0xE0580EC84813875A | Since: 1207
     */
    function setCompletelyDisableCollision(entity, toggle, keepPhysics) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCompletelyDisableCollision(_entity, toggle, keepPhysics);
    }
    entity_1.setCompletelyDisableCollision = setCompletelyDisableCollision;
    /**
     * No comment provided
     *
     * Hash: 0x06843DA7060A026B | Since: 1207
     */
    function setCoords(entity, pos, xAxis, yAxis, zAxis, clearArea) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCoords(_entity, pos.x, pos.y, pos.z, xAxis, yAxis, zAxis, clearArea);
    }
    entity_1.setCoords = setCoords;
    /**
     * Axis - Invert Axis Flags
     *
     * Hash: 0x239A3351AC1DA385 | Since: 1207
     */
    function setCoordsNoOffset(entity, pos, xAxis, yAxis, zAxis) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCoordsNoOffset(_entity, pos.x, pos.y, pos.z, xAxis, yAxis, zAxis);
    }
    entity_1.setCoordsNoOffset = setCoordsNoOffset;
    /**
     * No comment provided
     *
     * Hash: 0xFBFC4473F66CE344 | Since: 1207
     */
    function setDynamic(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityDynamic(_entity, toggle);
    }
    entity_1.setDynamic = setDynamic;
    /**
     * No comment provided
     *
     * Hash: 0x0CEDB728A1083FA7 | Since: 1207
     */
    function setHasGravity(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityHasGravity(_entity, toggle);
    }
    entity_1.setHasGravity = setHasGravity;
    /**
     * No comment provided
     *
     * Hash: 0xCF2B9C0645C4651B | Since: 1207
     */
    function setHeading(entity, heading) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityHeading(_entity, heading);
    }
    entity_1.setHeading = setHeading;
    /**
     * Sets the entity's health. healthAmount sets the health value to that, and sets the maximum health core value. Setting healthAmount to 0 will kill the entity. entityKilledBy parameter can also be 0
     *
     * Hash: 0xAC2767ED8BDFAB15 | Since: 1207
     */
    function setHealth(entity, healthAmount, entityKilledBy) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _entityKilledBy = entityKilledBy instanceof Entity ? entityKilledBy.handle() : entityKilledBy;
        SetEntityHealth(_entity, healthAmount, _entityKilledBy);
    }
    entity_1.setHealth = setHealth;
    /**
     * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions.
     *
     * Hash: 0xA5C38736C426FCB8 | Since: 1207
     */
    function setInvincible(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityInvincible(_entity, toggle);
    }
    entity_1.setInvincible = setInvincible;
    /**
     * No comment provided
     *
     * Hash: 0x0A5D170C44CB2189 | Since: 1207
     */
    function setIsTargetPriority(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityIsTargetPriority(_entity, false, 0);
    }
    entity_1.setIsTargetPriority = setIsTargetPriority;
    /**
     * No comment provided
     *
     * Hash: 0x9B9EE31AED48072E | Since: 1207
     */
    function setLoadCollisionFlag(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityLoadCollisionFlag(_entity, toggle);
    }
    entity_1.setLoadCollisionFlag = setLoadCollisionFlag;
    /**
     * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
     *
     * Hash: 0x5FB407F0A7C877BF | Since: 1207
     */
    function setLodDist(entity, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityLodDist(_entity, value);
    }
    entity_1.setLodDist = setLodDist;
    /**
     * No comment provided
     *
     * Hash: 0x166E7CF68597D8B5 | Since: 1207
     */
    function setMaxHealth(entity, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityMaxHealth(_entity, value);
    }
    entity_1.setMaxHealth = setMaxHealth;
    /**
     * No comment provided
     *
     * Hash: 0x516C6ABD18322B63 | Since: 1207
     */
    function setMotionBlur(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityMotionBlur(_entity, toggle);
    }
    entity_1.setMotionBlur = setMotionBlur;
    /**
     * Old name: _SET_ENTITY_DECALS_DISABLED
     *
     * Hash: 0xC64E597783BE9A1D | Since: 1207
     */
    function setNoweapondecals(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityNoweapondecals(_entity, toggle);
    }
    entity_1.setNoweapondecals = setNoweapondecals;
    /**
     * No comment provided
     *
     * Hash: 0xE037BF068223C38D | Since: 1207
     */
    function setNoCollisionEntity(entity1, entity2, thisFrameOnly) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        SetEntityNoCollisionEntity(_entity1, _entity2, thisFrameOnly);
    }
    entity_1.setNoCollisionEntity = setNoCollisionEntity;
    /**
     * No comment provided
     *
     * Hash: 0x473598683095D430 | Since: 1207
     */
    function setOnlyDamagedByPlayer(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityOnlyDamagedByPlayer(_entity, toggle);
    }
    entity_1.setOnlyDamagedByPlayer = setOnlyDamagedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x6C1F6AA2F0ADD104 | Since: 1207
     */
    function setOnlyDamagedByRelationshipGroup(entity, relationshipGroup) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof relationshipGroup === 'string')
            relationshipGroup = misc.getHashKey(relationshipGroup);
        SetEntityOnlyDamagedByRelationshipGroup(_entity, false, relationshipGroup);
    }
    entity_1.setOnlyDamagedByRelationshipGroup = setOnlyDamagedByRelationshipGroup;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/ENTITY_PROOFS
     * BOOL p2: handles an additional special proofs flag, so it simply indicates whether it should be enabled or disabled, not sure what exactly it proofs the entity from though
     *
     * Hash: 0xFAEE099C6F890BB8 | Since: 1207
     */
    function setProofs(entity, proofsBitset, specialFlag) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityProofs(_entity, proofsBitset, specialFlag);
    }
    entity_1.setProofs = setProofs;
    /**
     * No comment provided
     *
     * Hash: 0x100E7007D13E3687 | Since: 1207
     */
    function setQuaternion(entity, pos, w) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityQuaternion(_entity, pos.x, pos.y, pos.z, w);
    }
    entity_1.setQuaternion = setQuaternion;
    /**
     * No comment provided
     *
     * Hash: 0x85B8A7534E44BC23 | Since: 1207
     */
    function setRenderScorched(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityRenderScorched(_entity, toggle);
    }
    entity_1.setRenderScorched = setRenderScorched;
    /**
     * No comment provided
     *
     * Hash: 0x850C940EE3E7B8B5 | Since: 1207
     */
    function setRequiresMoreExpensiveRiverCheck(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityRequiresMoreExpensiveRiverCheck(_entity, toggle);
    }
    entity_1.setRequiresMoreExpensiveRiverCheck = setRequiresMoreExpensiveRiverCheck;
    /**
     * No comment provided
     *
     * Hash: 0x9CC8314DFEDE441E | Since: 1207
     */
    function setRotation(entity, pitch, roll, yaw, rotationOrder) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityRotation(_entity, pitch, roll, yaw, rotationOrder, false);
    }
    entity_1.setRotation = setRotation;
    /**
     * Old name: _SET_ENTITY_CLEANUP_BY_ENGINE
     *
     * Hash: 0x740CB4F3F602C9F4 | Since: 1207
     */
    function setShouldFreezeWaitingOnCollision(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityShouldFreezeWaitingOnCollision(_entity, toggle);
    }
    entity_1.setShouldFreezeWaitingOnCollision = setShouldFreezeWaitingOnCollision;
    /**
     * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
     *
     * Hash: 0x1C99BB7B6E96D16F | Since: 1207
     */
    function setVelocity(entity, pos) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityVelocity(_entity, pos.x, pos.y, pos.z);
    }
    entity_1.setVelocity = setVelocity;
    /**
     * No comment provided
     *
     * Hash: 0x1794B4FCC84D812F | Since: 1207
     */
    function setVisible(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityVisible(_entity, toggle);
    }
    entity_1.setVisible = setVisible;
    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x3AE22DEB5BA5A3E6 | Since: 1207
     */
    function setObjectAsNoLongerNeeded(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectAsNoLongerNeeded(__object);
    }
    entity_1.setObjectAsNoLongerNeeded = setObjectAsNoLongerNeeded;
    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x2595DD4236549CE3 | Since: 1207
     */
    function setPedAsNoLongerNeeded(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedAsNoLongerNeeded(_ped);
    }
    entity_1.setPedAsNoLongerNeeded = setPedAsNoLongerNeeded;
    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x629BFA74418D6239 | Since: 1207
     */
    function setVehicleAsNoLongerNeeded(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleAsNoLongerNeeded(_vehicle);
    }
    entity_1.setVehicleAsNoLongerNeeded = setVehicleAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x786591D986DE9159 | Since: 1207
     */
    function stopAnim(entity, animation, animGroup) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StopEntityAnim(_entity, animation, animGroup, 0);
    }
    entity_1.stopAnim = stopAnim;
    /**
     * No comment provided
     *
     * Hash: 0x3546FAB293FF2981 | Since: 1207
     */
    function wouldBeOccluded(entityModelHash, pos) {
        if (typeof entityModelHash === 'string')
            entityModelHash = misc.getHashKey(entityModelHash);
        return WouldEntityBeOccluded(entityModelHash, pos.x, pos.y, pos.z, false);
    }
    entity_1.wouldBeOccluded = wouldBeOccluded;
    /**
     * No comment provided
     *
     * Hash: 0x002AAC783ED323ED | Since: 1207
     */
    function _0x002AAC783ED323ED() {
        Citizen.invokeNative('0x002AAC783ED323ED', undefined, undefined);
    }
    entity_1._0x002AAC783ED323ED = _0x002AAC783ED323ED;
    /**
     * No comment provided
     *
     * Hash: 0x007AAC783ED323ED | Since: 1207
     */
    function _0x007AAC783ED323ED() {
        Citizen.invokeNative('0x007AAC783ED323ED', undefined, undefined, undefined);
    }
    entity_1._0x007AAC783ED323ED = _0x007AAC783ED323ED;
    /**
     * No comment provided
     *
     * Hash: 0x0939E773925C4719 | Since: 1207
     */
    function _0x0939E773925C4719() {
        Citizen.invokeNative('0x0939E773925C4719');
    }
    entity_1._0x0939E773925C4719 = _0x0939E773925C4719;
    /**
     * No comment provided
     *
     * Hash: 0x0CCEFC6C2C95DA2A | Since: 1207
     */
    function _0x0CCEFC6C2C95DA2A() {
        return Citizen.invokeNative('0x0CCEFC6C2C95DA2A', undefined, undefined, undefined, undefined);
    }
    entity_1._0x0CCEFC6C2C95DA2A = _0x0CCEFC6C2C95DA2A;
    /**
     * No comment provided
     *
     * Hash: 0x0DB41D59E0F1502B | Since: 1207
     */
    function _0x0DB41D59E0F1502B() {
        Citizen.invokeNative('0x0DB41D59E0F1502B', undefined);
    }
    entity_1._0x0DB41D59E0F1502B = _0x0DB41D59E0F1502B;
    /**
     * No comment provided
     *
     * Hash: 0x0FD7D7C232876E72 | Since: 1207
     */
    function _0x0FD7D7C232876E72() {
        Citizen.invokeNative('0x0FD7D7C232876E72', undefined);
    }
    entity_1._0x0FD7D7C232876E72 = _0x0FD7D7C232876E72;
    /**
     * No comment provided
     *
     * Hash: 0x119A5714578F4E05 | Since: 1207
     */
    function _0x119A5714578F4E05() {
        Citizen.invokeNative('0x119A5714578F4E05', undefined, undefined);
    }
    entity_1._0x119A5714578F4E05 = _0x119A5714578F4E05;
    /**
     * No comment provided
     *
     * Hash: 0x120376C23F019C6C | Since: 1207
     */
    function _0x120376C23F019C6C() {
        return Citizen.invokeNative('0x120376C23F019C6C', undefined, undefined);
    }
    entity_1._0x120376C23F019C6C = _0x120376C23F019C6C;
    /**
     * No comment provided
     *
     * Hash: 0x16908E859C3AB698 | Since: 1207
     */
    function _0x16908E859C3AB698() {
        Citizen.invokeNative('0x16908E859C3AB698', undefined, undefined, undefined, undefined, undefined);
    }
    entity_1._0x16908E859C3AB698 = _0x16908E859C3AB698;
    /**
     * No comment provided
     *
     * Hash: 0x188736456D1DEDE6 | Since: 1207
     */
    function _0x188736456D1DEDE6() {
        return Citizen.invokeNative('0x188736456D1DEDE6', undefined, undefined);
    }
    entity_1._0x188736456D1DEDE6 = _0x188736456D1DEDE6;
    /**
     * No comment provided
     *
     * Hash: 0x20FAEE47427A4497 | Since: 1207
     */
    function _0x20FAEE47427A4497() {
        Citizen.invokeNative('0x20FAEE47427A4497');
    }
    entity_1._0x20FAEE47427A4497 = _0x20FAEE47427A4497;
    /**
     * No comment provided
     *
     * Hash: 0x2A77EF9BEC8518F4 | Since: 1207
     */
    function _0x2A77EF9BEC8518F4() {
        return Citizen.invokeNative('0x2A77EF9BEC8518F4', undefined);
    }
    entity_1._0x2A77EF9BEC8518F4 = _0x2A77EF9BEC8518F4;
    /**
     * No comment provided
     *
     * Hash: 0x2D40BCBFE9305DEA | Since: 1207
     */
    function _0x2D40BCBFE9305DEA() {
        Citizen.invokeNative('0x2D40BCBFE9305DEA', undefined, undefined);
    }
    entity_1._0x2D40BCBFE9305DEA = _0x2D40BCBFE9305DEA;
    /**
     * No comment provided
     *
     * Hash: 0x350E9211074955AF | Since: 1207
     */
    function _0x350E9211074955AF() {
        return Citizen.invokeNative('0x350E9211074955AF', undefined, undefined);
    }
    entity_1._0x350E9211074955AF = _0x350E9211074955AF;
    /**
     * Called if entity is in water and submerged level is larger than 1f. If CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION is true, it gets disabled as well.
     *
     * Hash: 0x371D179701D9C082 | Since: 1436
     */
    function _0x371D179701D9C082(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x371D179701D9C082', _entity);
    }
    entity_1._0x371D179701D9C082 = _0x371D179701D9C082;
    /**
     * Seems to return true if entity is burned / scorched
     * _GET_ENTITY_*
     *
     * Hash: 0x37B01666BAE8F7EF | Since: 1207
     */
    function _0x37B01666BAE8F7EF(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x37B01666BAE8F7EF', _entity);
    }
    entity_1._0x37B01666BAE8F7EF = _0x37B01666BAE8F7EF;
    /**
     * No comment provided
     *
     * Hash: 0x37CEB637BA3B1A47 | Since: 1207
     */
    function _0x37CEB637BA3B1A47() {
        Citizen.invokeNative('0x37CEB637BA3B1A47', undefined);
    }
    entity_1._0x37CEB637BA3B1A47 = _0x37CEB637BA3B1A47;
    /**
     * Used when checking if ped is in water
     *
     * Hash: 0x383F64263F946E45 | Since: 1207
     */
    function _0x383F64263F946E45(entity, ped) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x383F64263F946E45', _entity, 0, _ped, undefined, 0);
    }
    entity_1._0x383F64263F946E45 = _0x383F64263F946E45;
    /**
     * No comment provided
     *
     * Hash: 0x3AB3A77672F6473F | Since: 1207
     */
    function _0x3AB3A77672F6473F() {
        return new Vector3(Citizen.invokeNative('0x3AB3A77672F6473F', undefined, undefined, undefined, undefined));
    }
    entity_1._0x3AB3A77672F6473F = _0x3AB3A77672F6473F;
    /**
     * Used in Script Function DUELING_DID_PLAYER_DISARM_OPPONENT
     *
     * Hash: 0x3EC28DA1FFAC9DDD | Since: 1207
     */
    function _0x3EC28DA1FFAC9DDD(entity1, entity2) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        return Citizen.invokeNative('0x3EC28DA1FFAC9DDD', _entity1, _entity2, undefined, undefined);
    }
    entity_1._0x3EC28DA1FFAC9DDD = _0x3EC28DA1FFAC9DDD;
    /**
     * No comment provided
     *
     * Hash: 0x3F08C6163A4AB1D6 | Since: 1207
     */
    function _0x3F08C6163A4AB1D6() {
        Citizen.invokeNative('0x3F08C6163A4AB1D6', undefined);
    }
    entity_1._0x3F08C6163A4AB1D6 = _0x3F08C6163A4AB1D6;
    /**
     * Attach an entity to coordinates physically better name may be perfered? seems to be used with boats `p_skiff02x` ? The last 6 params are always 0 everywhere in the base code. p7 = 500.0 some kind of time? p8 =1
     *
     * Hash: 0x445D7D8EA66E373E | Since: 1207
     */
    function attachToCoordsPhysically(entity, pos, offsetx, offsety, offsetz) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x445D7D8EA66E373E', _entity, pos.x, pos.y, pos.z, offsetx, offsety, offsetz, 0, false, 0, 0, 0, 0, 0, 0);
    }
    entity_1.attachToCoordsPhysically = attachToCoordsPhysically;
    /**
     * No comment provided
     *
     * Hash: 0x56E0735D6273B227 | Since: 1207
     */
    function _0x56E0735D6273B227() {
        Citizen.invokeNative('0x56E0735D6273B227', undefined, undefined);
    }
    entity_1._0x56E0735D6273B227 = _0x56E0735D6273B227;
    /**
     * No comment provided
     *
     * Hash: 0x5744562E973E33CD | Since: 1207
     */
    function _0x5744562E973E33CD() {
        return Citizen.invokeNative('0x5744562E973E33CD', undefined, undefined, undefined, undefined, undefined);
    }
    entity_1._0x5744562E973E33CD = _0x5744562E973E33CD;
    /**
     * _REMOVE_DECALS_* - _REMOVE_FORCED*
     *
     * Hash: 0x5826EFD6D73C4DE5 | Since: 1207
     */
    function _0x5826EFD6D73C4DE5(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x5826EFD6D73C4DE5', _entity);
    }
    entity_1._0x5826EFD6D73C4DE5 = _0x5826EFD6D73C4DE5;
    /**
     * No comment provided
     *
     * Hash: 0x582F73ACFE969571 | Since: 1207
     */
    function _0x582F73ACFE969571() {
        return Citizen.invokeNative('0x582F73ACFE969571', undefined, undefined, undefined);
    }
    entity_1._0x582F73ACFE969571 = _0x582F73ACFE969571;
    /**
     * Attaches scenario to bone with an offset
     * _GET_I* - _GET_M*
     *
     * Hash: 0x5E214112806591EA | Since: 1207
     */
    function _0x5E214112806591EA(entity, boneIndex) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(Citizen.invokeNative('0x5E214112806591EA', _entity, boneIndex));
    }
    entity_1._0x5E214112806591EA = _0x5E214112806591EA;
    /**
     * sets the fill in state for some objects like for the stew, coffee mug ,poker chips, jugs ? P1 is either 0 or 2 p2 seems to be a label/name p3 is the fill in state, max seems to be for some 3.0 (most is 1.0) - 0.0
     * heres some of the labels/names found
     * tumbler_fill, Canvas, Stew_Fill, from Chip01_Ctrl to Chip10_Ctrl, from empty_jug01_Ctrl to empty_jug20_Ctrl, from full_jug01_Ctrl to full_jug20_Ctrl, CTRL_cupFill, Food_DOF_Fill, from WhiteChip_Ctrl_0 to WhiteChip_Ctrl_10, from BlueChip_Ctrl_0 to BlueChip_Ctrl_10, from BlackChip_Ctrl_0 to BlackChip_Ctrl_10, from RedChip_Ctrl_0 to RedChip_Ctrl_10,
     *
     * Hash: 0x669655FFB29EF1A9 | Since: 1207
     */
    function setFillInStateFor(entity, fill) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x669655FFB29EF1A9', _entity, 0, undefined, fill);
    }
    entity_1.setFillInStateFor = setFillInStateFor;
    /**
     * No comment provided
     *
     * Hash: 0x6C31B06E91518269 | Since: 1207
     */
    function _0x6C31B06E91518269() {
        Citizen.invokeNative('0x6C31B06E91518269', undefined, undefined);
    }
    entity_1._0x6C31B06E91518269 = _0x6C31B06E91518269;
    /**
     * No comment provided
     *
     * Hash: 0x6D58167F62238284 | Since: 1207
     */
    function _0x6D58167F62238284(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return Citizen.invokeNative('0x6D58167F62238284', _vehicle);
    }
    entity_1._0x6D58167F62238284 = _0x6D58167F62238284;
    /**
     * No comment provided
     *
     * Hash: 0x7A49D40DE437BC8D | Since: 1207
     */
    function _0x7A49D40DE437BC8D() {
        Citizen.invokeNative('0x7A49D40DE437BC8D', undefined, undefined);
    }
    entity_1._0x7A49D40DE437BC8D = _0x7A49D40DE437BC8D;
    /**
     * No comment provided
     *
     * Hash: 0x7F20092547B4DDEA | Since: 1207
     */
    function _0x7F20092547B4DDEA() {
        Citizen.invokeNative('0x7F20092547B4DDEA', undefined);
    }
    entity_1._0x7F20092547B4DDEA = _0x7F20092547B4DDEA;
    /**
     * No comment provided
     *
     * Hash: 0x80FDEB3A9E9AA578 | Since: 1207
     */
    function _0x80FDEB3A9E9AA578(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x80FDEB3A9E9AA578', _entity, false);
    }
    entity_1._0x80FDEB3A9E9AA578 = _0x80FDEB3A9E9AA578;
    /**
     * No comment provided
     *
     * Hash: 0x898586729DB5221D | Since: 1207
     */
    function _0x898586729DB5221D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x898586729DB5221D', _ped);
    }
    entity_1._0x898586729DB5221D = _0x898586729DB5221D;
    /**
     * No comment provided
     *
     * Hash: 0x8E10DF0FFA63FB65 | Since: 1207
     */
    function _0x8E10DF0FFA63FB65() {
        return Citizen.invokeNative('0x8E10DF0FFA63FB65', undefined, undefined, undefined, undefined, undefined);
    }
    entity_1._0x8E10DF0FFA63FB65 = _0x8E10DF0FFA63FB65;
    /**
     * Used in Script Function GENERIC_ITEM_HAS_ANIM_COMPLETED
     * _GET_ENTITY_*
     *
     * Hash: 0x8E46E18AA828334F | Since: 1207
     */
    function _0x8E46E18AA828334F(entity, animDict, animClip) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x8E46E18AA828334F', _entity, animDict, animClip);
    }
    entity_1._0x8E46E18AA828334F = _0x8E46E18AA828334F;
    /**
     * No comment provided
     *
     * Hash: 0x978AA2323ED32209 | Since: 1207
     */
    function _0x978AA2323ED32209() {
        Citizen.invokeNative('0x978AA2323ED32209', undefined, undefined);
    }
    entity_1._0x978AA2323ED32209 = _0x978AA2323ED32209;
    /**
     * No comment provided
     *
     * Hash: 0x9C6906EF8CB20C5F | Since: 1436
     */
    function _0x9C6906EF8CB20C5F(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x9C6906EF8CB20C5F', _entity);
    }
    entity_1._0x9C6906EF8CB20C5F = _0x9C6906EF8CB20C5F;
    /**
     * No comment provided
     *
     * Hash: 0xA48E4801DEBDF7E4 | Since: 1207
     */
    function _0xA48E4801DEBDF7E4(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xA48E4801DEBDF7E4', _entity, false);
    }
    entity_1._0xA48E4801DEBDF7E4 = _0xA48E4801DEBDF7E4;
    /**
     * No comment provided
     *
     * Hash: 0xA9E6D8F2DDFC4DB9 | Since: 1207
     */
    function _0xA9E6D8F2DDFC4DB9() {
        Citizen.invokeNative('0xA9E6D8F2DDFC4DB9', undefined, undefined);
    }
    entity_1._0xA9E6D8F2DDFC4DB9 = _0xA9E6D8F2DDFC4DB9;
    /**
     * No comment provided
     *
     * Hash: 0xAAACB74442C1BED3 | Since: 1207
     */
    function _0xAAACB74442C1BED3() {
        return Citizen.invokeNative('0xAAACB74442C1BED3', undefined);
    }
    entity_1._0xAAACB74442C1BED3 = _0xAAACB74442C1BED3;
    /**
     * No comment provided
     *
     * Hash: 0xAF72EC7E1B54539B | Since: 1311
     */
    function _0xAF72EC7E1B54539B(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0xAF72EC7E1B54539B', _entity);
    }
    entity_1._0xAF72EC7E1B54539B = _0xAF72EC7E1B54539B;
    /**
     * SET_ENTITY_LO*
     *
     * Hash: 0xAF7F3099B9FEB535 | Since: 1207
     */
    function _0xAF7F3099B9FEB535(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xAF7F3099B9FEB535', _entity, 0, 0, 0);
    }
    entity_1._0xAF7F3099B9FEB535 = _0xAF7F3099B9FEB535;
    /**
     * No comment provided
     *
     * Hash: 0xB16C780C51E51E2B | Since: 1207
     */
    function _0xB16C780C51E51E2B() {
        return Citizen.invokeNative('0xB16C780C51E51E2B', undefined);
    }
    entity_1._0xB16C780C51E51E2B = _0xB16C780C51E51E2B;
    /**
     * No comment provided
     *
     * Hash: 0xB38A29CCD5447783 | Since: 1207
     */
    function _0xB38A29CCD5447783() {
        Citizen.invokeNative('0xB38A29CCD5447783', undefined, undefined, undefined);
    }
    entity_1._0xB38A29CCD5447783 = _0xB38A29CCD5447783;
    /**
     * No comment provided
     *
     * Hash: 0xBA2A089E60ED1163 | Since: 1207
     */
    function _0xBA2A089E60ED1163() {
        return Citizen.invokeNative('0xBA2A089E60ED1163', undefined, undefined, undefined, undefined, undefined);
    }
    entity_1._0xBA2A089E60ED1163 = _0xBA2A089E60ED1163;
    /**
     * No comment provided
     *
     * Hash: 0xBD94CECFB2D65119 | Since: 1207
     */
    function _0xBD94CECFB2D65119() {
        Citizen.invokeNative('0xBD94CECFB2D65119', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    entity_1._0xBD94CECFB2D65119 = _0xBD94CECFB2D65119;
    /**
     * SET_ENTITY_A*
     *
     * Hash: 0xC0EDEF16D90661EE | Since: 1207
     */
    function _0xC0EDEF16D90661EE(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xC0EDEF16D90661EE', _entity, 0);
    }
    entity_1._0xC0EDEF16D90661EE = _0xC0EDEF16D90661EE;
    /**
     * No comment provided
     *
     * Hash: 0xC2E71D7E0A7B4C89 | Since: 1207
     */
    function _0xC2E71D7E0A7B4C89() {
        return Citizen.invokeNative('0xC2E71D7E0A7B4C89', undefined);
    }
    entity_1._0xC2E71D7E0A7B4C89 = _0xC2E71D7E0A7B4C89;
    /**
     * Returns BOOL in ida
     *
     * Hash: 0xC3ABCFBC7D74AFA5 | Since: 1207
     */
    function _0xC3ABCFBC7D74AFA5(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC3ABCFBC7D74AFA5', _ped, 0, false);
    }
    entity_1._0xC3ABCFBC7D74AFA5 = _0xC3ABCFBC7D74AFA5;
    /**
     * No comment provided
     *
     * Hash: 0xC6A1A3D63F122DE7 | Since: 1311
     */
    function _0xC6A1A3D63F122DE7() {
        Citizen.invokeNative('0xC6A1A3D63F122DE7', undefined, undefined);
    }
    entity_1._0xC6A1A3D63F122DE7 = _0xC6A1A3D63F122DE7;
    /**
     * No comment provided
     *
     * Hash: 0xC76E94A78127412B | Since: 1207
     */
    function _0xC76E94A78127412B() {
        Citizen.invokeNative('0xC76E94A78127412B', undefined, undefined, undefined);
    }
    entity_1._0xC76E94A78127412B = _0xC76E94A78127412B;
    /**
     * No comment provided
     *
     * Hash: 0xCDB682BB47C02F0A | Since: 1207
     */
    function _0xCDB682BB47C02F0A(entity, p1) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xCDB682BB47C02F0A', _entity, p1);
    }
    entity_1._0xCDB682BB47C02F0A = _0xCDB682BB47C02F0A;
    /**
     * No comment provided
     *
     * Hash: 0xD21C7418C590BB40 | Since: 1207
     */
    function _0xD21C7418C590BB40() {
        return Citizen.invokeNative('0xD21C7418C590BB40', undefined);
    }
    entity_1._0xD21C7418C590BB40 = _0xD21C7418C590BB40;
    /**
     * No comment provided
     *
     * Hash: 0xD45BB89B53FC0CFD | Since: 1207
     */
    function _0xD45BB89B53FC0CFD() {
        Citizen.invokeNative('0xD45BB89B53FC0CFD', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    entity_1._0xD45BB89B53FC0CFD = _0xD45BB89B53FC0CFD;
    /**
     * No comment provided
     *
     * Hash: 0xD4636C2EDB0DEA8A | Since: 1207
     */
    function _0xD4636C2EDB0DEA8A() {
        return Citizen.invokeNative('0xD4636C2EDB0DEA8A', undefined);
    }
    entity_1._0xD4636C2EDB0DEA8A = _0xD4636C2EDB0DEA8A;
    /**
     * No comment provided
     *
     * Hash: 0xD46BF94C4C66FAB0 | Since: 1207
     */
    function _0xD46BF94C4C66FAB0() {
        return Citizen.invokeNative('0xD46BF94C4C66FAB0', undefined, undefined, undefined, undefined);
    }
    entity_1._0xD46BF94C4C66FAB0 = _0xD46BF94C4C66FAB0;
    /**
     * No comment provided
     *
     * Hash: 0xDD03FC2089AD093C | Since: 1207
     */
    function _0xDD03FC2089AD093C() {
        Citizen.invokeNative('0xDD03FC2089AD093C', undefined, undefined, undefined, undefined);
    }
    entity_1._0xDD03FC2089AD093C = _0xDD03FC2089AD093C;
    /**
     * Hardcoded to return zero/false.
     *
     * Hash: 0xDF8E49EA89A01DB1 | Since: 1207
     */
    function _0xDF8E49EA89A01DB1() {
        return Citizen.invokeNative('0xDF8E49EA89A01DB1', undefined, undefined, undefined);
    }
    entity_1._0xDF8E49EA89A01DB1 = _0xDF8E49EA89A01DB1;
    /**
     * No comment provided
     *
     * Hash: 0xDFC2B226D56D85F6 | Since: 1207
     */
    function _0xDFC2B226D56D85F6() {
        return Citizen.invokeNative('0xDFC2B226D56D85F6', undefined, undefined);
    }
    entity_1._0xDFC2B226D56D85F6 = _0xDFC2B226D56D85F6;
    /**
     * No comment provided
     *
     * Hash: 0xE19035EB65AB2932 | Since: 1207
     */
    function _0xE19035EB65AB2932() {
        Citizen.invokeNative('0xE19035EB65AB2932', undefined, undefined);
    }
    entity_1._0xE19035EB65AB2932 = _0xE19035EB65AB2932;
    /**
     * No comment provided
     *
     * Hash: 0xE31FC20319874CB3 | Since: 1207
     */
    function _0xE31FC20319874CB3() {
        return Citizen.invokeNative('0xE31FC20319874CB3', undefined, undefined, undefined);
    }
    entity_1._0xE31FC20319874CB3 = _0xE31FC20319874CB3;
    /**
     * No comment provided
     *
     * Hash: 0xE75EEA8DB59A9F39 | Since: 1207
     */
    function _0xE75EEA8DB59A9F39() {
        Citizen.invokeNative('0xE75EEA8DB59A9F39', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    entity_1._0xE75EEA8DB59A9F39 = _0xE75EEA8DB59A9F39;
    /**
     * No comment provided
     *
     * Hash: 0xE9E7A0BAC7F57746 | Since: 1207
     */
    function _0xE9E7A0BAC7F57746() {
        Citizen.invokeNative('0xE9E7A0BAC7F57746', undefined, undefined);
    }
    entity_1._0xE9E7A0BAC7F57746 = _0xE9E7A0BAC7F57746;
    /**
     * No comment provided
     *
     * Hash: 0xEAB3D91D30A344F1 | Since: 1207
     */
    function _0xEAB3D91D30A344F1() {
        Citizen.invokeNative('0xEAB3D91D30A344F1', undefined);
    }
    entity_1._0xEAB3D91D30A344F1 = _0xEAB3D91D30A344F1;
    /**
     * No comment provided
     *
     * Hash: 0xEF259AA1E097E0AD | Since: 1207
     */
    function _0xEF259AA1E097E0AD(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xEF259AA1E097E0AD', _entity, undefined);
    }
    entity_1._0xEF259AA1E097E0AD = _0xEF259AA1E097E0AD;
    /**
     * Returns the entity that is looting a ped but only while the looting is active
     *
     * Hash: 0xEF2D9ED7CE684F08 | Since: 1207
     */
    function getLootingPed(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0xEF2D9ED7CE684F08', _entity);
    }
    entity_1.getLootingPed = getLootingPed;
    /**
     * No comment provided
     *
     * Hash: 0xF41E2979D5BC5370 | Since: 1207
     */
    function _0xF41E2979D5BC5370() {
        Citizen.invokeNative('0xF41E2979D5BC5370', undefined);
    }
    entity_1._0xF41E2979D5BC5370 = _0xF41E2979D5BC5370;
    /**
     * No comment provided
     *
     * Hash: 0xF59FDE7B4D31A630 | Since: 1207
     */
    function _0xF59FDE7B4D31A630() {
        return Citizen.invokeNative('0xF59FDE7B4D31A630', undefined);
    }
    entity_1._0xF59FDE7B4D31A630 = _0xF59FDE7B4D31A630;
    /**
     * No comment provided
     *
     * Hash: 0xFF83AF534156B399 | Since: 1207
     */
    function setCanOnlyBeDamagedByScriptParticipants(EntityIndex, bOnlyDamagedWhenRunningScript) {
        const _EntityIndex = EntityIndex instanceof Entity ? EntityIndex.handle() : EntityIndex;
        Citizen.invokeNative('0xFF83AF534156B399', _EntityIndex, bOnlyDamagedWhenRunningScript);
    }
    entity_1.setCanOnlyBeDamagedByScriptParticipants = setCanOnlyBeDamagedByScriptParticipants;
    /**
     * SET_ENTITY_LO*
     *
     * Hash: 0xFF9965C47FA404DA | Since: 1207
     */
    function _0xFF9965C47FA404DA(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xFF9965C47FA404DA', _entity, toggle);
    }
    entity_1._0xFF9965C47FA404DA = _0xFF9965C47FA404DA;
    /**
     * No comment provided
     *
     * Hash: 0x1AD922AB5038DEF3 | Since: 1207
     */
    function addTrackingTrails(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AddEntityTrackingTrails(_entity);
    }
    entity_1.addTrackingTrails = addTrackingTrails;
    /**
     * Alters entity's health by 'amount'. Can be negative (to drain health).
     * In the scripts entity2 and weaponHash are unused (zero).
     *
     * Hash: 0x835F131E7DC8F97A | Since: 1207
     */
    function changeHealth(entity, amount, entity2, weaponHash) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return ChangeEntityHealth(_entity, amount, _entity2, weaponHash);
    }
    entity_1.changeHealth = changeHealth;
    /**
     * No comment provided
     *
     * Hash: 0x29BA9F78321E5A6C | Since: 1207
     */
    function createFootpathTrail(waypointRecord, bUseSnowOffset, bInit) {
        return CreateFootpathTrail(undefined, waypointRecord, bUseSnowOffset, 0, 0, undefined, undefined, undefined, undefined, undefined, undefined, bInit);
    }
    entity_1.createFootpathTrail = createFootpathTrail;
    /**
     * No comment provided
     *
     * Hash: 0x0D0DB2B6AF19A987 | Since: 1207
     */
    function deleteCarriable(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DeleteCarriable(_entity);
    }
    entity_1.deleteCarriable = deleteCarriable;
    /**
     * Must be called from a background script, otherwise it will do nothing.
     *
     * Hash: 0x5E94EA09E7207C16 | Since: 1207
     */
    function delete2(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DeleteEntity2(_entity);
    }
    entity_1.delete2 = delete2;
    /**
     * Returns true if calling script owns specified entity
     *
     * Hash: 0x88AD6CC10D8D35B2 | Since: 1207
     */
    function doesThreadOwnThis(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DoesThreadOwnThisEntity(_entity);
    }
    entity_1.doesThreadOwnThis = doesThreadOwnThis;
    /**
     * Returns a hash of an entity's name. (Alternative Name: _GET_ENTITY_PROMPT_NAME_HASH)
     *
     * Hash: 0x31FEF6A20F00B963 | Since: 1207
     */
    function getCarriableFrom(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetCarriableFromEntity(_entity);
    }
    entity_1.getCarriableFrom = getCarriableFrom;
    /**
     * No comment provided
     *
     * Hash: 0x886171A12F400B89 | Since: 1207
     */
    function getEntitiesInVolume(volume, itemSet, entityType) {
        return GetEntitiesInVolume(volume, itemSet, entityType);
    }
    entity_1.getEntitiesInVolume = getEntitiesInVolume;
    /**
     * No comment provided
     *
     * Hash: 0x59B57C4B06531E1E | Since: 1207
     */
    function getEntitiesNearPoint(pos, radius, itemSet) {
        return GetEntitiesNearPoint(pos.x, pos.y, pos.z, radius, itemSet, 0);
    }
    entity_1.getEntitiesNearPoint = getEntitiesNearPoint;
    /**
     * Returns a normalized value between 0.0f and 1.0f. You can get the actual anim time by multiplying this by GET_ANIM_DURATION
     *
     * Hash: 0x627520389E288A73 | Since: 1207
     */
    function getAnimCurrentTime(entity, animDict, animName) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityAnimCurrentTime(_entity, animDict, animName);
    }
    entity_1.getAnimCurrentTime = getAnimCurrentTime;
    /**
     * Params: p1 = 0 in R* Scripts (GET_DOOR_ENTITY_FROM_ID)
     * https://github.com/femga/rdr3_discoveries/blob/master/doorHashes/doorhashes.lua
     *
     * Hash: 0xF7424890E4A094C0 | Since: 1207
     */
    function getByDoorhash(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return GetEntityByDoorhash(doorHash, 0);
    }
    entity_1.getByDoorhash = getByDoorhash;
    /**
     * Old name: _GET_ENTITY_CAN_BE_DAMAGED
     *
     * Hash: 0x75DF9E73F2F005FD | Since: 1207
     */
    function getCanBeDamaged(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityCanBeDamaged(_entity);
    }
    entity_1.getCanBeDamaged = getCanBeDamaged;
    /**
     * flagId: see _SET_ENTITY_CARRYING_FLAG
     *
     * Hash: 0x808077647856DE62 | Since: 1207
     */
    function getCarryingFlag(entity, flagId) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityCarryingFlag(_entity, flagId);
    }
    entity_1.getCarryingFlag = getCarryingFlag;
    /**
     * Returns zero if the entity is not a carriable
     *
     * Hash: 0x0FD25587BB306C86 | Since: 1207
     */
    function getCarryConfig(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityCarryConfig(_entity);
    }
    entity_1.getCarryConfig = getCarryConfig;
    /**
     * Gets the entity's forward vector in YX(Z) eulers. Similar to GET_ENTITY_FORWARD_VECTOR
     *
     * Hash: 0x935A30AA88FB1014 | Since: 1207
     */
    function getForwardVectorYx(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return new Vector3(GetEntityForwardVectorYx(_entity));
    }
    entity_1.getForwardVectorYx = getForwardVectorYx;
    /**
     * Returns (CUR_HEALTH / MAX_HEALTH)
     *
     * Hash: 0x96C638784DB4C815 | Since: 1207
     */
    function getHealthFloat(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityHealthFloat(_entity);
    }
    entity_1.getHealthFloat = getHealthFloat;
    /**
     * Note: this native was removed in 1232 but added back in 1311
     * Old name: _GET_ENTITY_PROOFS
     *
     * Hash: 0x6CF0DAD7FA1088EA | Since: 1207
     */
    function getProofs(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityProofs(_entity);
    }
    entity_1.getProofs = getProofs;
    /**
     * No comment provided
     *
     * Hash: 0x2A08A32B6D49906F | Since: 1207
     */
    function getScript(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityScript(_entity);
    }
    entity_1.getScript = getScript;
    /**
     * No comment provided
     *
     * Hash: 0xE12F56CB25D9CE23 | Since: 1207
     */
    function getThreatTier(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityThreatTier(_entity);
    }
    entity_1.getThreatTier = getThreatTier;
    /**
     * No comment provided
     *
     * Hash: 0xF3FDA9A617A15145 | Since: 1207
     */
    function getWorldPositionOfDimensions(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityWorldPositionOfDimensions(_entity);
    }
    entity_1.getWorldPositionOfDimensions = getWorldPositionOfDimensions;
    /**
     * No comment provided
     *
     * Hash: 0xC346A546612C49A9 | Since: 1207
     */
    function getIsBird(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetIsBird(_entity);
    }
    entity_1.getIsBird = getIsBird;
    /**
     * No comment provided
     *
     * Hash: 0x255B6DB4E3AD3C3E | Since: 1207
     */
    function getIsCarriablePelt(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetIsCarriablePelt(_entity);
    }
    entity_1.getIsCarriablePelt = getIsCarriablePelt;
    /**
     * No comment provided
     *
     * Hash: 0x5594AFE9DE0C01B7 | Since: 1207
     */
    function getIsPredator(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetIsPredator(_entity);
    }
    entity_1.getIsPredator = getIsPredator;
    /**
     * Valid indices: 0 - 3
     * Index 1 always returns a `hogtied` config, doesn't matter the entity.
     * It's for humans only and the ped must be resurrected first if it's dead.
     *
     * Hash: 0x34F008A7E48C496B | Since: 1207
     */
    function getOptimalCarryConfig(entity, index) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetOptimalCarryConfig(_entity, index);
    }
    entity_1.getOptimalCarryConfig = getOptimalCarryConfig;
    /**
     * Returns the ped's animal type hash: https://alloc8or.re/rdr3/doc/enums/eAnimalType.txt
     * Combine this with GET_STRING_FROM_HASH_KEY to display localized entity names
     *
     * Hash: 0x964000D355219FC0 | Since: 1207
     */
    function getPedAnimalType(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedAnimalType(_ped);
    }
    entity_1.getPedAnimalType = getPedAnimalType;
    /**
     * No comment provided
     *
     * Hash: 0x4735E2A4BB83D9DA | Since: 1207
     */
    function getPinnedMap() {
        return GetPinnedMapEntity(undefined);
    }
    entity_1.getPinnedMap = getPinnedMap;
    /**
     * Returns false if entity is not a ped or object.
     *
     * Hash: 0x1E804EA9B12030A4 | Since: 1207
     */
    function getScriptOverrideLootTablePermanent(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetScriptOverrideEntityLootTablePermanent(_entity);
    }
    entity_1.getScriptOverrideLootTablePermanent = getScriptOverrideLootTablePermanent;
    /**
     * No comment provided
     *
     * Hash: 0x5AFFA9DDC87846F8 | Since: 1207
     */
    function isCarriableModel(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsCarriableModel(model);
    }
    entity_1.isCarriableModel = isCarriableModel;
    /**
     * Getter for FREEZE_ENTITY_POSITION
     *
     * Hash: 0x083D497D57B7400F | Since: 1207
     */
    function isFrozen(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityFrozen(_entity);
    }
    entity_1.isFrozen = isFrozen;
    /**
     * No comment provided
     *
     * Hash: 0x8DE41E9902E85756 | Since: 1207
     */
    function isFullyLooted(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityFullyLooted(_entity);
    }
    entity_1.isFullyLooted = isFullyLooted;
    /**
     * No comment provided
     *
     * Hash: 0x857ACB0AB4BD0D55 | Since: 1207
     */
    function isOnTrainTrack(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityOnTrainTrack(_entity);
    }
    entity_1.isOnTrainTrack = isOnTrainTrack;
    /**
     * No comment provided
     *
     * Hash: 0xA7E51B53309EAC97 | Since: 1207
     */
    function isOwnedByPersistenceSystem(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityOwnedByPersistenceSystem(_entity);
    }
    entity_1.isOwnedByPersistenceSystem = isOwnedByPersistenceSystem;
    /**
     * Params: p1 (probably animType) = 1, 0
     *
     * Hash: 0x0B7CB1300CBFE19C | Since: 1207
     */
    function isPlayingAnyAnim(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityPlayingAnyAnim(_entity, 0);
    }
    entity_1.isPlayingAnyAnim = isPlayingAnyAnim;
    /**
     * No comment provided
     *
     * Hash: 0xD4E5C1E93C466127 | Since: 1207
     */
    function isUnderwater(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityUnderwater(_entity, false);
    }
    entity_1.isUnderwater = isUnderwater;
    /**
     * No comment provided
     *
     * Hash: 0xC8CCDB712FBCBA92 | Since: 1207
     */
    function isTrackedVisible(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsTrackedEntityVisible(_entity);
    }
    entity_1.isTrackedVisible = isTrackedVisible;
    /**
     * No comment provided
     *
     * Hash: 0x36EB4D34D4A092C5 | Since: 1207
     */
    function pauseTracking(entity, pause) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        PauseEntityTracking(_entity, pause);
    }
    entity_1.pauseTracking = pauseTracking;
    /**
     * No comment provided
     *
     * Hash: 0xA88E215CEB0435C0 | Since: 1207
     */
    function requestLootList(mount, visiblelootslotrequestType, flag) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        if (typeof visiblelootslotrequestType === 'string')
            visiblelootslotrequestType = misc.getHashKey(visiblelootslotrequestType);
        return RequestEntityLootList(_mount, visiblelootslotrequestType, flag, 0, false);
    }
    entity_1.requestLootList = requestLootList;
    /**
     * Alternative Name: _GET_ENTITY_FROM_MAP_OBJECT; You can get existing objects and manipulate them using this native.
     *
     * Hash: 0x66B2B83B94B22458 | Since: 1207
     */
    function searchBuildingPoolForWithThisModel(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return SearchBuildingPoolForEntityWithThisModel(modelHash);
    }
    entity_1.searchBuildingPoolForWithThisModel = searchBuildingPoolForWithThisModel;
    /**
     * No comment provided
     *
     * Hash: 0x11CDABDC7783B2BC | Since: 1207
     */
    function setAnimCurrentTime(entity, animDict, animName, time) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityAnimCurrentTime(_entity, animDict, animName, time);
    }
    entity_1.setAnimCurrentTime = setAnimCurrentTime;
    /**
     * No comment provided
     *
     * Hash: 0xEAA885BA3CEA4E4A | Since: 1207
     */
    function setAnimSpeed(entity, animDict, animName, speedMultiplier) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityAnimSpeed(_entity, animDict, animName, speedMultiplier);
    }
    entity_1.setAnimSpeed = setAnimSpeed;
    /**
     * Changes type and quality of skins
     * type hashes: https://pastebin.com/C1WvQjCy
     *
     * Hash: 0x399657ED871B3A6C | Since: 1207
     */
    function setCarcassType(entity, _type) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        SetEntityCarcassType(_entity, _type);
    }
    entity_1.setCarcassType = setCarcassType;
    /**
     * flagId: https://github.com/femga/rdr3_discoveries/tree/master/AI/CARRYING_FLAGS
     * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CCarryingFlags__Flags
     *
     * enum eCarryingFlag
     * {
     * CARRYING_FLAG_CAN_BE_CUT_FREE = 1,
     * CARRYING_FLAG_CAN_BE_CARRIED_ON_FOOT = 2,
     * CARRYING_FLAG_CAN_BE_DROPPED = 4,
     * CARRYING_FLAG_CAN_BE_CARRIED_WHEN_DEAD = 7,
     * CARRYING_FLAG_CAN_CARRY_ANYTHING = 9,
     * CARRYING_FLAG_DISABLE_PROMPT_LOS_CHECKS = 19,
     * CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION = 23,
     * CARRYING_FLAG_PICKUPS_IGNORE_HEIGHT_RESTRICTIONS = 26,
     * CARRYING_FLAG_CLEAN_UP_WHEN_NOT_CARRIED = 27,
     * CARRYING_FLAG_BLOCK_KNOCK_OFF_PED_VARIATIONS_FROM_CARRIABLE_INTERACTIONS = 29,
     * CARRYING_FLAG_HIT_WHEN_CARRIABLE = 31,
     * CARRYING_FLAG_DISABLE_CARRIABLE_INTERACTIONS_ON_THIS_MOUNT = 34,
     * CARRYING_FLAG_FORCE_HIDE_PROMPT_GROUP = 37,
     * };
     *
     * Hash: 0x18FF3110CF47115D | Since: 1207
     */
    function setCarryingFlag(entity, flagId, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCarryingFlag(_entity, flagId, value);
    }
    entity_1.setCarryingFlag = setCarryingFlag;
    /**
     * No comment provided
     *
     * Hash: 0x203BEFFDBE12E96A | Since: 1207
     */
    function setCoordsAndHeading(entity, pos, heading, xAxis, yAxis, zAxis) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCoordsAndHeading(_entity, pos.x, pos.y, pos.z, heading, xAxis, yAxis, zAxis);
    }
    entity_1.setCoordsAndHeading = setCoordsAndHeading;
    /**
     * No comment provided
     *
     * Hash: 0x0918E3565C20F03C | Since: 1207
     */
    function setCoordsAndHeadingNoOffset(entity, pos, heading) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCoordsAndHeadingNoOffset(_entity, pos.x, pos.y, pos.z, heading, false, false);
    }
    entity_1.setCoordsAndHeadingNoOffset = setCoordsAndHeadingNoOffset;
    /**
     * No comment provided
     *
     * Hash: 0x482D17E45665DA44 | Since: 1207
     */
    function setCustomPickupRadius(entity, radius) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityCustomPickupRadius(_entity, radius);
    }
    entity_1.setCustomPickupRadius = setCustomPickupRadius;
    /**
     * No comment provided
     *
     * Hash: 0xA91E6CF94404E8C9 | Since: 1207
     */
    function setFadeIn(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityFadeIn(_entity);
    }
    entity_1.setFadeIn = setFadeIn;
    /**
     * No comment provided
     *
     * Hash: 0x6BCF5F3D8FFE988D | Since: 1207
     */
    function setFullyLooted(entity, looted) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityFullyLooted(_entity, looted);
    }
    entity_1.setFullyLooted = setFullyLooted;
    /**
     * No comment provided
     *
     * Hash: 0xEBDC12861D079ABA | Since: 1207
     */
    function setLightsEnabled(entity, enabled) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityLightsEnabled(_entity, enabled);
    }
    entity_1.setLightsEnabled = setLightsEnabled;
    /**
     * tier: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityThreatTier
     *
     * Hash: 0x4B436BAC8CBE9B07 | Since: 1207
     */
    function setThreatTier(entity, tier) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityThreatTier(_entity, tier, false);
    }
    entity_1.setThreatTier = setThreatTier;
    /**
     * No comment provided
     *
     * Hash: 0xD2B9C78537ED5759 | Since: 1207
     */
    function unpinMap(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        UnpinMapEntity(_entity);
    }
    entity_1.unpinMap = unpinMap;
})(entity || (entity = {}));
export var event;
(function (event_1) {
    /**
     * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
     * https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS
     *
     * Hash: 0xD9F8455409B525E9 | Since: 1207
     */
    function addShockingAtPosition(eventType, pos) {
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return AddShockingEventAtPosition(eventType, pos.x, pos.y, pos.z, 0, 0, 0, 0, 0, 0, 0);
    }
    event_1.addShockingAtPosition = addShockingAtPosition;
    /**
     * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
     *
     * Hash: 0x7FD8F3BE76F89422 | Since: 1207
     */
    function addShockingForEntity(eventType, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return AddShockingEventForEntity(eventType, _entity, 0, 0, 0, 0, 0, 0, false, false, 0, 0);
    }
    event_1.addShockingForEntity = addShockingForEntity;
    /**
     * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
     *
     * Hash: 0x9DB47E16060D6354 | Since: 1207
     */
    function isShockingInSphere(eventType, pos, radius) {
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return IsShockingEventInSphere(eventType, pos.x, pos.y, pos.z, radius);
    }
    event_1.isShockingInSphere = isShockingInSphere;
    /**
     * No comment provided
     *
     * Hash: 0xD47A168C2AB90DC4 | Since: 1207
     */
    function removeAllShockings() {
        RemoveAllShockingEvents(false);
    }
    event_1.removeAllShockings = removeAllShockings;
    /**
     * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
     *
     * Hash: 0x118873DD538490B4 | Since: 1207
     */
    function removeAllShockingsOfType(eventType, scriptCreatedOnly) {
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        RemoveAllShockingEventsOfType(eventType, scriptCreatedOnly);
    }
    event_1.removeAllShockingsOfType = removeAllShockingsOfType;
    /**
     * No comment provided
     *
     * Hash: 0xE8BB3CC253A34559 | Since: 1207
     */
    function removeShocking(event) {
        return RemoveShockingEvent(event);
    }
    event_1.removeShocking = removeShocking;
    /**
     * No comment provided
     *
     * Hash: 0xDB249021652420C5 | Since: 1207
     */
    function removeShockingSpawnBlockingAreas() {
        RemoveShockingEventSpawnBlockingAreas();
    }
    event_1.removeShockingSpawnBlockingAreas = removeShockingSpawnBlockingAreas;
    /**
     * No comment provided
     *
     * Hash: 0x8AE2F981CDDB8FA4 | Since: 1207
     */
    function setDecisionMaker(ped, name) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof name === 'string')
            name = misc.getHashKey(name);
        SetDecisionMaker(_ped, name);
    }
    event_1.setDecisionMaker = setDecisionMaker;
    /**
     * No comment provided
     *
     * Hash: 0x6B9C5C38838FB6E6 | Since: 1207
     */
    function setDecisionMakerToDefault(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetDecisionMakerToDefault(_ped);
    }
    event_1.setDecisionMakerToDefault = setDecisionMakerToDefault;
    /**
     * No comment provided
     *
     * Hash: 0x84994FAD4E4E4E69 | Since: 1207
     */
    function suppressShockingsNextFrame() {
        SuppressShockingEventsNextFrame();
    }
    event_1.suppressShockingsNextFrame = suppressShockingsNextFrame;
    /**
     * Only used in R* SP Script beat_rat_infestation and homeinvasion
     *
     * Hash: 0x18E93EBFC1FCFA48 | Since: 1207
     */
    function _0x18E93EBFC1FCFA48(volume) {
        return Citizen.invokeNative('0x18E93EBFC1FCFA48', volume, false, false);
    }
    event_1._0x18E93EBFC1FCFA48 = _0x18E93EBFC1FCFA48;
    /**
     * AGGRO_CHECK_PROPERTY_DAMAGE: Property damage found with event
     *
     * Hash: 0x1A5C5D350068A673 | Since: 1207
     */
    function _0x1A5C5D350068A673(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x1A5C5D350068A673', _ped, 0);
    }
    event_1._0x1A5C5D350068A673 = _0x1A5C5D350068A673;
    /**
     * _GET*
     *
     * Hash: 0x1D1B448D719415AB | Since: 1207
     */
    function _0x1D1B448D719415AB(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x1D1B448D719415AB', _ped);
    }
    event_1._0x1D1B448D719415AB = _0x1D1B448D719415AB;
    /**
     * No comment provided
     *
     * Hash: 0x26054EB81AC0893B | Since: 1207
     */
    function _0x26054EB81AC0893B(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return Citizen.invokeNative('0x26054EB81AC0893B', __object);
    }
    event_1._0x26054EB81AC0893B = _0x26054EB81AC0893B;
    /**
     * No comment provided
     *
     * Hash: 0x2DD42FAD06E6F19E | Since: 1207
     */
    function _0x2DD42FAD06E6F19E(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return Citizen.invokeNative('0x2DD42FAD06E6F19E', __object, false, false);
    }
    event_1._0x2DD42FAD06E6F19E = _0x2DD42FAD06E6F19E;
    /**
     * _ADD* (_ADD_SHOCKING_EVENT_* ?)
     *
     * Hash: 0x36D0F2BA2C0D9BDE | Since: 1207
     */
    function _0x36D0F2BA2C0D9BDE(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x36D0F2BA2C0D9BDE', _entity, 0);
    }
    event_1._0x36D0F2BA2C0D9BDE = _0x36D0F2BA2C0D9BDE;
    /**
     * No comment provided
     *
     * Hash: 0x4465C3D1475BD3FD | Since: 1207
     */
    function _0x4465C3D1475BD3FD(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        Citizen.invokeNative('0x4465C3D1475BD3FD', model);
    }
    event_1._0x4465C3D1475BD3FD = _0x4465C3D1475BD3FD;
    /**
     * Only used in R* SP Script coachrobberies
     * _SET_S*
     *
     * Hash: 0x4B2B1A891D437CA7 | Since: 1207
     */
    function _0x4B2B1A891D437CA7() {
        Citizen.invokeNative('0x4B2B1A891D437CA7', 0);
    }
    event_1._0x4B2B1A891D437CA7 = _0x4B2B1A891D437CA7;
    /**
     * Only used in R* SP Script beat_rat_infestation
     * Params: p0 = value returned by 0x18E93EBFC1FCFA48
     *
     * Hash: 0x56B3410626A473E7 | Since: 1207
     */
    function _0x56B3410626A473E7() {
        Citizen.invokeNative('0x56B3410626A473E7', undefined);
    }
    event_1._0x56B3410626A473E7 = _0x56B3410626A473E7;
    /**
     * Only used in R* SP Scripts
     * Hash only used in R* Script mob3.ysc: ROBBERY
     * _ADD_PED*
     *
     * Hash: 0x7C511E91738A0828 | Since: 1207
     */
    function _0x7C511E91738A0828(ped1, ped2, p3) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        if (typeof p3 === 'string')
            p3 = misc.getHashKey(p3);
        Citizen.invokeNative('0x7C511E91738A0828', _ped1, _ped2, 0, p3);
    }
    event_1._0x7C511E91738A0828 = _0x7C511E91738A0828;
    /**
     * _GET*
     *
     * Hash: 0x83D43F0FD5276E4D | Since: 1207
     */
    function _0x83D43F0FD5276E4D(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x83D43F0FD5276E4D', _entity, 0);
    }
    event_1._0x83D43F0FD5276E4D = _0x83D43F0FD5276E4D;
    /**
     * _SET_P*
     *
     * Hash: 0x9520175B35E2268D | Since: 1207
     */
    function _0x9520175B35E2268D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9520175B35E2268D', _ped, false);
    }
    event_1._0x9520175B35E2268D = _0x9520175B35E2268D;
    /**
     * No comment provided
     *
     * Hash: 0xA86B0EE9B39D15D6 | Since: 1207
     */
    function _0xA86B0EE9B39D15D6(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        Citizen.invokeNative('0xA86B0EE9B39D15D6', __object);
    }
    event_1._0xA86B0EE9B39D15D6 = _0xA86B0EE9B39D15D6;
    /**
     * Might return time since some (?) event.
     *
     * Hash: 0xAD17A18215DD23D6 | Since: 1207
     */
    function _0xAD17A18215DD23D6(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0xAD17A18215DD23D6', _entity, 0, 0);
    }
    event_1._0xAD17A18215DD23D6 = _0xAD17A18215DD23D6;
    /**
     * _S* (_SUPPRESS_EVENTS_NEXT_FRAME?)
     *
     * Hash: 0xB6F4825153920582 | Since: 1207
     */
    function _0xB6F4825153920582() {
        Citizen.invokeNative('0xB6F4825153920582');
    }
    event_1._0xB6F4825153920582 = _0xB6F4825153920582;
    /**
     * HAS_ACTOR_RECEIVED_TRACKED_EVENT_THAT_SHOULD_ALERT - iTimeSinceEvent >= iTimeLimitMS
     *
     * Hash: 0xE28D7FC9FD32ABEB | Since: 1311
     */
    function _0xE28D7FC9FD32ABEB(entity, eventType) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        Citizen.invokeNative('0xE28D7FC9FD32ABEB', _entity, eventType, 0);
    }
    event_1._0xE28D7FC9FD32ABEB = _0xE28D7FC9FD32ABEB;
    /**
     * No comment provided
     *
     * Hash: 0xE2C2FBB7825FFC66 | Since: 1207
     */
    function _0xE2C2FBB7825FFC66() {
        Citizen.invokeNative('0xE2C2FBB7825FFC66');
    }
    event_1._0xE2C2FBB7825FFC66 = _0xE2C2FBB7825FFC66;
    /**
     * Models used in the scripts: P_REGISTER05X, P_REGISTER06X, P_REGISTER03X, PLAYER_ZERO, PLAYER_THREE, A_C_HORSE_MORGAN_FLAXENCHESTNUT
     *
     * Hash: 0x608AD36A644A97FE | Since: 1207
     */
    function addModelToMonitor(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        AddModelToEventMonitor(model, false, false);
    }
    event_1.addModelToMonitor = addModelToMonitor;
    /**
     * No comment provided
     *
     * Hash: 0xCA1315C33B9A2847 | Since: 1207
     */
    function createShocking() {
        return CreateShockingEvent();
    }
    event_1.createShocking = createShocking;
    /**
     * No comment provided
     *
     * Hash: 0xAD8F2424C6E1E3A8 | Since: 1207
     */
    function flushAllEventTrackers(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        EventFlushAllEventTrackers(_ped);
    }
    event_1.flushAllEventTrackers = flushAllEventTrackers;
    /**
     * Returns eventType
     *
     * Hash: 0x796EECFF0C6D39BE | Since: 1207
     */
    function getRecentEvent(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return EventGetRecentEvent(_entity, 0, 0);
    }
    event_1.getRecentEvent = getRecentEvent;
    /**
     * No comment provided
     *
     * Hash: 0x822A001BCEA5BD81 | Since: 1207
     */
    function getSourceEntityFromEvent(entity, eventType) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return EventGetSourceEntityFromEvent(_entity, eventType, 0, 0);
    }
    event_1.getSourceEntityFromEvent = getSourceEntityFromEvent;
    /**
     * No comment provided
     *
     * Hash: 0x38497F139981C5C9 | Since: 1207
     */
    function getTargetEntityFromEvent(entity, eventType) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return EventGetTargetEntityFromEvent(_entity, eventType, 0, 0);
    }
    event_1.getTargetEntityFromEvent = getTargetEntityFromEvent;
    /**
     * No comment provided
     *
     * Hash: 0xC6A7DC546E94FED5 | Since: 1207
     */
    function getTimeSinceEvent(entity, eventType) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return EventGetTimeSinceEvent(_entity, eventType, 0, 0);
    }
    event_1.getTimeSinceEvent = getTimeSinceEvent;
    /**
     * No comment provided
     *
     * Hash: 0x797B3D4D92E56094 | Since: 1207
     */
    function isTrackerActive(eventName, shockingEvent) {
        if (typeof shockingEvent === 'string')
            shockingEvent = misc.getHashKey(shockingEvent);
        return IsEventTrackerActive(eventName, shockingEvent);
    }
    event_1.isTrackerActive = isTrackerActive;
    /**
     * No comment provided
     *
     * Hash: 0xB4C71BA9CAB097BD | Since: 1207
     */
    function removeAllShockingsInArea(pos, radius) {
        RemoveAllShockingEventsInArea(pos.x, pos.y, pos.z, radius, false);
    }
    event_1.removeAllShockingsInArea = removeAllShockingsInArea;
    /**
     * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
     *
     * Hash: 0x6A648D42BF271DC7 | Since: 1207
     */
    function removeAllShockingsOfTypeInArea(eventType, pos, radius) {
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        RemoveAllShockingEventsOfTypeInArea(eventType, pos.x, pos.y, pos.z, radius, false);
    }
    event_1.removeAllShockingsOfTypeInArea = removeAllShockingsOfTypeInArea;
    /**
     * No comment provided
     *
     * Hash: 0xBB1E41DD3D3C6250 | Since: 1207
     */
    function setTrackerForPed(ped, eventName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetEventTrackerForPed(_ped, eventName, 0);
    }
    event_1.setTrackerForPed = setTrackerForPed;
})(event || (event = {}));
export var fire;
(function (fire) {
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/graphics/explosions
     *
     * explosionType:
     * enum eExplosionTag
     * {
     * EXP_TAG_DONTCARE = -1,
     * EXP_TAG_GRENADE,
     * EXP_TAG_STICKYBOMB,
     * EXP_TAG_MOLOTOV,
     * EXP_TAG_MOLOTOV_VOLATILE,
     * EXP_TAG_HI_OCTANE,
     * EXP_TAG_CAR,
     * EXP_TAG_PLANE,
     * EXP_TAG_PETROL_PUMP,
     * EXP_TAG_DIR_STEAM,
     * EXP_TAG_DIR_FLAME,
     * EXP_TAG_DIR_WATER_HYDRANT,
     * EXP_TAG_BOAT,
     * EXP_TAG_BULLET,
     * EXP_TAG_SMOKEGRENADE,
     * EXP_TAG_BZGAS,
     * EXP_TAG_GAS_CANISTER,
     * EXP_TAG_EXTINGUISHER,
     * EXP_TAG_TRAIN,
     * EXP_TAG_DIR_FLAME_EXPLODE,
     * EXP_TAG_VEHICLE_BULLET,
     * EXP_TAG_BIRD_CRAP,
     * EXP_TAG_FIREWORK,
     * EXP_TAG_TORPEDO,
     * EXP_TAG_TORPEDO_UNDERWATER,
     * EXP_TAG_LANTERN,
     * EXP_TAG_DYNAMITE,
     * EXP_TAG_DYNAMITESTACK,
     * EXP_TAG_DYNAMITE_VOLATILE,
     * EXP_TAG_RIVER_BLAST,
     * EXP_TAG_PLACED_DYNAMITE,
     * EXP_TAG_FIRE_ARROW,
     * EXP_TAG_DYNAMITE_ARROW,
     * EXP_TAG_PHOSPHOROUS_BULLET,
     * EXP_TAG_LIGHTNING_STRIKE,
     * EXP_TAG_TRACKING_ARROW,
     * EXP_TAG_POISON_BOTTLE
     * };
     *
     * Hash: 0x7D6F58F69DA92530 | Since: 1207
     */
    function addExplosion(pos, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
        AddExplosion(pos.x, pos.y, pos.z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
    }
    fire.addExplosion = addExplosion;
    /**
     * explosionType: see ADD_EXPLOSION
     * Change explosionFx (Visual Effect) for specified explosionType
     *
     * Hash: 0x53BA259F3A67A99E | Since: 1207
     */
    function addExplosionWithUserVfx(pos, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
        if (typeof explosionFx === 'string')
            explosionFx = misc.getHashKey(explosionFx);
        AddExplosionWithUserVfx(pos.x, pos.y, pos.z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
    }
    fire.addExplosionWithUserVfx = addExplosionWithUserVfx;
    /**
     * explosionType: see ADD_EXPLOSION
     *
     * Hash: 0xD84A917A64D4D016 | Since: 1207
     */
    function addOwnedExplosion(ped, pos, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddOwnedExplosion(_ped, pos.x, pos.y, pos.z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
    }
    fire.addOwnedExplosion = addOwnedExplosion;
    /**
     * No comment provided
     *
     * Hash: 0xB646FB657F448261 | Since: 1207
     */
    function getClosestPos(pos) {
        return GetClosestFirePos(pos.x, pos.y, pos.z);
    }
    fire.getClosestPos = getClosestPos;
    /**
     * No comment provided
     *
     * Hash: 0xF9617BC6FAE61E08 | Since: 1207
     */
    function getNumberOfsInRange(pos, radius) {
        return GetNumberOfFiresInRange(pos.x, pos.y, pos.z, radius);
    }
    fire.getNumberOfsInRange = getNumberOfsInRange;
    /**
     * explosionType: see ADD_EXPLOSION
     *
     * Hash: 0x8002DDAB58594D78 | Since: 1207
     */
    function getOwnerOfExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, radius) {
        return GetOwnerOfExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, radius);
    }
    fire.getOwnerOfExplosionInAngledArea = getOwnerOfExplosionInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x1BD7C371CE257C3E | Since: 1207
     */
    function isEntityOn(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityOnFire(_entity);
    }
    fire.isEntityOn = isEntityOn;
    /**
     * explosionType: see ADD_EXPLOSION
     *
     * Hash: 0xD96E82AEBFFAAFF0 | Since: 1207
     */
    function isExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2) {
        return IsExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2);
    }
    fire.isExplosionActiveInArea = isExplosionActiveInArea;
    /**
     * explosionType: see ADD_EXPLOSION
     *
     * Hash: 0x5AE661ECD18524C9 | Since: 1207
     */
    function isExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, angle) {
        return IsExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, angle);
    }
    fire.isExplosionInAngledArea = isExplosionInAngledArea;
    /**
     * explosionType: see ADD_EXPLOSION
     *
     * Hash: 0x8391BA4313A25AD3 | Since: 1207
     */
    function isExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2) {
        return IsExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2);
    }
    fire.isExplosionInArea = isExplosionInArea;
    /**
     * explosionType: see ADD_EXPLOSION
     *
     * Hash: 0xD62DD846D82CBB90 | Since: 1207
     */
    function isExplosionInSphere(explosionType, pos, radius) {
        return IsExplosionInSphere(explosionType, pos.x, pos.y, pos.z, radius);
    }
    fire.isExplosionInSphere = isExplosionInSphere;
    /**
     * No comment provided
     *
     * Hash: 0x790125C36E194069 | Since: 1207
     */
    function removeScript(fireHandle) {
        RemoveScriptFire(fireHandle);
    }
    fire.removeScript = removeScript;
    /**
     * No comment provided
     *
     * Hash: 0xC4DC7418A44D6822 | Since: 1207
     */
    function startEntity() {
        StartEntityFire(undefined, undefined, undefined, undefined);
    }
    fire.startEntity = startEntity;
    /**
     * Starts a fire:
     *
     * xyz: Location of fire
     * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
     * isGasFire: Whether or not the fire is powered by gasoline.
     *
     * Hash: 0x6B83617E04503888 | Since: 1207
     */
    function startScript(pos, soundsetName) {
        return StartScriptFire(pos.x, pos.y, pos.z, 0, 0, false, soundsetName, 0, 0);
    }
    fire.startScript = startScript;
    /**
     * No comment provided
     *
     * Hash: 0x8390751DC40C1E98 | Since: 1207
     */
    function stopEntity() {
        StopEntityFire(undefined, undefined);
    }
    fire.stopEntity = stopEntity;
    /**
     * No comment provided
     *
     * Hash: 0xDB38F247BD421708 | Since: 1207
     */
    function stopInRange(pos, radius) {
        StopFireInRange(pos.x, pos.y, pos.z, radius);
    }
    fire.stopInRange = stopInRange;
    /**
     * Only used in R* SP Related Camp Scripts
     *
     * Hash: 0x24DB6B9F2B719043 | Since: 1207
     */
    function _0x24DB6B9F2B719043() {
        Citizen.invokeNative('0x24DB6B9F2B719043', 0);
    }
    fire._0x24DB6B9F2B719043 = _0x24DB6B9F2B719043;
    /**
     * Add explosion with vfx and assign an entity as damage causer.
     * explosionType: https://github.com/femga/rdr3_discoveries/blob/master/graphics/explosions/README.md
     * explosionFx: https://github.com/femga/rdr3_discoveries/blob/master/graphics/explosions/explosion_vfxTags.lua
     *
     * Hash: 0x34AE85C7CA4857AA | Since: 1207
     */
    function addExplosionWithUserVfxAndDamageCauser(entity, pos, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof explosionFx === 'string')
            explosionFx = misc.getHashKey(explosionFx);
        Citizen.invokeNative('0x34AE85C7CA4857AA', _entity, false, pos.x, pos.y, pos.z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
    }
    fire.addExplosionWithUserVfxAndDamageCauser = addExplosionWithUserVfxAndDamageCauser;
    /**
     * No comment provided
     *
     * Hash: 0x41B87A6495EE13DD | Since: 1232
     */
    function _0x41B87A6495EE13DD() {
        return Citizen.invokeNative('0x41B87A6495EE13DD', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    fire._0x41B87A6495EE13DD = _0x41B87A6495EE13DD;
    /**
     * No comment provided
     *
     * Hash: 0x559FC1D310813031 | Since: 1232
     */
    function getClosestPosInVolume(pos, rot, scale) {
        return Citizen.invokeNative('0x559FC1D310813031', pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    fire.getClosestPosInVolume = getClosestPosInVolume;
    /**
     * No comment provided
     *
     * Hash: 0x68F6A75FDF5A70D6 | Since: 1207
     */
    function _0x68F6A75FDF5A70D6(pos) {
        Citizen.invokeNative('0x68F6A75FDF5A70D6', pos.x, pos.y, pos.z, 0);
    }
    fire._0x68F6A75FDF5A70D6 = _0x68F6A75FDF5A70D6;
    /**
     * No comment provided
     *
     * Hash: 0x754937C28271BC65 | Since: 1207
     */
    function _0x754937C28271BC65() {
        Citizen.invokeNative('0x754937C28271BC65', undefined);
    }
    fire._0x754937C28271BC65 = _0x754937C28271BC65;
    /**
     * this natives only returns true if entity is damaged by fire , once damaged caused to entity by fire (like burned appearance) has cleared (they clear over time) then returns false
     *
     * Hash: 0xA4454592DCF7C992 | Since: 1207
     */
    function isEntityDamagedBy(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0xA4454592DCF7C992', _entity);
    }
    fire.isEntityDamagedBy = isEntityDamagedBy;
    /**
     * Add explosion with and assign an entity as damage causer.
     * explosionType: https://github.com/femga/rdr3_discoveries/blob/master/graphics/explosions/README.md
     *
     * Hash: 0xB7DF150605EEDC9B | Since: 1207
     */
    function addExplosionWithDamageCauser(entity, pos, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xB7DF150605EEDC9B', _entity, 0, pos.x, pos.y, pos.z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
    }
    fire.addExplosionWithDamageCauser = addExplosionWithDamageCauser;
    /**
     * No comment provided
     *
     * Hash: 0xCDC25355C0D65963 | Since: 1207
     */
    function isEntityConsumedBy(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityConsumedByFire(_entity);
    }
    fire.isEntityConsumedBy = isEntityConsumedBy;
    /**
     * explosionType: see ADD_EXPLOSION
     *
     * Hash: 0xE24822A4CFC9107A | Since: 1207
     */
    function isExplosionInVolume(explosionType, volume) {
        return IsExplosionInVolume(explosionType, volume);
    }
    fire.isExplosionInVolume = isExplosionInVolume;
    /**
     * Tested with fire & dynamite. Only returns true using value p1 = 1 and when the ped is affected by fire.
     *
     * Hash: 0xAB7993BA61A4674F | Since: 1232
     */
    function isPedShockingEventActive(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedShockingEventActive(_ped, 0);
    }
    fire.isPedShockingEventActive = isPedShockingEventActive;
    /**
     * No comment provided
     *
     * Hash: 0xB7C7BDC375AEA9A4 | Since: 1207
     */
    function stopInBox(pos, rot, scale) {
        StopFireInBox(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    fire.stopInBox = stopInBox;
})(fire || (fire = {}));
export var flock;
(function (flock) {
    /**
     * index: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningBools
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_BOOL_PARAMS
     *
     * Hash: 0x1C1993824A396603 | Since: 1207
     */
    function getAnimalTuningBoolParam(animal, index) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        return GetAnimalTuningBoolParam(_animal, index);
    }
    flock.getAnimalTuningBoolParam = getAnimalTuningBoolParam;
    /**
     * index: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningFloats
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_FLOAT_PARAMS
     *
     * Hash: 0x4BC3ECFDA0297E27 | Since: 1207
     */
    function getAnimalTuningFloatParam(animal, index) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        return GetAnimalTuningFloatParam(_animal, index);
    }
    flock.getAnimalTuningFloatParam = getAnimalTuningFloatParam;
    /**
     * No comment provided
     *
     * Hash: 0xE108489621422F91 | Since: 1207
     */
    function getSpeciesTuningFloatParam(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return GetSpeciesTuningFloatParam(p0, 0, 0);
    }
    flock.getSpeciesTuningFloatParam = getSpeciesTuningFloatParam;
    /**
     * No comment provided
     *
     * Hash: 0x96AA1304D30E6BC3 | Since: 1355
     */
    function resetAnimalTuningBoolParam(animal, index) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        ResetAnimalTuningBoolParam(_animal, index);
    }
    flock.resetAnimalTuningBoolParam = resetAnimalTuningBoolParam;
    /**
     * No comment provided
     *
     * Hash: 0xE776A195488FC520 | Since: 1355
     */
    function resetAnimalTuningFloatParam(animal, index) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        ResetAnimalTuningFloatParam(_animal, index);
    }
    flock.resetAnimalTuningFloatParam = resetAnimalTuningFloatParam;
    /**
     * No comment provided
     *
     * Hash: 0x9FF1E042FA597187 | Since: 1207
     */
    function setAnimalTuningBoolParam(animal, index, value) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        SetAnimalTuningBoolParam(_animal, index, value);
    }
    flock.setAnimalTuningBoolParam = setAnimalTuningBoolParam;
    /**
     * No comment provided
     *
     * Hash: 0xCBDA22C87977244F | Since: 1207
     */
    function setAnimalTuningFloatParam(animal, index, value) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        SetAnimalTuningFloatParam(_animal, index, value);
    }
    flock.setAnimalTuningFloatParam = setAnimalTuningFloatParam;
    /**
     * No comment provided
     *
     * Hash: 0x6D1D94C2459B42EE | Since: 1207
     */
    function setSpeciesTuningBoolParam(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        SetSpeciesTuningBoolParam(p0, 0, 0, false);
    }
    flock.setSpeciesTuningBoolParam = setSpeciesTuningBoolParam;
    /**
     * No comment provided
     *
     * Hash: 0x963240B6C252BA49 | Since: 1207
     */
    function setSpeciesTuningFloatParam(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        SetSpeciesTuningFloatParam(p0, 0, 0, 0);
    }
    flock.setSpeciesTuningFloatParam = setSpeciesTuningFloatParam;
    /**
     * No comment provided
     *
     * Hash: 0x0816C31480764AB0 | Since: 1207
     */
    function _0x0816C31480764AB0() {
        Citizen.invokeNative('0x0816C31480764AB0', undefined, undefined, undefined, undefined);
    }
    flock._0x0816C31480764AB0 = _0x0816C31480764AB0;
    /**
     * No comment provided
     *
     * Hash: 0x09EE00B8F858E0BE | Since: 1207
     */
    function _0x09EE00B8F858E0BE() {
        return Citizen.invokeNative('0x09EE00B8F858E0BE', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    flock._0x09EE00B8F858E0BE = _0x09EE00B8F858E0BE;
    /**
     * No comment provided
     *
     * Hash: 0x1520626FFAFFFA8F | Since: 1207
     */
    function _0x1520626FFAFFFA8F() {
        Citizen.invokeNative('0x1520626FFAFFFA8F', undefined, undefined);
    }
    flock._0x1520626FFAFFFA8F = _0x1520626FFAFFFA8F;
    /**
     * No comment provided
     *
     * Hash: 0x17E3E5C46ECCD308 | Since: 1207
     */
    function _0x17E3E5C46ECCD308() {
        Citizen.invokeNative('0x17E3E5C46ECCD308', undefined, undefined, undefined);
    }
    flock._0x17E3E5C46ECCD308 = _0x17E3E5C46ECCD308;
    /**
     * No comment provided
     *
     * Hash: 0x19870C40C7EE15BE | Since: 1207
     */
    function _0x19870C40C7EE15BE() {
        return Citizen.invokeNative('0x19870C40C7EE15BE', undefined, undefined);
    }
    flock._0x19870C40C7EE15BE = _0x19870C40C7EE15BE;
    /**
     * No comment provided
     *
     * Hash: 0x1DA6CB02071055D5 | Since: 1207
     */
    function _0x1DA6CB02071055D5() {
        return new Vector3(Citizen.invokeNative('0x1DA6CB02071055D5', undefined));
    }
    flock._0x1DA6CB02071055D5 = _0x1DA6CB02071055D5;
    /**
     * No comment provided
     *
     * Hash: 0x2DF3D457D86F8E57 | Since: 1207
     */
    function _0x2DF3D457D86F8E57() {
        Citizen.invokeNative('0x2DF3D457D86F8E57', undefined, undefined);
    }
    flock._0x2DF3D457D86F8E57 = _0x2DF3D457D86F8E57;
    /**
     * No comment provided
     *
     * Hash: 0x34B9C4D86DF2C2F3 | Since: 1207
     */
    function _0x34B9C4D86DF2C2F3() {
        return Citizen.invokeNative('0x34B9C4D86DF2C2F3', undefined);
    }
    flock._0x34B9C4D86DF2C2F3 = _0x34B9C4D86DF2C2F3;
    /**
     * No comment provided
     *
     * Hash: 0x36486AF7DA93A464 | Since: 1207
     */
    function _0x36486AF7DA93A464() {
        return Citizen.invokeNative('0x36486AF7DA93A464', undefined);
    }
    flock._0x36486AF7DA93A464 = _0x36486AF7DA93A464;
    /**
     * Remove the ped from a herd.
     *
     * Hash: 0x408D1149C5E39C1E | Since: 1207
     */
    function removeHerdPed(herd, ped) {
        const _herd = herd instanceof Entity ? herd.handle() : herd;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x408D1149C5E39C1E', _herd, _ped);
    }
    flock.removeHerdPed = removeHerdPed;
    /**
     * No comment provided
     *
     * Hash: 0x53187E563F938E76 | Since: 1207
     */
    function _0x53187E563F938E76() {
        return Citizen.invokeNative('0x53187E563F938E76', undefined);
    }
    flock._0x53187E563F938E76 = _0x53187E563F938E76;
    /**
     * Clear the herd.
     *
     * Hash: 0x67A43EA3F6FE0076 | Since: 1207
     */
    function clearHerd(herd) {
        const _herd = herd instanceof Entity ? herd.handle() : herd;
        Citizen.invokeNative('0x67A43EA3F6FE0076', _herd);
    }
    flock.clearHerd = clearHerd;
    /**
     * No comment provided
     *
     * Hash: 0x6C57BEA886A20C6B | Since: 1207
     */
    function _0x6C57BEA886A20C6B() {
        Citizen.invokeNative('0x6C57BEA886A20C6B', undefined, undefined);
    }
    flock._0x6C57BEA886A20C6B = _0x6C57BEA886A20C6B;
    /**
     * No comment provided
     *
     * Hash: 0x706B434FEFAD6A24 | Since: 1207
     */
    function _0x706B434FEFAD6A24() {
        Citizen.invokeNative('0x706B434FEFAD6A24', undefined);
    }
    flock._0x706B434FEFAD6A24 = _0x706B434FEFAD6A24;
    /**
     * No comment provided
     *
     * Hash: 0x8049B17BEC937662 | Since: 1207
     */
    function _0x8049B17BEC937662() {
        return Citizen.invokeNative('0x8049B17BEC937662', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    flock._0x8049B17BEC937662 = _0x8049B17BEC937662;
    /**
     * No comment provided
     *
     * Hash: 0xA881F5C77A560906 | Since: 1207
     */
    function _0xA881F5C77A560906() {
        Citizen.invokeNative('0xA881F5C77A560906', undefined);
    }
    flock._0xA881F5C77A560906 = _0xA881F5C77A560906;
    /**
     * No comment provided
     *
     * Hash: 0xC3D581A34BC0A1F0 | Since: 1207
     */
    function _0xC3D581A34BC0A1F0() {
        Citizen.invokeNative('0xC3D581A34BC0A1F0', undefined, undefined);
    }
    flock._0xC3D581A34BC0A1F0 = _0xC3D581A34BC0A1F0;
    /**
     * No comment provided
     *
     * Hash: 0xC72CE37081DAE625 | Since: 1207
     */
    function _0xC72CE37081DAE625() {
        Citizen.invokeNative('0xC72CE37081DAE625', undefined, undefined, undefined, undefined);
    }
    flock._0xC72CE37081DAE625 = _0xC72CE37081DAE625;
    /**
     * No comment provided
     *
     * Hash: 0xC95611869E14F8AF | Since: 1207
     */
    function _0xC95611869E14F8AF() {
        Citizen.invokeNative('0xC95611869E14F8AF', undefined, undefined, undefined, undefined);
    }
    flock._0xC95611869E14F8AF = _0xC95611869E14F8AF;
    /**
     * No comment provided
     *
     * Hash: 0xCC6B5AAFC87BFC7B | Since: 1207
     */
    function _0xCC6B5AAFC87BFC7B() {
        Citizen.invokeNative('0xCC6B5AAFC87BFC7B', undefined, undefined, undefined);
    }
    flock._0xCC6B5AAFC87BFC7B = _0xCC6B5AAFC87BFC7B;
    /**
     * No comment provided
     *
     * Hash: 0xD95F04A4E73BE85E | Since: 1207
     */
    function _0xD95F04A4E73BE85E() {
        return Citizen.invokeNative('0xD95F04A4E73BE85E', undefined, undefined);
    }
    flock._0xD95F04A4E73BE85E = _0xD95F04A4E73BE85E;
    /**
     * Delete and invalidate the herd.
     *
     * Hash: 0xE0961AED72642B80 | Since: 1207
     */
    function deleteHerd(herd) {
        const _herd = herd instanceof Entity ? herd.handle() : herd;
        Citizen.invokeNative('0xE0961AED72642B80', _herd);
    }
    flock.deleteHerd = deleteHerd;
    /**
     * No comment provided
     *
     * Hash: 0xE36D2CB540597EF7 | Since: 1207
     */
    function _0xE36D2CB540597EF7() {
        Citizen.invokeNative('0xE36D2CB540597EF7', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    flock._0xE36D2CB540597EF7 = _0xE36D2CB540597EF7;
    /**
     * No comment provided
     *
     * Hash: 0xE93415B3307208E5 | Since: 1207
     */
    function _0xE93415B3307208E5() {
        return Citizen.invokeNative('0xE93415B3307208E5', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    flock._0xE93415B3307208E5 = _0xE93415B3307208E5;
    /**
     * species: SPECIES_BIRD_CROW
     *
     * Hash: 0xF2CCA7B68CFAB2B9 | Since: 1207
     */
    function _0xF2CCA7B68CFAB2B9(species, x1, y1, z1, x2, y2, z2, x3, y3, z3) {
        if (typeof species === 'string')
            species = misc.getHashKey(species);
        Citizen.invokeNative('0xF2CCA7B68CFAB2B9', species, x1, y1, z1, x2, y2, z2, x3, y3, z3, 0, 0, 0, 0);
    }
    flock._0xF2CCA7B68CFAB2B9 = _0xF2CCA7B68CFAB2B9;
    /**
     * No comment provided
     *
     * Hash: 0xFA821997794F48E7 | Since: 1207
     */
    function _0xFA821997794F48E7() {
        Citizen.invokeNative('0xFA821997794F48E7', undefined, undefined, undefined);
    }
    flock._0xFA821997794F48E7 = _0xFA821997794F48E7;
    /**
     * No comment provided
     *
     * Hash: 0xFB16F08F47B83B4C | Since: 1207
     */
    function _0xFB16F08F47B83B4C() {
        Citizen.invokeNative('0xFB16F08F47B83B4C', undefined);
    }
    flock._0xFB16F08F47B83B4C = _0xFB16F08F47B83B4C;
    /**
     * No comment provided
     *
     * Hash: 0xFDB008B3BCF5992F | Since: 1207
     */
    function _0xFDB008B3BCF5992F() {
        Citizen.invokeNative('0xFDB008B3BCF5992F', undefined, undefined, undefined);
    }
    flock._0xFDB008B3BCF5992F = _0xFDB008B3BCF5992F;
    /**
     * No comment provided
     *
     * Hash: 0xFF1E339CE40EAAAF | Since: 1207
     */
    function _0xFF1E339CE40EAAAF() {
        Citizen.invokeNative('0xFF1E339CE40EAAAF', undefined, undefined);
    }
    flock._0xFF1E339CE40EAAAF = _0xFF1E339CE40EAAAF;
    /**
     * No comment provided
     *
     * Hash: 0x933E5D31A7D13069 | Since: 1207
     */
    function addPedTo(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddPedToFlock(undefined, _ped);
    }
    flock.addPedTo = addPedTo;
    /**
     * No comment provided
     *
     * Hash: 0xCB4EF7EDAE2E16F1 | Since: 1207
     */
    function createHerd() {
        return CreateHerd();
    }
    flock.createHerd = createHerd;
    /**
     * Ped (horse) will run away from players and mounting will trigger them to buck until disabled.
     * Used for: REL_DOMESTICATED_ANIMAL
     *
     * Hash: 0x3B005FF0538ED2A9 | Since: 1207
     */
    function getAnimalIsWild(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAnimalIsWild(_ped);
    }
    flock.getAnimalIsWild = getAnimalIsWild;
    /**
     * enum eAnimalRarityLevel
     * {
     * ARL_COMMON,
     * ARL_RARE,
     * ARL_LEGENDARY,
     * ARL_NUMRARITYLEVELS
     * };
     *
     * Hash: 0xF8B48A361DC388AE | Since: 1207
     */
    function getAnimalRarity(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAnimalRarity(_ped);
    }
    flock.getAnimalRarity = getAnimalRarity;
    /**
     * No comment provided
     *
     * Hash: 0x8D913E493BAFE0A3 | Since: 1207
     */
    function isHerdValid(herdHandle) {
        return IsHerdValid(herdHandle);
    }
    flock.isHerdValid = isHerdValid;
    /**
     * Return whether the ped is in the herd.
     *
     * Hash: 0x9E13ACC38BA8F9C3 | Since: 1207
     */
    function isPedInHerd(herd, ped) {
        const _herd = herd instanceof Entity ? herd.handle() : herd;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x9E13ACC38BA8F9C3', _herd, _ped);
    }
    flock.isPedInHerd = isPedInHerd;
    /**
     * No comment provided
     *
     * Hash: 0xAEB97D84CDF3C00B | Since: 1207
     */
    function setAnimalIsWild(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAnimalIsWild(_ped, toggle);
    }
    flock.setAnimalIsWild = setAnimalIsWild;
    /**
     * rarityLevel: see _GET_ANIMAL_RARITY
     *
     * Hash: 0x8B6F0F59B1B99801 | Since: 1207
     */
    function setAnimalRarity(ped, rarityLevel) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAnimalRarity(_ped, rarityLevel);
    }
    flock.setAnimalRarity = setAnimalRarity;
})(flock || (flock = {}));
export var gang;
(function (gang) {
    /**
     * No comment provided
     *
     * Hash: 0x901E0DC25080C8B9 | Since: 1207
     */
    function networkGetId(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetGangId(_player);
    }
    gang.networkGetId = networkGetId;
    /**
     * No comment provided
     *
     * Hash: 0x4BE6C13A45CCA8EC | Since: 1207
     */
    function networkGetLeader(gangId) {
        return NetworkGetGangLeader(gangId);
    }
    gang.networkGetLeader = networkGetLeader;
    /**
     * No comment provided
     *
     * Hash: 0x149A2751AB66AC02 | Since: 1207
     */
    function networkGetNumMembers(gangId) {
        return NetworkGetNumGangMembers(gangId);
    }
    gang.networkGetNumMembers = networkGetNumMembers;
    /**
     * No comment provided
     *
     * Hash: 0x0F99F6436528A089 | Since: 1207
     */
    function networkIsActive(gangId) {
        return NetworkIsGangActive(gangId);
    }
    gang.networkIsActive = networkIsActive;
    /**
     * No comment provided
     *
     * Hash: 0xD6F6ACF4392187FB | Since: 1207
     */
    function networkIsIdValid(gangId) {
        return NetworkIsGangIdValid(gangId);
    }
    gang.networkIsIdValid = networkIsIdValid;
    /**
     * No comment provided
     *
     * Hash: 0x93A91A351A07360E | Since: 1207
     */
    function networkIsInSession(gangId) {
        return NetworkIsGangInSession(gangId);
    }
    gang.networkIsInSession = networkIsInSession;
    /**
     * No comment provided
     *
     * Hash: 0x424B17A7DC5C90BC | Since: 1207
     */
    function networkIsLeader(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsGangLeader(_player);
    }
    gang.networkIsLeader = networkIsLeader;
    /**
     * No comment provided
     *
     * Hash: 0x3F59FE6F37869576 | Since: 1207
     */
    function networkIsInSame(player1, player2) {
        const _player1 = player1 instanceof Player ? player1.localId() : player1;
        const _player2 = player2 instanceof Player ? player2.localId() : player2;
        return NetworkIsInSameGang(_player1, _player2);
    }
    gang.networkIsInSame = networkIsInSame;
    /**
     * No comment provided
     *
     * Hash: 0x0E5C9FB9ED5DFF1C | Since: 1207
     */
    function _0x0E5C9FB9ED5DFF1C() {
        return Citizen.invokeNative('0x0E5C9FB9ED5DFF1C', undefined);
    }
    gang._0x0E5C9FB9ED5DFF1C = _0x0E5C9FB9ED5DFF1C;
    /**
     * No comment provided
     *
     * Hash: 0x1F11702DDBD915C6 | Since: 1207
     */
    function _0x1F11702DDBD915C6() {
        return Citizen.invokeNative('0x1F11702DDBD915C6', undefined, undefined);
    }
    gang._0x1F11702DDBD915C6 = _0x1F11702DDBD915C6;
    /**
     * No comment provided
     *
     * Hash: 0x2F7EB8B6F6AFE79C | Since: 1207
     */
    function _0x2F7EB8B6F6AFE79C() {
        return Citizen.invokeNative('0x2F7EB8B6F6AFE79C', undefined);
    }
    gang._0x2F7EB8B6F6AFE79C = _0x2F7EB8B6F6AFE79C;
    /**
     * No comment provided
     *
     * Hash: 0x3ADC71A66356D706 | Since: 1207
     */
    function _0x3ADC71A66356D706() {
        return Citizen.invokeNative('0x3ADC71A66356D706');
    }
    gang._0x3ADC71A66356D706 = _0x3ADC71A66356D706;
    /**
     * No comment provided
     *
     * Hash: 0x48D82C83987E18E4 | Since: 1207
     */
    function _0x48D82C83987E18E4() {
        return Citizen.invokeNative('0x48D82C83987E18E4', undefined);
    }
    gang._0x48D82C83987E18E4 = _0x48D82C83987E18E4;
    /**
     * No comment provided
     *
     * Hash: 0x51C5EF47086AA0D7 | Since: 1207
     */
    function _0x51C5EF47086AA0D7() {
        return Citizen.invokeNative('0x51C5EF47086AA0D7');
    }
    gang._0x51C5EF47086AA0D7 = _0x51C5EF47086AA0D7;
    /**
     * No comment provided
     *
     * Hash: 0x53A94294FDDCF98C | Since: 1207
     */
    function _0x53A94294FDDCF98C() {
        return Citizen.invokeNative('0x53A94294FDDCF98C', undefined, undefined);
    }
    gang._0x53A94294FDDCF98C = _0x53A94294FDDCF98C;
    /**
     * No comment provided
     *
     * Hash: 0x6102830F764B3DE1 | Since: 1207
     */
    function _0x6102830F764B3DE1(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x6102830F764B3DE1', _player);
    }
    gang._0x6102830F764B3DE1 = _0x6102830F764B3DE1;
    /**
     * No comment provided
     *
     * Hash: 0x644E02F24F9D4E98 | Since: 1207
     */
    function _0x644E02F24F9D4E98() {
        return Citizen.invokeNative('0x644E02F24F9D4E98', undefined, undefined);
    }
    gang._0x644E02F24F9D4E98 = _0x644E02F24F9D4E98;
    /**
     * No comment provided
     *
     * Hash: 0x7933754F260B428A | Since: 1207
     */
    function _0x7933754F260B428A(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x7933754F260B428A', _player);
    }
    gang._0x7933754F260B428A = _0x7933754F260B428A;
    /**
     * No comment provided
     *
     * Hash: 0x7BAA30C9BBE8AEE7 | Since: 1207
     */
    function _0x7BAA30C9BBE8AEE7() {
        return Citizen.invokeNative('0x7BAA30C9BBE8AEE7', undefined, undefined);
    }
    gang._0x7BAA30C9BBE8AEE7 = _0x7BAA30C9BBE8AEE7;
    /**
     * No comment provided
     *
     * Hash: 0xA9CEAE8D6637FBAD | Since: 1207
     */
    function _0xA9CEAE8D6637FBAD() {
        Citizen.invokeNative('0xA9CEAE8D6637FBAD', undefined);
    }
    gang._0xA9CEAE8D6637FBAD = _0xA9CEAE8D6637FBAD;
    /**
     * No comment provided
     *
     * Hash: 0xAD22AB64FA428DF3 | Since: 1207
     */
    function _0xAD22AB64FA428DF3() {
        Citizen.invokeNative('0xAD22AB64FA428DF3', undefined);
    }
    gang._0xAD22AB64FA428DF3 = _0xAD22AB64FA428DF3;
    /**
     * No comment provided
     *
     * Hash: 0xAFD3599A3CC5637D | Since: 1207
     */
    function _0xAFD3599A3CC5637D() {
        return Citizen.invokeNative('0xAFD3599A3CC5637D');
    }
    gang._0xAFD3599A3CC5637D = _0xAFD3599A3CC5637D;
    /**
     * No comment provided
     *
     * Hash: 0xB22B1D9F74095382 | Since: 1207
     */
    function _0xB22B1D9F74095382() {
        Citizen.invokeNative('0xB22B1D9F74095382', undefined);
    }
    gang._0xB22B1D9F74095382 = _0xB22B1D9F74095382;
    /**
     * No comment provided
     *
     * Hash: 0xB38C256498748413 | Since: 1207
     */
    function _0xB38C256498748413() {
        Citizen.invokeNative('0xB38C256498748413');
    }
    gang._0xB38C256498748413 = _0xB38C256498748413;
    /**
     * No comment provided
     *
     * Hash: 0xC81A9E2C8EFD28D5 | Since: 1207
     */
    function _0xC81A9E2C8EFD28D5() {
        Citizen.invokeNative('0xC81A9E2C8EFD28D5', undefined);
    }
    gang._0xC81A9E2C8EFD28D5 = _0xC81A9E2C8EFD28D5;
    /**
     * _NETWORK_GET_* or _NETWORK_IS_*
     *
     * Hash: 0xDA801F7F6A5278D3 | Since: 1207
     */
    function _0xDA801F7F6A5278D3(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xDA801F7F6A5278D3', _player);
    }
    gang._0xDA801F7F6A5278D3 = _0xDA801F7F6A5278D3;
    /**
     * No comment provided
     *
     * Hash: 0xE4C64CD37CB176AA | Since: 1207
     */
    function _0xE4C64CD37CB176AA() {
        return Citizen.invokeNative('0xE4C64CD37CB176AA', 0);
    }
    gang._0xE4C64CD37CB176AA = _0xE4C64CD37CB176AA;
    /**
     * No comment provided
     *
     * Hash: 0xEE4F20004D0288B7 | Since: 1207
     */
    function _0xEE4F20004D0288B7() {
        Citizen.invokeNative('0xEE4F20004D0288B7');
    }
    gang._0xEE4F20004D0288B7 = _0xEE4F20004D0288B7;
    /**
     * No comment provided
     *
     * Hash: 0xFA7C5B7E087A4CEB | Since: 1207
     */
    function _0xFA7C5B7E087A4CEB() {
        return Citizen.invokeNative('0xFA7C5B7E087A4CEB');
    }
    gang._0xFA7C5B7E087A4CEB = _0xFA7C5B7E087A4CEB;
    /**
     * No comment provided
     *
     * Hash: 0xCE88A261DCBBA0D9 | Since: 1207
     */
    function networkGetLeaderHandle(gangId) {
        return NetworkGetGangLeaderHandle(gangId);
    }
    gang.networkGetLeaderHandle = networkGetLeaderHandle;
    /**
     * No comment provided
     *
     * Hash: 0xD1BF325C8252A982 | Since: 1207
     */
    function networkGetMembers(gangId) {
        return NetworkGetGangMembers(gangId);
    }
    gang.networkGetMembers = networkGetMembers;
    /**
     * No comment provided
     *
     * Hash: 0x9970AE8C3D706139 | Since: 1207
     */
    function networkGetPrivacy() {
        return NetworkGetGangPrivacy();
    }
    gang.networkGetPrivacy = networkGetPrivacy;
    /**
     * No comment provided
     *
     * Hash: 0x853B0FA4D8732C57 | Since: 1207
     */
    function networkGetSize(gangId) {
        return NetworkGetGangSize(gangId);
    }
    gang.networkGetSize = networkGetSize;
    /**
     * No comment provided
     *
     * Hash: 0x9BE7DCB22D32CCBE | Since: 1207
     */
    function networkIsMember(gangId, player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsGangMember(gangId, _player);
    }
    gang.networkIsMember = networkIsMember;
    /**
     * No comment provided
     *
     * Hash: 0xFCF96CCBD81B24C8 | Since: 1207
     */
    function networkIsOpen(gangId) {
        return NetworkIsGangOpen(gangId);
    }
    gang.networkIsOpen = networkIsOpen;
    /**
     * No comment provided
     *
     * Hash: 0x81FB74C83C2ED69F | Since: 1207
     */
    function networkIsInMy(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsInMyGang(_player);
    }
    gang.networkIsInMy = networkIsInMy;
    /**
     * banTimeSeconds is 120 in R* Scripts
     *
     * Hash: 0xCD9E2D9BC52FD80F | Since: 1207
     */
    function networkKickMember(player, banTimeSeconds) {
        const _player = player instanceof Player ? player.localId() : player;
        NetworkKickGangMember(_player, banTimeSeconds);
    }
    gang.networkKickMember = networkKickMember;
    /**
     * No comment provided
     *
     * Hash: 0x0A04A07BC3074EDB | Since: 1207
     */
    function networkLeave(disband) {
        NetworkLeaveGang(disband);
    }
    gang.networkLeave = networkLeave;
    /**
     * Returns true if join succeeded, false if failed.
     *
     * Hash: 0xC0474C8BCF6787AD | Since: 1207
     */
    function networkRequestJoin(gangId) {
        return NetworkRequestGangJoin(gangId);
    }
    gang.networkRequestJoin = networkRequestJoin;
    /**
     * No comment provided
     *
     * Hash: 0xC5BF29F4035277C2 | Since: 1207
     */
    function networkSetPrivacy(privacyType) {
        return NetworkSetGangPrivacy(privacyType);
    }
    gang.networkSetPrivacy = networkSetPrivacy;
    /**
     * No comment provided
     *
     * Hash: 0x833D8268D51B4522 | Since: 1207
     */
    function networkSetSize(size) {
        return NetworkSetGangSize(size);
    }
    gang.networkSetSize = networkSetSize;
    /**
     * openStatus = true -> sets privacyType = 2 (PUBLIC_ADVERTISED)
     * openStatus = false -> sets privacyType = 1 (INVITE_ONLY)
     *
     * campSize: NET_CAMP_SIZE_SMALLEST = 4, NET_CAMP_SIZE_LARGEST = 7
     *
     * Hash: 0xD1A226F2E05E58FC | Since: 1207
     */
    function networkStart(openStatus, campSize) {
        NetworkStartGang(openStatus, campSize);
    }
    gang.networkStart = networkStart;
})(gang || (gang = {}));
export var google_analytics;
(function (google_analytics) {
    /**
     * No comment provided
     *
     * Hash: 0x87BBCC4360A9BDE3 | Since: 1355
     */
    function googleAnalyticsEndEvent() {
        return GoogleAnalyticsEndEvent();
    }
    google_analytics.googleAnalyticsEndEvent = googleAnalyticsEndEvent;
    /**
     * No comment provided
     *
     * Hash: 0xC6DE040378364798 | Since: 1207
     */
    function googleAnalyticsPopPage(pageName) {
        GoogleAnalyticsPopPage(pageName);
    }
    google_analytics.googleAnalyticsPopPage = googleAnalyticsPopPage;
    /**
     * No comment provided
     *
     * Hash: 0xD43A616AE3AC4EF6 | Since: 1207
     */
    function googleAnalyticsPushPage(pageName) {
        GoogleAnalyticsPushPage(pageName);
    }
    google_analytics.googleAnalyticsPushPage = googleAnalyticsPushPage;
    /**
     * No comment provided
     *
     * Hash: 0x1C54F031D7C0F7AC | Since: 1355
     */
    function googleAnalyticsStartEvent(eventCategory, eventAction, eventLabel, eventValue) {
        return GoogleAnalyticsStartEvent(eventCategory, eventAction, eventLabel, eventValue);
    }
    google_analytics.googleAnalyticsStartEvent = googleAnalyticsStartEvent;
})(google_analytics || (google_analytics = {}));
export var graphics;
(function (graphics) {
    /**
     * No comment provided
     *
     * Hash: 0x57CB267624EF85C0 | Since: 1207
     */
    function addDecal() {
        return AddDecal(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    graphics.addDecal = addDecal;
    /**
     * No comment provided
     *
     * Hash: 0x73354FB6D03D2E8A | Since: 1207
     */
    function addPetrolTrailDecalInfo(pos) {
        AddPetrolTrailDecalInfo(pos.x, pos.y, pos.z, 0);
    }
    graphics.addPetrolTrailDecalInfo = addPetrolTrailDecalInfo;
    /**
     * Returns veg modifier handle
     *
     * Hash: 0xFA50F79257745E74 | Since: 1207
     */
    function addVegModifierSphere(pos, radius, modType, flags) {
        return AddVegModifierSphere(pos.x, pos.y, pos.z, radius, modType, flags, 0);
    }
    graphics.addVegModifierSphere = addVegModifierSphere;
    /**
     * No comment provided
     *
     * Hash: 0x7C348310A6E2FB91 | Since: 1207
     */
    function allowPickupLightSync(pickupObject, allow) {
        const _pickupObject = pickupObject instanceof Object ? pickupObject.handle() : pickupObject;
        AllowPickupLightSync(_pickupObject, allow);
    }
    graphics.allowPickupLightSync = allowPickupLightSync;
    /**
     * No comment provided
     *
     * Hash: 0x9AB192A9EF980EED | Since: 1207
     */
    function animpostfxHasEventTriggeredByStackhash(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        return AnimpostfxHasEventTriggeredByStackhash(effectNameHash, 0, false);
    }
    graphics.animpostfxHasEventTriggeredByStackhash = animpostfxHasEventTriggeredByStackhash;
    /**
     * No comment provided
     *
     * Hash: 0x59EA80079B86D8C7 | Since: 1207
     */
    function animpostfxIsPreloadingByStackhash(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        return AnimpostfxIsPreloadingByStackhash(effectNameHash);
    }
    graphics.animpostfxIsPreloadingByStackhash = animpostfxIsPreloadingByStackhash;
    /**
     * No comment provided
     *
     * Hash: 0x4A123E85D7C4CA0B | Since: 1207
     */
    function animpostfxIsRunning(effectName) {
        return AnimpostfxIsRunning(effectName);
    }
    graphics.animpostfxIsRunning = animpostfxIsRunning;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/graphics/animpostfx
     *
     * Hash: 0x4102732DF6B4005F | Since: 1207
     */
    function animpostfxPlay(effectName) {
        AnimpostfxPlay(effectName);
    }
    graphics.animpostfxPlay = animpostfxPlay;
    /**
     * No comment provided
     *
     * Hash: 0xB4FD7446BAB2F394 | Since: 1207
     */
    function animpostfxStop(effectName) {
        AnimpostfxStop(effectName);
    }
    graphics.animpostfxStop = animpostfxStop;
    /**
     * No comment provided
     *
     * Hash: 0x66560A0D4C64FD21 | Since: 1207
     */
    function animpostfxStopAll() {
        AnimpostfxStopAll();
    }
    graphics.animpostfxStopAll = animpostfxStopAll;
    /**
     * No comment provided
     *
     * Hash: 0x40866A418EB8EFDE | Since: 1207
     */
    function attachTvAudioToEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AttachTvAudioToEntity(_entity);
    }
    graphics.attachTvAudioToEntity = attachTvAudioToEntity;
    /**
     * Called together with FREE_MEMORY_FOR_LOW_QUALITY_PHOTO
     *
     * Hash: 0x494A9874F17A7D50 | Since: 1207
     */
    function beginCreateLowQualityCopyOfPhoto() {
        return BeginCreateLowQualityCopyOfPhoto(0);
    }
    graphics.beginCreateLowQualityCopyOfPhoto = beginCreateLowQualityCopyOfPhoto;
    /**
     * No comment provided
     *
     * Hash: 0xA15BFFC0A01B34E1 | Since: 1207
     */
    function beginTakeHighQualityPhoto() {
        return BeginTakeHighQualityPhoto();
    }
    graphics.beginTakeHighQualityPhoto = beginTakeHighQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x0552AA3FFC5B87AA | Since: 1207
     */
    function blockPickupPlacementLight(pickup, toggle) {
        BlockPickupPlacementLight(pickup, toggle);
    }
    graphics.blockPickupPlacementLight = blockPickupPlacementLight;
    /**
     * No comment provided
     *
     * Hash: 0xF7C29D7C12C36F03 | Since: 1207
     */
    function cascadeShadowsClearShadowSampleType() {
        CascadeShadowsClearShadowSampleType();
    }
    graphics.cascadeShadowsClearShadowSampleType = cascadeShadowsClearShadowSampleType;
    /**
     * When this is set to ON, shadows only draw as you get nearer.
     *
     * When OFF, they draw from a further distance.
     *
     * Hash: 0x8FBFD2AEB196B369 | Since: 1207
     */
    function cascadeShadowsEnableEntityTracker(toggle) {
        CascadeShadowsEnableEntityTracker(toggle);
    }
    graphics.cascadeShadowsEnableEntityTracker = cascadeShadowsEnableEntityTracker;
    /**
     * No comment provided
     *
     * Hash: 0xD9EDB2E4512D563E | Since: 1207
     */
    function cascadeShadowsSetCascadeBounds() {
        CascadeShadowsSetCascadeBounds(undefined, false, 0, 0, 0, 0, false, 0);
    }
    graphics.cascadeShadowsSetCascadeBounds = cascadeShadowsSetCascadeBounds;
    /**
     * Possible values:
     * "CSM_ST_POINT"
     * "CSM_ST_LINEAR"
     * "CSM_ST_BOX3x3"
     * "CSM_ST_BOX4x4"
     * "CSM_ST_DITHER2_LINEAR"
     * "CSM_ST_CUBIC"
     * "CSM_ST_POISSON16"
     * "CSM_ST_SOFT8"
     * "CSM_ST_SOFT16"
     * "CSM_ST_SOFT32"
     * "CSM_ST_DITHER16_RPDB"
     * "CSM_ST_POISSON16_RPDB_GNORM"
     * "CSM_ST_HIGHRES_BOX4x4"
     * "CSM_ST_ESM"
     *
     * Hash: 0xCE4774E0F9AD48D1 | Since: 1207
     */
    function cascadeShadowsSetShadowSampleType(_type) {
        CascadeShadowsSetShadowSampleType(_type);
    }
    graphics.cascadeShadowsSetShadowSampleType = cascadeShadowsSetShadowSampleType;
    /**
     * No comment provided
     *
     * Hash: 0x0E3F4AF2D63491FB | Since: 1207
     */
    function clearTimecycleModifier() {
        ClearTimecycleModifier();
    }
    graphics.clearTimecycleModifier = clearTimecycleModifier;
    /**
     * No comment provided
     *
     * Hash: 0x175668836B44CBB0 | Since: 1207
     */
    function createCheckpointWithNamehash(typeHash, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved) {
        if (typeof typeHash === 'string')
            typeHash = misc.getHashKey(typeHash);
        return CreateCheckpointWithNamehash(typeHash, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
    }
    graphics.createCheckpointWithNamehash = createCheckpointWithNamehash;
    /**
     * Creates a tracked point, useful for checking the visibility of a 3D point on screen.
     *
     * Hash: 0xFB405CB357C69CB9 | Since: 1207
     */
    function createTrackedPoint() {
        return CreateTrackedPoint();
    }
    graphics.createTrackedPoint = createTrackedPoint;
    /**
     * No comment provided
     *
     * Hash: 0x0DED5B0C8EBAAE12 | Since: 1207
     */
    function deleteCheckpoint(checkpoint) {
        DeleteCheckpoint(checkpoint);
    }
    graphics.deleteCheckpoint = deleteCheckpoint;
    /**
     * No comment provided
     *
     * Hash: 0x37A59922109F8F1C | Since: 1207
     */
    function destroyTrackedPoint(point) {
        DestroyTrackedPoint(point);
    }
    graphics.destroyTrackedPoint = destroyTrackedPoint;
    /**
     * No comment provided
     *
     * Hash: 0x5C9978A2A3DC3D0D | Since: 1207
     */
    function disableEntitymask() {
        DisableEntitymask();
    }
    graphics.disableEntitymask = disableEntitymask;
    /**
     * No comment provided
     *
     * Hash: 0x98A7CD5EA379A854 | Since: 1207
     */
    function disableHdtexThisFrame() {
        DisableHdtexThisFrame();
    }
    graphics.disableHdtexThisFrame = disableHdtexThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x9DD5AFF561E88F2A | Since: 1207
     */
    function doesParticleFxLoopedExist(ptfxHandle) {
        return DoesParticleFxLoopedExist(ptfxHandle);
    }
    graphics.doesParticleFxLoopedExist = doesParticleFxLoopedExist;
    /**
     * No comment provided
     *
     * Hash: 0xD2D9E04C0DF927F4 | Since: 1207
     */
    function drawLightWithRange(pos, colorR, colorG, colorB, range, intensity) {
        DrawLightWithRange(pos.x, pos.y, pos.z, colorR, colorG, colorB, range, intensity);
    }
    graphics.drawLightWithRange = drawLightWithRange;
    /**
     * nullsub, doesn't do anything (GTA5 leftover, there is no phone in RDR3)
     *
     * Hash: 0xF1142E5D64B47802 | Since: 1207
     */
    function drawLowQualityPhotoToPhone(photoRotation) {
        DrawLowQualityPhotoToPhone(false, photoRotation);
    }
    graphics.drawLowQualityPhotoToPhone = drawLowQualityPhotoToPhone;
    /**
     * Draws a rectangle on the screen.
     *
     * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
     *
     * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
     *
     * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
     *
     * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
     *
     * -R: Red part of the color. (0-255)
     *
     * -G: Green part of the color. (0-255)
     *
     * -B: Blue part of the color. (0-255)
     *
     * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
     *
     * Hash: 0x405224591DF02025 | Since: 1207
     */
    function drawRect(x, y, width, height, red, green, blue, alpha) {
        DrawRect(x, y, width, height, red, green, blue, alpha, false, false);
    }
    graphics.drawRect = drawRect;
    /**
     * Draws a 2D sprite on the screen.
     *
     * Parameters:
     * textureDict - Name of texture dictionary to load texture from
     *
     * textureName - Name of texture to load from texture dictionary
     *
     * screenX/Y - Screen offset (0.5 = center)
     * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
     *
     * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
     *
     * red,green,blue - Sprite color (default = 255/255/255)
     *
     * alpha - opacity level
     *
     * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures
     *
     * Hash: 0xC9884ECADE94CB34 | Since: 1207
     */
    function drawSprite(textureDict, textureName, screenSize, width, height, heading, red, green, blue, alpha) {
        DrawSprite(textureDict, textureName, screenSize.x, screenSize.y, width, height, heading, red, green, blue, alpha, false);
    }
    graphics.drawSprite = drawSprite;
    /**
     * No comment provided
     *
     * Hash: 0xC0A145540254A840 | Since: 1207
     */
    function drawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha) {
        DrawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
    }
    graphics.drawTvChannel = drawTvChannel;
    /**
     * No comment provided
     *
     * Hash: 0xFAAD23DE7A54FC14 | Since: 1207
     */
    function enableEntitymask() {
        EnableEntitymask();
    }
    graphics.enableEntitymask = enableEntitymask;
    /**
     * Old name: _ENABLE_EXTRA_TIMECYCLE_MODIFIER_STRENGTH
     *
     * Hash: 0x6FE93BCC7BF12B63 | Since: 1207
     */
    function enableMoonCycleOverride(strength) {
        EnableMoonCycleOverride(strength);
    }
    graphics.enableMoonCycleOverride = enableMoonCycleOverride;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x6FC9B065229C0787 | Since: 1207
     */
    function enableMovieSubtitles(toggle) {
        EnableMovieSubtitles(toggle);
    }
    graphics.enableMovieSubtitles = enableMovieSubtitles;
    /**
     * No comment provided
     *
     * Hash: 0x0E126AAE933F3B56 | Since: 1207
     */
    function endPetrolTrailDecals() {
        EndPetrolTrailDecals();
    }
    graphics.endPetrolTrailDecals = endPetrolTrailDecals;
    /**
     * No comment provided
     *
     * Hash: 0xD45547D8396F002A | Since: 1207
     */
    function freeMemoryForHighQualityPhoto() {
        FreeMemoryForHighQualityPhoto();
    }
    graphics.freeMemoryForHighQualityPhoto = freeMemoryForHighQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x614682E715ADBAAC | Since: 1207
     */
    function freeMemoryForLowQualityPhoto() {
        FreeMemoryForLowQualityPhoto();
    }
    graphics.freeMemoryForLowQualityPhoto = freeMemoryForLowQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x7DFF8F94937D2659 | Since: 1207
     */
    function freeMemoryForMissionCreatorPhoto() {
        FreeMemoryForMissionCreatorPhoto();
    }
    graphics.freeMemoryForMissionCreatorPhoto = freeMemoryForMissionCreatorPhoto;
    /**
     * No comment provided
     *
     * Hash: 0xCB50D7AFCC8B0EC6 | Since: 1207
     */
    function getScreenCoordFromWorldCoord(worldPos) {
        return GetScreenCoordFromWorldCoord(worldPos.x, worldPos.y, worldPos.z);
    }
    graphics.getScreenCoordFromWorldCoord = getScreenCoordFromWorldCoord;
    /**
     * Hardcoded to always set x to 1280 and y to 720.
     *
     * Hash: 0x66773C92835D0909 | Since: 1207
     */
    function getScreenResolution() {
        return GetScreenResolution();
    }
    graphics.getScreenResolution = getScreenResolution;
    /**
     * Old name: _GET_STATUS_OF_DRAW_LOW_QUALITY_PHOTO
     *
     * Hash: 0x13430D3D5A45F14B | Since: 1207
     */
    function getStatusOfCreateLowQualityCopyOfPhoto() {
        return GetStatusOfCreateLowQualityCopyOfPhoto(undefined);
    }
    graphics.getStatusOfCreateLowQualityCopyOfPhoto = getStatusOfCreateLowQualityCopyOfPhoto;
    /**
     * `contentId: returned by NETWORK::_UGC_QUERY_GET_CREATOR_PHOTO(uVar0, 0, sParam3)`
     *
     * Hash: 0xC71B50AE58D07369 | Since: 1207
     */
    function getStatusOfLoadMissionCreatorPhoto(contentId) {
        return GetStatusOfLoadMissionCreatorPhoto(contentId);
    }
    graphics.getStatusOfLoadMissionCreatorPhoto = getStatusOfLoadMissionCreatorPhoto;
    /**
     * 0 = succeeded
     * 1 = getting status
     * 2 = failed
     *
     * Hash: 0xD6663EC374092383 | Since: 1207
     */
    function getStatusOfSaveHighQualityPhoto() {
        return GetStatusOfSaveHighQualityPhoto();
    }
    graphics.getStatusOfSaveHighQualityPhoto = getStatusOfSaveHighQualityPhoto;
    /**
     * 0 = succeeded
     * 1 = getting status
     * 2 = failed
     *
     * Hash: 0xB28894CD7408BD0C | Since: 1207
     */
    function getStatusOfSortedListOperation() {
        return GetStatusOfSortedListOperation();
    }
    graphics.getStatusOfSortedListOperation = getStatusOfSortedListOperation;
    /**
     * No comment provided
     *
     * Hash: 0x4A3DA74C3CCB1725 | Since: 1207
     */
    function getStatusOfTakeHighQualityPhoto() {
        return GetStatusOfTakeHighQualityPhoto();
    }
    graphics.getStatusOfTakeHighQualityPhoto = getStatusOfTakeHighQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0xA705394293E2B3D3 | Since: 1207
     */
    function getTimecycleModifierIndex() {
        return GetTimecycleModifierIndex();
    }
    graphics.getTimecycleModifierIndex = getTimecycleModifierIndex;
    /**
     * No comment provided
     *
     * Hash: 0x2DA67BA3C8A6755D | Since: 1207
     */
    function getTimecycleTransitionModifierIndex() {
        return GetTimecycleTransitionModifierIndex();
    }
    graphics.getTimecycleTransitionModifierIndex = getTimecycleTransitionModifierIndex;
    /**
     * No comment provided
     *
     * Hash: 0x86ED21BDB2791CE8 | Since: 1207
     */
    function getTogglePausedRenderphasesStatus() {
        return GetTogglePausedRenderphasesStatus();
    }
    graphics.getTogglePausedRenderphasesStatus = getTogglePausedRenderphasesStatus;
    /**
     * No comment provided
     *
     * Hash: 0xF90FBFD68F3C59AE | Since: 1207
     */
    function getTvChannel() {
        return GetTvChannel();
    }
    graphics.getTvChannel = getTvChannel;
    /**
     * No comment provided
     *
     * Hash: 0x3E4B4E5CF5D3EEB5 | Since: 1207
     */
    function isDecalAlive(decal) {
        return IsDecalAlive(decal);
    }
    graphics.isDecalAlive = isDecalAlive;
    /**
     * No comment provided
     *
     * Hash: 0x86076AE35CBBE55F | Since: 1355
     */
    function isPhotoFrame() {
        return IsPhotoFrame();
    }
    graphics.isPhotoFrame = isPhotoFrame;
    /**
     * No comment provided
     *
     * Hash: 0xCBB056BA159FB48D | Since: 1207
     */
    function isTrackedPointVisible(point) {
        return IsTrackedPointVisible(point);
    }
    graphics.isTrackedPointVisible = isTrackedPointVisible;
    /**
     * Old name: _IS_TV_PLAYLIST_ITEM_PLAYING
     *
     * Hash: 0x4D562223E0EB65F3 | Since: 1207
     */
    function isTvshowCurrentlyPlaying(videoCliphash) {
        if (typeof videoCliphash === 'string')
            videoCliphash = misc.getHashKey(videoCliphash);
        return IsTvshowCurrentlyPlaying(videoCliphash);
    }
    graphics.isTvshowCurrentlyPlaying = isTvshowCurrentlyPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x84F0BA7462FF8D58 | Since: 1207
     */
    function loadMissionCreatorPhoto() {
        return LoadMissionCreatorPhoto(undefined, undefined, undefined);
    }
    graphics.loadMissionCreatorPhoto = loadMissionCreatorPhoto;
    /**
     * No comment provided
     *
     * Hash: 0xAF6E67D073D2DCE2 | Since: 1207
     */
    function pedshotIsAvailable() {
        return PedshotIsAvailable();
    }
    graphics.pedshotIsAvailable = pedshotIsAvailable;
    /**
     * No comment provided
     *
     * Hash: 0xA42EDF1E88734A7E | Since: 1207
     */
    function queueOperationToCreateSortedListOfPhotos() {
        return QueueOperationToCreateSortedListOfPhotos();
    }
    graphics.queueOperationToCreateSortedListOfPhotos = queueOperationToCreateSortedListOfPhotos;
    /**
     * No comment provided
     *
     * Hash: 0x49A720552EB0BB88 | Since: 1207
     */
    function removeDecal(decal) {
        RemoveDecal(decal);
    }
    graphics.removeDecal = removeDecal;
    /**
     * No comment provided
     *
     * Hash: 0xFB8972BAE0013140 | Since: 1207
     */
    function removeDecalsFromObject(obj) {
        const _obj = obj instanceof Object ? obj.handle() : obj;
        RemoveDecalsFromObject(_obj);
    }
    graphics.removeDecalsFromObject = removeDecalsFromObject;
    /**
     * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
     *
     * Hash: 0x86DE59FA02902B40 | Since: 1207
     */
    function removeDecalsInRange(pos, range) {
        RemoveDecalsInRange(pos.x, pos.y, pos.z, range);
    }
    graphics.removeDecalsInRange = removeDecalsInRange;
    /**
     * No comment provided
     *
     * Hash: 0xAE7BF7CA9E4BA48D | Since: 1207
     */
    function removeGrassCullSphere(handle) {
        RemoveGrassCullSphere(handle);
    }
    graphics.removeGrassCullSphere = removeGrassCullSphere;
    /**
     * No comment provided
     *
     * Hash: 0x459598F579C98929 | Since: 1207
     */
    function removeParticleFx(ptfxHandle) {
        RemoveParticleFx(ptfxHandle, false);
    }
    graphics.removeParticleFx = removeParticleFx;
    /**
     * No comment provided
     *
     * Hash: 0x92884B4A49D81325 | Since: 1207
     */
    function removeParticleFxFromEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RemoveParticleFxFromEntity(_entity);
    }
    graphics.removeParticleFxFromEntity = removeParticleFxFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0x87B5905ECA623B68 | Since: 1207
     */
    function removeParticleFxInRange(pos, radius) {
        RemoveParticleFxInRange(pos.x, pos.y, pos.z, radius);
    }
    graphics.removeParticleFxInRange = removeParticleFxInRange;
    /**
     * only works by invoking and passing as pointer value Citizen.InvokeNative(0x9CF1836C03FB67A2, Citizen.PointerValueIntInitialized(vegModifierId),1) p1 is 1 or 0
     *
     * Hash: 0x9CF1836C03FB67A2 | Since: 1207
     */
    function removeVegModifierSphere(vegModifierHandle) {
        RemoveVegModifierSphere(vegModifierHandle, 0);
    }
    graphics.removeVegModifierSphere = removeVegModifierSphere;
    /**
     * Sets an unknown value related to timecycles.
     *
     * Hash: 0x297B72E2AF094742 | Since: 1207
     */
    function resetAdaptation(unk) {
        ResetAdaptation(unk);
    }
    graphics.resetAdaptation = resetAdaptation;
    /**
     * Resets the effect of SET_PARTICLE_FX_OVERRIDE
     *
     * Hash: 0x274B3DABF7E72DEF | Since: 1207
     */
    function resetParticleFxOverride(name) {
        ResetParticleFxOverride(name);
    }
    graphics.resetParticleFxOverride = resetParticleFxOverride;
    /**
     * No comment provided
     *
     * Hash: 0xCCD9AAD85E1B559E | Since: 1207
     */
    function resetPausedRenderphases() {
        ResetPausedRenderphases();
    }
    graphics.resetPausedRenderphases = resetPausedRenderphases;
    /**
     * No comment provided
     *
     * Hash: 0x57639FD876B68A91 | Since: 1207
     */
    function saveHighQualityPhoto(unused) {
        return SaveHighQualityPhoto(unused);
    }
    graphics.saveHighQualityPhoto = saveHighQualityPhoto;
    /**
     * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
     * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
     *
     * state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
     *
     * Hash: 0xB2797619A7C7747B | Since: 1207
     */
    function setArtificialLightsState(state) {
        SetArtificialLightsState(state);
    }
    graphics.setArtificialLightsState = setArtificialLightsState;
    /**
     * Sets the checkpoint color.
     *
     * Hash: 0xCAAFC225E33B1D15 | Since: 1207
     */
    function setCheckpointRgba(checkpoint, red, green, blue, alpha) {
        SetCheckpointRgba(checkpoint, red, green, blue, alpha);
    }
    graphics.setCheckpointRgba = setCheckpointRgba;
    /**
     * Sets the checkpoint icon color.
     *
     * Hash: 0x99AFF17222D4DEB4 | Since: 1207
     */
    function setCheckpointRgba2(checkpoint, red, green, blue, alpha) {
        SetCheckpointRgba2(checkpoint, red, green, blue, alpha);
    }
    graphics.setCheckpointRgba2 = setCheckpointRgba2;
    /**
     * No comment provided
     *
     * Hash: 0x53ED07BF368EDA59 | Since: 1232
     */
    function setDisablePetrolDecalsIgnitingThisFrame() {
        SetDisablePetrolDecalsIgnitingThisFrame();
    }
    graphics.setDisablePetrolDecalsIgnitingThisFrame = setDisablePetrolDecalsIgnitingThisFrame;
    /**
     * Returns handle to be used with REMOVE_GRASS_CULL_SPHERE
     *
     * Hash: 0x27219300C36A8D40 | Since: 1207
     */
    function setGrassCullSphere(pos) {
        return SetGrassCullSphere(pos.x, pos.y, pos.z, 0, 0);
    }
    graphics.setGrassCullSphere = setGrassCullSphere;
    /**
     * Old name: _SET_HIDOF_ENV_BLUR_PARAMS
     *
     * Hash: 0xCC23AA1A7CBFE840 | Since: 1207
     */
    function setHidofOverride() {
        SetHidofOverride(false, false, 0, 0, 0, 0);
    }
    graphics.setHidofOverride = setHidofOverride;
    /**
     * Related to Campfires.
     * p1: AMB_BONFIRE_MP, AMB_CAMPFIRE_LRG_MP
     *
     * Hash: 0x3C61B52B00848C26 | Since: 1207
     */
    function setParticleFxAmbientColour(entity, r, g, b) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetParticleFxAmbientColour(_entity, undefined, r, g, b);
    }
    graphics.setParticleFxAmbientColour = setParticleFxAmbientColour;
    /**
     * No comment provided
     *
     * Hash: 0x8DCCC98DC0DBF9E4 | Since: 1207
     */
    function setParticleFxBulletImpactLodrangeScale() {
        SetParticleFxBulletImpactLodrangeScale(0);
    }
    graphics.setParticleFxBulletImpactLodrangeScale = setParticleFxBulletImpactLodrangeScale;
    /**
     * No comment provided
     *
     * Hash: 0xA53C8D7D0F8C74D0 | Since: 1207
     */
    function setParticleFxBulletImpactScale(scale) {
        SetParticleFxBulletImpactScale(scale);
    }
    graphics.setParticleFxBulletImpactScale = setParticleFxBulletImpactScale;
    /**
     * No comment provided
     *
     * Hash: 0x2A1625858887D4E6 | Since: 1207
     */
    function setParticleFxFootLodrangeScale() {
        SetParticleFxFootLodrangeScale(0);
    }
    graphics.setParticleFxFootLodrangeScale = setParticleFxFootLodrangeScale;
    /**
     * No comment provided
     *
     * Hash: 0x88786E76234F7054 | Since: 1207
     */
    function setParticleFxLoopedAlpha(ptfxHandle, alpha) {
        SetParticleFxLoopedAlpha(ptfxHandle, alpha);
    }
    graphics.setParticleFxLoopedAlpha = setParticleFxLoopedAlpha;
    /**
     * No comment provided
     *
     * Hash: 0x239879FC61C610CC | Since: 1207
     */
    function setParticleFxLoopedColour(ptfxHandle, r, g, b) {
        SetParticleFxLoopedColour(ptfxHandle, r, g, b, false);
    }
    graphics.setParticleFxLoopedColour = setParticleFxLoopedColour;
    /**
     * No comment provided
     *
     * Hash: 0x3674F389B0FACD80 | Since: 1207
     */
    function setParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork) {
        SetParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork);
    }
    graphics.setParticleFxLoopedEvolution = setParticleFxLoopedEvolution;
    /**
     * No comment provided
     *
     * Hash: 0x9B04D471DA0AD7AA | Since: 1207
     */
    function setParticleFxLoopedFarClipDist(ptfxHandle, range) {
        SetParticleFxLoopedFarClipDist(ptfxHandle, range);
    }
    graphics.setParticleFxLoopedFarClipDist = setParticleFxLoopedFarClipDist;
    /**
     * No comment provided
     *
     * Hash: 0xD3A4A95FC94FE83B | Since: 1207
     */
    function setParticleFxLoopedOffsets(ptfxHandle, pos, rot) {
        SetParticleFxLoopedOffsets(ptfxHandle, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z);
    }
    graphics.setParticleFxLoopedOffsets = setParticleFxLoopedOffsets;
    /**
     * No comment provided
     *
     * Hash: 0x1A9E1C0D98D093B7 | Since: 1207
     */
    function setParticleFxLoopedScale(ptfxHandle, scale) {
        SetParticleFxLoopedScale(ptfxHandle, scale);
    }
    graphics.setParticleFxLoopedScale = setParticleFxLoopedScale;
    /**
     * No comment provided
     *
     * Hash: 0xE8A35938A7026CEA | Since: 1311
     */
    function setParticleFxNonLoopedAlpha(alpha) {
        SetParticleFxNonLoopedAlpha(alpha);
    }
    graphics.setParticleFxNonLoopedAlpha = setParticleFxNonLoopedAlpha;
    /**
     * No comment provided
     *
     * Hash: 0x60B85BED6577A35B | Since: 1207
     */
    function setParticleFxNonLoopedColour(r, g, b) {
        SetParticleFxNonLoopedColour(r, g, b);
    }
    graphics.setParticleFxNonLoopedColour = setParticleFxNonLoopedColour;
    /**
     * No comment provided
     *
     * Hash: 0xBE711A169E9C7E95 | Since: 1207
     */
    function setParticleFxOverride(oldAsset, newAsset) {
        SetParticleFxOverride(oldAsset, newAsset);
    }
    graphics.setParticleFxOverride = setParticleFxOverride;
    /**
     * https://imgur.com/a/I2swSDJ
     *
     * Old name: _SET_PICKUP_OBJECT_GLOW_ENABLED
     *
     * Hash: 0x7DFB49BCDB73089A | Since: 1207
     */
    function setPickupLight(_object, toggle) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetPickupLight(__object, toggle);
    }
    graphics.setPickupLight = setPickupLight;
    /**
     * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for draw commands that are used with a world render target.
     *
     * Hash: 0x906B86E6D7896B9E | Since: 1207
     */
    function setScriptGfxDrawBehindPausemenu(toggle) {
        SetScriptGfxDrawBehindPausemenu(toggle);
    }
    graphics.setScriptGfxDrawBehindPausemenu = setScriptGfxDrawBehindPausemenu;
    /**
     * Sets the draw order for script draw commands.
     *
     * Hash: 0xCFCC78391C8B3814 | Since: 1207
     */
    function setScriptGfxDrawOrder(drawOrder) {
        SetScriptGfxDrawOrder(drawOrder);
    }
    graphics.setScriptGfxDrawOrder = setScriptGfxDrawOrder;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/graphics/timecycles
     *
     * Hash: 0xFA08722A5EA82DA7 | Since: 1207
     */
    function setTimecycleModifier(modifierName) {
        SetTimecycleModifier(modifierName);
    }
    graphics.setTimecycleModifier = setTimecycleModifier;
    /**
     * No comment provided
     *
     * Hash: 0xFDB74C9CC54C3F37 | Since: 1207
     */
    function setTimecycleModifierStrength(strength) {
        SetTimecycleModifierStrength(strength);
    }
    graphics.setTimecycleModifierStrength = setTimecycleModifierStrength;
    /**
     * No comment provided
     *
     * Hash: 0xF6FDA3D4404D4F2C | Since: 1207
     */
    function setTrackedPointInfo(point, pos, radius) {
        SetTrackedPointInfo(point, pos.x, pos.y, pos.z, radius);
    }
    graphics.setTrackedPointInfo = setTrackedPointInfo;
    /**
     * No comment provided
     *
     * Hash: 0xBB6C707F20D955D4 | Since: 1207
     */
    function setTransitionOutOfTimecycleModifier(strength) {
        SetTransitionOutOfTimecycleModifier(strength);
    }
    graphics.setTransitionOutOfTimecycleModifier = setTransitionOutOfTimecycleModifier;
    /**
     * No comment provided
     *
     * Hash: 0xFF927A09F481D80C | Since: 1207
     */
    function setTransitionTimecycleModifier(modifierName, transitionBlend) {
        SetTransitionTimecycleModifier(modifierName, transitionBlend);
    }
    graphics.setTransitionTimecycleModifier = setTransitionTimecycleModifier;
    /**
     * Probably changes tvs from being a 3d audio to being "global" audio
     *
     * Hash: 0x64437C98FCC5F291 | Since: 1207
     */
    function setTvAudioFrontend(toggle) {
        SetTvAudioFrontend(toggle);
    }
    graphics.setTvAudioFrontend = setTvAudioFrontend;
    /**
     * No comment provided
     *
     * Hash: 0x593FAF7FC9401A56 | Since: 1207
     */
    function setTvChannel(channel) {
        SetTvChannel(channel);
    }
    graphics.setTvChannel = setTvChannel;
    /**
     * No comment provided
     *
     * Hash: 0xDEC6B25F5DC8925B | Since: 1207
     */
    function setTvChannelPlaylist(tvChannel, playlistName, restart) {
        SetTvChannelPlaylist(tvChannel, playlistName, restart);
    }
    graphics.setTvChannelPlaylist = setTvChannelPlaylist;
    /**
     * No comment provided
     *
     * Hash: 0x73A97068787D7231 | Since: 1207
     */
    function setTvVolume(volume) {
        SetTvVolume(volume);
    }
    graphics.setTvVolume = setTvVolume;
    /**
     * No comment provided
     *
     * Hash: 0x8F90AB32E1944BDE | Since: 1207
     */
    function startNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, rot, scale, xAxis, yAxis, zAxis) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartNetworkedParticleFxLoopedOnEntity(effectName, _entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis);
    }
    graphics.startNetworkedParticleFxLoopedOnEntity = startNetworkedParticleFxLoopedOnEntity;
    /**
     * No comment provided
     *
     * Hash: 0x9C56621462FFE7A6 | Since: 1207
     */
    function startNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, rot, boneIndex, scale, xAxis, yAxis, zAxis) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartNetworkedParticleFxLoopedOnEntityBone(effectName, _entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis);
    }
    graphics.startNetworkedParticleFxLoopedOnEntityBone = startNetworkedParticleFxLoopedOnEntityBone;
    /**
     * No comment provided
     *
     * Hash: 0xFB97618457994A62 | Since: 1207
     */
    function startNetworkedParticleFxNonLoopedAtCoord(effectName, pos, rot, scale, xAxis, yAxis, zAxis) {
        return StartNetworkedParticleFxNonLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis);
    }
    graphics.startNetworkedParticleFxNonLoopedAtCoord = startNetworkedParticleFxNonLoopedAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xE6CFE43937061143 | Since: 1207
     */
    function startNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rot, scale, axisX, axisY, axisZ) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartNetworkedParticleFxNonLoopedOnEntity(effectName, _entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, scale, axisX, axisY, axisZ);
    }
    graphics.startNetworkedParticleFxNonLoopedOnEntity = startNetworkedParticleFxNonLoopedOnEntity;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_looped.lua
     *
     * Hash: 0xBA32867E86125D3A | Since: 1207
     */
    function startParticleFxLoopedAtCoord(effectName, pos, rot, scale, xAxis, yAxis, zAxis) {
        return StartParticleFxLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis, false);
    }
    graphics.startParticleFxLoopedAtCoord = startParticleFxLoopedAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xBD41E1440CE39800 | Since: 1207
     */
    function startParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, rot, scale, xAxis, yAxis, zAxis) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartParticleFxLoopedOnEntity(effectName, _entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis);
    }
    graphics.startParticleFxLoopedOnEntity = startParticleFxLoopedOnEntity;
    /**
     * No comment provided
     *
     * Hash: 0xD3BA6EC7F2FBD5E9 | Since: 1207
     */
    function startParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, rot, boneIndex, scale, xAxis, yAxis, zAxis) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartParticleFxLoopedOnEntityBone(effectName, _entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis);
    }
    graphics.startParticleFxLoopedOnEntityBone = startParticleFxLoopedOnEntityBone;
    /**
     * No comment provided
     *
     * Hash: 0xE689C1B1432BB8AF | Since: 1207
     */
    function startParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, rot, boneIndex, scale, xAxis, yAxis, zAxis) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return StartParticleFxLoopedOnPedBone(effectName, _ped, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis);
    }
    graphics.startParticleFxLoopedOnPedBone = startParticleFxLoopedOnPedBone;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_non_looped.lua
     *
     * Hash: 0x2E80BF72EF7C87AC | Since: 1207
     */
    function startParticleFxNonLoopedAtCoord(effectName, pos, rot, scale, eventType, bPeekOnly, bIsRegistered) {
        return StartParticleFxNonLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, eventType, bPeekOnly, bIsRegistered);
    }
    graphics.startParticleFxNonLoopedAtCoord = startParticleFxNonLoopedAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xFF4C64C513388C12 | Since: 1207
     */
    function startParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rot, scale, axisX, axisY, axisZ) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartParticleFxNonLoopedOnEntity(effectName, _entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, scale, axisX, axisY, axisZ);
    }
    graphics.startParticleFxNonLoopedOnEntity = startParticleFxNonLoopedOnEntity;
    /**
     * No comment provided
     *
     * Hash: 0x3FAA72BD940C3AC0 | Since: 1207
     */
    function startParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rot, boneIndex, scale, axisX, axisY, axisZ) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return StartParticleFxNonLoopedOnPedBone(effectName, _ped, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, boneIndex, scale, axisX, axisY, axisZ);
    }
    graphics.startParticleFxNonLoopedOnPedBone = startParticleFxNonLoopedOnPedBone;
    /**
     * No comment provided
     *
     * Hash: 0x46F246D6504F0031 | Since: 1207
     */
    function startPetrolTrailDecals() {
        StartPetrolTrailDecals(undefined, undefined);
    }
    graphics.startPetrolTrailDecals = startPetrolTrailDecals;
    /**
     * No comment provided
     *
     * Hash: 0x22970F3A088B133B | Since: 1207
     */
    function stopParticleFxLooped(ptfxHandle) {
        StopParticleFxLooped(ptfxHandle, false);
    }
    graphics.stopParticleFxLooped = stopParticleFxLooped;
    /**
     * No comment provided
     *
     * Hash: 0xEF9E1C45732F55FA | Since: 1207
     */
    function togglePausedRenderphases(toggle) {
        TogglePausedRenderphases(toggle);
    }
    graphics.togglePausedRenderphases = togglePausedRenderphases;
    /**
     * No comment provided
     *
     * Hash: 0xBDBACB52A03CC760 | Since: 1207
     */
    function updateLightsOnEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        UpdateLightsOnEntity(_entity);
    }
    graphics.updateLightsOnEntity = updateLightsOnEntity;
    /**
     * fxName: see data_0/data/effects/ptfx/fxlists/
     *
     * Hash: 0xA10DB07FC234DD12 | Since: 1207
     */
    function useParticleFxAsset(fxName) {
        UseParticleFxAsset(fxName);
    }
    graphics.useParticleFxAsset = useParticleFxAsset;
    /**
     * No comment provided
     *
     * Hash: 0x085C5B61A0114F32 | Since: 1207
     */
    function _0x085C5B61A0114F32() {
        Citizen.invokeNative('0x085C5B61A0114F32', undefined, undefined);
    }
    graphics._0x085C5B61A0114F32 = _0x085C5B61A0114F32;
    /**
     * Gets set to 1 when GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO = PHOTO_OPERATION_SUCCEEDED
     *
     * Hash: 0x0D5B19C34068FEE7 | Since: 1311
     */
    function _0x0D5B19C34068FEE7() {
        Citizen.invokeNative('0x0D5B19C34068FEE7', undefined);
    }
    graphics._0x0D5B19C34068FEE7 = _0x0D5B19C34068FEE7;
    /**
     * _RESET_*
     *
     * Hash: 0x1460B644397453EB | Since: 1207
     */
    function _0x1460B644397453EB() {
        Citizen.invokeNative('0x1460B644397453EB');
    }
    graphics._0x1460B644397453EB = _0x1460B644397453EB;
    /**
     * No comment provided
     *
     * Hash: 0x171C18E994C1A395 | Since: 1207
     */
    function _0x171C18E994C1A395() {
        Citizen.invokeNative('0x171C18E994C1A395', undefined, undefined, undefined, undefined, undefined);
    }
    graphics._0x171C18E994C1A395 = _0x171C18E994C1A395;
    /**
     * Used in shop scripts for CATALOG_BOOK
     * false = Normal -> [CATALOG_BOOK_SHUTDOWN]
     * true = Trees flickering? -> [CATALOG_BOOK_OPEN]
     *
     * Hash: 0x1A9F09AB458D49C6 | Since: 1207
     */
    function _0x1A9F09AB458D49C6() {
        Citizen.invokeNative('0x1A9F09AB458D49C6', false);
    }
    graphics._0x1A9F09AB458D49C6 = _0x1A9F09AB458D49C6;
    /**
     * No comment provided
     *
     * Hash: 0x1C6306E5BC25C29C | Since: 1207
     */
    function _0x1C6306E5BC25C29C() {
        Citizen.invokeNative('0x1C6306E5BC25C29C');
    }
    graphics._0x1C6306E5BC25C29C = _0x1C6306E5BC25C29C;
    /**
     * No comment provided
     *
     * Hash: 0x1FF8731BE1DFC0C0 | Since: 1207
     */
    function _0x1FF8731BE1DFC0C0() {
        Citizen.invokeNative('0x1FF8731BE1DFC0C0', undefined, undefined);
    }
    graphics._0x1FF8731BE1DFC0C0 = _0x1FF8731BE1DFC0C0;
    /**
     * Params: component - used in odriscolls1 and sean1 R* SP Script: COMPONENT_BINOCULARS_SCOPE01
     * Triggers the binocular scaleform
     *
     * Hash: 0x21F00E08CBB5F37B | Since: 1207
     */
    function _0x21F00E08CBB5F37B(component) {
        Citizen.invokeNative('0x21F00E08CBB5F37B', component);
    }
    graphics._0x21F00E08CBB5F37B = _0x21F00E08CBB5F37B;
    /**
     * effectName2, p2 and p3 are unused
     *
     * ANIMPOSTFX_*
     *
     * Hash: 0x26DD2FB0A88CC412 | Since: 1207
     */
    function _0x26DD2FB0A88CC412(effectName, effectName2) {
        Citizen.invokeNative('0x26DD2FB0A88CC412', effectName, effectName2, undefined, undefined);
    }
    graphics._0x26DD2FB0A88CC412 = _0x26DD2FB0A88CC412;
    /**
     * No comment provided
     *
     * Hash: 0x285438C26C732F9D | Since: 1207
     */
    function _0x285438C26C732F9D() {
        return Citizen.invokeNative('0x285438C26C732F9D');
    }
    graphics._0x285438C26C732F9D = _0x285438C26C732F9D;
    /**
     * No comment provided
     *
     * Hash: 0x32DE2BFFDA43E62A | Since: 1207
     */
    function _0x32DE2BFFDA43E62A() {
        Citizen.invokeNative('0x32DE2BFFDA43E62A');
    }
    graphics._0x32DE2BFFDA43E62A = _0x32DE2BFFDA43E62A;
    /**
     * ANIMPOSTFX_*
     *
     * Hash: 0x38D9D50F2085E9B3 | Since: 1207
     */
    function _0x38D9D50F2085E9B3(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        Citizen.invokeNative('0x38D9D50F2085E9B3', effectNameHash);
    }
    graphics._0x38D9D50F2085E9B3 = _0x38D9D50F2085E9B3;
    /**
     * ANIMPOSTFX_*
     *
     * Hash: 0x3DA7A10583A4BEC0 | Since: 1207
     */
    function _0x3DA7A10583A4BEC0() {
        return Citizen.invokeNative('0x3DA7A10583A4BEC0');
    }
    graphics._0x3DA7A10583A4BEC0 = _0x3DA7A10583A4BEC0;
    /**
     * Only used in R* SP Script spd_agnesdown1
     *
     * Hash: 0x402E1A61D2587FCD | Since: 1207
     */
    function _0x402E1A61D2587FCD(pos, heading) {
        return Citizen.invokeNative('0x402E1A61D2587FCD', undefined, pos.x, pos.y, pos.z, 0, 0, heading);
    }
    graphics._0x402E1A61D2587FCD = _0x402E1A61D2587FCD;
    /**
     * _DISABLE_*
     *
     * Hash: 0x4046493D2EEACA0E | Since: 1207
     */
    function _0x4046493D2EEACA0E() {
        Citizen.invokeNative('0x4046493D2EEACA0E');
    }
    graphics._0x4046493D2EEACA0E = _0x4046493D2EEACA0E;
    /**
     * Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
     *
     * Hash: 0x41F88A85A579A61D | Since: 1207
     */
    function _0x41F88A85A579A61D() {
        Citizen.invokeNative('0x41F88A85A579A61D', 0);
    }
    graphics._0x41F88A85A579A61D = _0x41F88A85A579A61D;
    /**
     * No comment provided
     *
     * Hash: 0x453D16D41FC51D3E | Since: 1207
     */
    function _0x453D16D41FC51D3E() {
        Citizen.invokeNative('0x453D16D41FC51D3E', false);
    }
    graphics._0x453D16D41FC51D3E = _0x453D16D41FC51D3E;
    /**
     * No comment provided
     *
     * Hash: 0x48FE0DB54045B975 | Since: 1311
     */
    function _0x48FE0DB54045B975() {
        Citizen.invokeNative('0x48FE0DB54045B975', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    graphics._0x48FE0DB54045B975 = _0x48FE0DB54045B975;
    /**
     * Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
     *
     * Hash: 0x4BD66B4E3427689B | Since: 1207
     */
    function _0x4BD66B4E3427689B() {
        Citizen.invokeNative('0x4BD66B4E3427689B', undefined);
    }
    graphics._0x4BD66B4E3427689B = _0x4BD66B4E3427689B;
    /**
     * No comment provided
     *
     * Hash: 0x4D14AF567FC02885 | Since: unknown
     */
    function _0x4D14AF567FC02885() {
        Citizen.invokeNative('0x4D14AF567FC02885', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    graphics._0x4D14AF567FC02885 = _0x4D14AF567FC02885;
    /**
     * p1: AMB_ANN_COAL_CHUTE_DIVE, AMB_ANN_COAL_CHUTE
     * p2: EMIT
     * p3: either 0.0f or 1.0f
     *
     * Hash: 0x4FB67D172C4476F3 | Since: 1207
     */
    function _0x4FB67D172C4476F3(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x4FB67D172C4476F3', _entity, undefined, undefined, 0);
    }
    graphics._0x4FB67D172C4476F3 = _0x4FB67D172C4476F3;
    /**
     * No comment provided
     *
     * Hash: 0x503941F65DBA24EC | Since: 1207
     */
    function _0x503941F65DBA24EC() {
        Citizen.invokeNative('0x503941F65DBA24EC', undefined);
    }
    graphics._0x503941F65DBA24EC = _0x503941F65DBA24EC;
    /**
     * No comment provided
     *
     * Hash: 0x519928DF02EB5101 | Since: 1355
     */
    function _0x519928DF02EB5101() {
        Citizen.invokeNative('0x519928DF02EB5101', undefined);
    }
    graphics._0x519928DF02EB5101 = _0x519928DF02EB5101;
    /**
     * Closes the the binocular scaleform
     *
     * Hash: 0x5AC6E0FA028369DE | Since: 1207
     */
    function _0x5AC6E0FA028369DE() {
        Citizen.invokeNative('0x5AC6E0FA028369DE');
    }
    graphics._0x5AC6E0FA028369DE = _0x5AC6E0FA028369DE;
    /**
     * No comment provided
     *
     * Hash: 0x5C674EB487891F6B | Since: 1207
     */
    function _0x5C674EB487891F6B() {
        return Citizen.invokeNative('0x5C674EB487891F6B');
    }
    graphics._0x5C674EB487891F6B = _0x5C674EB487891F6B;
    /**
     * Only used in R* SP Script spd_agnesdown1
     *
     * Hash: 0x5C9C3A466B3296A8 | Since: 1207
     */
    function _0x5C9C3A466B3296A8() {
        return Citizen.invokeNative('0x5C9C3A466B3296A8', undefined);
    }
    graphics._0x5C9C3A466B3296A8 = _0x5C9C3A466B3296A8;
    /**
     * No comment provided
     *
     * Hash: 0x5CD6A2CCE5087161 | Since: 1311
     */
    function setPhotoModeExposureLocked(lock) {
        Citizen.invokeNative('0x5CD6A2CCE5087161', lock);
    }
    graphics.setPhotoModeExposureLocked = setPhotoModeExposureLocked;
    /**
     * No comment provided
     *
     * Hash: 0x62B9F9A1272AED80 | Since: 1207
     */
    function changePhotoModeContrast(value) {
        Citizen.invokeNative('0x62B9F9A1272AED80', value);
    }
    graphics.changePhotoModeContrast = changePhotoModeContrast;
    /**
     * No comment provided
     *
     * Hash: 0x67B0778C62E74423 | Since: 1207
     */
    function _0x67B0778C62E74423() {
        Citizen.invokeNative('0x67B0778C62E74423', undefined);
    }
    graphics._0x67B0778C62E74423 = _0x67B0778C62E74423;
    /**
     * No comment provided
     *
     * Hash: 0x6C03118E9E5C1A14 | Since: 1207
     */
    function _0x6C03118E9E5C1A14() {
        Citizen.invokeNative('0x6C03118E9E5C1A14', undefined);
    }
    graphics._0x6C03118E9E5C1A14 = _0x6C03118E9E5C1A14;
    /**
     * ANIMPOSTFX_*
     *
     * Hash: 0x71845905BCCDE781 | Since: 1207
     */
    function _0x71845905BCCDE781(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        Citizen.invokeNative('0x71845905BCCDE781', effectNameHash);
    }
    graphics._0x71845905BCCDE781 = _0x71845905BCCDE781;
    /**
     * No comment provided
     *
     * Hash: 0x735762E8D7573E42 | Since: 1207
     */
    function _0x735762E8D7573E42() {
        Citizen.invokeNative('0x735762E8D7573E42', undefined, undefined, undefined);
    }
    graphics._0x735762E8D7573E42 = _0x735762E8D7573E42;
    /**
     * Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
     * _ENABLE_*
     *
     * Hash: 0x812C1563185C6FB2 | Since: 1207
     */
    function _0x812C1563185C6FB2() {
        Citizen.invokeNative('0x812C1563185C6FB2');
    }
    graphics._0x812C1563185C6FB2 = _0x812C1563185C6FB2;
    /**
     * No comment provided
     *
     * Hash: 0x815653A42C5ABE76 | Since: 1207
     */
    function _0x815653A42C5ABE76() {
        Citizen.invokeNative('0x815653A42C5ABE76');
    }
    graphics._0x815653A42C5ABE76 = _0x815653A42C5ABE76;
    /**
     * No comment provided
     *
     * Hash: 0x8996FA6AD9FE4E90 | Since: 1207
     */
    function _0x8996FA6AD9FE4E90() {
        Citizen.invokeNative('0x8996FA6AD9FE4E90', undefined);
    }
    graphics._0x8996FA6AD9FE4E90 = _0x8996FA6AD9FE4E90;
    /**
     * No comment provided
     *
     * Hash: 0x910E260AEAD855DE | Since: 1207
     */
    function _0x910E260AEAD855DE() {
        Citizen.invokeNative('0x910E260AEAD855DE');
    }
    graphics._0x910E260AEAD855DE = _0x910E260AEAD855DE;
    /**
     * Resets the exposure to the value when exposure lock was enabled
     *
     * Hash: 0x9229ED770975BD9E | Since: 1311
     */
    function updatePhotoModeExposure() {
        Citizen.invokeNative('0x9229ED770975BD9E');
    }
    graphics.updatePhotoModeExposure = updatePhotoModeExposure;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x94B261F1F35293E1 | Since: 1207
     */
    function _0x94B261F1F35293E1() {
        Citizen.invokeNative('0x94B261F1F35293E1', undefined);
    }
    graphics._0x94B261F1F35293E1 = _0x94B261F1F35293E1;
    /**
     * No comment provided
     *
     * Hash: 0x981C7D863980FA51 | Since: 1207
     */
    function _0x981C7D863980FA51() {
        Citizen.invokeNative('0x981C7D863980FA51');
    }
    graphics._0x981C7D863980FA51 = _0x981C7D863980FA51;
    /**
     * No comment provided
     *
     * Hash: 0x9D1B0B5066205692 | Since: 1207
     */
    function _0x9D1B0B5066205692() {
        Citizen.invokeNative('0x9D1B0B5066205692');
    }
    graphics._0x9D1B0B5066205692 = _0x9D1B0B5066205692;
    /**
     * No comment provided
     *
     * Hash: 0x9F158A49B0D84C3C | Since: 1207
     */
    function _0x9F158A49B0D84C3C() {
        Citizen.invokeNative('0x9F158A49B0D84C3C', undefined);
    }
    graphics._0x9F158A49B0D84C3C = _0x9F158A49B0D84C3C;
    /**
     * No comment provided
     *
     * Hash: 0x9F6D859C80708B26 | Since: 1311
     */
    function _0x9F6D859C80708B26() {
        Citizen.invokeNative('0x9F6D859C80708B26', false, false);
    }
    graphics._0x9F6D859C80708B26 = _0x9F6D859C80708B26;
    /**
     * No comment provided
     *
     * Hash: 0xA04EF43030593ABC | Since: 1207
     */
    function _0xA04EF43030593ABC() {
        Citizen.invokeNative('0xA04EF43030593ABC', undefined, undefined);
    }
    graphics._0xA04EF43030593ABC = _0xA04EF43030593ABC;
    /**
     * No comment provided
     *
     * Hash: 0xA0F4D12D6042F6D5 | Since: 1207
     */
    function _0xA0F4D12D6042F6D5() {
        Citizen.invokeNative('0xA0F4D12D6042F6D5', undefined, undefined);
    }
    graphics._0xA0F4D12D6042F6D5 = _0xA0F4D12D6042F6D5;
    /**
     * No comment provided
     *
     * Hash: 0xA15CCAB8AD038291 | Since: 1207
     */
    function _0xA15CCAB8AD038291() {
        return Citizen.invokeNative('0xA15CCAB8AD038291', undefined, undefined, undefined, undefined);
    }
    graphics._0xA15CCAB8AD038291 = _0xA15CCAB8AD038291;
    /**
     * No comment provided
     *
     * Hash: 0xA1A86055792FB249 | Since: 1207
     */
    function _0xA1A86055792FB249(personaPhotoLocalCacheType) {
        Citizen.invokeNative('0xA1A86055792FB249', personaPhotoLocalCacheType);
    }
    graphics._0xA1A86055792FB249 = _0xA1A86055792FB249;
    /**
     * ANIMPOSTFX_*
     *
     * Hash: 0xA201A3D0AC087C37 | Since: 1207
     */
    function _0xA201A3D0AC087C37(effectName) {
        Citizen.invokeNative('0xA201A3D0AC087C37', effectName);
    }
    graphics._0xA201A3D0AC087C37 = _0xA201A3D0AC087C37;
    /**
     * No comment provided
     *
     * Hash: 0xA21AF60C9F99CCC5 | Since: 1207
     */
    function _0xA21AF60C9F99CCC5() {
        Citizen.invokeNative('0xA21AF60C9F99CCC5');
    }
    graphics._0xA21AF60C9F99CCC5 = _0xA21AF60C9F99CCC5;
    /**
     * _SET_D* or _SET_E*
     *
     * Hash: 0xB032C085D9A03907 | Since: 1207
     */
    function _0xB032C085D9A03907() {
        Citizen.invokeNative('0xB032C085D9A03907');
    }
    graphics._0xB032C085D9A03907 = _0xB032C085D9A03907;
    /**
     * ANIMPOSTFX_*
     *
     * Hash: 0xB958D97A0DFAA0C2 | Since: 1207
     */
    function _0xB958D97A0DFAA0C2(effectName) {
        return Citizen.invokeNative('0xB958D97A0DFAA0C2', effectName);
    }
    graphics._0xB958D97A0DFAA0C2 = _0xB958D97A0DFAA0C2;
    /**
     * Used in NET_CAMP_SPIRIT_ANIMAL_CLEAR_ANIMAL_VISIBILITY
     *
     * Hash: 0xC06F2F45A73EABCD | Since: 1311
     */
    function _0xC06F2F45A73EABCD(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xC06F2F45A73EABCD', _entity);
    }
    graphics._0xC06F2F45A73EABCD = _0xC06F2F45A73EABCD;
    /**
     * No comment provided
     *
     * Hash: 0xC28F62AC9774FC1B | Since: 1207
     */
    function _0xC28F62AC9774FC1B() {
        return Citizen.invokeNative('0xC28F62AC9774FC1B');
    }
    graphics._0xC28F62AC9774FC1B = _0xC28F62AC9774FC1B;
    /**
     * Doesn't actually return anything.
     *
     * ANIMPOSTFX_*
     *
     * Hash: 0xC37792A3F9C90771 | Since: 1207
     */
    function _0xC37792A3F9C90771() {
        return Citizen.invokeNative('0xC37792A3F9C90771');
    }
    graphics._0xC37792A3F9C90771 = _0xC37792A3F9C90771;
    /**
     * No comment provided
     *
     * Hash: 0xC489FE31AC726512 | Since: 1207
     */
    function _0xC489FE31AC726512() {
        Citizen.invokeNative('0xC489FE31AC726512', undefined, undefined);
    }
    graphics._0xC489FE31AC726512 = _0xC489FE31AC726512;
    /**
     * ANIMPOSTFX_*
     *
     * Hash: 0xC76FC4C2FC5F4405 | Since: 1207
     */
    function _0xC76FC4C2FC5F4405(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        Citizen.invokeNative('0xC76FC4C2FC5F4405', effectNameHash);
    }
    graphics._0xC76FC4C2FC5F4405 = _0xC76FC4C2FC5F4405;
    /**
     * No comment provided
     *
     * Hash: 0xC8D0611D9A0CF5D3 | Since: 1207
     */
    function changePhotoModeExposure(value) {
        Citizen.invokeNative('0xC8D0611D9A0CF5D3', value);
    }
    graphics.changePhotoModeExposure = changePhotoModeExposure;
    /**
     * No comment provided
     *
     * Hash: 0xCC3B787E73E64160 | Since: 1207
     */
    function _0xCC3B787E73E64160() {
        Citizen.invokeNative('0xCC3B787E73E64160', undefined, undefined, undefined, undefined, undefined);
    }
    graphics._0xCC3B787E73E64160 = _0xCC3B787E73E64160;
    /**
     * Only used in R* Script nb_stalking_hunter
     *
     * Hash: 0xD1472AFF30C103D6 | Since: 1311
     */
    function _0xD1472AFF30C103D6() {
        Citizen.invokeNative('0xD1472AFF30C103D6', 0);
    }
    graphics._0xD1472AFF30C103D6 = _0xD1472AFF30C103D6;
    /**
     * No comment provided
     *
     * Hash: 0xD543487A1F12828F | Since: 1207
     */
    function _0xD543487A1F12828F() {
        Citizen.invokeNative('0xD543487A1F12828F', undefined, undefined, undefined, undefined);
    }
    graphics._0xD543487A1F12828F = _0xD543487A1F12828F;
    /**
     * No comment provided
     *
     * Hash: 0xD9BC98B55BCFAA9B | Since: 1207
     */
    function _0xD9BC98B55BCFAA9B() {
        Citizen.invokeNative('0xD9BC98B55BCFAA9B', undefined);
    }
    graphics._0xD9BC98B55BCFAA9B = _0xD9BC98B55BCFAA9B;
    /**
     * Returns iNumPixels, iPixelsVisible
     *
     * Hash: 0xDFE332A5DA6FE7C9 | Since: 1207
     */
    function _0xDFE332A5DA6FE7C9(iTrackedPoint) {
        return Citizen.invokeNative('0xDFE332A5DA6FE7C9', iTrackedPoint);
    }
    graphics._0xDFE332A5DA6FE7C9 = _0xDFE332A5DA6FE7C9;
    /**
     * No comment provided
     *
     * Hash: 0xE63D68F455CA0B47 | Since: 1207
     */
    function _0xE63D68F455CA0B47() {
        return Citizen.invokeNative('0xE63D68F455CA0B47', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    graphics._0xE63D68F455CA0B47 = _0xE63D68F455CA0B47;
    /**
     * ANIMPOSTFX_*
     *
     * Hash: 0xE75CDDEBF618C8FF | Since: 1207
     */
    function _0xE75CDDEBF618C8FF(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        return Citizen.invokeNative('0xE75CDDEBF618C8FF', effectNameHash);
    }
    graphics._0xE75CDDEBF618C8FF = _0xE75CDDEBF618C8FF;
    /**
     * No comment provided
     *
     * Hash: 0xEB48CE48EEC41FD4 | Since: 1207
     */
    function _0xEB48CE48EEC41FD4() {
        Citizen.invokeNative('0xEB48CE48EEC41FD4', undefined);
    }
    graphics._0xEB48CE48EEC41FD4 = _0xEB48CE48EEC41FD4;
    /**
     * No comment provided
     *
     * Hash: 0xEC3D8C228FE553D7 | Since: 1207
     */
    function _0xEC3D8C228FE553D7() {
        return Citizen.invokeNative('0xEC3D8C228FE553D7', false);
    }
    graphics._0xEC3D8C228FE553D7 = _0xEC3D8C228FE553D7;
    /**
     * No comment provided
     *
     * Hash: 0xEC3F7F24EEEB3BA3 | Since: 1207
     */
    function _0xEC3F7F24EEEB3BA3() {
        Citizen.invokeNative('0xEC3F7F24EEEB3BA3');
    }
    graphics._0xEC3F7F24EEEB3BA3 = _0xEC3F7F24EEEB3BA3;
    /**
     * No comment provided
     *
     * Hash: 0xF2F543D48F319A3A | Since: 1207
     */
    function _0xF2F543D48F319A3A() {
        Citizen.invokeNative('0xF2F543D48F319A3A');
    }
    graphics._0xF2F543D48F319A3A = _0xF2F543D48F319A3A;
    /**
     * No comment provided
     *
     * Hash: 0xF5793BB386E1FF9C | Since: 1207
     */
    function _0xF5793BB386E1FF9C() {
        Citizen.invokeNative('0xF5793BB386E1FF9C', undefined);
    }
    graphics._0xF5793BB386E1FF9C = _0xF5793BB386E1FF9C;
    /**
     * _DISABLE_*
     *
     * Hash: 0xFB680A9B33D0EDBE | Since: 1207
     */
    function _0xFB680A9B33D0EDBE() {
        Citizen.invokeNative('0xFB680A9B33D0EDBE', false);
    }
    graphics._0xFB680A9B33D0EDBE = _0xFB680A9B33D0EDBE;
    /**
     * ANIMPOSTFX_*
     *
     * Hash: 0xFBF161FCFEC8589E | Since: 1207
     */
    function _0xFBF161FCFEC8589E(effectName) {
        return Citizen.invokeNative('0xFBF161FCFEC8589E', effectName, 0, false);
    }
    graphics._0xFBF161FCFEC8589E = _0xFBF161FCFEC8589E;
    /**
     * No comment provided
     *
     * Hash: 0xFC9B53C072F418E0 | Since: 1207
     */
    function _0xFC9B53C072F418E0() {
        return Citizen.invokeNative('0xFC9B53C072F418E0');
    }
    graphics._0xFC9B53C072F418E0 = _0xFC9B53C072F418E0;
    /**
     * R* Script spd_agnesdow1: p0 = SPD_AGNES_DOWD_01
     *
     * Hash: 0xFD05B1DDE83749FA | Since: 1207
     */
    function _0xFD05B1DDE83749FA() {
        return Citizen.invokeNative('0xFD05B1DDE83749FA', undefined);
    }
    graphics._0xFD05B1DDE83749FA = _0xFD05B1DDE83749FA;
    /**
     * Returns whether the 'killFX' setting is enabled.
     *
     * ANIMPOSTFX_*
     *
     * Hash: 0xFF584F097C17FA8F | Since: 1207
     */
    function _0xFF584F097C17FA8F() {
        return Citizen.invokeNative('0xFF584F097C17FA8F');
    }
    graphics._0xFF584F097C17FA8F = _0xFF584F097C17FA8F;
    /**
     * No comment provided
     *
     * Hash: 0xFF8018C778349234 | Since: 1207
     */
    function _0xFF8018C778349234() {
        Citizen.invokeNative('0xFF8018C778349234', undefined);
    }
    graphics._0xFF8018C778349234 = _0xFF8018C778349234;
    /**
     * https://i.imgur.com/ULQU9US.jpg
     * More rounded and small puddle
     *
     * Hash: 0xFA2ECC78A6014D4F | Since: 1207
     */
    function addBloodPool(pos, unused) {
        AddBloodPool(pos.x, pos.y, pos.z, unused);
    }
    graphics.addBloodPool = addBloodPool;
    /**
     * Creates blood pools for the given ped in some interval for a few seconds.
     *
     * Hash: 0xDFCE8CE9F3EBE93F | Since: 1207
     */
    function addBloodPoolsForPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddBloodPoolsForPed(_ped);
    }
    graphics.addBloodPoolsForPed = addBloodPoolsForPed;
    /**
     * No comment provided
     *
     * Hash: 0xC349EE1E6EFA494B | Since: 1207
     */
    function addBloodPoolsForPedWithParams(ped, size) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddBloodPoolsForPedWithParams(_ped, 0, size, 0);
    }
    graphics.addBloodPoolsForPedWithParams = addBloodPoolsForPedWithParams;
    /**
     * https://i.imgur.com/rPITUCV.jpg
     * More customizable and more like quadrants
     *
     * Hash: 0xF708298675ABDC6A | Since: 1207
     */
    function addBloodPool2(pos, size, permanent) {
        AddBloodPool2(pos.x, pos.y, pos.z, 0, size, 0, permanent, 0, false);
    }
    graphics.addBloodPool2 = addBloodPool2;
    /**
     * No comment provided
     *
     * Hash: 0xDD9DC1AB63D513CE | Since: 1207
     */
    function addBloodTrailPoint(pos) {
        AddBloodTrailPoint(pos.x, pos.y, pos.z);
    }
    graphics.addBloodTrailPoint = addBloodTrailPoint;
    /**
     * No comment provided
     *
     * Hash: 0xF5E45CB1CF965D2D | Since: 1207
     */
    function addBloodTrailSplat(pos) {
        AddBloodTrailSplat(pos.x, pos.y, pos.z);
    }
    graphics.addBloodTrailSplat = addBloodTrailSplat;
    /**
     * No comment provided
     *
     * Hash: 0xC6F81FCD15350323 | Since: 1207
     */
    function addEntityToEntityMask(entity, mask) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AddEntityToEntityMask(_entity, mask);
    }
    graphics.addEntityToEntityMask = addEntityToEntityMask;
    /**
     * No comment provided
     *
     * Hash: 0x958DEBD9353C0935 | Since: 1207
     */
    function addEntityToEntityMaskWithIntensity(entity, mask, intensity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AddEntityToEntityMaskWithIntensity(_entity, mask, intensity);
    }
    graphics.addEntityToEntityMaskWithIntensity = addEntityToEntityMaskWithIntensity;
    /**
     * Adds Vegetation Blocking Zone, Added Snow Flattening veg mod Zone
     * Returns veg modifier handle
     *
     * Hash: 0xBD3324281E8B9933 | Since: 1207
     */
    function addVegModifierZone(volume, flags) {
        return AddVegModifierZone(volume, 0, flags, 0);
    }
    graphics.addVegModifierZone = addVegModifierZone;
    /**
     * No comment provided
     *
     * Hash: 0xC5CB91D65852ED7E | Since: 1207
     */
    function animpostfxClearEffect(effectName) {
        AnimpostfxClearEffect(effectName);
    }
    graphics.animpostfxClearEffect = animpostfxClearEffect;
    /**
     * Known effects: MP_Trans_SceneToPhoto
     * MP_Trans_WinLose
     * SpectateFilter
     * MP_CharacterCreatorPhoto
     * MP_Trans_PhotoToScene
     * InterrogationHit
     *
     * Hash: 0x842CCC9491FFCD9B | Since: 1207
     */
    function animpostfxGetStackhash(effectName) {
        return AnimpostfxGetStackhash(effectName);
    }
    graphics.animpostfxGetStackhash = animpostfxGetStackhash;
    /**
     * No comment provided
     *
     * Hash: 0xBF2DD155B2ADCD0A | Since: 1207
     */
    function animpostfxHasLoaded(effectName) {
        return AnimpostfxHasLoaded(effectName);
    }
    graphics.animpostfxHasLoaded = animpostfxHasLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xEEF83A759AE06A27 | Since: 1207
     */
    function animpostfxIsStackhashPlaying(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        return AnimpostfxIsStackhashPlaying(effectNameHash);
    }
    graphics.animpostfxIsStackhashPlaying = animpostfxIsStackhashPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x2D4F9C852CE8A253 | Since: 1207
     */
    function animpostfxIsTagPlaying(effectName) {
        return AnimpostfxIsTagPlaying(effectName);
    }
    graphics.animpostfxIsTagPlaying = animpostfxIsTagPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x9B8D5D4CB8AF58B3 | Since: 1207
     */
    function animpostfxPlayTag(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        AnimpostfxPlayTag(effectNameHash);
    }
    graphics.animpostfxPlayTag = animpostfxPlayTag;
    /**
     * No comment provided
     *
     * Hash: 0x3A9A281FF71249E9 | Since: 1207
     */
    function animpostfxPlayTimed(effectName, duration) {
        AnimpostfxPlayTimed(effectName, duration);
    }
    graphics.animpostfxPlayTimed = animpostfxPlayTimed;
    /**
     * No comment provided
     *
     * Hash: 0x5199405EABFBD7F0 | Since: 1207
     */
    function animpostfxPreloadPostfx(effectName) {
        AnimpostfxPreloadPostfx(effectName);
    }
    graphics.animpostfxPreloadPostfx = animpostfxPreloadPostfx;
    /**
     * No comment provided
     *
     * Hash: 0xF3E039322BFBD4D8 | Since: 1207
     */
    function animpostfxPreloadPostfxByStackhash(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        AnimpostfxPreloadPostfxByStackhash(effectNameHash);
    }
    graphics.animpostfxPreloadPostfxByStackhash = animpostfxPreloadPostfxByStackhash;
    /**
     * No comment provided
     *
     * Hash: 0x63011D0C7C6519E0 | Since: 1311
     */
    function animpostfxSetPostfxColor(effectName, red, green, blue, alpha) {
        AnimpostfxSetPostfxColor(effectName, 0, red, green, blue, alpha);
    }
    graphics.animpostfxSetPostfxColor = animpostfxSetPostfxColor;
    /**
     * Health Core Effect Filter Potency: p1 = 1
     * Stamina Core Effect Filter Potency: p1 = 2
     * Multiple Core Effect Filter Potency: p1 = 3
     *
     * Hash: 0xF972F0AB16DC5260 | Since: 1207
     */
    function animpostfxSetPotency(effectName, potency) {
        AnimpostfxSetPotency(effectName, 0, potency);
    }
    graphics.animpostfxSetPotency = animpostfxSetPotency;
    /**
     * must be called after ANIMPOSTFX_PLAY, strength 0.0f - 1.0f
     *
     * Hash: 0xCAB4DD2D5B2B7246 | Since: 1207
     */
    function animpostfxSetStrength(effectName, strength) {
        AnimpostfxSetStrength(effectName, strength);
    }
    graphics.animpostfxSetStrength = animpostfxSetStrength;
    /**
     * No comment provided
     *
     * Hash: 0x37D7BDBA89F13959 | Since: 1207
     */
    function animpostfxSetToUnload(effectName) {
        AnimpostfxSetToUnload(effectName);
    }
    graphics.animpostfxSetToUnload = animpostfxSetToUnload;
    /**
     * No comment provided
     *
     * Hash: 0xEDA5CBECF56E1386 | Since: 1207
     */
    function animpostfxStopStackhashPostfx(effectNameHash) {
        if (typeof effectNameHash === 'string')
            effectNameHash = misc.getHashKey(effectNameHash);
        AnimpostfxStopStackhashPostfx(effectNameHash);
    }
    graphics.animpostfxStopStackhashPostfx = animpostfxStopStackhashPostfx;
    /**
     * No comment provided
     *
     * Hash: 0xAD74C22A541AB987 | Since: 1207
     */
    function animpostfxStopTag(effectName) {
        AnimpostfxStopTag(effectName);
    }
    graphics.animpostfxStopTag = animpostfxStopTag;
    /**
     * No comment provided
     *
     * Hash: 0x50C14328119E1DD1 | Since: 1207
     */
    function blockPickupObjectLight(pickupObject, toggle) {
        const _pickupObject = pickupObject instanceof Object ? pickupObject.handle() : pickupObject;
        BlockPickupObjectLight(_pickupObject, toggle);
    }
    graphics.blockPickupObjectLight = blockPickupObjectLight;
    /**
     * p1: 0.3f in R* Scripts
     *
     * Hash: 0xB9C92616929CC25D | Since: 1207
     */
    function bloodTrailForWaypoint(waypointRecording) {
        BloodTrailForWaypoint(waypointRecording, 0);
    }
    graphics.bloodTrailForWaypoint = bloodTrailForWaypoint;
    /**
     * No comment provided
     *
     * Hash: 0x3D084D5568FB4028 | Since: 1207
     */
    function createSwatchTextureDict(slots) {
        return CreateSwatchTextureDict(slots);
    }
    graphics.createSwatchTextureDict = createSwatchTextureDict;
    /**
     * No comment provided
     *
     * Hash: 0xDAD7FB8402651654 | Since: 1207
     */
    function destroySwatchTextureDict() {
        DestroySwatchTextureDict();
    }
    graphics.destroySwatchTextureDict = destroySwatchTextureDict;
    /**
     * Only used in guama1 R* Script
     * Disables lod/distant lights when BOOL is set to true
     *
     * Hash: 0xCD284E2F6AC27EE9 | Since: 1207
     */
    function disableFarArtificialLights(disable) {
        DisableFarArtificialLights(disable);
    }
    graphics.disableFarArtificialLights = disableFarArtificialLights;
    /**
     * No comment provided
     *
     * Hash: 0xDD0BC0EDCB2162F6 | Since: 1207
     */
    function disableStaticVegModifier(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        DisableStaticVegModifier(p0);
    }
    graphics.disableStaticVegModifier = disableStaticVegModifier;
    /**
     * No comment provided
     *
     * Hash: 0x4C11CCACB7C02B6E | Since: 1207
     */
    function doesCheckpointHaveFx(checkpoint) {
        return DoesCheckpointHaveFx(checkpoint);
    }
    graphics.doesCheckpointHaveFx = doesCheckpointHaveFx;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/graphics/markers/marker_types.lua
     * Old name: _DRAW_MARKER
     *
     * Hash: 0x2A32FAA57B937173 | Since: 1207
     */
    function drawMarker(_type, pos, dirX, dirY, dirZ, rot, scale, red, green, blue, alpha, bobUpAndDown, faceCamera, rotate, textureDict, textureName, drawOnEnts) {
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        DrawMarker(_type, pos.x, pos.y, pos.z, dirX, dirY, dirZ, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z, red, green, blue, alpha, bobUpAndDown, faceCamera, 0, rotate, textureDict, textureName, drawOnEnts);
    }
    graphics.drawMarker = drawMarker;
    /**
     * No comment provided
     *
     * Hash: 0xDFEA23EC90113657 | Since: 1207
     */
    function enableStaticVegModifier(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        EnableStaticVegModifier(p0);
    }
    graphics.enableStaticVegModifier = enableStaticVegModifier;
    /**
     * Example:
     * local hash = GetHashKey("CLOTHING_ITEM_M_EYES_001_TINT_001")
     * _GENERATE_SWATCH_TEXTURE(0, hash, 0, true)
     * metapedType: see 0xEC9A1261BF0CE510
     *
     * Hash: 0x160921255327C591 | Since: 1207
     */
    function generateSwatchTexture(slotId, componentHash, metapedType) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        GenerateSwatchTexture(slotId, componentHash, metapedType, false);
    }
    graphics.generateSwatchTexture = generateSwatchTexture;
    /**
     * Example: https://pastebin.com/tTgpER9A
     *
     * Hash: 0x646ED1A1D28487DF | Since: 1207
     */
    function generateSwatchTextureDirectly(slot) {
        GenerateSwatchTextureDirectly(slot, undefined);
    }
    graphics.generateSwatchTextureDirectly = generateSwatchTextureDirectly;
    /**
     * No comment provided
     *
     * Hash: 0x78C56B8A7B1D000C | Since: 1207
     */
    function getCurrentNumberOfLocalPhotos() {
        return GetCurrentNumberOfLocalPhotos();
    }
    graphics.getCurrentNumberOfLocalPhotos = getCurrentNumberOfLocalPhotos;
    /**
     * No comment provided
     *
     * Hash: 0xE8A8378BF651079C | Since: 1207
     */
    function getEntityMaskLayers(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetEntityMaskLayers(_entity);
    }
    graphics.getEntityMaskLayers = getEntityMaskLayers;
    /**
     * Always returns 200.
     *
     * Hash: 0x8E587FCD30E05592 | Since: 1207
     */
    function getMaxNumberOfLocalPhotos() {
        return GetMaxNumberOfLocalPhotos();
    }
    graphics.getMaxNumberOfLocalPhotos = getMaxNumberOfLocalPhotos;
    /**
     * _GET_C* - _GET_E*
     *
     * Hash: 0x25CA89B2A39DCC69 | Since: 1207
     */
    function getModifiedVisibilityDistance() {
        return GetModifiedVisibilityDistance();
    }
    graphics.getModifiedVisibilityDistance = getModifiedVisibilityDistance;
    /**
     * No comment provided
     *
     * Hash: 0x98F4154989B81EC6 | Since: 1207
     */
    function getPhotoModeContrast() {
        return GetPhotoModeContrast();
    }
    graphics.getPhotoModeContrast = getPhotoModeContrast;
    /**
     * No comment provided
     *
     * Hash: 0x06C0D8BB6B04A709 | Since: 1207
     */
    function getPhotoModeExposure() {
        return GetPhotoModeExposure();
    }
    graphics.getPhotoModeExposure = getPhotoModeExposure;
    /**
     * Returns proxyInteriorIndex
     *
     * Hash: 0x5D1C5D8E62E8EE1C | Since: 1207
     */
    function getProxyInteriorIndex(interiorId) {
        return GetProxyInteriorIndex(interiorId);
    }
    graphics.getProxyInteriorIndex = getProxyInteriorIndex;
    /**
     * No comment provided
     *
     * Hash: 0x113857D66A9CABE6 | Since: 1207
     */
    function isProxyInteriorIndexArtificialLightsEnabled(proxyInteriorIndex) {
        return IsProxyInteriorIndexArtificialLightsEnabled(proxyInteriorIndex);
    }
    graphics.isProxyInteriorIndexArtificialLightsEnabled = isProxyInteriorIndexArtificialLightsEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xDE9BAD3292AA6D5E | Since: 1207
     */
    function isStaticVegModifierEnabled(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return IsStaticVegModifierEnabled(p0);
    }
    graphics.isStaticVegModifierEnabled = isStaticVegModifierEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xA2A51869BDED733B | Since: 1207
     */
    function isTextureInDict(txdHash, dict) {
        if (typeof txdHash === 'string')
            txdHash = misc.getHashKey(txdHash);
        if (typeof dict === 'string')
            dict = misc.getHashKey(dict);
        return IsTextureInDict(txdHash, dict);
    }
    graphics.isTextureInDict = isTextureInDict;
    /**
     * No comment provided
     *
     * Hash: 0xF2FDDCC8C6BAE1B3 | Since: 1207
     */
    function isTrackedPointValid(point) {
        return IsTrackedPointValid(point);
    }
    graphics.isTrackedPointValid = isTrackedPointValid;
    /**
     * No comment provided
     *
     * Hash: 0xC2B8164C3BE871A4 | Since: 1207
     */
    function pedshotFinishCleanupData() {
        PedshotFinishCleanupData();
    }
    graphics.pedshotFinishCleanupData = pedshotFinishCleanupData;
    /**
     * No comment provided
     *
     * Hash: 0xD9C24F53631F2372 | Since: 1207
     */
    function pedshotGeneratePersonaPhoto(texture, ped, playerSlot) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return PedshotGeneratePersonaPhoto(texture, _ped, playerSlot);
    }
    graphics.pedshotGeneratePersonaPhoto = pedshotGeneratePersonaPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x55285F885F662169 | Since: 1207
     */
    function pedshotInitCleanupData() {
        PedshotInitCleanupData();
    }
    graphics.pedshotInitCleanupData = pedshotInitCleanupData;
    /**
     * No comment provided
     *
     * Hash: 0x3E2FDDBE435A8787 | Since: 1207
     */
    function pedshotPreviousPersonaPhotoDataCleanup() {
        PedshotPreviousPersonaPhotoDataCleanup();
    }
    graphics.pedshotPreviousPersonaPhotoDataCleanup = pedshotPreviousPersonaPhotoDataCleanup;
    /**
     * No comment provided
     *
     * Hash: 0x196D3ACBEBA4A44B | Since: 1207
     */
    function pedshotSetPersonaPhotoType(personaPhotoLocalCacheType) {
        PedshotSetPersonaPhotoType(personaPhotoLocalCacheType);
    }
    graphics.pedshotSetPersonaPhotoType = pedshotSetPersonaPhotoType;
    /**
     * No comment provided
     *
     * Hash: 0x56A786E87FF53478 | Since: 1207
     */
    function removeEntityFromEntityMask(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RemoveEntityFromEntityMask(_entity);
    }
    graphics.removeEntityFromEntityMask = removeEntityFromEntityMask;
    /**
     * Used for script function RPG_GLOBAL_STATS__PRIVATE__DEACTIVATE_STAT_FLAG - Inspiration Aura unequip
     *
     * Hash: 0xAF4D239B8903FCBE | Since: 1207
     */
    function resetEntityAura() {
        ResetEntityAura();
    }
    graphics.resetEntityAura = resetEntityAura;
    /**
     * No comment provided
     *
     * Hash: 0xC332C91388F5580B | Since: 1207
     */
    function setCloudHeight(height) {
        SetCloudHeight(height);
    }
    graphics.setCloudHeight = setCloudHeight;
    /**
     * No comment provided
     *
     * Hash: 0xB8C984C0D47F4F07 | Since: 1207
     */
    function setCloudLayer(x, y) {
        SetCloudLayer(x, y, 0);
    }
    graphics.setCloudLayer = setCloudLayer;
    /**
     * No comment provided
     *
     * Hash: 0xFE7966DF01452F32 | Since: 1207
     */
    function setCloudNoise(pos) {
        SetCloudNoise(pos.x, pos.y, pos.z);
    }
    graphics.setCloudNoise = setCloudNoise;
    /**
     * Only used in finale2, smuggler2, winter4
     * _SET_CLOUD_A* - _SET_CLOUD_H*
     *
     * Hash: 0x10C1767B93257480 | Since: 1207
     */
    function setCloudPosition(pos) {
        SetCloudPosition(pos.x, pos.y, pos.z);
    }
    graphics.setCloudPosition = setCloudPosition;
    /**
     * No comment provided
     *
     * Hash: 0x9937FACBBF267244 | Since: 1207
     */
    function setDistrictPhotoTakenStat() {
        SetDistrictPhotoTakenStat(undefined);
    }
    graphics.setDistrictPhotoTakenStat = setDistrictPhotoTakenStat;
    /**
     * Used for script function RPG_GLOBAL_STATS__PRIVATE__ACTIVATE_STAT_FLAG - Quite and Inspiration Aura equip
     * Params: 0f, 2f, 2f
     *
     * Hash: 0x249CD6B7285536F2 | Since: 1207
     */
    function setEntityAura() {
        SetEntityAura(0, 0, 0);
    }
    graphics.setEntityAura = setEntityAura;
    /**
     * No comment provided
     *
     * Hash: 0xE92012611461A42A | Since: 1207
     */
    function setEntityMaskLayers(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return SetEntityMaskLayers(_entity);
    }
    graphics.setEntityMaskLayers = setEntityMaskLayers;
    /**
     * Only used in guama1 R* SP Script while spawning the ship
     * _SET_ENTITY_QUATERNION_* - SET_ENTITY_RENDER_*
     *
     * Hash: 0xC38B4952B728397A | Since: 1207
     */
    function setEntityRenderGuarmaShip(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetEntityRenderGuarmaShip(_vehicle, toggle);
    }
    graphics.setEntityRenderGuarmaShip = setEntityRenderGuarmaShip;
    /**
     * https://gfycat.com/meagerfaireyra
     *
     * Hash: 0x6EC2A67962296F49 | Since: 1207
     */
    function setLightsColorForEntity(entity, red, green, blue) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetLightsColorForEntity(_entity, red, green, blue);
    }
    graphics.setLightsColorForEntity = setLightsColorForEntity;
    /**
     * No comment provided
     *
     * Hash: 0x07C0F87AAC57F2E4 | Since: 1207
     */
    function setLightsIntensityForEntity(entity, intensity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetLightsIntensityForEntity(_entity, intensity);
    }
    graphics.setLightsIntensityForEntity = setLightsIntensityForEntity;
    /**
     * type must be less than or equal to 20
     *
     * Hash: 0xAB72C67163DC4DB4 | Since: 1207
     */
    function setLightsTypeForEntity(entity, _type) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetLightsTypeForEntity(_entity, _type);
    }
    graphics.setLightsTypeForEntity = setLightsTypeForEntity;
    /**
     * _SET_PARTICLE_FX_LOOPED_FA* - _SET_PARTICLE_FX_LOOPED_OF*
     *
     * Hash: 0x9DDC222D85D5AF2A | Since: 1207
     */
    function setParticleFxLoopedUpdateDistantSmoke(ptfxHandle, scalar) {
        SetParticleFxLoopedUpdateDistantSmoke(ptfxHandle, scalar);
    }
    graphics.setParticleFxLoopedUpdateDistantSmoke = setParticleFxLoopedUpdateDistantSmoke;
    /**
     * No comment provided
     *
     * Hash: 0x56C392C2BD78B024 | Since: 1311
     */
    function setParticleFxNonLoopedEmitterScale() {
        SetParticleFxNonLoopedEmitterScale(0, 0, 0);
    }
    graphics.setParticleFxNonLoopedEmitterScale = setParticleFxNonLoopedEmitterScale;
    /**
     * Enables/disables a kind of 'shiny' effect on metals.
     *
     * Hash: 0x72E30372E7CC4415 | Since: 1207
     */
    function setPearlescentFxEnabled(_object, toggle) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetPearlescentFxEnabled(__object, toggle);
    }
    graphics.setPearlescentFxEnabled = setPearlescentFxEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xFA91736933AB3D93 | Since: 1207
     */
    function setPhotoInPhotomodeStat() {
        SetPhotoInPhotomodeStat(false);
    }
    graphics.setPhotoInPhotomodeStat = setPhotoInPhotomodeStat;
    /**
     * No comment provided
     *
     * Hash: 0x8B3296278328B5EB | Since: 1207
     */
    function setPhotoOverlayEffectStat() {
        SetPhotoOverlayEffectStat(0);
    }
    graphics.setPhotoOverlayEffectStat = setPhotoOverlayEffectStat;
    /**
     * No comment provided
     *
     * Hash: 0x2705D18C11B61046 | Since: 1207
     */
    function setPhotoSelfStat() {
        SetPhotoSelfStat(false);
    }
    graphics.setPhotoSelfStat = setPhotoSelfStat;
    /**
     * No comment provided
     *
     * Hash: 0x8E6AFF353C09652E | Since: 1207
     */
    function setPhotoStudioStat() {
        SetPhotoStudioStat(0);
    }
    graphics.setPhotoStudioStat = setPhotoStudioStat;
    /**
     * No comment provided
     *
     * Hash: 0x75D568607909333E | Since: 1232
     */
    function setPlayerAppearInPhoto(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerAppearInPhoto(_player);
    }
    graphics.setPlayerAppearInPhoto = setPlayerAppearInPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x564837D4A9EDE296 | Since: 1207
     */
    function setPosseIdForPhoto(posseId) {
        SetPosseIdForPhoto(posseId);
    }
    graphics.setPosseIdForPhoto = setPosseIdForPhoto;
    /**
     * state: false disables artificial interior light sources for specific proxyInteriorIndex
     *
     * Hash: 0xBFCB17895BB99E4E | Since: 1207
     */
    function setProxyInteriorIndexArtificialLightsState(proxyInteriorIndex, state) {
        SetProxyInteriorIndexArtificialLightsState(proxyInteriorIndex, state);
    }
    graphics.setProxyInteriorIndexArtificialLightsState = setProxyInteriorIndexArtificialLightsState;
    /**
     * No comment provided
     *
     * Hash: 0xD1031B83AC093BC7 | Since: 1207
     */
    function setRegionPhotoTakenStat() {
        SetRegionPhotoTakenStat(undefined);
    }
    graphics.setRegionPhotoTakenStat = setRegionPhotoTakenStat;
    /**
     * No comment provided
     *
     * Hash: 0x6E8EB45A4F4460EB | Since: 1207
     */
    function setSniperGlintsEnabled(enabled) {
        SetSniperGlintsEnabled(enabled);
    }
    graphics.setSniperGlintsEnabled = setSniperGlintsEnabled;
    /**
     * enum class eSnowCoverageType
     * {
     * Primary,
     * Secondary,
     * Xmas,
     * XmasSecondary // since b1232
     * };
     *
     * Hash: 0xF02A9C330BBFC5C7 | Since: 1207
     */
    function setSnowCoverageType(_type) {
        SetSnowCoverageType(_type);
    }
    graphics.setSnowCoverageType = setSnowCoverageType;
    /**
     * No comment provided
     *
     * Hash: 0x8952E857696B8A79 | Since: 1207
     */
    function setStatePhotoTakenStat() {
        SetStatePhotoTakenStat(undefined);
    }
    graphics.setStatePhotoTakenStat = setStatePhotoTakenStat;
    /**
     * No comment provided
     *
     * Hash: 0xC695870B8A149B96 | Since: 1207
     */
    function startParticleFxNonLoopedOnPedBone2(effectName, ped, offsetX, offsetY, offsetZ, rot, boneIndex, scale, axisX, axisY, axisZ) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return StartParticleFxNonLoopedOnPedBone2(effectName, _ped, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, boneIndex, scale, axisX, axisY, axisZ);
    }
    graphics.startParticleFxNonLoopedOnPedBone2 = startParticleFxNonLoopedOnPedBone2;
})(graphics || (graphics = {}));
export var hud;
(function (hud) {
    /**
     * Old name: _ALLOW_PAUSE_MENU_WHEN_DEAD_THIS_FRAME
     *
     * Hash: 0x30996422DF1EE561 | Since: 1207
     */
    function allowPauseWhenNotInStateOfPlayThisFrame() {
        AllowPauseWhenNotInStateOfPlayThisFrame();
    }
    hud.allowPauseWhenNotInStateOfPlayThisFrame = allowPauseWhenNotInStateOfPlayThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x823BF7B1DF613A21 | Since: 1207
     */
    function busyspinnerIsOn() {
        return BusyspinnerIsOn();
    }
    hud.busyspinnerIsOn = busyspinnerIsOn;
    /**
     * Removes the loading prompt at the bottom right of the screen.
     *
     * Hash: 0x58F441B90EA84D06 | Since: 1207
     */
    function busyspinnerOff() {
        BusyspinnerOff();
    }
    hud.busyspinnerOff = busyspinnerOff;
    /**
     * No comment provided
     *
     * Hash: 0x916ED8321F087059 | Since: 1207
     */
    function clearAllHelpMessages() {
        ClearAllHelpMessages();
    }
    hud.clearAllHelpMessages = clearAllHelpMessages;
    /**
     * No comment provided
     *
     * Hash: 0x53CB4B502E1C57EA | Since: 1207
     */
    function createFakeMpGamerTag(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CreateFakeMpGamerTag(_ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
    }
    hud.createFakeMpGamerTag = createFakeMpGamerTag;
    /**
     * No comment provided
     *
     * Hash: 0x56CE42A528156A67 | Since: 1207
     */
    function disableFrontendThisFrame() {
        DisableFrontendThisFrame();
    }
    hud.disableFrontendThisFrame = disableFrontendThisFrame;
    /**
     * If Hud should be displayed
     *
     * Hash: 0xD63FE3AF9FB3D53F | Since: 1207
     */
    function display(toggle) {
        DisplayHud(toggle);
    }
    hud.display = display;
    /**
     * Checks if the passed gxt name exists in the game files.
     *
     * Hash: 0x73C258C68D6F55B6 | Since: 1207
     */
    function doesTextLabelExist(label) {
        return DoesTextLabelExist(label);
    }
    hud.doesTextLabelExist = doesTextLabelExist;
    /**
     * Note: you must use VAR_STRING. Byte code very similar to TEXT_COMMAND_DISPLAY_TEXT in V
     * Old name: _GET_TEXT_SUBSTRING
     *
     * Hash: 0x9D7E12EC6A1EE4E5 | Since: 1207
     */
    function getCharacterFromAudioConversationFilename(text, position, length) {
        return GetCharacterFromAudioConversationFilename(text, position, length);
    }
    hud.getCharacterFromAudioConversationFilename = getCharacterFromAudioConversationFilename;
    /**
     * Gets a string literal from a label name.
     *
     * Old name: _GET_LABEL_TEXT
     *
     * Hash: 0xCFEDCCAD3C5BA90D | Since: 1207
     */
    function getFilenameForAudioConversation(labelName) {
        return GetFilenameForAudioConversation(labelName);
    }
    hud.getFilenameForAudioConversation = getFilenameForAudioConversation;
    /**
     * No comment provided
     *
     * Hash: 0xB39C81628EF10B42 | Since: 1207
     */
    function getScreenPositionFromWorldPosition(worldPos) {
        return GetHudScreenPositionFromWorldPosition(worldPos.x, worldPos.y, worldPos.z);
    }
    hud.getScreenPositionFromWorldPosition = getScreenPositionFromWorldPosition;
    /**
     * Returns the length of the string passed (much like strlen).
     *
     * Hash: 0x481FBF588B0B76DB | Since: 1207
     */
    function getLengthOfLiteralString(_string) {
        return GetLengthOfLiteralString(_string);
    }
    hud.getLengthOfLiteralString = getLengthOfLiteralString;
    /**
     * No comment provided
     *
     * Hash: 0xDC5AD6B7AB8184F5 | Since: 1207
     */
    function getLengthOfLiteralStringInBytes(_string) {
        return GetLengthOfLiteralStringInBytes(_string);
    }
    hud.getLengthOfLiteralStringInBytes = getLengthOfLiteralStringInBytes;
    /**
     * No comment provided
     *
     * Hash: 0xB6762A85EE29AA60 | Since: 1207
     */
    function getNamedRendertargetRenderId(name) {
        return GetNamedRendertargetRenderId(name);
    }
    hud.getNamedRendertargetRenderId = getNamedRendertargetRenderId;
    /**
     * Returns the label text given the hash.
     *
     * Old name: _GET_LABEL_TEXT_BY_HASH
     *
     * Hash: 0xBD5DD5EAE2B6CE14 | Since: 1207
     */
    function getStringFromHashKey(labelHash) {
        if (typeof labelHash === 'string')
            labelHash = misc.getHashKey(labelHash);
        return GetStringFromHashKey(labelHash);
    }
    hud.getStringFromHashKey = getStringFromHashKey;
    /**
     * No comment provided
     *
     * Hash: 0x36CDD81627A6FCD2 | Since: 1207
     */
    function hideAndRadarThisFrame() {
        HideHudAndRadarThisFrame();
    }
    hud.hideAndRadarThisFrame = hideAndRadarThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xEA600AABAF4B9084 | Since: 1207
     */
    function hideLoadingOnFadeThisFrame() {
        HideLoadingOnFadeThisFrame();
    }
    hud.hideLoadingOnFadeThisFrame = hideLoadingOnFadeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x71B72B478F8189DC | Since: 1207
     */
    function isHidden() {
        return IsHudHidden();
    }
    hud.isHidden = isHidden;
    /**
     * No comment provided
     *
     * Hash: 0x6E1C31E14C7A5F97 | Since: 1207
     */
    function isMpGamerTagActive(gamerTagId) {
        return IsMpGamerTagActive(gamerTagId);
    }
    hud.isMpGamerTagActive = isMpGamerTagActive;
    /**
     * No comment provided
     *
     * Hash: 0x707032835FF09AE7 | Since: 1207
     */
    function isNamedRendertargetLinked(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return IsNamedRendertargetLinked(modelHash);
    }
    hud.isNamedRendertargetLinked = isNamedRendertargetLinked;
    /**
     * No comment provided
     *
     * Hash: 0x3EE32F7964C40FE6 | Since: 1207
     */
    function isNamedRendertargetRegistered(name) {
        return IsNamedRendertargetRegistered(name);
    }
    hud.isNamedRendertargetRegistered = isNamedRendertargetRegistered;
    /**
     * Returns true when either Pause Menu, a Frontend Menu, Online Policies menu or Social Club menu is active.
     *
     * Hash: 0x535384D6067BA42E | Since: 1207
     */
    function isPauseMenuActive() {
        return IsPauseMenuActive();
    }
    hud.isPauseMenuActive = isPauseMenuActive;
    /**
     * No comment provided
     *
     * Hash: 0x1B82FD5FFA4D666E | Since: 1207
     */
    function isRadarHidden() {
        return IsRadarHidden();
    }
    hud.isRadarHidden = isRadarHidden;
    /**
     * No comment provided
     *
     * Hash: 0x66F35DD9D2B58579 | Since: 1207
     */
    function isRadarHiddenByScript() {
        return IsRadarHiddenByScript();
    }
    hud.isRadarHiddenByScript = isRadarHiddenByScript;
    /**
     * No comment provided
     *
     * Hash: 0x81E47F0EE1F2B21E | Since: 1207
     */
    function isRadarPreferenceSwitchedOn() {
        return IsRadarPreferenceSwitchedOn();
    }
    hud.isRadarPreferenceSwitchedOn = isRadarPreferenceSwitchedOn;
    /**
     * No comment provided
     *
     * Hash: 0x7C4AC9573587F2DF | Since: 1355
     */
    function isSubtitlePreferenceSwitchedOn() {
        return IsSubtitlePreferenceSwitchedOn();
    }
    hud.isSubtitlePreferenceSwitchedOn = isSubtitlePreferenceSwitchedOn;
    /**
     * No comment provided
     *
     * Hash: 0x2F506B8556242DDB | Since: 1207
     */
    function linkNamedRendertarget(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        LinkNamedRendertarget(modelHash);
    }
    hud.linkNamedRendertarget = linkNamedRendertarget;
    /**
     * No comment provided
     *
     * Hash: 0x98AF2BB6F62BD588 | Since: 1207
     */
    function registerNamedRendertarget(name) {
        return RegisterNamedRendertarget(name, false);
    }
    hud.registerNamedRendertarget = registerNamedRendertarget;
    /**
     * No comment provided
     *
     * Hash: 0x0E692EE61761361F | Since: 1207
     */
    function releaseNamedRendertarget(name) {
        return ReleaseNamedRendertarget(name);
    }
    hud.releaseNamedRendertarget = releaseNamedRendertarget;
    /**
     * only works by invoking and passing as pointer value Citizen.InvokeNative(0x839BFD7D7E49FE09, Citizen.PointerValueIntInitialized(gamerTagId))
     *
     * Hash: 0x839BFD7D7E49FE09 | Since: 1207
     */
    function removeMpGamerTag(gamerTagId) {
        RemoveMpGamerTag(gamerTagId);
    }
    hud.removeMpGamerTag = removeMpGamerTag;
    /**
     * No comment provided
     *
     * Hash: 0xCE47C21C0687EBC2 | Since: 1207
     */
    function setFrontendActive(active) {
        SetFrontendActive(active);
    }
    hud.setFrontendActive = setFrontendActive;
    /**
     * No comment provided
     *
     * Hash: 0x402669A4BDAA72DA | Since: 1207
     */
    function setMissionName(name) {
        SetMissionName(false, name);
    }
    hud.setMissionName = setMissionName;
    /**
     * No comment provided
     *
     * Hash: 0xD98630CE73C61E98 | Since: 1207
     */
    function setMissionNameForUgcMission(name) {
        SetMissionNameForUgcMission(false, name);
    }
    hud.setMissionNameForUgcMission = setMissionNameForUgcMission;
    /**
     * No comment provided
     *
     * Hash: 0xA0D7CE5F83259663 | Since: 1207
     */
    function setMpGamerTagBigText(gamerTagId, _string) {
        SetMpGamerTagBigText(gamerTagId, _string);
    }
    hud.setMpGamerTagBigText = setMpGamerTagBigText;
    /**
     * No comment provided
     *
     * Hash: 0xEA6F4B8D4B4B5B3E | Since: 1207
     */
    function setMpGamerTagName(gamerTagId, _string) {
        SetMpGamerTagName(gamerTagId, _string);
    }
    hud.setMpGamerTagName = setMpGamerTagName;
    /**
     * No comment provided
     *
     * Hash: 0xBE5261939FBECB8C | Since: unknown
     */
    function setTextCentre(align) {
        SetTextCentre(align);
    }
    hud.setTextCentre = setTextCentre;
    /**
     * No comment provided
     *
     * Hash: 0x1BE39DBAA7263CA5 | Since: unknown
     */
    function setTextDropshadow(distance, r, g, b, a) {
        SetTextDropshadow(distance, r, g, b, a);
    }
    hud.setTextDropshadow = setTextDropshadow;
    /**
     * No comment provided
     *
     * Hash: 0xE550CDE128D56757 | Since: 1207
     */
    function setTextRenderId(renderId) {
        SetTextRenderId(renderId);
    }
    hud.setTextRenderId = setTextRenderId;
    /**
     * No comment provided
     *
     * Hash: 0x4170B650590B3B00 | Since: unknown
     */
    function setTextScale(scale, size) {
        SetTextScale(scale, size);
    }
    hud.setTextScale = setTextScale;
    /**
     * No comment provided
     *
     * Hash: 0xD0976CC34002DB57 | Since: 1207
     */
    function textBlockIsLoaded(textBlock) {
        return TextBlockIsLoaded(textBlock);
    }
    hud.textBlockIsLoaded = textBlockIsLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xF66090013DE648D5 | Since: 1207
     */
    function textBlockRequest(textBlock) {
        TextBlockRequest(textBlock);
    }
    hud.textBlockRequest = textBlockRequest;
    /**
     * No comment provided
     *
     * Hash: 0xBE1067CD1C9570F6 | Since: 1207
     */
    function uiGetSceneUiobject() {
        return UiGetSceneUiobject(undefined);
    }
    hud.uiGetSceneUiobject = uiGetSceneUiobject;
    /**
     * No comment provided
     *
     * Hash: 0x51DE09A2196BD951 | Since: 1207
     */
    function uiMovieviewSetRenderTarget() {
        UiMovieviewSetRenderTarget(undefined, undefined);
    }
    hud.uiMovieviewSetRenderTarget = uiMovieviewSetRenderTarget;
    /**
     * No comment provided
     *
     * Hash: 0x1BE19185B8AFE299 | Since: 1207
     */
    function uiPromptIsControlActionActive(controlAction) {
        if (typeof controlAction === 'string')
            controlAction = misc.getHashKey(controlAction);
        return UiPromptIsControlActionActive(controlAction);
    }
    hud.uiPromptIsControlActionActive = uiPromptIsControlActionActive;
    /**
     * No comment provided
     *
     * Hash: 0xB6857100F8FD433C | Since: 1207
     */
    function uiRequestScene() {
        return UiRequestScene(undefined, undefined);
    }
    hud.uiRequestScene = uiRequestScene;
    /**
     * This native accepts 1 as parameter in the decompiles
     * returns the nearest horse handle if within 2 3 meters of the player, if not close enough returns false
     *
     * NOTE: if type is 0 returns PlayerPedId always?
     *
     * Hash: 0x0501D52D24EA8934 | Since: 1207
     */
    function getNearHorse() {
        return Citizen.invokeNative('0x0501D52D24EA8934', 0);
    }
    hud.getNearHorse = getNearHorse;
    /**
     * No comment provided
     *
     * Hash: 0x052D4AC0922AF91A | Since: 1207
     */
    function _0x052D4AC0922AF91A() {
        Citizen.invokeNative('0x052D4AC0922AF91A', undefined, undefined);
    }
    hud._0x052D4AC0922AF91A = _0x052D4AC0922AF91A;
    /**
     * No comment provided
     *
     * Hash: 0x066725A9D52B3641 | Since: 1232
     */
    function _0x066725A9D52B3641() {
        return Citizen.invokeNative('0x066725A9D52B3641');
    }
    hud._0x066725A9D52B3641 = _0x066725A9D52B3641;
    /**
     * No comment provided
     *
     * Hash: 0x100157D6D7FE32CA | Since: 1207
     */
    function _0x100157D6D7FE32CA() {
        return Citizen.invokeNative('0x100157D6D7FE32CA', undefined, undefined);
    }
    hud._0x100157D6D7FE32CA = _0x100157D6D7FE32CA;
    /**
     * No comment provided
     *
     * Hash: 0x160825DADF1B04B3 | Since: 1207
     */
    function _0x160825DADF1B04B3() {
        Citizen.invokeNative('0x160825DADF1B04B3');
    }
    hud._0x160825DADF1B04B3 = _0x160825DADF1B04B3;
    /**
     * No comment provided
     *
     * Hash: 0x28AE29D909C8FDCE | Since: 1207
     */
    function _0x28AE29D909C8FDCE() {
        return Citizen.invokeNative('0x28AE29D909C8FDCE', undefined);
    }
    hud._0x28AE29D909C8FDCE = _0x28AE29D909C8FDCE;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x2F7BB105144ACF30 | Since: 1207
     */
    function _0x2F7BB105144ACF30() {
        Citizen.invokeNative('0x2F7BB105144ACF30');
    }
    hud._0x2F7BB105144ACF30 = _0x2F7BB105144ACF30;
    /**
     * No comment provided
     *
     * Hash: 0x3FE4FB41EF7D2196 | Since: 1207
     */
    function _0x3FE4FB41EF7D2196() {
        Citizen.invokeNative('0x3FE4FB41EF7D2196', undefined);
    }
    hud._0x3FE4FB41EF7D2196 = _0x3FE4FB41EF7D2196;
    /**
     * No comment provided
     *
     * Hash: 0x53CE46C01A089DA1 | Since: 1207
     */
    function _0x53CE46C01A089DA1(prompt) {
        Citizen.invokeNative('0x53CE46C01A089DA1', prompt, false);
    }
    hud._0x53CE46C01A089DA1 = _0x53CE46C01A089DA1;
    /**
     * No comment provided
     *
     * Hash: 0x5651516D947ABC53 | Since: 1207
     */
    function _0x5651516D947ABC53() {
        Citizen.invokeNative('0x5651516D947ABC53');
    }
    hud._0x5651516D947ABC53 = _0x5651516D947ABC53;
    /**
     * No comment provided
     *
     * Hash: 0x7EC0D68233E391AC | Since: 1207
     */
    function _0x7EC0D68233E391AC() {
        return Citizen.invokeNative('0x7EC0D68233E391AC', 0);
    }
    hud._0x7EC0D68233E391AC = _0x7EC0D68233E391AC;
    /**
     * No comment provided
     *
     * Hash: 0x806862E5D266CF38 | Since: 1207
     */
    function _0x806862E5D266CF38() {
        return Citizen.invokeNative('0x806862E5D266CF38', undefined, undefined, undefined);
    }
    hud._0x806862E5D266CF38 = _0x806862E5D266CF38;
    /**
     * No comment provided
     *
     * Hash: 0x8A59D44189AF2BC5 | Since: 1207
     */
    function _0x8A59D44189AF2BC5() {
        Citizen.invokeNative('0x8A59D44189AF2BC5', undefined, undefined);
    }
    hud._0x8A59D44189AF2BC5 = _0x8A59D44189AF2BC5;
    /**
     * No comment provided
     *
     * Hash: 0x8B55B324A9123F6B | Since: 1232
     */
    function _0x8B55B324A9123F6B(groupId, volume) {
        return Citizen.invokeNative('0x8B55B324A9123F6B', groupId, volume, undefined, undefined, undefined, undefined);
    }
    hud._0x8B55B324A9123F6B = _0x8B55B324A9123F6B;
    /**
     * No comment provided
     *
     * Hash: 0x958278B97C4AFFD8 | Since: 1232
     */
    function _0x958278B97C4AFFD8() {
        Citizen.invokeNative('0x958278B97C4AFFD8', undefined, undefined);
    }
    hud._0x958278B97C4AFFD8 = _0x958278B97C4AFFD8;
    /**
     * Returns the hash of the currently highlighted item in the weapon wheel.
     * Only works while the wheel is open will return false
     *
     * Use in conjunction with IS_CONTROL_JUST_RELEASED(0, 'INPUT_OPEN_WHEEL_MENU') to detect item selection/usage.
     *
     * Hash: 0x9C409BBC492CB5B1 | Since: 1207
     */
    function weaponWheelGetSelectedItemHash() {
        return Citizen.invokeNative('0x9C409BBC492CB5B1');
    }
    hud.weaponWheelGetSelectedItemHash = weaponWheelGetSelectedItemHash;
    /**
     * No comment provided
     *
     * Hash: 0x9D37EB5003E0F2CF | Since: 1207
     */
    function _0x9D37EB5003E0F2CF() {
        Citizen.invokeNative('0x9D37EB5003E0F2CF', undefined, undefined);
    }
    hud._0x9D37EB5003E0F2CF = _0x9D37EB5003E0F2CF;
    /**
     * No comment provided
     *
     * Hash: 0xB0E8599243B3F568 | Since: 1207
     */
    function _0xB0E8599243B3F568() {
        return Citizen.invokeNative('0xB0E8599243B3F568', undefined);
    }
    hud._0xB0E8599243B3F568 = _0xB0E8599243B3F568;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xBFFF81E12A745A5F | Since: 1207
     */
    function _0xBFFF81E12A745A5F() {
        Citizen.invokeNative('0xBFFF81E12A745A5F');
    }
    hud._0xBFFF81E12A745A5F = _0xBFFF81E12A745A5F;
    /**
     * string1 is the only string used in the scripts, the others are null (0)
     *
     * Hash: 0xCE0D2F5586627CCE | Since: 1207
     */
    function setCurrentUgcMissionDescription(active, string1, string2, string3, string4) {
        Citizen.invokeNative('0xCE0D2F5586627CCE', active, string1, string2, string3, string4);
    }
    hud.setCurrentUgcMissionDescription = setCurrentUgcMissionDescription;
    /**
     * No comment provided
     *
     * Hash: 0xD6BD313CFA41E57A | Since: 1207
     */
    function _0xD6BD313CFA41E57A() {
        return Citizen.invokeNative('0xD6BD313CFA41E57A', undefined);
    }
    hud._0xD6BD313CFA41E57A = _0xD6BD313CFA41E57A;
    /**
     * No comment provided
     *
     * Hash: 0xF1AD3DD218E6558A | Since: unknown
     */
    function _0xF1AD3DD218E6558A() {
        return Citizen.invokeNative('0xF1AD3DD218E6558A', undefined, undefined);
    }
    hud._0xF1AD3DD218E6558A = _0xF1AD3DD218E6558A;
    /**
     * No comment provided
     *
     * Hash: 0xF1E6979C0B779985 | Since: 1207
     */
    function _0xF1E6979C0B779985(uiscene) {
        Citizen.invokeNative('0xF1E6979C0B779985', uiscene);
    }
    hud._0xF1E6979C0B779985 = _0xF1E6979C0B779985;
    /**
     * No comment provided
     *
     * Hash: 0x7F78CD75CC4539E4 | Since: 1207
     */
    function busyspinnerSetText(text) {
        BusyspinnerSetText(text);
    }
    hud.busyspinnerSetText = busyspinnerSetText;
    /**
     * No comment provided
     *
     * Hash: 0xD877AF112AD2B41B | Since: 1207
     */
    function createMpGamerTag(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
        const _player = player instanceof Player ? player.localId() : player;
        return CreateMpGamerTag(_player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
    }
    hud.createMpGamerTag = createMpGamerTag;
    /**
     * No comment provided
     *
     * Hash: 0xE961BF23EAB76B12 | Since: 1207
     */
    function createMpGamerTagOnEntity(entity, text) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return CreateMpGamerTagOnEntity(_entity, text);
    }
    hud.createMpGamerTagOnEntity = createMpGamerTagOnEntity;
    /**
     * Old name: _DISPLAY_HUD_COMPONENT
     *
     * Hash: 0x8BC7C1F929D07BF3 | Since: 1207
     */
    function disableContext(component) {
        if (typeof component === 'string')
            component = misc.getHashKey(component);
        DisableHudContext(component);
    }
    hud.disableContext = disableContext;
    /**
     * Disables reduced time scale while menus such as weapon wheel and satchel are open.
     *
     * Hash: 0xC5C7A2F6567FCCBC | Since: 1207
     */
    function disableReducedMenuTimeScale() {
        DisableReducedMenuTimeScale();
    }
    hud.disableReducedMenuTimeScale = disableReducedMenuTimeScale;
    /**
     * nullsub, this native does nothing since build 1436, use _BG_DISPLAY_TEXT (0x16794E044C9EFB58) instead.
     *
     * Hash: 0xD79334A4BB99BAD1 | Since: 1207
     */
    function displayText(text, xPos, yPos) {
        DisplayText(text, xPos, yPos);
    }
    hud.displayText = displayText;
    /**
     * No comment provided
     *
     * Hash: 0x2C729F2B94CEA911 | Since: 1207
     */
    function doesTextBlockExist(textDatabase) {
        return DoesTextBlockExist(textDatabase);
    }
    hud.doesTextBlockExist = doesTextBlockExist;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/hud_presets
     * Old name: _HIDE_HUD_COMPONENT
     *
     * Hash: 0x4CC5F2FC1332577F | Since: 1207
     */
    function enableContext(component) {
        if (typeof component === 'string')
            component = misc.getHashKey(component);
        EnableHudContext(component);
    }
    hud.enableContext = enableContext;
    /**
     * No comment provided
     *
     * Hash: 0xC9CAEAEEC1256E54 | Since: 1207
     */
    function enableContextThisFrame(component) {
        if (typeof component === 'string')
            component = misc.getHashKey(component);
        EnableHudContextThisFrame(component);
    }
    hud.enableContextThisFrame = enableContextThisFrame;
    /**
     * Enables reduced time scale while menus such as weapon wheel and satchel are open.
     *
     * Hash: 0x26F6BBEA2CE3E3DC | Since: 1207
     */
    function enableReducedMenuTimeScale() {
        EnableReducedMenuTimeScale();
    }
    hud.enableReducedMenuTimeScale = enableReducedMenuTimeScale;
    /**
     * No comment provided
     *
     * Hash: 0xFBBF5943E4C2C992 | Since: unknown
     */
    function forceCloseTextInputBox() {
        ForceCloseTextInputBox();
    }
    hud.forceCloseTextInputBox = forceCloseTextInputBox;
    /**
     * colorNameHash: https://alloc8or.re/rdr3/doc/enums/eColor.txt
     *
     * Hash: 0xB981DD2DFAF9B1C9 | Since: 1207
     */
    function getColorFromName(colorNameHash) {
        if (typeof colorNameHash === 'string')
            colorNameHash = misc.getHashKey(colorNameHash);
        return GetColorFromName(colorNameHash);
    }
    hud.getColorFromName = getColorFromName;
    /**
     * No comment provided
     *
     * Hash: 0x3429670F9B9EF2D3 | Since: 1207
     */
    function getLabelText2(label) {
        return GetLabelText2(label);
    }
    hud.getLabelText2 = getLabelText2;
    /**
     * Similar to 0x9D7E12EC6A1EE4E5(GET_TEXT_SUBSTRING) but starts at the beginning of the string
     *
     * Hash: 0xD8402B858F4DDD88 | Since: 1207
     */
    function getTextSubstring2(text, length) {
        return GetTextSubstring2(text, length);
    }
    hud.getTextSubstring2 = getTextSubstring2;
    /**
     * No comment provided
     *
     * Hash: 0xBF4F34A85CA2970D | Since: 1207
     */
    function hideThisFrame() {
        HideHudThisFrame();
    }
    hud.hideThisFrame = hideThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x502E1591A504F843 | Since: 1207
     */
    function isMpGamerTagActiveOnEntity(gamerTagId, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsMpGamerTagActiveOnEntity(gamerTagId, _entity);
    }
    hud.isMpGamerTagActiveOnEntity = isMpGamerTagActiveOnEntity;
    /**
     * No comment provided
     *
     * Hash: 0xBC19069D5FBB5C46 | Since: unknown
     */
    function isMultiplayerChatActive() {
        return IsMultiplayerChatActive();
    }
    hud.isMultiplayerChatActive = isMultiplayerChatActive;
    /**
     * No comment provided
     *
     * Hash: 0xCF782691D91F270E | Since: 1207
     */
    function journalCanWriteEntry() {
        return JournalCanWriteEntry(undefined);
    }
    hud.journalCanWriteEntry = journalCanWriteEntry;
    /**
     * No comment provided
     *
     * Hash: 0xF402978DE6F88D6E | Since: 1207
     */
    function journalClearAllProgress() {
        JournalClearAllProgress();
    }
    hud.journalClearAllProgress = journalClearAllProgress;
    /**
     * No comment provided
     *
     * Hash: 0x3D16ABD7A1FD8C96 | Since: 1207
     */
    function journalGetEntryAtIndex() {
        return JournalGetEntryAtIndex(undefined);
    }
    hud.journalGetEntryAtIndex = journalGetEntryAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0xE65B5DE53351BE22 | Since: 1207
     */
    function journalGetEntryCount() {
        return JournalGetEntryCount();
    }
    hud.journalGetEntryCount = journalGetEntryCount;
    /**
     * No comment provided
     *
     * Hash: 0x5514C3E60673530F | Since: 1207
     */
    function journalGetEntryInfo() {
        return JournalGetEntryInfo(undefined, undefined);
    }
    hud.journalGetEntryInfo = journalGetEntryInfo;
    /**
     * No comment provided
     *
     * Hash: 0xCB5945E1B855852F | Since: 1207
     */
    function journalGetGrimeAtIndex() {
        return JournalGetGrimeAtIndex(undefined);
    }
    hud.journalGetGrimeAtIndex = journalGetGrimeAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x62CC549B3B8EA2AA | Since: 1207
     */
    function journalGetTextureWithLayout() {
        return JournalGetTextureWithLayout(undefined, undefined, undefined);
    }
    hud.journalGetTextureWithLayout = journalGetTextureWithLayout;
    /**
     * No comment provided
     *
     * Hash: 0xE4509BABE59BD24E | Since: 1207
     */
    function journalMarkRead() {
        JournalMarkRead(undefined);
    }
    hud.journalMarkRead = journalMarkRead;
    /**
     * No comment provided
     *
     * Hash: 0x6DFDD665E416B093 | Since: 1207
     */
    function journalWriteEntry() {
        JournalWriteEntry(undefined);
    }
    hud.journalWriteEntry = journalWriteEntry;
    /**
     * No comment provided
     *
     * Hash: 0x1F9A64C2804B3471 | Since: 1207
     */
    function mpGamerTagDisableReviveTopIcon(gamerTagId) {
        MpGamerTagDisableReviveTopIcon(gamerTagId);
    }
    hud.mpGamerTagDisableReviveTopIcon = mpGamerTagDisableReviveTopIcon;
    /**
     * No comment provided
     *
     * Hash: 0xFFF6579CF0139FCE | Since: 1207
     */
    function mpGamerTagEnableReviveTopIcon(gamerTagId) {
        MpGamerTagEnableReviveTopIcon(gamerTagId);
    }
    hud.mpGamerTagEnableReviveTopIcon = mpGamerTagEnableReviveTopIcon;
    /**
     * No comment provided
     *
     * Hash: 0x84BD27DDF9575816 | Since: 1207
     */
    function setMpGamerTagColour(gamerTagId, colour) {
        if (typeof colour === 'string')
            colour = misc.getHashKey(colour);
        SetMpGamerTagColour(gamerTagId, colour);
    }
    hud.setMpGamerTagColour = setMpGamerTagColour;
    /**
     * No comment provided
     *
     * Hash: 0x1EA716E0628A6F44 | Since: 1207
     */
    function setMpGamerTagNamePosse(gamerTagId, text) {
        SetMpGamerTagNamePosse(gamerTagId, text);
    }
    hud.setMpGamerTagNamePosse = setMpGamerTagNamePosse;
    /**
     * Found icons: SPEAKER, THROPY
     *
     * Hash: 0x95384C6CE1526EFF | Since: 1207
     */
    function setMpGamerTagSecondaryIcon(gamerTagId, icon) {
        if (typeof icon === 'string')
            icon = misc.getHashKey(icon);
        SetMpGamerTagSecondaryIcon(gamerTagId, icon);
    }
    hud.setMpGamerTagSecondaryIcon = setMpGamerTagSecondaryIcon;
    /**
     * Found icons: https://pastebin.com/xx6rEgiG
     *
     * Hash: 0x5F57522BC1EB9D9D | Since: 1207
     */
    function setMpGamerTagTopIcon(gamerTagId, icon) {
        if (typeof icon === 'string')
            icon = misc.getHashKey(icon);
        SetMpGamerTagTopIcon(gamerTagId, icon);
    }
    hud.setMpGamerTagTopIcon = setMpGamerTagTopIcon;
    /**
     * Found types: GENERIC_PLAYER, DEADDROP, HOTPROPERTY, MINIGAMES
     *
     * Hash: 0x25B9C78A25105C35 | Since: 1207
     */
    function setMpGamerTagType(gamerTagId, _type) {
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        SetMpGamerTagType(gamerTagId, _type);
    }
    hud.setMpGamerTagType = setMpGamerTagType;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xEF7AB1A0E8C86170 | Since: 1207
     */
    function setMpGamerTagUnkAllowLocalized(gamerTagId, allow) {
        SetMpGamerTagUnkAllowLocalized(gamerTagId, allow);
    }
    hud.setMpGamerTagUnkAllowLocalized = setMpGamerTagUnkAllowLocalized;
    /**
     * visibility:
     * enum eUIGamertagVisibility
     * {
     * UIGAMERTAGVISIBILITY_NONE,
     * UIGAMERTAGVISIBILITY_ICON,
     * UIGAMERTAGVISIBILITY_SIMPLE,
     * UIGAMERTAGVISIBILITY_COMPLEX
     * };
     *
     * Hash: 0x93171DDDAB274EB8 | Since: 1207
     */
    function setMpGamerTagVisibility(gamerTagId, visibility) {
        SetMpGamerTagVisibility(gamerTagId, visibility);
    }
    hud.setMpGamerTagVisibility = setMpGamerTagVisibility;
    /**
     * This native does nothing since build 1436, use _BG_SET_TEXT_COLOR (0x16FA5CE47F184F1E) instead.
     *
     * Hash: 0x50A41AD966910F03 | Since: 1207
     */
    function setTextColor(r, g, b, a) {
        SetTextColor(r, g, b, a);
    }
    hud.setTextColor = setTextColor;
    /**
     * No comment provided
     *
     * Hash: 0xD4EE21B7CC7FD350 | Since: 1207
     */
    function showHorseCores(state) {
        ShowHorseCores(state);
    }
    hud.showHorseCores = showHorseCores;
    /**
     * No comment provided
     *
     * Hash: 0x50C803A4CD5932C5 | Since: 1207
     */
    function showPlayerCores(state) {
        ShowPlayerCores(state);
    }
    hud.showPlayerCores = showPlayerCores;
    /**
     * No comment provided
     *
     * Hash: 0xAA03F130A637D923 | Since: 1207
     */
    function textBlockDelete(textBlock) {
        TextBlockDelete(textBlock);
    }
    hud.textBlockDelete = textBlockDelete;
    /**
     * No comment provided
     *
     * Hash: 0x3CF96E16265B7DC8 | Since: 1207
     */
    function textBlockIsStreamed(textBlock) {
        return TextBlockIsStreamed(textBlock);
    }
    hud.textBlockIsStreamed = textBlockIsStreamed;
    /**
     * No comment provided
     *
     * Hash: 0x684C96CC7C66E8EF | Since: 1207
     */
    function uiPromptAddGroupLink(prompt) {
        UiPromptAddGroupLink(undefined, prompt, undefined);
    }
    hud.uiPromptAddGroupLink = uiPromptAddGroupLink;
    /**
     * No comment provided
     *
     * Hash: 0x837972ED28159536 | Since: 1207
     */
    function uiPromptAddGroupReturnLink(prompt) {
        UiPromptAddGroupReturnLink(undefined, prompt);
    }
    hud.uiPromptAddGroupReturnLink = uiPromptAddGroupReturnLink;
    /**
     * id is the return value from 0xD9459157EB22C895.
     *
     * Hash: 0x6095358C4142932A | Since: 1207
     */
    function uiPromptClearHorizontalOrientation(id) {
        UiPromptClearHorizontalOrientation(id);
    }
    hud.uiPromptClearHorizontalOrientation = uiPromptClearHorizontalOrientation;
    /**
     * No comment provided
     *
     * Hash: 0x51259AE5C72D4A1B | Since: 1207
     */
    function uiPromptClearPromptPriorityPreference() {
        UiPromptClearPromptPriorityPreference();
    }
    hud.uiPromptClearPromptPriorityPreference = uiPromptClearPromptPriorityPreference;
    /**
     * No comment provided
     *
     * Hash: 0xAE84C5EE2C384FB3 | Since: 1207
     */
    function uiPromptContextSetPoint(prompt, pos) {
        UiPromptContextSetPoint(prompt, pos.x, pos.y, pos.z);
    }
    hud.uiPromptContextSetPoint = uiPromptContextSetPoint;
    /**
     * No comment provided
     *
     * Hash: 0x0C718001B77CA468 | Since: 1207
     */
    function uiPromptContextSetRadius(prompt, radius) {
        UiPromptContextSetRadius(prompt, radius);
    }
    hud.uiPromptContextSetRadius = uiPromptContextSetRadius;
    /**
     * Attaches a Volume
     *
     * Hash: 0x4D107406667423BE | Since: 1207
     */
    function uiPromptContextSetVolume(prompt, volume) {
        UiPromptContextSetVolume(prompt, volume);
    }
    hud.uiPromptContextSetVolume = uiPromptContextSetVolume;
    /**
     * No comment provided
     *
     * Hash: 0x29FA7910726C3889 | Since: 1207
     */
    function uiPromptCreate(inputHash, labelName) {
        if (typeof inputHash === 'string')
            inputHash = misc.getHashKey(inputHash);
        return UiPromptCreate(inputHash, labelName, undefined, undefined, undefined, 0);
    }
    hud.uiPromptCreate = uiPromptCreate;
    /**
     * No comment provided
     *
     * Hash: 0x00EDE88D4D13CF59 | Since: 1207
     */
    function uiPromptDelete(prompt) {
        UiPromptDelete(prompt);
    }
    hud.uiPromptDelete = uiPromptDelete;
    /**
     * No comment provided
     *
     * Hash: 0xF1622CE88A1946FB | Since: 1207
     */
    function uiPromptDisablePromptsThisFrame() {
        UiPromptDisablePromptsThisFrame();
    }
    hud.uiPromptDisablePromptsThisFrame = uiPromptDisablePromptsThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xFC094EF26DD153FA | Since: 1207
     */
    function uiPromptDisablePromptTypeThisFrame() {
        UiPromptDisablePromptTypeThisFrame(0);
    }
    hud.uiPromptDisablePromptTypeThisFrame = uiPromptDisablePromptTypeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xEB550B927B34A1BB | Since: 1207
     */
    function uiPromptDoesAmbientGroupExist(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return UiPromptDoesAmbientGroupExist(hash);
    }
    hud.uiPromptDoesAmbientGroupExist = uiPromptDoesAmbientGroupExist;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/prompts/prompt_types
     *
     * Hash: 0x06565032897BA861 | Since: 1207
     */
    function uiPromptEnablePromptTypeThisFrame() {
        UiPromptEnablePromptTypeThisFrame(0);
    }
    hud.uiPromptEnablePromptTypeThisFrame = uiPromptEnablePromptTypeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x6A2F820452017EA2 | Since: 1207
     */
    function uiPromptFilterClear() {
        UiPromptFilterClear();
    }
    hud.uiPromptFilterClear = uiPromptFilterClear;
    /**
     * No comment provided
     *
     * Hash: 0xC1FCC36C3F7286C8 | Since: 1207
     */
    function uiPromptGetGroupActivePage(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return UiPromptGetGroupActivePage(hash);
    }
    hud.uiPromptGetGroupActivePage = uiPromptGetGroupActivePage;
    /**
     * No comment provided
     *
     * Hash: 0xCB73D7521E7103F0 | Since: 1207
     */
    function uiPromptGetGroupIdForScenarioPoint() {
        return UiPromptGetGroupIdForScenarioPoint(undefined, 0);
    }
    hud.uiPromptGetGroupIdForScenarioPoint = uiPromptGetGroupIdForScenarioPoint;
    /**
     * No comment provided
     *
     * Hash: 0xB796970BD125FCE8 | Since: 1207
     */
    function uiPromptGetGroupIdForTargetEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return UiPromptGetGroupIdForTargetEntity(_entity);
    }
    hud.uiPromptGetGroupIdForTargetEntity = uiPromptGetGroupIdForTargetEntity;
    /**
     * No comment provided
     *
     * Hash: 0x8A9585293863B8A5 | Since: 1207
     */
    function uiPromptGetMashModeProgress(prompt) {
        return UiPromptGetMashModeProgress(prompt);
    }
    hud.uiPromptGetMashModeProgress = uiPromptGetMashModeProgress;
    /**
     * No comment provided
     *
     * Hash: 0x81801291806DBC50 | Since: 1207
     */
    function uiPromptGetProgress(prompt) {
        return UiPromptGetProgress(prompt);
    }
    hud.uiPromptGetProgress = uiPromptGetProgress;
    /**
     * No comment provided
     *
     * Hash: 0x1FBA0DABECDDB52B | Since: 1207
     */
    function uiPromptGetUrgentPulsingEnabled(prompt) {
        return UiPromptGetUrgentPulsingEnabled(prompt);
    }
    hud.uiPromptGetUrgentPulsingEnabled = uiPromptGetUrgentPulsingEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x8010BEBD0D5ED5BC | Since: 1207
     */
    function uiPromptHasHoldAutoFillMode(prompt) {
        return UiPromptHasHoldAutoFillMode(prompt);
    }
    hud.uiPromptHasHoldAutoFillMode = uiPromptHasHoldAutoFillMode;
    /**
     * No comment provided
     *
     * Hash: 0xB60C9F9ED47ABB76 | Since: 1207
     */
    function uiPromptHasHoldMode(prompt) {
        return UiPromptHasHoldMode(prompt);
    }
    hud.uiPromptHasHoldMode = uiPromptHasHoldMode;
    /**
     * No comment provided
     *
     * Hash: 0xE0F65F0640EF0617 | Since: 1207
     */
    function uiPromptHasHoldModeCompleted(prompt) {
        return UiPromptHasHoldModeCompleted(prompt);
    }
    hud.uiPromptHasHoldModeCompleted = uiPromptHasHoldModeCompleted;
    /**
     * No comment provided
     *
     * Hash: 0xA6C6A4ADB3BAC409 | Since: 1207
     */
    function uiPromptHasManualMashMode(prompt) {
        return UiPromptHasManualMashMode(prompt);
    }
    hud.uiPromptHasManualMashMode = uiPromptHasManualMashMode;
    /**
     * No comment provided
     *
     * Hash: 0xCD072523791DDC1B | Since: 1207
     */
    function uiPromptHasMashMode(prompt) {
        return UiPromptHasMashMode(prompt);
    }
    hud.uiPromptHasMashMode = uiPromptHasMashMode;
    /**
     * No comment provided
     *
     * Hash: 0x845CE958416DC473 | Since: 1207
     */
    function uiPromptHasMashModeCompleted(prompt) {
        return UiPromptHasMashModeCompleted(prompt);
    }
    hud.uiPromptHasMashModeCompleted = uiPromptHasMashModeCompleted;
    /**
     * No comment provided
     *
     * Hash: 0x25B18E530CF39D6F | Since: 1207
     */
    function uiPromptHasMashModeFailed(prompt) {
        return UiPromptHasMashModeFailed(prompt);
    }
    hud.uiPromptHasMashModeFailed = uiPromptHasMashModeFailed;
    /**
     * No comment provided
     *
     * Hash: 0x3CE854D250A88DAF | Since: 1207
     */
    function uiPromptHasPressedTimedModeCompleted(prompt) {
        return UiPromptHasPressedTimedModeCompleted(prompt);
    }
    hud.uiPromptHasPressedTimedModeCompleted = uiPromptHasPressedTimedModeCompleted;
    /**
     * No comment provided
     *
     * Hash: 0x1A17B9ECFF617562 | Since: 1207
     */
    function uiPromptHasPressedTimedModeFailed(prompt) {
        return UiPromptHasPressedTimedModeFailed(prompt);
    }
    hud.uiPromptHasPressedTimedModeFailed = uiPromptHasPressedTimedModeFailed;
    /**
     * Params: p1 is 0
     *
     * Hash: 0xC92AC953F0A982AE | Since: 1207
     */
    function uiPromptHasStandardModeCompleted(prompt) {
        return UiPromptHasStandardModeCompleted(prompt, 0);
    }
    hud.uiPromptHasStandardModeCompleted = uiPromptHasStandardModeCompleted;
    /**
     * No comment provided
     *
     * Hash: 0x546E342E01DE71CF | Since: 1207
     */
    function uiPromptIsActive(prompt) {
        return UiPromptIsActive(prompt);
    }
    hud.uiPromptIsActive = uiPromptIsActive;
    /**
     * No comment provided
     *
     * Hash: 0x0D00EDDFB58B7F28 | Since: 1207
     */
    function uiPromptIsEnabled(prompt) {
        return UiPromptIsEnabled(prompt);
    }
    hud.uiPromptIsEnabled = uiPromptIsEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xC7D70EAEF92EFF48 | Since: 1207
     */
    function uiPromptIsHoldModeRunning(prompt) {
        return UiPromptIsHoldModeRunning(prompt);
    }
    hud.uiPromptIsHoldModeRunning = uiPromptIsHoldModeRunning;
    /**
     * No comment provided
     *
     * Hash: 0x2787CC611D3FACC5 | Since: 1207
     */
    function uiPromptIsJustPressed(prompt) {
        return UiPromptIsJustPressed(prompt);
    }
    hud.uiPromptIsJustPressed = uiPromptIsJustPressed;
    /**
     * No comment provided
     *
     * Hash: 0x635CC82FA297A827 | Since: 1207
     */
    function uiPromptIsJustReleased(prompt) {
        return UiPromptIsJustReleased(prompt);
    }
    hud.uiPromptIsJustReleased = uiPromptIsJustReleased;
    /**
     * No comment provided
     *
     * Hash: 0x21E60E230086697F | Since: 1207
     */
    function uiPromptIsPressed(prompt) {
        return UiPromptIsPressed(prompt);
    }
    hud.uiPromptIsPressed = uiPromptIsPressed;
    /**
     * No comment provided
     *
     * Hash: 0xAFC887BA7A7756D6 | Since: 1207
     */
    function uiPromptIsReleased(prompt) {
        return UiPromptIsReleased(prompt);
    }
    hud.uiPromptIsReleased = uiPromptIsReleased;
    /**
     * No comment provided
     *
     * Hash: 0x347469FBDD1589A9 | Since: 1207
     */
    function uiPromptIsValid(prompt) {
        return UiPromptIsValid(prompt);
    }
    hud.uiPromptIsValid = uiPromptIsValid;
    /**
     * No comment provided
     *
     * Hash: 0x04F97DE45A519419 | Since: 1207
     */
    function uiPromptRegisterBegin() {
        return UiPromptRegisterBegin();
    }
    hud.uiPromptRegisterBegin = uiPromptRegisterBegin;
    /**
     * No comment provided
     *
     * Hash: 0xF7AA2696A22AD8B9 | Since: 1207
     */
    function uiPromptRegisterEnd(prompt) {
        UiPromptRegisterEnd(prompt);
    }
    hud.uiPromptRegisterEnd = uiPromptRegisterEnd;
    /**
     * No comment provided
     *
     * Hash: 0x4E52C800A28F7BE8 | Since: 1207
     */
    function uiPromptRemoveGroup(prompt) {
        UiPromptRemoveGroup(prompt, undefined);
    }
    hud.uiPromptRemoveGroup = uiPromptRemoveGroup;
    /**
     * No comment provided
     *
     * Hash: 0xDC6C55DFA2C24EE5 | Since: 1207
     */
    function uiPromptRestartModes(prompt) {
        UiPromptRestartModes(prompt);
    }
    hud.uiPromptRestartModes = uiPromptRestartModes;
    /**
     * Note: you must use VAR_STRING for p1 if string is not part of text database
     * tabAmount: specifies number of tabs in prompt group
     * tabDefaultIndex: specifies starting index
     * p3 if is set > 3 you can no longer press Q to change tab if there are more than one tab set in tabAmount
     *
     * Hash: 0xC65A45D4453C2627 | Since: 1207
     */
    function uiPromptSetActiveGroupThisFrame(hash, name, tabAmount, tabDefaultIndex, prompt) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return UiPromptSetActiveGroupThisFrame(hash, name, tabAmount, tabDefaultIndex, 0, prompt);
    }
    hud.uiPromptSetActiveGroupThisFrame = uiPromptSetActiveGroupThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x565C1CE183CB0EAF | Since: 1207
     */
    function uiPromptSetAllowedAction(prompt, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        UiPromptSetAllowedAction(prompt, action);
    }
    hud.uiPromptSetAllowedAction = uiPromptSetAllowedAction;
    /**
     * No comment provided
     *
     * Hash: 0x315C81D760609108 | Since: 1207
     */
    function uiPromptSetAmbientGroupThisFrame(entity, p4, name) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof p4 === 'string')
            p4 = misc.getHashKey(p4);
        return UiPromptSetAmbientGroupThisFrame(_entity, 0, 0, 0, p4, name, 0);
    }
    hud.uiPromptSetAmbientGroupThisFrame = uiPromptSetAmbientGroupThisFrame;
    /**
     * attribute: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIPromptAttribute
     *
     * Hash: 0x560E76D5E2E1803F | Since: 1207
     */
    function uiPromptSetAttribute(prompt, attribute, enabled) {
        UiPromptSetAttribute(prompt, attribute, enabled);
    }
    hud.uiPromptSetAttribute = uiPromptSetAttribute;
    /**
     * No comment provided
     *
     * Hash: 0xF957A1654C6322FE | Since: 1207
     */
    function uiPromptSetBeatMode(prompt, toggle) {
        UiPromptSetBeatMode(prompt, toggle);
    }
    hud.uiPromptSetBeatMode = uiPromptSetBeatMode;
    /**
     * No comment provided
     *
     * Hash: 0xB487A4936FBF40AC | Since: 1207
     */
    function uiPromptSetBeatModeGrayedOut(prompt) {
        UiPromptSetBeatModeGrayedOut(prompt, undefined);
    }
    hud.uiPromptSetBeatModeGrayedOut = uiPromptSetBeatModeGrayedOut;
    /**
     * No comment provided
     *
     * Hash: 0xB5352B7494A08258 | Since: 1207
     */
    function uiPromptSetControlAction(prompt, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return UiPromptSetControlAction(prompt, action);
    }
    hud.uiPromptSetControlAction = uiPromptSetControlAction;
    /**
     * No comment provided
     *
     * Hash: 0x8A0FB4D03A630D21 | Since: 1207
     */
    function uiPromptSetEnabled(prompt, toggle) {
        UiPromptSetEnabled(prompt, toggle);
    }
    hud.uiPromptSetEnabled = uiPromptSetEnabled;
    /**
     * tabIndex: specifies tab of prompt
     *
     * Hash: 0x2F11D3A254169EA4 | Since: 1207
     */
    function uiPromptSetGroup(prompt, groupId, tabIndex) {
        UiPromptSetGroup(prompt, groupId, tabIndex);
    }
    hud.uiPromptSetGroup = uiPromptSetGroup;
    /**
     * No comment provided
     *
     * Hash: 0x3CE932E737C145D6 | Since: 1207
     */
    function uiPromptSetHoldAutoFillMode(prompt, autoFillTimeMs, holdTimeMs) {
        UiPromptSetHoldAutoFillMode(prompt, autoFillTimeMs, holdTimeMs);
    }
    hud.uiPromptSetHoldAutoFillMode = uiPromptSetHoldAutoFillMode;
    /**
     * No comment provided
     *
     * Hash: 0xA3F2149AA24F3D8E | Since: 1207
     */
    function uiPromptSetHoldAutoFillWithDecayMode(prompt, autoFillTimeMs, holdTimeMs) {
        UiPromptSetHoldAutoFillWithDecayMode(prompt, autoFillTimeMs, holdTimeMs);
    }
    hud.uiPromptSetHoldAutoFillWithDecayMode = uiPromptSetHoldAutoFillWithDecayMode;
    /**
     * No comment provided
     *
     * Hash: 0xEA5CCF4EEB2F82D1 | Since: 1207
     */
    function uiPromptSetHoldIndefinitelyMode(prompt) {
        UiPromptSetHoldIndefinitelyMode(prompt);
    }
    hud.uiPromptSetHoldIndefinitelyMode = uiPromptSetHoldIndefinitelyMode;
    /**
     * Params: p2 is 304000 in R* SP Script coachrobberies
     *
     * Hash: 0x94073D5CA3F16B7B | Since: 1207
     */
    function uiPromptSetHoldMode(prompt, holdTimeMs) {
        UiPromptSetHoldMode(prompt, holdTimeMs);
    }
    hud.uiPromptSetHoldMode = uiPromptSetHoldMode;
    /**
     * No comment provided
     *
     * Hash: 0xA520C7B05FA4EB2A | Since: 1207
     */
    function uiPromptSetManualResolved(prompt) {
        UiPromptSetManualResolved(prompt, undefined);
    }
    hud.uiPromptSetManualResolved = uiPromptSetManualResolved;
    /**
     * No comment provided
     *
     * Hash: 0x6C39587D7CC66801 | Since: 1207
     */
    function uiPromptSetMashAutoFillMode(prompt, autoFillTimeMs, mashes) {
        UiPromptSetMashAutoFillMode(prompt, autoFillTimeMs, mashes);
    }
    hud.uiPromptSetMashAutoFillMode = uiPromptSetMashAutoFillMode;
    /**
     * No comment provided
     *
     * Hash: 0x7B66E89312727274 | Since: 1207
     */
    function uiPromptSetMashIndefinitelyMode(prompt) {
        UiPromptSetMashIndefinitelyMode(prompt);
    }
    hud.uiPromptSetMashIndefinitelyMode = uiPromptSetMashIndefinitelyMode;
    /**
     * No comment provided
     *
     * Hash: 0x179DCF71F705DA20 | Since: 1207
     */
    function uiPromptSetMashManualCanFailMode(prompt) {
        UiPromptSetMashManualCanFailMode(prompt, 0, 0, 0, undefined);
    }
    hud.uiPromptSetMashManualCanFailMode = uiPromptSetMashManualCanFailMode;
    /**
     * No comment provided
     *
     * Hash: 0x32DF729D8BD3C1C6 | Since: 1207
     */
    function uiPromptSetMashManualMode(prompt) {
        UiPromptSetMashManualMode(prompt, 0, 0, 0, undefined);
    }
    hud.uiPromptSetMashManualMode = uiPromptSetMashManualMode;
    /**
     * standard (prompt not held) rate: 0.035f
     * fast (prompt held) rate: 0.015f
     * punitive (been hit) rate: 0.14f
     *
     * Hash: 0x7D393C247FB9B431 | Since: 1207
     */
    function uiPromptSetMashManualModeDecaySpeed(prompt, speed) {
        UiPromptSetMashManualModeDecaySpeed(prompt, speed);
    }
    hud.uiPromptSetMashManualModeDecaySpeed = uiPromptSetMashManualModeDecaySpeed;
    /**
     * standard (prompt not held) rate: (1f / 128f)
     * fast (prompt held) rate: (1f / 64f)
     * punitive (been hit) rate: (1f / 128f)
     *
     * Hash: 0xA0D1D79C6036A855 | Since: 1207
     */
    function uiPromptSetMashManualModeIncreasePerPress(prompt, rate) {
        UiPromptSetMashManualModeIncreasePerPress(prompt, rate);
    }
    hud.uiPromptSetMashManualModeIncreasePerPress = uiPromptSetMashManualModeIncreasePerPress;
    /**
     * No comment provided
     *
     * Hash: 0x56DBB26F98582C29 | Since: 1207
     */
    function uiPromptSetMashManualModePressedGrowthSpeed(prompt, speed) {
        UiPromptSetMashManualModePressedGrowthSpeed(prompt, speed);
    }
    hud.uiPromptSetMashManualModePressedGrowthSpeed = uiPromptSetMashManualModePressedGrowthSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xDF6423BF071C7F71 | Since: 1207
     */
    function uiPromptSetMashMode(prompt, mashes) {
        UiPromptSetMashMode(prompt, mashes);
    }
    hud.uiPromptSetMashMode = uiPromptSetMashMode;
    /**
     * For startProgress, 0.0f - 1.0f is a percentage value, so 0.5f = 50% progress. Range: 0.0f - 1.0f
     * For decreaseSpeed, 0.0f will result in the prompt not showing the mash progress at all. 0.01f - ?.0f. At speeds around 7.0f to 8.0f the prompt basically fails immediately if you don't start mashing right away.
     *
     * Hash: 0xDC0CB602DEADBA53 | Since: 1207
     */
    function uiPromptSetMashWithResistanceCanFailMode(prompt, mashes, decreaseSpeed, startProgress) {
        UiPromptSetMashWithResistanceCanFailMode(prompt, mashes, decreaseSpeed, startProgress);
    }
    hud.uiPromptSetMashWithResistanceCanFailMode = uiPromptSetMashWithResistanceCanFailMode;
    /**
     * No comment provided
     *
     * Hash: 0xCD1BDFF15EFA79F5 | Since: 1207
     */
    function uiPromptSetMashWithResistanceMode(prompt, mashes) {
        UiPromptSetMashWithResistanceMode(prompt, mashes, 0, 0);
    }
    hud.uiPromptSetMashWithResistanceMode = uiPromptSetMashWithResistanceMode;
    /**
     * No comment provided
     *
     * Hash: 0x2F385ECC5200938D | Since: 1207
     */
    function uiPromptSetOrderingAsInputType(prompt) {
        UiPromptSetOrderingAsInputType(prompt, undefined);
    }
    hud.uiPromptSetOrderingAsInputType = uiPromptSetOrderingAsInputType;
    /**
     * No comment provided
     *
     * Hash: 0x1473D3AF51D54276 | Since: 1207
     */
    function uiPromptSetPressedTimedMode(prompt, depletionTimeMs) {
        UiPromptSetPressedTimedMode(prompt, depletionTimeMs);
    }
    hud.uiPromptSetPressedTimedMode = uiPromptSetPressedTimedMode;
    /**
     * priority: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptPriority
     *
     * Hash: 0xCA24F528D0D16289 | Since: 1207
     */
    function uiPromptSetPriority(prompt, priority) {
        UiPromptSetPriority(prompt, priority);
    }
    hud.uiPromptSetPriority = uiPromptSetPriority;
    /**
     * No comment provided
     *
     * Hash: 0x530A428705BE5DEF | Since: 1207
     */
    function uiPromptSetPromptPriorityPreference(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        UiPromptSetPromptPriorityPreference(_ped);
    }
    hud.uiPromptSetPromptPriorityPreference = uiPromptSetPromptPriorityPreference;
    /**
     * This returns an id that can be used with 0x6095358C4142932A.
     *
     * Hash: 0xD9459157EB22C895 | Since: 1207
     */
    function uiPromptSetRegisterHorizontalOrientation() {
        return UiPromptSetRegisterHorizontalOrientation();
    }
    hud.uiPromptSetRegisterHorizontalOrientation = uiPromptSetRegisterHorizontalOrientation;
    /**
     * Used for controllers
     *
     * Hash: 0x7ABE7095FB3D2581 | Since: 1207
     */
    function uiPromptSetRotateMode(prompt, counterclockwise) {
        UiPromptSetRotateMode(prompt, 0, counterclockwise);
    }
    hud.uiPromptSetRotateMode = uiPromptSetRotateMode;
    /**
     * No comment provided
     *
     * Hash: 0x832CB510DE546282 | Since: 1207
     */
    function uiPromptSetSpinnerPosition(prompt) {
        UiPromptSetSpinnerPosition(prompt, undefined);
    }
    hud.uiPromptSetSpinnerPosition = uiPromptSetSpinnerPosition;
    /**
     * No comment provided
     *
     * Hash: 0xAC6586A7FDCD4B68 | Since: 1207
     */
    function uiPromptSetSpinnerSpeed(prompt) {
        UiPromptSetSpinnerSpeed(prompt, undefined);
    }
    hud.uiPromptSetSpinnerSpeed = uiPromptSetSpinnerSpeed;
    /**
     * Hashes: SHORT_TIMED_EVENT_MP, SHORT_TIMED_EVENT, MEDIUM_TIMED_EVENT, LONG_TIMED_EVENT, RUSTLING_CALM_TIMING, PLAYER_FOCUS_TIMING, PLAYER_REACTION_TIMING
     *
     * Hash: 0x74C7D7B72ED0D3CF | Since: 1207
     */
    function uiPromptSetStandardizedHoldMode(prompt, timedEventHash) {
        if (typeof timedEventHash === 'string')
            timedEventHash = misc.getHashKey(timedEventHash);
        UiPromptSetStandardizedHoldMode(prompt, timedEventHash);
    }
    hud.uiPromptSetStandardizedHoldMode = uiPromptSetStandardizedHoldMode;
    /**
     * No comment provided
     *
     * Hash: 0xCC6656799977741B | Since: 1207
     */
    function uiPromptSetStandardMode(prompt, releaseMode) {
        UiPromptSetStandardMode(prompt, releaseMode);
    }
    hud.uiPromptSetStandardMode = uiPromptSetStandardMode;
    /**
     * No comment provided
     *
     * Hash: 0xDEC85C174751292B | Since: 1207
     */
    function uiPromptSetTag(prompt) {
        UiPromptSetTag(prompt, undefined);
    }
    hud.uiPromptSetTag = uiPromptSetTag;
    /**
     * No comment provided
     *
     * Hash: 0x5F6503D9CD2754EB | Since: 1207
     */
    function uiPromptSetTargetMode(prompt) {
        UiPromptSetTargetMode(prompt, 0, 0, undefined);
    }
    hud.uiPromptSetTargetMode = uiPromptSetTargetMode;
    /**
     * No comment provided
     *
     * Hash: 0x00123054BEC8A30F | Since: 1207
     */
    function uiPromptSetTargetModeProgress(prompt, progress) {
        UiPromptSetTargetModeProgress(prompt, progress);
    }
    hud.uiPromptSetTargetModeProgress = uiPromptSetTargetModeProgress;
    /**
     * No comment provided
     *
     * Hash: 0x5E019C45DD3B6A14 | Since: 1207
     */
    function uiPromptSetTargetModeTarget(prompt) {
        UiPromptSetTargetModeTarget(prompt, 0, 0);
    }
    hud.uiPromptSetTargetModeTarget = uiPromptSetTargetModeTarget;
    /**
     * No comment provided
     *
     * Hash: 0x5DD02A8318420DD7 | Since: 1207
     */
    function uiPromptSetText(prompt, text) {
        UiPromptSetText(prompt, text);
    }
    hud.uiPromptSetText = uiPromptSetText;
    /**
     * TM_ANY = 0,
     * TM_ON_FOOT,
     * TM_IN_VEHICLE
     *
     * Hash: 0x876E4A35C73A6655 | Since: 1207
     */
    function uiPromptSetTransportMode(prompt, mode) {
        UiPromptSetTransportMode(prompt, mode);
    }
    hud.uiPromptSetTransportMode = uiPromptSetTransportMode;
    /**
     * Params: type = mostly 0, 6 (net_mission_intro_story_gvo), 7 (fm_mission_controller), 14 (net_ugc_end_flow_transition_online), 15 (net_main_[tlg_]offline)
     *
     * Hash: 0xF4A5C4509BF923B1 | Since: 1207
     */
    function uiPromptSetType(prompt, _type) {
        UiPromptSetType(prompt, _type);
    }
    hud.uiPromptSetType = uiPromptSetType;
    /**
     * No comment provided
     *
     * Hash: 0xC5F428EE08FA7F2C | Since: 1207
     */
    function uiPromptSetUrgentPulsingEnabled(prompt, toggle) {
        UiPromptSetUrgentPulsingEnabled(prompt, toggle);
    }
    hud.uiPromptSetUrgentPulsingEnabled = uiPromptSetUrgentPulsingEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x71215ACCFDE075EE | Since: 1207
     */
    function uiPromptSetVisible(prompt, toggle) {
        UiPromptSetVisible(prompt, toggle);
    }
    hud.uiPromptSetVisible = uiPromptSetVisible;
    /**
     * No comment provided
     *
     * Hash: 0x1FE4788AB1430C55 | Since: 1207
     */
    function uiPromptWasBeatModePressedInTimeWindow(prompt) {
        return UiPromptWasBeatModePressedInTimeWindow(prompt);
    }
    hud.uiPromptWasBeatModePressedInTimeWindow = uiPromptWasBeatModePressedInTimeWindow;
})(hud || (hud = {}));
export var ik;
(function (ik) {
    /**
     * No comment provided
     *
     * Hash: 0x0B9F7A01EC50448D | Since: 1207
     */
    function _0x0B9F7A01EC50448D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x0B9F7A01EC50448D', _ped);
    }
    ik._0x0B9F7A01EC50448D = _0x0B9F7A01EC50448D;
    /**
     * No comment provided
     *
     * Hash: 0x6098139150DCC745 | Since: 1207
     */
    function _0x6098139150DCC745(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x6098139150DCC745', _ped, 0);
    }
    ik._0x6098139150DCC745 = _0x6098139150DCC745;
    /**
     * No comment provided
     *
     * Hash: 0x873C792E07A32C8B | Since: 1207
     */
    function _0x873C792E07A32C8B(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        Citizen.invokeNative('0x873C792E07A32C8B', _ped1, _ped2);
    }
    ik._0x873C792E07A32C8B = _0x873C792E07A32C8B;
    /**
     * No comment provided
     *
     * Hash: 0x66F9EB44342BB4C5 | Since: 1207
     */
    function inverseKinematicsRequestLookAt(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return InverseKinematicsRequestLookAt(_ped);
    }
    ik.inverseKinematicsRequestLookAt = inverseKinematicsRequestLookAt;
    /**
     * Seems to disable IK on ped
     *
     * Hash: 0x0EABF182FBB63D72 | Since: 1207
     */
    function inverseKinematicsSetDisabledForPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        InverseKinematicsSetDisabledForPed(_ped, 0, false);
    }
    ik.inverseKinematicsSetDisabledForPed = inverseKinematicsSetDisabledForPed;
})(ik || (ik = {}));
export var interaction;
(function (interaction) {
    /**
     * Changes the mouse cursor's sprite.
     *
     * spriteId's: https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/cursor_sprites#readme
     *
     * Old name: _SET_MOUSE_CURSOR_SPRITE
     *
     * Hash: 0x7F5858AAB5A58CCE | Since: 1207
     */
    function setMouseCursorStyle(spriteId) {
        SetMouseCursorStyle(spriteId);
    }
    interaction.setMouseCursorStyle = setMouseCursorStyle;
    /**
     * Shows the cursor on screen for one frame.
     *
     * Old name: _SET_MOUSE_CURSOR_ACTIVE_THIS_FRAME
     *
     * Hash: 0xF12E4CCAF249DC10 | Since: 1207
     */
    function setMouseCursorThisFrame() {
        SetMouseCursorThisFrame();
    }
    interaction.setMouseCursorThisFrame = setMouseCursorThisFrame;
    /**
     * Returns true if player is moving mouse while cursor is active
     * _PI* - _PO*
     *
     * Hash: 0x2B8B605F2A9E64BF | Since: 1311
     */
    function pointerIsBeingMoved() {
        return PointerIsBeingMoved();
    }
    interaction.pointerIsBeingMoved = pointerIsBeingMoved;
    /**
     * Returns true if player is holding LMB while cursor is active
     * _PI* - _PO*
     *
     * Hash: 0x61CAE9D1FD055E44 | Since: 1207
     */
    function pointerIsLeftButtonHeld() {
        return PointerIsLeftButtonHeld();
    }
    interaction.pointerIsLeftButtonHeld = pointerIsLeftButtonHeld;
    /**
     * Returns true if player releases LMB if cursor is active
     * _PI* - _PO*
     *
     * Hash: 0xF7F51A57349739F2 | Since: 1207
     */
    function pointerIsLeftButtonJustReleased() {
        return PointerIsLeftButtonJustReleased();
    }
    interaction.pointerIsLeftButtonJustReleased = pointerIsLeftButtonJustReleased;
    /**
     * Allows camera to be moved if middle mouse button is held while in first person
     * Must be called every frame
     * _SET*
     *
     * Hash: 0x0546B117BB17548B | Since: 1232
     */
    function setAllowFirstPersonMouseCameraMovement() {
        SetAllowFirstPersonMouseCameraMovement();
    }
    interaction.setAllowFirstPersonMouseCameraMovement = setAllowFirstPersonMouseCameraMovement;
})(interaction || (interaction = {}));
export var interior;
(function (interior_1) {
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/interiors/interior_sets
     *
     * Hash: 0x174D0AAB11CED739 | Since: 1207
     */
    function activateEntitySet(interior, entitySetName) {
        ActivateInteriorEntitySet(interior, entitySetName, 0);
    }
    interior_1.activateEntitySet = activateEntitySet;
    /**
     * No comment provided
     *
     * Hash: 0xA1762D5BBFCA13A8 | Since: 1207
     */
    function clearRoomForEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        ClearRoomForEntity(_entity);
    }
    interior_1.clearRoomForEntity = clearRoomForEntity;
    /**
     * No comment provided
     *
     * Hash: 0x951A049765E0D450 | Since: 1207
     */
    function clearRoomForGameViewport() {
        ClearRoomForGameViewport();
    }
    interior_1.clearRoomForGameViewport = clearRoomForGameViewport;
    /**
     * No comment provided
     *
     * Hash: 0x33B81A2C07A51FFF | Since: 1207
     */
    function deactivateEntitySet(interior, entitySetName) {
        DeactivateInteriorEntitySet(interior, entitySetName, false);
    }
    interior_1.deactivateEntitySet = deactivateEntitySet;
    /**
     * No comment provided
     *
     * Hash: 0x3C2B92A1A07D4FCE | Since: 1207
     */
    function disable(interior, toggle) {
        DisableInterior(interior, toggle);
    }
    interior_1.disable = disable;
    /**
     * No comment provided
     *
     * Hash: 0xBC29A9894C976945 | Since: 1207
     */
    function forceRoomForEntity(entity, interior, roomHashKey) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof roomHashKey === 'string')
            roomHashKey = misc.getHashKey(roomHashKey);
        ForceRoomForEntity(_entity, interior, roomHashKey);
    }
    interior_1.forceRoomForEntity = forceRoomForEntity;
    /**
     * No comment provided
     *
     * Hash: 0x115B4AA8FB28AB43 | Since: 1207
     */
    function forceRoomForGameViewport(interiorID, roomHashKey) {
        if (typeof roomHashKey === 'string')
            roomHashKey = misc.getHashKey(roomHashKey);
        ForceRoomForGameViewport(interiorID, roomHashKey);
    }
    interior_1.forceRoomForGameViewport = forceRoomForGameViewport;
    /**
     * No comment provided
     *
     * Hash: 0xCDD36C9E5C469070 | Since: 1207
     */
    function getAtCoords(pos) {
        return GetInteriorAtCoords(pos.x, pos.y, pos.z);
    }
    interior_1.getAtCoords = getAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xAAD6170AA33B13C0 | Since: 1207
     */
    function getAtCoordsWithType(pos, interiorType) {
        return GetInteriorAtCoordsWithType(pos.x, pos.y, pos.z, interiorType);
    }
    interior_1.getAtCoordsWithType = getAtCoordsWithType;
    /**
     * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
     *
     * Hash: 0x3543AEA1816D1D2B | Since: 1207
     */
    function getAtCoordsWithTypehash(pos, typeHash) {
        if (typeof typeHash === 'string')
            typeHash = misc.getHashKey(typeHash);
        return GetInteriorAtCoordsWithTypehash(pos.x, pos.y, pos.z, typeHash);
    }
    interior_1.getAtCoordsWithTypehash = getAtCoordsWithTypehash;
    /**
     * No comment provided
     *
     * Hash: 0x5054D1A5218FA696 | Since: 1207
     */
    function getFromCollision(pos) {
        return GetInteriorFromCollision(pos.x, pos.y, pos.z);
    }
    interior_1.getFromCollision = getFromCollision;
    /**
     * Returns the handle of the interior that the entity is in. Returns 0 if outside.
     *
     * Hash: 0xB417689857646F61 | Since: 1207
     */
    function getFromEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetInteriorFromEntity(_entity);
    }
    interior_1.getFromEntity = getFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xBC8A281FF125C655 | Since: 1207
     */
    function getFromPrimaryView() {
        return GetInteriorFromPrimaryView();
    }
    interior_1.getFromPrimaryView = getFromPrimaryView;
    /**
     * No comment provided
     *
     * Hash: 0x8451E87D3C2B0286 | Since: 1207
     */
    function getLocationAndNamehash(interior) {
        return GetInteriorLocationAndNamehash(interior);
    }
    interior_1.getLocationAndNamehash = getLocationAndNamehash;
    /**
     * `Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY`
     *
     * Hash: 0x27D7B6F79E1F4603 | Since: 1207
     */
    function getKeyForEntityInRoom(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetKeyForEntityInRoom(_entity);
    }
    interior_1.getKeyForEntityInRoom = getKeyForEntityInRoom;
    /**
     * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
     *
     * Hash: 0x076E46E0EB52AFC6 | Since: 1207
     */
    function getRoomKeyFromEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetRoomKeyFromEntity(_entity);
    }
    interior_1.getRoomKeyFromEntity = getRoomKeyFromEntity;
    /**
     * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
     *
     * Hash: 0xF291396B517E25B2 | Since: 1207
     */
    function isCollisionMarkedOutside(pos) {
        return IsCollisionMarkedOutside(pos.x, pos.y, pos.z);
    }
    interior_1.isCollisionMarkedOutside = isCollisionMarkedOutside;
    /**
     * No comment provided
     *
     * Hash: 0x32810CA2125F5842 | Since: 1207
     */
    function isEntitySetActive(interior, entitySetName) {
        return IsInteriorEntitySetActive(interior, entitySetName);
    }
    interior_1.isEntitySetActive = isEntitySetActive;
    /**
     * No comment provided
     *
     * Hash: 0x941560D2D45DBFC8 | Since: 1207
     */
    function isReady(interior) {
        return IsInteriorReady(interior);
    }
    interior_1.isReady = isReady;
    /**
     * No comment provided
     *
     * Hash: 0x4200F14D6F840A9A | Since: 1207
     */
    function isScene() {
        return IsInteriorScene();
    }
    interior_1.isScene = isScene;
    /**
     * No comment provided
     *
     * Hash: 0x017C1B3159F79F6C | Since: 1207
     */
    function isValid(interior) {
        return IsValidInterior(interior);
    }
    interior_1.isValid = isValid;
    /**
     * No comment provided
     *
     * Hash: 0xBD3D33EABF680168 | Since: 1207
     */
    function pinInMemory(interior) {
        PinInteriorInMemory(interior);
    }
    interior_1.pinInMemory = pinInMemory;
    /**
     * No comment provided
     *
     * Hash: 0x5BD616735F16BF5C | Since: 1207
     */
    function retainEntityIn(entity, interior) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RetainEntityInInterior(_entity, interior);
    }
    interior_1.retainEntityIn = retainEntityIn;
    /**
     * Actually returns void in IDA but the script header defines a BOOL return type
     *
     * Hash: 0xB5EF6FEF2DC9EBED | Since: 1207
     */
    function setInUse(interior) {
        return SetInteriorInUse(interior);
    }
    interior_1.setInUse = setInUse;
    /**
     * `Does something similar to INTERIOR::DISABLE_INTERIOR.`
     *
     * `You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.`
     *
     * Hash: 0x07FD1A0B814F6055 | Since: 1207
     */
    function unpin(interior) {
        UnpinInterior(interior);
    }
    interior_1.unpin = unpin;
    /**
     * No comment provided
     *
     * Hash: 0x2533F2AB0EB9C6F9 | Since: 1207
     */
    function _0x2533F2AB0EB9C6F9() {
        Citizen.invokeNative('0x2533F2AB0EB9C6F9', undefined, undefined);
    }
    interior_1._0x2533F2AB0EB9C6F9 = _0x2533F2AB0EB9C6F9;
    /**
     * No comment provided
     *
     * Hash: 0xFE2B3D5500B1B2E4 | Since: 1207
     */
    function _0xFE2B3D5500B1B2E4() {
        Citizen.invokeNative('0xFE2B3D5500B1B2E4', undefined, undefined);
    }
    interior_1._0xFE2B3D5500B1B2E4 = _0xFE2B3D5500B1B2E4;
    /**
     * No comment provided
     *
     * Hash: 0x3039BE60B3749716 | Since: 1207
     */
    function getMinimapHash(interior) {
        return GetInteriorMinimapHash(interior);
    }
    interior_1.getMinimapHash = getMinimapHash;
    /**
     * No comment provided
     *
     * Hash: 0x2C9746D0CA15BE1C | Since: 1207
     */
    function getPosition(interior) {
        return new Vector3(GetInteriorPosition(interior));
    }
    interior_1.getPosition = getPosition;
    /**
     * No comment provided
     *
     * Hash: 0xD56FF170710FC826 | Since: 1207
     */
    function isEntitySetValid(interior, entitySetName) {
        return IsInteriorEntitySetValid(interior, entitySetName);
    }
    interior_1.isEntitySetValid = isEntitySetValid;
})(interior || (interior = {}));
export var inventory;
(function (inventory) {
    /**
     * No comment provided
     *
     * Hash: 0x644CCB76A76CFBD6 | Since: 1207
     */
    function copyMpInventoryToMissionInventory(bCopySatchelItems, bCopyEmotes, bCopyHorse) {
        InventoryCopyMpInventoryToMissionInventory(false, false, bCopySatchelItems, bCopyEmotes, bCopyHorse, false);
    }
    inventory.copyMpInventoryToMissionInventory = copyMpInventoryToMissionInventory;
    /**
     * No comment provided
     *
     * Hash: 0xE1F389F03DC83673 | Since: 1311
     */
    function disableMissionInventoryPickups() {
        InventoryDisableMissionInventoryPickups();
    }
    inventory.disableMissionInventoryPickups = disableMissionInventoryPickups;
    /**
     * No comment provided
     *
     * Hash: 0x033EE4B89F3AC545 | Since: 1207
     */
    function getChildrenInSlotCount(inventoryId, slotId) {
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return InventoryGetChildrenInSlotCount(inventoryId, slotId);
    }
    inventory.getChildrenInSlotCount = getChildrenInSlotCount;
    /**
     * No comment provided
     *
     * Hash: 0x886DFD3E185C8A89 | Since: 1207
     */
    function getGuidFromItemid(inventoryId, p2, slotId) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return InventoryGetGuidFromItemid(inventoryId, p2, slotId);
    }
    inventory.getGuidFromItemid = getGuidFromItemid;
    /**
     * No comment provided
     *
     * Hash: 0x9700E8EFC4AB9089 | Since: 1207
     */
    function getInventoryItem(inventoryId) {
        return InventoryGetInventoryItem(inventoryId, false);
    }
    inventory.getInventoryItem = getInventoryItem;
    /**
     * Params: p0 is only 0 or 1
     * Only used in R* SP Scripts
     *
     * Hash: 0x0349404A22736740 | Since: 1207
     */
    function _0x0349404A22736740(inventoryId) {
        return Citizen.invokeNative('0x0349404A22736740', false, inventoryId);
    }
    inventory._0x0349404A22736740 = _0x0349404A22736740;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0x112BCA290D2EB53C | Since: 1207
     */
    function _0x112BCA290D2EB53C(inventoryId, p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0x112BCA290D2EB53C', inventoryId, p1);
    }
    inventory._0x112BCA290D2EB53C = _0x112BCA290D2EB53C;
    /**
     * eInventoryItem: CLOTHING_FANCY_SUIT, CLOTHING_GUNSLINGER_OUTFIT, etc.
     * Only used in R* SP Scripts
     *
     * Hash: 0x46743BBFEDBC859E | Since: 1207
     */
    function useSatchelItem(inventoryId, eInventoryItem) {
        if (typeof eInventoryItem === 'string')
            eInventoryItem = misc.getHashKey(eInventoryItem);
        Citizen.invokeNative('0x46743BBFEDBC859E', inventoryId, eInventoryItem, false);
    }
    inventory.useSatchelItem = useSatchelItem;
    /**
     * Returns databindingEntryId to be used with 0x951847CEF3D829FF (p0)
     *
     * Hash: 0x46DB71883EE9D5AF | Since: 1207
     */
    function _0x46DB71883EE9D5AF(data, stats, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x46DB71883EE9D5AF', data, stats, _ped);
    }
    inventory._0x46DB71883EE9D5AF = _0x46DB71883EE9D5AF;
    /**
     * removeReason: REMOVE_REASON_DEFAULT (eRemoveItemReason)
     * `Example: INVENTORY::_0x5D6182F3BCE1333B(1, joaat("REMOVE_REASON_DEFAULT")); -> clears weapon wheel`
     * Only used in R* SP Scripts
     *
     * Hash: 0x5D6182F3BCE1333B | Since: 1207
     */
    function removeInventoryItems(inventoryId, removeReason) {
        if (typeof removeReason === 'string')
            removeReason = misc.getHashKey(removeReason);
        return Citizen.invokeNative('0x5D6182F3BCE1333B', inventoryId, removeReason);
    }
    inventory.removeInventoryItems = removeInventoryItems;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0x6862E4D93F64CF01 | Since: 1207
     */
    function _0x6862E4D93F64CF01(inventoryId, p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return Citizen.invokeNative('0x6862E4D93F64CF01', inventoryId, p2);
    }
    inventory._0x6862E4D93F64CF01 = _0x6862E4D93F64CF01;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0x6968CE7AC32F6788 | Since: 1207
     */
    function _0x6968CE7AC32F6788(inventoryId) {
        Citizen.invokeNative('0x6968CE7AC32F6788', inventoryId);
    }
    inventory._0x6968CE7AC32F6788 = _0x6968CE7AC32F6788;
    /**
     * No comment provided
     *
     * Hash: 0x751A7E0EAEDAD0D3 | Since: unknown
     */
    function _0x751A7E0EAEDAD0D3() {
        return Citizen.invokeNative('0x751A7E0EAEDAD0D3', undefined, undefined, undefined);
    }
    inventory._0x751A7E0EAEDAD0D3 = _0x751A7E0EAEDAD0D3;
    /**
     * Apply the weapon stats to the CatalogItemInspection stats entry id. get entryId with _INVENTORY_GET_CATALOG_ITEM_INSPECTION_STATS_ENTRY
     *
     * Hash: 0x75CFAC49301E134E | Since: 1207
     */
    function applyWeaponStatsToEntry(entryId, weapon, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weapon === 'string')
            weapon = misc.getHashKey(weapon);
        Citizen.invokeNative('0x75CFAC49301E134E', entryId, weapon, _ped);
    }
    inventory.applyWeaponStatsToEntry = applyWeaponStatsToEntry;
    /**
     * p1, p2: 0
     *
     * Hash: 0x75CFAC49301E134F | Since: 1207
     */
    function _0x75CFAC49301E134F(databindingEntryId) {
        if (typeof databindingEntryId === 'string')
            databindingEntryId = misc.getHashKey(databindingEntryId);
        Citizen.invokeNative('0x75CFAC49301E134F', databindingEntryId, false, false);
    }
    inventory._0x75CFAC49301E134F = _0x75CFAC49301E134F;
    /**
     * p0: value returned by 0x46DB71883EE9D5AF
     *
     * Hash: 0x951847CEF3D829FF | Since: 1207
     */
    function _0x951847CEF3D829FF(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x951847CEF3D829FF', undefined, _ped);
    }
    inventory._0x951847CEF3D829FF = _0x951847CEF3D829FF;
    /**
     * p1 (out) and p2 (in) are both script arrays?
     * item: can be a component item, see SHOP_CATALOG_BUILD_LIST_OF_WEAPON_COMPONENTS
     *
     * Hash: 0x9AC53CB6907B4428 | Since: 1207
     */
    function _0x9AC53CB6907B4428(item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return Citizen.invokeNative('0x9AC53CB6907B4428', item);
    }
    inventory._0x9AC53CB6907B4428 = _0x9AC53CB6907B4428;
    /**
     * Used in function SET_SHOP_BEING_ROBBED and many other shop related scripts and functions.
     * INVENTORY_A*
     *
     * Hash: 0x9B4E793B1CB6550A | Since: 1207
     */
    function _0x9B4E793B1CB6550A() {
        Citizen.invokeNative('0x9B4E793B1CB6550A');
    }
    inventory._0x9B4E793B1CB6550A = _0x9B4E793B1CB6550A;
    /**
     * Returns effects entry id of CatalogItemInspection container.
     *
     * Hash: 0x9D21B185ABC2DBC4 | Since: 1207
     */
    function getCatalogItemInspectionEffectsEntry(entryId, name, unk1, unk2) {
        return Citizen.invokeNative('0x9D21B185ABC2DBC4', entryId, name, unk1, unk2);
    }
    inventory.getCatalogItemInspectionEffectsEntry = getCatalogItemInspectionEffectsEntry;
    /**
     * Returns stats entry id of CatalogItemInspection container
     *
     * Hash: 0x9D21B185ABC2DBC5 | Since: 1207
     */
    function getCatalogItemInspectionStatsEntry(entryId, name, unk1, playerid) {
        const _playerid = playerid instanceof Player ? playerid.localId() : playerid;
        return Citizen.invokeNative('0x9D21B185ABC2DBC5', entryId, name, unk1, _playerid);
    }
    inventory.getCatalogItemInspectionStatsEntry = getCatalogItemInspectionStatsEntry;
    /**
     * No comment provided
     *
     * Hash: 0x9E58207B194488AC | Since: 1207
     */
    function _0x9E58207B194488AC(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9E58207B194488AC', _ped, 0);
    }
    inventory._0x9E58207B194488AC = _0x9E58207B194488AC;
    /**
     * No comment provided
     *
     * Hash: 0xB1DD74A1F5536622 | Since: 1311
     */
    function _0xB1DD74A1F5536622(inventoryId) {
        return Citizen.invokeNative('0xB1DD74A1F5536622', inventoryId);
    }
    inventory._0xB1DD74A1F5536622 = _0xB1DD74A1F5536622;
    /**
     * Params: p3 returns an int between 0 and 20 (?)
     * Only used in R* SP Scripts
     *
     * Hash: 0xD08685BA892DBFAB | Since: 1207
     */
    function _0xD08685BA892DBFAB(inventoryId) {
        return Citizen.invokeNative('0xD08685BA892DBFAB', inventoryId);
    }
    inventory._0xD08685BA892DBFAB = _0xD08685BA892DBFAB;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0xE1F45A67A9F0DCBC | Since: 1207
     */
    function _0xE1F45A67A9F0DCBC(inventoryId) {
        Citizen.invokeNative('0xE1F45A67A9F0DCBC', inventoryId);
    }
    inventory._0xE1F45A67A9F0DCBC = _0xE1F45A67A9F0DCBC;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0xE36D4A38D28D9CFB | Since: 1207
     */
    function useBackupInventory() {
        Citizen.invokeNative('0xE36D4A38D28D9CFB', false);
    }
    inventory.useBackupInventory = useBackupInventory;
    /**
     * p1: WARDROBE, KIT_CAMP, CHARACTER, KIT_MOONSHINER_PROPERTY
     * Returns slot hash
     *
     * Hash: 0x6452B1D357D81742 | Since: 1207
     */
    function getDefaultItemSlotInfo(item, p1) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return GetDefaultItemSlotInfo(item, p1);
    }
    inventory.getDefaultItemSlotInfo = getDefaultItemSlotInfo;
    /**
     * No comment provided
     *
     * Hash: 0xADDD1E7C0ECF7D95 | Since: 1207
     */
    function getItemRoleMaxLevelCount(inventoryId, eRoleMaxLevel) {
        if (typeof eRoleMaxLevel === 'string')
            eRoleMaxLevel = misc.getHashKey(eRoleMaxLevel);
        return GetItemRoleMaxLevelCount(inventoryId, eRoleMaxLevel);
    }
    inventory.getItemRoleMaxLevelCount = getItemRoleMaxLevelCount;
    /**
     * No comment provided
     *
     * Hash: 0xE80E50BEE276A54A | Since: 1207
     */
    function getItemSlotMaxCount(provision, slotId) {
        if (typeof provision === 'string')
            provision = misc.getHashKey(provision);
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return GetItemSlotMaxCount(provision, slotId);
    }
    inventory.getItemSlotMaxCount = getItemSlotMaxCount;
    /**
     * inventoryItemSlotHash: https://pastebin.com/P6fyr3vr
     *
     * Hash: 0xCB5D11F9508A928D | Since: 1207
     */
    function addItemWithGuid(inventoryId, item, inventoryItemSlot, addReason) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof inventoryItemSlot === 'string')
            inventoryItemSlot = misc.getHashKey(inventoryItemSlot);
        if (typeof addReason === 'string')
            addReason = misc.getHashKey(addReason);
        return InventoryAddItemWithGuid(inventoryId, item, inventoryItemSlot, 0, addReason);
    }
    inventory.addItemWithGuid = addItemWithGuid;
    /**
     * inventoryId: see _INVENTORY_GET_PED_INVENTORY_ID
     *
     * Hash: 0x0FBBFFC891A97C81 | Since: 1207
     */
    function areLocalChangesAllowed(inventoryId) {
        return InventoryAreLocalChangesAllowed(inventoryId);
    }
    inventory.areLocalChangesAllowed = areLocalChangesAllowed;
    /**
     * No comment provided
     *
     * Hash: 0x4C543D5DFCD2DAFD | Since: 1207
     */
    function compareGuids() {
        return InventoryCompareGuids();
    }
    inventory.compareGuids = compareGuids;
    /**
     * No comment provided
     *
     * Hash: 0xC04F47D488EF9EBA | Since: 1207
     */
    function copyItemToInventory(inventoryId, inventoryIdCloned) {
        return InventoryCopyItemToInventory(inventoryId, inventoryIdCloned, undefined);
    }
    inventory.copyItemToInventory = copyItemToInventory;
    /**
     * No comment provided
     *
     * Hash: 0x3112ADB9D5F3426B | Since: 1207
     */
    function copyItemToMissionInventory() {
        return InventoryCopyItemToMissionInventory(false);
    }
    inventory.copyItemToMissionInventory = copyItemToMissionInventory;
    /**
     * filterName (collections): "ALL", "ALL SATCHEL", "ALL HORSES", "ALL COACHES", "ALL MOUNTS", "ALL CLOTHING", "ALL WEAPONS", "ALL SATCHEL EXCLUDING CLOTHING", "ALL EXCLUDING CLOTHING"
     * slotId: -1591664384
     * p3: outCollectionSize (?)
     * Returns collectionId
     *
     * Hash: 0x80D78BDC9D88EF07 | Since: 1207
     */
    function createItemCollection(inventoryId, filterName, slotId) {
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return InventoryCreateItemCollection(inventoryId, filterName, slotId);
    }
    inventory.createItemCollection = createItemCollection;
    /**
     * Returns collectionId
     *
     * Hash: 0x97A3646645727F42 | Since: 1232
     */
    function createItemCollection2() {
        return InventoryCreateItemCollection2();
    }
    inventory.createItemCollection2 = createItemCollection2;
    /**
     * No comment provided
     *
     * Hash: 0x640F890C3E5A3FFD | Since: 1207
     */
    function createItemCollectionWithFilter(inventoryId) {
        return InventoryCreateItemCollectionWithFilter(inventoryId);
    }
    inventory.createItemCollectionWithFilter = createItemCollectionWithFilter;
    /**
     * p1: 32
     * Returns collectionId
     *
     * Hash: 0xBB7F968675B34B0C | Since: 1311
     */
    function createSortedCollection(inventoryId) {
        return InventoryCreateSortedCollection(inventoryId, 0);
    }
    inventory.createSortedCollection = createSortedCollection;
    /**
     * Example: (1, WEAPON_REVOLVER_CATTLEMAN, 0) - disables cattleman revolver on weapon wheel
     *
     * Hash: 0x766315A564594401 | Since: 1207
     */
    function disableItem(inventoryId, item, gtxReason) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof gtxReason === 'string')
            gtxReason = misc.getHashKey(gtxReason);
        InventoryDisableItem(inventoryId, item, gtxReason);
    }
    inventory.disableItem = disableItem;
    /**
     * Params: p1 = 0
     *
     * Hash: 0xE3A46370F70F3607 | Since: 1207
     */
    function disableWeapons(inventoryId) {
        InventoryDisableWeapons(inventoryId, undefined);
    }
    inventory.disableWeapons = disableWeapons;
    /**
     * No comment provided
     *
     * Hash: 0x88B58B83A43A8CAB | Since: 1207
     */
    function doesItemOwnEquipment(inventoryId, item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return InventoryDoesItemOwnEquipment(inventoryId, item);
    }
    inventory.doesItemOwnEquipment = doesItemOwnEquipment;
    /**
     * No comment provided
     *
     * Hash: 0x6A564540FAC12211 | Since: 1207
     */
    function enableItem(inventoryId, item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        InventoryEnableItem(inventoryId, item);
    }
    inventory.enableItem = enableItem;
    /**
     * No comment provided
     *
     * Hash: 0xD5D72F1624F3BA7C | Since: 1207
     */
    function enableWeapons(inventoryId) {
        InventoryEnableWeapons(inventoryId);
    }
    inventory.enableWeapons = enableWeapons;
    /**
     * No comment provided
     *
     * Hash: 0x734311E2852760D0 | Since: 1207
     */
    function equipItemWithGuid(inventoryId, bEquipped) {
        return InventoryEquipItemWithGuid(inventoryId, bEquipped);
    }
    inventory.equipItemWithGuid = equipItemWithGuid;
    /**
     * No comment provided
     *
     * Hash: 0x780C5B9AE2819807 | Since: 1207
     */
    function fitsSlotId(item, slotId) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return InventoryFitsSlotId(item, slotId);
    }
    inventory.fitsSlotId = fitsSlotId;
    /**
     * No comment provided
     *
     * Hash: 0xE843D21A8E2498AA | Since: 1207
     */
    function getChildrenCount(inventoryId) {
        return InventoryGetChildrenCount(inventoryId);
    }
    inventory.getChildrenCount = getChildrenCount;
    /**
     * No comment provided
     *
     * Hash: 0x025A1B1FB03FBF61 | Since: 1207
     */
    function getFullInventoryItemData(inventoryId) {
        return InventoryGetFullInventoryItemData(inventoryId, 0, 0);
    }
    inventory.getFullInventoryItemData = getFullInventoryItemData;
    /**
     * Returns a unique inventory ID for this ped.
     * For the local player ped, it is an eInventories value.
     * For other peds, it is the inventory address casted to unsigned int.
     *
     * enum eInventories
     * {
     * INVENTORY_INVALID,
     * INVENTORY_SP_PLAYER,
     * INVENTORY_MP_PLAYER,
     * INVENTORY_MP_MISSION,
     * INVENTORY_SECOND_SCREEN,
     * INVENTORY_SP_BACKUP,
     * INVENTORY_SP_SNAPSHOT,
     * INVENTORY_0xDE2AE452,
     * INVENTORY_0x399D9B3A,
     * INVENTORY_0x4BD43FA7,
     * INVENTORY_0x9529D251,
     * INVENTORY_0xA75776AC,
     * INVENTORY_MAX_ID = 11,
     * INVENTORY_IDS_COUNT
     * };
     *
     * Hash: 0x13D234A2A3F66E63 | Since: 1207
     */
    function getInventoryIdFromPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return InventoryGetInventoryIdFromPed(_ped);
    }
    inventory.getInventoryIdFromPed = getInventoryIdFromPed;
    /**
     * No comment provided
     *
     * Hash: 0xCD9A485F2B383B44 | Since: 1207
     */
    function getInventoryItemChild(inventoryId, childIndex) {
        return InventoryGetInventoryItemChild(inventoryId, childIndex);
    }
    inventory.getInventoryItemChild = getInventoryItemChild;
    /**
     * No comment provided
     *
     * Hash: 0xC97E0D2302382211 | Since: 1207
     */
    function getInventoryItemCountWithGuid(inventoryId) {
        return InventoryGetInventoryItemCountWithGuid(inventoryId, false);
    }
    inventory.getInventoryItemCountWithGuid = getInventoryItemCountWithGuid;
    /**
     * No comment provided
     *
     * Hash: 0xE787F05DFC977BDE | Since: 1207
     */
    function getInventoryItemCountWithItemid(inventoryId, eInventoryItem) {
        if (typeof eInventoryItem === 'string')
            eInventoryItem = misc.getHashKey(eInventoryItem);
        return InventoryGetInventoryItemCountWithItemid(inventoryId, eInventoryItem, false);
    }
    inventory.getInventoryItemCountWithItemid = getInventoryItemCountWithItemid;
    /**
     * No comment provided
     *
     * Hash: 0xA4550FE9C512E3DD | Since: 1207
     */
    function getInventoryItemDescriptionHash(item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return InventoryGetInventoryItemDescriptionHash(item);
    }
    inventory.getInventoryItemDescriptionHash = getInventoryItemDescriptionHash;
    /**
     * No comment provided
     *
     * Hash: 0xBE012571B25F5ACA | Since: 1207
     */
    function getInventoryItemEquippedInSlot(inventoryId, slotId) {
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return InventoryGetInventoryItemEquippedInSlot(inventoryId, slotId, 0);
    }
    inventory.getInventoryItemEquippedInSlot = getInventoryItemEquippedInSlot;
    /**
     * No comment provided
     *
     * Hash: 0x22E590F108289A9D | Since: 1207
     */
    function getInventoryItemEquippedInSlotByRef(inventoryId, slotId) {
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return InventoryGetInventoryItemEquippedInSlotByRef(inventoryId, slotId);
    }
    inventory.getInventoryItemEquippedInSlotByRef = getInventoryItemEquippedInSlotByRef;
    /**
     * No comment provided
     *
     * Hash: 0xB991FE166FAF84FD | Since: 1207
     */
    function getInventoryItemFitSlot(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return InventoryGetInventoryItemFitSlot(p0, 0);
    }
    inventory.getInventoryItemFitSlot = getInventoryItemFitSlot;
    /**
     * No comment provided
     *
     * Hash: 0xF9933164965533B7 | Since: 1207
     */
    function getInventoryItemHidden(inventoryId) {
        return InventoryGetInventoryItemHidden(inventoryId);
    }
    inventory.getInventoryItemHidden = getInventoryItemHidden;
    /**
     * No comment provided
     *
     * Hash: 0x0C093C1787F18519 | Since: 1207
     */
    function getInventoryItemInspectionInfo(item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return InventoryGetInventoryItemInspectionInfo(item);
    }
    inventory.getInventoryItemInspectionInfo = getInventoryItemInspectionInfo;
    /**
     * No comment provided
     *
     * Hash: 0x70E3A884ED000A01 | Since: 1311
     */
    function getInventoryItemInUse(inventoryId) {
        return InventoryGetInventoryItemInUse(inventoryId);
    }
    inventory.getInventoryItemInUse = getInventoryItemInUse;
    /**
     * No comment provided
     *
     * Hash: 0x4AEF1FB5B9011D75 | Since: 1207
     */
    function getInventoryItemIsAnimalPelt(item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return InventoryGetInventoryItemIsAnimalPelt(item);
    }
    inventory.getInventoryItemIsAnimalPelt = getInventoryItemIsAnimalPelt;
    /**
     * soundType: see 0x2BAE4880DCDD560B
     * Returns item Hash to be used with _IS_SCRIPTED_AUDIO_CUSTOM and _PLAY_SOUND_FROM_ITEM (p0)
     *
     * Hash: 0x2E1CDC1FF3B8473E | Since: 1207
     */
    function getInventoryItemSound(item, soundType) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return InventoryGetInventoryItemSound(item, soundType);
    }
    inventory.getInventoryItemSound = getInventoryItemSound;
    /**
     * Returns CopyID
     *
     * Hash: 0xAB5F12746A099A0E | Since: 1207
     */
    function getInventoryItemWeaponCopyId(inventoryId) {
        return InventoryGetInventoryItemWeaponCopyId(inventoryId);
    }
    inventory.getInventoryItemWeaponCopyId = getInventoryItemWeaponCopyId;
    /**
     * soundType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CItemInfoSoundsInterface__sSoundsInfo__eSoundType
     *
     * Hash: 0x2BAE4880DCDD560B | Since: 1207
     */
    function getIsInventoryItemSoundValid(item, soundType) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return InventoryGetIsInventoryItemSoundValid(item, soundType);
    }
    inventory.getIsInventoryItemSoundValid = getIsInventoryItemSoundValid;
    /**
     * No comment provided
     *
     * Hash: 0x4A606C17276E1BCC | Since: 1232
     */
    function getItemExpiryTime() {
        return InventoryGetItemExpiryTime();
    }
    inventory.getItemExpiryTime = getItemExpiryTime;
    /**
     * collectionId is < outCollectionSize
     *
     * Hash: 0x82FA24C3D3FCD9B7 | Since: 1207
     */
    function getItemFromCollectionIndex(collectionId, itemIndex) {
        return InventoryGetItemFromCollectionIndex(collectionId, itemIndex);
    }
    inventory.getItemFromCollectionIndex = getItemFromCollectionIndex;
    /**
     * No comment provided
     *
     * Hash: 0xB881CA836CC4B6D4 | Since: 1207
     */
    function isGuidValid() {
        return InventoryIsGuidValid();
    }
    inventory.isGuidValid = isGuidValid;
    /**
     * Alternative Name: _INVENTORY_IS_ITEM_DISABLED
     *
     * Hash: 0x3D10D7179D7034AF | Since: 1207
     */
    function isInventoryItemEquipped(inventoryId, item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return InventoryIsInventoryItemEquipped(inventoryId, item, false);
    }
    inventory.isInventoryItemEquipped = isInventoryItemEquipped;
    /**
     * flag: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ItemDatabaseItemFlags
     * 2097152 (is item read?), 8388608 (is item sent/received/mailable?), 16777216 (is item consumable?)
     *
     * Hash: 0x245D07651B1D183B | Since: 1207
     */
    function isInventoryItemFlagEnabled(item, flag) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return InventoryIsInventoryItemFlagEnabled(item, flag);
    }
    inventory.isInventoryItemFlagEnabled = isInventoryItemFlagEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x0137C77A2EC64536 | Since: 1232
     */
    function isItemExpired() {
        return InventoryIsItemExpired();
    }
    inventory.isItemExpired = isItemExpired;
    /**
     * No comment provided
     *
     * Hash: 0xFC7563F482781A3D | Since: 1207
     */
    function isPlayerInventoryMirroringTransactions() {
        return InventoryIsPlayerInventoryMirroringTransactions();
    }
    inventory.isPlayerInventoryMirroringTransactions = isPlayerInventoryMirroringTransactions;
    /**
     * guid1: old parent GUID
     * guid2: new parent GUID
     * guid3: new item GUID (out param)
     *
     * Hash: 0xDCCAA7C3BFD88862 | Since: 1207
     */
    function moveInventoryItem(inventoryId, slotId, quantity) {
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return InventoryMoveInventoryItem(inventoryId, slotId, quantity);
    }
    inventory.moveInventoryItem = moveInventoryItem;
    /**
     * Max num of collections is 5, so release your unused ones.
     *
     * Hash: 0x42A2F33A1942E865 | Since: 1207
     */
    function releaseItemCollection(collectionId) {
        return InventoryReleaseItemCollection(collectionId);
    }
    inventory.releaseItemCollection = releaseItemCollection;
    /**
     * No comment provided
     *
     * Hash: 0x3E4E811480B3AE79 | Since: 1207
     */
    function removeInventoryItemWithGuid(inventoryId, quantity, removeReason) {
        if (typeof removeReason === 'string')
            removeReason = misc.getHashKey(removeReason);
        return InventoryRemoveInventoryItemWithGuid(inventoryId, quantity, removeReason);
    }
    inventory.removeInventoryItemWithGuid = removeInventoryItemWithGuid;
    /**
     * No comment provided
     *
     * Hash: 0xB4158C8C9A3B5DCE | Since: 1207
     */
    function removeInventoryItemWithItemid(inventoryId, item, quantity, removeReason) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof removeReason === 'string')
            removeReason = misc.getHashKey(removeReason);
        return InventoryRemoveInventoryItemWithItemid(inventoryId, item, quantity, removeReason);
    }
    inventory.removeInventoryItemWithItemid = removeInventoryItemWithItemid;
    /**
     * Used with CClothingItem
     *
     * Hash: 0x9A113C660AEA3832 | Since: 1207
     */
    function setInventoryItemHidden(inventoryId, hidden) {
        return InventorySetInventoryItemHidden(inventoryId, hidden);
    }
    inventory.setInventoryItemHidden = setInventoryItemHidden;
    /**
     * Used with CSatchelItem, R* Script usage: fisihing_core
     *
     * Hash: 0xD740F11FBC8AEF43 | Since: 1207
     */
    function setInventoryItemHidden2(inventoryId, hidden) {
        return InventorySetInventoryItemHidden2(inventoryId, hidden);
    }
    inventory.setInventoryItemHidden2 = setInventoryItemHidden2;
    /**
     * No comment provided
     *
     * Hash: 0x227522FD59DDB7E8 | Since: 1207
     */
    function setInventoryItemInspectionEnabled(inventoryId, enabled) {
        return InventorySetInventoryItemInspectionEnabled(inventoryId, enabled);
    }
    inventory.setInventoryItemInspectionEnabled = setInventoryItemInspectionEnabled;
    /**
     * Only works on CClothingItem
     *
     * Hash: 0x65A5F70F4A292EBE | Since: 1207
     */
    function setInventoryItemInUse(inventoryId, inUse) {
        return InventorySetInventoryItemInUse(inventoryId, inUse);
    }
    inventory.setInventoryItemInUse = setInventoryItemInUse;
    /**
     * OWE_INVALID = -1,
     * OWE_GOOD_IN_HOT
     * OWE_GOOD_IN_NONE
     * OWE_GOOD_IN_COLD
     * OWE_GOOD_IN_ALL
     *
     * Hash: 0x6D2F987736A42D4C | Since: 1207
     */
    function setInventoryItemWeatherEffectiveness(inventoryId, weatherEffectiveness) {
        return InventorySetInventoryItemWeatherEffectiveness(inventoryId, weatherEffectiveness);
    }
    inventory.setInventoryItemWeatherEffectiveness = setInventoryItemWeatherEffectiveness;
    /**
     * No comment provided
     *
     * Hash: 0xF2753D691BCDA314 | Since: 1207
     */
    function swapInventoryItem(inventoryId) {
        return InventorySwapInventoryItem(inventoryId);
    }
    inventory.swapInventoryItem = swapInventoryItem;
    /**
     * Getter: _INVENTORY_GET_FULL_INVENTORY_ITEM_DATA
     *
     * Hash: 0xD80A8854DB5CFBA5 | Since: 1207
     */
    function updateInventoryItem(inventoryId) {
        return InventoryUpdateInventoryItem(inventoryId, 0);
    }
    inventory.updateInventoryItem = updateInventoryItem;
    /**
     * No comment provided
     *
     * Hash: 0xA6AA9F56BC6CFF58 | Since: 1207
     */
    function useMissionInventory(enable, mirrorTransactions) {
        InventoryUseMissionInventory(enable, mirrorTransactions);
    }
    inventory.useMissionInventory = useMissionInventory;
    /**
     * old name _INVENTORY_USE_SP_BACKUP
     *
     * Hash: 0x7C7E4AB748EA3B07 | Since: 1207
     */
    function isUsingBackupInventory() {
        return InventoryUseSpBackup();
    }
    inventory.isUsingBackupInventory = isUsingBackupInventory;
    /**
     * No comment provided
     *
     * Hash: 0xF666EF30F4F0AC4E | Since: 1207
     */
    function setCarriableCarryActionPromptOverride() {
        return SetCarriableCarryActionPromptOverride();
    }
    inventory.setCarriableCarryActionPromptOverride = setCarriableCarryActionPromptOverride;
    /**
     * No comment provided
     *
     * Hash: 0xFD41D1D4350F6413 | Since: 1207
     */
    function setItemPromptInfoRequest() {
        return SetItemPromptInfoRequest();
    }
    inventory.setItemPromptInfoRequest = setItemPromptInfoRequest;
    /**
     * This native has no functionality.
     *
     * Hash: 0x597F571DDEE3FFAC | Since: 1207
     */
    function setUseMission(toggle) {
        SetUseMissionInventory(toggle);
    }
    inventory.setUseMission = setUseMission;
})(inventory || (inventory = {}));
export var itemdatabase;
(function (itemdatabase) {
    /**
     * No comment provided
     *
     * Hash: 0x2A610BEE7D341CC4 | Since: 1207
     */
    function filloutItemByName(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutItemByName(key);
    }
    itemdatabase.filloutItemByName = filloutItemByName;
    /**
     * No comment provided
     *
     * Hash: 0xCF2D360D27FD1ABF | Since: 1207
     */
    function filloutItemEffectIdInfo(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutItemEffectIdInfo(key);
    }
    itemdatabase.filloutItemEffectIdInfo = filloutItemEffectIdInfo;
    /**
     * No comment provided
     *
     * Hash: 0xFE90ABBCBFDC13B2 | Since: 1207
     */
    function filloutItemInfo(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutItemInfo(key);
    }
    itemdatabase.filloutItemInfo = filloutItemInfo;
    /**
     * No comment provided
     *
     * Hash: 0x4CE753203FA42214 | Since: 1207
     */
    function isBuyableAwardValid(award) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return ItemdatabaseIsBuyableAwardValid(award);
    }
    itemdatabase.isBuyableAwardValid = isBuyableAwardValid;
    /**
     * No comment provided
     *
     * Hash: 0x17721003A66C72BF | Since: 1207
     */
    function _0x17721003A66C72BF(shopType, key) {
        if (typeof shopType === 'string')
            shopType = misc.getHashKey(shopType);
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return Citizen.invokeNative('0x17721003A66C72BF', shopType, key);
    }
    itemdatabase._0x17721003A66C72BF = _0x17721003A66C72BF;
    /**
     * No comment provided
     *
     * Hash: 0x1FC25AEB5F76B38D | Since: 1311
     */
    function getAwardAcquireCost(award, index) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return Citizen.invokeNative('0x1FC25AEB5F76B38D', award, index);
    }
    itemdatabase.getAwardAcquireCost = getAwardAcquireCost;
    /**
     * No comment provided
     *
     * Hash: 0x388088BFF3681189 | Since: 1232
     */
    function _0x388088BFF3681189(bundle, costtype) {
        if (typeof bundle === 'string')
            bundle = misc.getHashKey(bundle);
        if (typeof costtype === 'string')
            costtype = misc.getHashKey(costtype);
        return Citizen.invokeNative('0x388088BFF3681189', bundle, costtype);
    }
    itemdatabase._0x388088BFF3681189 = _0x388088BFF3681189;
    /**
     * No comment provided
     *
     * Hash: 0x3A0B667ABFF87F6E | Since: 1207
     */
    function _0x3A0B667ABFF87F6E() {
        return Citizen.invokeNative('0x3A0B667ABFF87F6E', undefined, undefined, undefined);
    }
    itemdatabase._0x3A0B667ABFF87F6E = _0x3A0B667ABFF87F6E;
    /**
     * _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
     *
     * Hash: 0x48229CE0C7938237 | Since: 1207
     */
    function _0x48229CE0C7938237(award) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return Citizen.invokeNative('0x48229CE0C7938237', award);
    }
    itemdatabase._0x48229CE0C7938237 = _0x48229CE0C7938237;
    /**
     * No comment provided
     *
     * Hash: 0x537A0555F62CA01A | Since: 1436
     */
    function _0x537A0555F62CA01A(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return Citizen.invokeNative('0x537A0555F62CA01A', key, 0);
    }
    itemdatabase._0x537A0555F62CA01A = _0x537A0555F62CA01A;
    /**
     * No comment provided
     *
     * Hash: 0x74C3B1093728D263 | Since: 1207
     */
    function filloutBundleUiData(bundle) {
        if (typeof bundle === 'string')
            bundle = misc.getHashKey(bundle);
        return Citizen.invokeNative('0x74C3B1093728D263', bundle);
    }
    itemdatabase.filloutBundleUiData = filloutBundleUiData;
    /**
     * Returns Item Count
     *
     * Hash: 0x799FCD53358ED5FA | Since: 1355
     */
    function _0x799FCD53358ED5FA(bundle) {
        return Citizen.invokeNative('0x799FCD53358ED5FA', bundle, undefined);
    }
    itemdatabase._0x799FCD53358ED5FA = _0x799FCD53358ED5FA;
    /**
     * No comment provided
     *
     * Hash: 0x7A35A72A692BE9DB | Since: 1207
     */
    function _0x7A35A72A692BE9DB() {
        return Citizen.invokeNative('0x7A35A72A692BE9DB', undefined);
    }
    itemdatabase._0x7A35A72A692BE9DB = _0x7A35A72A692BE9DB;
    /**
     * No comment provided
     *
     * Hash: 0x8870895BA5ED9385 | Since: 1232
     */
    function _0x8870895BA5ED9385(key, tagType) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        if (typeof tagType === 'string')
            tagType = misc.getHashKey(tagType);
        return Citizen.invokeNative('0x8870895BA5ED9385', key, tagType);
    }
    itemdatabase._0x8870895BA5ED9385 = _0x8870895BA5ED9385;
    /**
     * _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
     *
     * Hash: 0x8D029948CA29409B | Since: 1207
     */
    function _0x8D029948CA29409B(award, index) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return Citizen.invokeNative('0x8D029948CA29409B', award, index);
    }
    itemdatabase._0x8D029948CA29409B = _0x8D029948CA29409B;
    /**
     * No comment provided
     *
     * Hash: 0xA97EE5E4589FCF5A | Since: 1207
     */
    function getBundleAcquireCostModifiers(bundle) {
        if (typeof bundle === 'string')
            bundle = misc.getHashKey(bundle);
        return Citizen.invokeNative('0xA97EE5E4589FCF5A', bundle);
    }
    itemdatabase.getBundleAcquireCostModifiers = getBundleAcquireCostModifiers;
    /**
     * Returns Pathset Hash
     *
     * Hash: 0xAA29A5F13B2C20B2 | Since: 1232
     */
    function _0xAA29A5F13B2C20B2(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0xAA29A5F13B2C20B2', undefined, p1);
    }
    itemdatabase._0xAA29A5F13B2C20B2 = _0xAA29A5F13B2C20B2;
    /**
     * No comment provided
     *
     * Hash: 0xC4146375D8A0B374 | Since: 1355
     */
    function _0xC4146375D8A0B374(bundle, index) {
        return Citizen.invokeNative('0xC4146375D8A0B374', bundle, undefined, index, undefined);
    }
    itemdatabase._0xC4146375D8A0B374 = _0xC4146375D8A0B374;
    /**
     * No comment provided
     *
     * Hash: 0xD076DB9B96FAADF1 | Since: 1311
     */
    function _0xD076DB9B96FAADF1(award) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return Citizen.invokeNative('0xD076DB9B96FAADF1', award);
    }
    itemdatabase._0xD076DB9B96FAADF1 = _0xD076DB9B96FAADF1;
    /**
     * No comment provided
     *
     * Hash: 0xDBEADA0DF5F9AB9F | Since: 1355
     */
    function _0xDBEADA0DF5F9AB9F(layout, index) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        return Citizen.invokeNative('0xDBEADA0DF5F9AB9F', layout, index);
    }
    itemdatabase._0xDBEADA0DF5F9AB9F = _0xDBEADA0DF5F9AB9F;
    /**
     * No comment provided
     *
     * Hash: 0xDEE7B3C76ED664BE | Since: 1232
     */
    function getAcquireCostsCountFromCostType(key, costtype) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        if (typeof costtype === 'string')
            costtype = misc.getHashKey(costtype);
        return Citizen.invokeNative('0xDEE7B3C76ED664BE', key, costtype);
    }
    itemdatabase.getAcquireCostsCountFromCostType = getAcquireCostsCountFromCostType;
    /**
     * No comment provided
     *
     * Hash: 0xF27F01BBF5ACD3F3 | Since: 1232
     */
    function filloutAwardAcquireCost(award, costtype, index) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        if (typeof costtype === 'string')
            costtype = misc.getHashKey(costtype);
        return Citizen.invokeNative('0xF27F01BBF5ACD3F3', award, costtype, index);
    }
    itemdatabase.filloutAwardAcquireCost = filloutAwardAcquireCost;
    /**
     * No comment provided
     *
     * Hash: 0xF540239F9937033B | Since: 1232
     */
    function getAwardAcquireCostCountFromCostType(award, costtype) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        if (typeof costtype === 'string')
            costtype = misc.getHashKey(costtype);
        return Citizen.invokeNative('0xF540239F9937033B', award, costtype);
    }
    itemdatabase.getAwardAcquireCostCountFromCostType = getAwardAcquireCostCountFromCostType;
    /**
     * No comment provided
     *
     * Hash: 0xF8D09EF8CE61D7BF | Since: 1207
     */
    function filloutBuyAwardUiData(award) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return Citizen.invokeNative('0xF8D09EF8CE61D7BF', award);
    }
    itemdatabase.filloutBuyAwardUiData = filloutBuyAwardUiData;
    /**
     * No comment provided
     *
     * Hash: 0x856FF92C57742AE5 | Since: 1207
     */
    function canEquipItemOnCategory(key, category, slotId) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        return ItemdatabaseCanEquipItemOnCategory(key, category, slotId);
    }
    itemdatabase.canEquipItemOnCategory = canEquipItemOnCategory;
    /**
     * Returns collectionId to be used with 0x8750F69A720C2E41 (p0) and 0xCBB7B6EDFA933ADE (p0)
     *
     * Hash: 0x71EFA7999AE79408 | Since: 1207
     */
    function createItemCollection(comparisonType) {
        return ItemdatabaseCreateItemCollection(comparisonType);
    }
    itemdatabase.createItemCollection = createItemCollection;
    /**
     * Params: tag = TAG_ITEM_PROPERTY (tagType(?))
     *
     * Hash: 0x99C6EA66DFE73757 | Since: 1207
     */
    function doesBundleHaveTag(bundle, tag, tagType) {
        if (typeof bundle === 'string')
            bundle = misc.getHashKey(bundle);
        if (typeof tag === 'string')
            tag = misc.getHashKey(tag);
        if (typeof tagType === 'string')
            tagType = misc.getHashKey(tagType);
        return ItemdatabaseDoesBundleHaveTag(bundle, tag, tagType);
    }
    itemdatabase.doesBundleHaveTag = doesBundleHaveTag;
    /**
     * No comment provided
     *
     * Hash: 0xFF5FB5605AD56856 | Since: 1207
     */
    function doesItemHaveTag(item, tag, tagType) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof tag === 'string')
            tag = misc.getHashKey(tag);
        if (typeof tagType === 'string')
            tagType = misc.getHashKey(tagType);
        return ItemdatabaseDoesItemHaveTag(item, tag, tagType);
    }
    itemdatabase.doesItemHaveTag = doesItemHaveTag;
    /**
     * No comment provided
     *
     * Hash: 0x74F7928816E4E181 | Since: 1207
     */
    function filloutAcquireCost(key, costtype) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        if (typeof costtype === 'string')
            costtype = misc.getHashKey(costtype);
        return ItemdatabaseFilloutAcquireCost(key, costtype);
    }
    itemdatabase.filloutAcquireCost = filloutAcquireCost;
    /**
     * No comment provided
     *
     * Hash: 0x121D2005DD64496B | Since: 1207
     */
    function filloutAwardItemInfo(award, index) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return ItemdatabaseFilloutAwardItemInfo(award, index);
    }
    itemdatabase.filloutAwardItemInfo = filloutAwardItemInfo;
    /**
     * No comment provided
     *
     * Hash: 0xB542632693D53408 | Since: 1232
     */
    function filloutBundle(bundle, costtype, index) {
        if (typeof bundle === 'string')
            bundle = misc.getHashKey(bundle);
        if (typeof costtype === 'string')
            costtype = misc.getHashKey(costtype);
        return ItemdatabaseFilloutBundle(bundle, costtype, index);
    }
    itemdatabase.filloutBundle = filloutBundle;
    /**
     * No comment provided
     *
     * Hash: 0xB52E20F6767A09A2 | Since: 1207
     */
    function filloutBuyAwardAcquireCosts(award) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return ItemdatabaseFilloutBuyAwardAcquireCosts(award, 0);
    }
    itemdatabase.filloutBuyAwardAcquireCosts = filloutBuyAwardAcquireCosts;
    /**
     * No comment provided
     *
     * Hash: 0xAD73B614DF26CF8A | Since: 1232
     */
    function filloutItem(key, costtype, index) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        if (typeof costtype === 'string')
            costtype = misc.getHashKey(costtype);
        return ItemdatabaseFilloutItem(key, costtype, index);
    }
    itemdatabase.filloutItem = filloutItem;
    /**
     * No comment provided
     *
     * Hash: 0x9379BE60DC55BBE6 | Since: 1207
     */
    function filloutItemEffectIds(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutItemEffectIds(key);
    }
    itemdatabase.filloutItemEffectIds = filloutItemEffectIds;
    /**
     * No comment provided
     *
     * Hash: 0x60614A0AB580A2B5 | Since: 1207
     */
    function filloutModifier(key, index) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutModifier(key, index);
    }
    itemdatabase.filloutModifier = filloutModifier;
    /**
     * No comment provided
     *
     * Hash: 0x40C5D95818823C94 | Since: 1207
     */
    function filloutPriceModifierByKey(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutPriceModifierByKey(key);
    }
    itemdatabase.filloutPriceModifierByKey = filloutPriceModifierByKey;
    /**
     * No comment provided
     *
     * Hash: 0x4776EFD78F75C23F | Since: 1207
     */
    function filloutSatchelData(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutSatchelData(key);
    }
    itemdatabase.filloutSatchelData = filloutSatchelData;
    /**
     * Params: sellType = SELL_SHOP_DEFAULT
     *
     * Hash: 0x7A62A2EEDE1C3766 | Since: 1207
     */
    function filloutSellPrice(key, sellType) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        if (typeof sellType === 'string')
            sellType = misc.getHashKey(sellType);
        return ItemdatabaseFilloutSellPrice(key, sellType);
    }
    itemdatabase.filloutSellPrice = filloutSellPrice;
    /**
     * No comment provided
     *
     * Hash: 0x5A11D6EEA17165B0 | Since: 1207
     */
    function filloutTagData(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutTagData(key, 0);
    }
    itemdatabase.filloutTagData = filloutTagData;
    /**
     * No comment provided
     *
     * Hash: 0xB86F7CC2DC67AC60 | Since: 1207
     */
    function filloutUiData(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseFilloutUiData(key);
    }
    itemdatabase.filloutUiData = filloutUiData;
    /**
     * No comment provided
     *
     * Hash: 0x6772A83C67A25775 | Since: 1207
     */
    function getAcquireCost(key, index) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetAcquireCost(key, index);
    }
    itemdatabase.getAcquireCost = getAcquireCost;
    /**
     * Returns the number of <Item>s <acquirecosts> has from the key in catalog_sp.ymt
     *
     * Hash: 0x01FDDAD392D04144 | Since: 1207
     */
    function getAcquireCostsCount(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetAcquireCostsCount(key);
    }
    itemdatabase.getAcquireCostsCount = getAcquireCostsCount;
    /**
     * _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
     * ```
     *
     * ```
     * NativeDB Introduced: v1311
     *
     * Hash: 0x12DF9C58201DD19A | Since: 1311
     */
    function getAwardAcquireCostType() {
        return ItemdatabaseGetAwardAcquireCostType(undefined);
    }
    itemdatabase.getAwardAcquireCostType = getAwardAcquireCostType;
    /**
     * No comment provided
     *
     * Hash: 0xE81D0378A384E755 | Since: 1232
     */
    function getAwardCostModifiers(award) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return ItemdatabaseGetAwardCostModifiers(award);
    }
    itemdatabase.getAwardCostModifiers = getAwardCostModifiers;
    /**
     * Returns iAwardItemCount
     *
     * Hash: 0x3FAA928A79591761 | Since: 1207
     */
    function getAwardItemCount(award) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return ItemdatabaseGetAwardItemCount(award);
    }
    itemdatabase.getAwardItemCount = getAwardItemCount;
    /**
     * No comment provided
     *
     * Hash: 0x891A45960B6B768A | Since: 1207
     */
    function getBundleId(bundle) {
        if (typeof bundle === 'string')
            bundle = misc.getHashKey(bundle);
        return ItemdatabaseGetBundleId(bundle);
    }
    itemdatabase.getBundleId = getBundleId;
    /**
     * No comment provided
     *
     * Hash: 0x3332695B01015DF9 | Since: 1207
     */
    function getBundleItemCount(bundleId) {
        return ItemdatabaseGetBundleItemCount(bundleId);
    }
    itemdatabase.getBundleItemCount = getBundleItemCount;
    /**
     * No comment provided
     *
     * Hash: 0x5D48A77E4B668B57 | Since: 1207
     */
    function getBundleItemInfo(bundleId, index) {
        return ItemdatabaseGetBundleItemInfo(bundleId, index);
    }
    itemdatabase.getBundleItemInfo = getBundleItemInfo;
    /**
     * Returns (collection?) size/index (?)
     * _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
     *
     * Hash: 0xD389A2549C4EFB30 | Since: 1207
     */
    function getCollectionSize(collectionId) {
        return ItemdatabaseGetCollectionSize(collectionId);
    }
    itemdatabase.getCollectionSize = getCollectionSize;
    /**
     * Params: p2 can be a component item hash
     *
     * Hash: 0x8750F69A720C2E41 | Since: 1207
     */
    function getComponentItem(collectionId, index) {
        return ItemdatabaseGetComponentItem(collectionId, index);
    }
    itemdatabase.getComponentItem = getComponentItem;
    /**
     * No comment provided
     *
     * Hash: 0x2970D1D6BFCF9B46 | Since: 1207
     */
    function getFitsSlotCount(category) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return ItemdatabaseGetFitsSlotCount(category);
    }
    itemdatabase.getFitsSlotCount = getFitsSlotCount;
    /**
     * No comment provided
     *
     * Hash: 0x77210C146CED5261 | Since: 1207
     */
    function getFitsSlotInfo(category, index) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return ItemdatabaseGetFitsSlotInfo(category, index);
    }
    itemdatabase.getFitsSlotInfo = getFitsSlotInfo;
    /**
     * No comment provided
     *
     * Hash: 0x44915068579D7710 | Since: 1207
     */
    function getHasSlotCount(category) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return ItemdatabaseGetHasSlotCount(category);
    }
    itemdatabase.getHasSlotCount = getHasSlotCount;
    /**
     * No comment provided
     *
     * Hash: 0x8A9BD0DB7E8376CF | Since: 1207
     */
    function getHasSlotInfo(category, index) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return ItemdatabaseGetHasSlotInfo(category, index);
    }
    itemdatabase.getHasSlotInfo = getHasSlotInfo;
    /**
     * No comment provided
     *
     * Hash: 0xF4452CE83118C738 | Since: 1207
     */
    function getItemPathset(key, defaultPathset) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        if (typeof defaultPathset === 'string')
            defaultPathset = misc.getHashKey(defaultPathset);
        return ItemdatabaseGetItemPathset(key, defaultPathset);
    }
    itemdatabase.getItemPathset = getItemPathset;
    /**
     * No comment provided
     *
     * Hash: 0x4EB37AAB79AB0C48 | Since: 1207
     */
    function getItemPriceModifiers(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetItemPriceModifiers(key);
    }
    itemdatabase.getItemPriceModifiers = getItemPriceModifiers;
    /**
     * No comment provided
     *
     * Hash: 0x6111B8F9413F413A | Since: 1207
     */
    function getItemTagType(item, tag) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        if (typeof tag === 'string')
            tag = misc.getHashKey(tag);
        return ItemdatabaseGetItemTagType(item, tag);
    }
    itemdatabase.getItemTagType = getItemTagType;
    /**
     * Returns an alternative cost hash to COST_SHOP_DEFAULT
     *
     * Hash: 0xCB92EC9C004732B4 | Since: 1207
     */
    function getModifiedPrice(key, index) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetModifiedPrice(key, index);
    }
    itemdatabase.getModifiedPrice = getModifiedPrice;
    /**
     * No comment provided
     *
     * Hash: 0x5AAAF40E9B224F5E | Since: 1207
     */
    function getNumberOfModifiedPrices(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetNumberOfModifiedPrices(key);
    }
    itemdatabase.getNumberOfModifiedPrices = getNumberOfModifiedPrices;
    /**
     * No comment provided
     *
     * Hash: 0x1289D8315235856D | Since: 1207
     */
    function getNumberOfModifiers(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetNumberOfModifiers(key);
    }
    itemdatabase.getNumberOfModifiers = getNumberOfModifiers;
    /**
     * _ITEMDATABASE_GET_* - _ITEMDATABASE_IS_*
     *
     * Hash: 0xEF254F1A4C08B7E6 | Since: 1207
     */
    function getPriorityAccessAward(award) {
        if (typeof award === 'string')
            award = misc.getHashKey(award);
        return ItemdatabaseGetPriorityAccessAward(award);
    }
    itemdatabase.getPriorityAccessAward = getPriorityAccessAward;
    /**
     * No comment provided
     *
     * Hash: 0xC568B1A0F17C7025 | Since: 1207
     */
    function getShopInventoriesItemsCount(shopType) {
        if (typeof shopType === 'string')
            shopType = misc.getHashKey(shopType);
        return ItemdatabaseGetShopInventoriesItemsCount(shopType);
    }
    itemdatabase.getShopInventoriesItemsCount = getShopInventoriesItemsCount;
    /**
     * No comment provided
     *
     * Hash: 0x4A79B41B4EB91F4E | Since: 1207
     */
    function getShopInventoriesItemInfo(shopType, index) {
        if (typeof shopType === 'string')
            shopType = misc.getHashKey(shopType);
        return ItemdatabaseGetShopInventoriesItemInfo(shopType, index);
    }
    itemdatabase.getShopInventoriesItemInfo = getShopInventoriesItemInfo;
    /**
     * Same Native Function as 0x17721003A66C72BF
     *
     * Hash: 0xCFB06801F5099B25 | Since: 1207
     */
    function getShopInventoriesItemInfoByKey(shopType, key) {
        if (typeof shopType === 'string')
            shopType = misc.getHashKey(shopType);
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetShopInventoriesItemInfoByKey(shopType, key);
    }
    itemdatabase.getShopInventoriesItemInfoByKey = getShopInventoriesItemInfoByKey;
    /**
     * No comment provided
     *
     * Hash: 0x76C752D788A76813 | Since: 1207
     */
    function getShopInventoriesRequirementGroupInfo(shopType, key, index) {
        if (typeof shopType === 'string')
            shopType = misc.getHashKey(shopType);
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetShopInventoriesRequirementGroupInfo(shopType, key, index);
    }
    itemdatabase.getShopInventoriesRequirementGroupInfo = getShopInventoriesRequirementGroupInfo;
    /**
     * No comment provided
     *
     * Hash: 0xE0EA5C031AE5539F | Since: 1207
     */
    function getShopInventoriesRequirementInfo(shopType, key, groupIndex, index) {
        if (typeof shopType === 'string')
            shopType = misc.getHashKey(shopType);
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseGetShopInventoriesRequirementInfo(shopType, key, groupIndex, index);
    }
    itemdatabase.getShopInventoriesRequirementInfo = getShopInventoriesRequirementInfo;
    /**
     * No comment provided
     *
     * Hash: 0x66A6D76B6BB999B4 | Since: 1207
     */
    function getShopLayoutInfo(layout) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        return ItemdatabaseGetShopLayoutInfo(layout);
    }
    itemdatabase.getShopLayoutInfo = getShopLayoutInfo;
    /**
     * No comment provided
     *
     * Hash: 0xD66114469978B55B | Since: 1207
     */
    function getShopLayoutMenuInfoById(layout, menu) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        if (typeof menu === 'string')
            menu = misc.getHashKey(menu);
        return ItemdatabaseGetShopLayoutMenuInfoById(layout, menu);
    }
    itemdatabase.getShopLayoutMenuInfoById = getShopLayoutMenuInfoById;
    /**
     * No comment provided
     *
     * Hash: 0xF04247092F193B75 | Since: 1207
     */
    function getShopLayoutMenuInfoByIndex(layout, menu, index) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        if (typeof menu === 'string')
            menu = misc.getHashKey(menu);
        return ItemdatabaseGetShopLayoutMenuInfoByIndex(layout, menu, index);
    }
    itemdatabase.getShopLayoutMenuInfoByIndex = getShopLayoutMenuInfoByIndex;
    /**
     * No comment provided
     *
     * Hash: 0x9A60570657A7B635 | Since: 1207
     */
    function getShopLayoutMenuPageKey(layout, menu, index) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        if (typeof menu === 'string')
            menu = misc.getHashKey(menu);
        return ItemdatabaseGetShopLayoutMenuPageKey(layout, menu, index);
    }
    itemdatabase.getShopLayoutMenuPageKey = getShopLayoutMenuPageKey;
    /**
     * No comment provided
     *
     * Hash: 0xB347C100DF0C9B7F | Since: 1207
     */
    function getShopLayoutPageInfoByKey(layout, pageKey) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        if (typeof pageKey === 'string')
            pageKey = misc.getHashKey(pageKey);
        return ItemdatabaseGetShopLayoutPageInfoByKey(layout, pageKey);
    }
    itemdatabase.getShopLayoutPageInfoByKey = getShopLayoutPageInfoByKey;
    /**
     * No comment provided
     *
     * Hash: 0xF32BEF578B3DBAE8 | Since: 1207
     */
    function getShopLayoutPageItemKey(layout, pageKey, index) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        if (typeof pageKey === 'string')
            pageKey = misc.getHashKey(pageKey);
        return ItemdatabaseGetShopLayoutPageItemKey(layout, pageKey, index);
    }
    itemdatabase.getShopLayoutPageItemKey = getShopLayoutPageItemKey;
    /**
     * No comment provided
     *
     * Hash: 0x86FCB565CCA0CFA7 | Since: 1207
     */
    function getShopLayoutRootMenuInfo(layout, index) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        return ItemdatabaseGetShopLayoutRootMenuInfo(layout, index);
    }
    itemdatabase.getShopLayoutRootMenuInfo = getShopLayoutRootMenuInfo;
    /**
     * Params: mode is 0
     *
     * Hash: 0x4308812A6E9CA62E | Since: 1207
     */
    function isBundleValid(bundle, mode) {
        if (typeof bundle === 'string')
            bundle = misc.getHashKey(bundle);
        return ItemdatabaseIsBundleValid(bundle, mode);
    }
    itemdatabase.isBundleValid = isBundleValid;
    /**
     * No comment provided
     *
     * Hash: 0x337F88E3A063995E | Since: 1207
     */
    function isIntrinsicItem(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseIsIntrinsicItem(key);
    }
    itemdatabase.isIntrinsicItem = isIntrinsicItem;
    /**
     * Params: mode is 0
     *
     * Hash: 0x6D5D51B188333FD1 | Since: 1207
     */
    function isKeyValid(key, mode) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseIsKeyValid(key, mode);
    }
    itemdatabase.isKeyValid = isKeyValid;
    /**
     * No comment provided
     *
     * Hash: 0x337F88E3A063995F | Since: 1207
     */
    function isOverpoweredItem(key) {
        if (typeof key === 'string')
            key = misc.getHashKey(key);
        return ItemdatabaseIsOverpoweredItem(key);
    }
    itemdatabase.isOverpoweredItem = isOverpoweredItem;
    /**
     * No comment provided
     *
     * Hash: 0x00B9507D8E1D8716 | Since: 1207
     */
    function isShopKeyValid(shopType) {
        if (typeof shopType === 'string')
            shopType = misc.getHashKey(shopType);
        return ItemdatabaseIsShopKeyValid(shopType);
    }
    itemdatabase.isShopKeyValid = isShopKeyValid;
    /**
     * No comment provided
     *
     * Hash: 0x3AFE5182C45A84F6 | Since: 1207
     */
    function isShopLayoutKeyValid(layout) {
        if (typeof layout === 'string')
            layout = misc.getHashKey(layout);
        return ItemdatabaseIsShopLayoutKeyValid(layout);
    }
    itemdatabase.isShopLayoutKeyValid = isShopLayoutKeyValid;
    /**
     * Returns docData.iNumTotalLabelTypes
     *
     * Hash: 0xCEC6A41E8910486A | Since: 1207
     */
    function localizationGetNumLabelTypes() {
        return ItemdatabaseLocalizationGetNumLabelTypes(undefined);
    }
    itemdatabase.localizationGetNumLabelTypes = localizationGetNumLabelTypes;
    /**
     * Returns iNumValuesForType
     *
     * Hash: 0x49885D82A13EEAEA | Since: 1207
     */
    function localizationGetNumValues() {
        return ItemdatabaseLocalizationGetNumValues(undefined, undefined);
    }
    itemdatabase.localizationGetNumValues = localizationGetNumValues;
    /**
     * Returns LabelType
     *
     * Hash: 0xCABF5D41D0073D4A | Since: 1207
     */
    function localizationGetType() {
        return ItemdatabaseLocalizationGetType(undefined, undefined);
    }
    itemdatabase.localizationGetType = localizationGetType;
    /**
     * No comment provided
     *
     * Hash: 0x9AE5610FDCED6EA7 | Since: 1207
     */
    function localizationGetValue(label) {
        if (typeof label === 'string')
            label = misc.getHashKey(label);
        return ItemdatabaseLocalizationGetValue(undefined, label, undefined);
    }
    itemdatabase.localizationGetValue = localizationGetValue;
    /**
     * No comment provided
     *
     * Hash: 0xCBB7B6EDFA933ADE | Since: 1207
     */
    function releaseItemCollection(collectionId) {
        return ItemdatabaseReleaseItemCollection(collectionId);
    }
    itemdatabase.releaseItemCollection = releaseItemCollection;
})(itemdatabase || (itemdatabase = {}));
export var itemset;
(function (itemset_1) {
    /**
     * No comment provided
     *
     * Hash: 0xABE74510883C7950 | Since: 1207
     */
    function addTo(entity, itemset) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return AddToItemset(_entity, itemset);
    }
    itemset_1.addTo = addTo;
    /**
     * No comment provided
     *
     * Hash: 0x85F3A86CA9021FB0 | Since: 1207
     */
    function clean(itemset) {
        CleanItemset(itemset);
    }
    itemset_1.clean = clean;
    /**
     * No comment provided
     *
     * Hash: 0xA1AF16083320065A | Since: 1207
     */
    function create() {
        return CreateItemset(false);
    }
    itemset_1.create = create;
    /**
     * No comment provided
     *
     * Hash: 0x712BC69F10549B92 | Since: 1207
     */
    function destroy(itemset) {
        DestroyItemset(itemset);
    }
    itemset_1.destroy = destroy;
    /**
     * No comment provided
     *
     * Hash: 0x275A2E2C0FAB7612 | Since: 1207
     */
    function getIndexedItemIn(index, itemset) {
        return GetIndexedItemInItemset(index, itemset);
    }
    itemset_1.getIndexedItemIn = getIndexedItemIn;
    /**
     * No comment provided
     *
     * Hash: 0x9FC3CDB5CE815901 | Since: 1207
     */
    function getIndexedScenarioPointIndexIn(index, itemset) {
        return GetIndexedScenarioPointIndexInItemset(index, itemset);
    }
    itemset_1.getIndexedScenarioPointIndexIn = getIndexedScenarioPointIndexIn;
    /**
     * No comment provided
     *
     * Hash: 0x55F2E375AC6018A9 | Since: 1207
     */
    function getSize(itemset) {
        return GetItemsetSize(itemset);
    }
    itemset_1.getSize = getSize;
    /**
     * No comment provided
     *
     * Hash: 0xD1503C2EE2FE688C | Since: 1207
     */
    function isIn(entity, itemset) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsInItemset(_entity, itemset);
    }
    itemset_1.isIn = isIn;
    /**
     * No comment provided
     *
     * Hash: 0xD30765D153EF5C76 | Since: 1207
     */
    function isValid(itemset) {
        return IsItemsetValid(itemset);
    }
    itemset_1.isValid = isValid;
    /**
     * No comment provided
     *
     * Hash: 0xC5BAA432B429DC24 | Since: 1207
     */
    function removeFrom(entity, itemset) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RemoveFromItemset(_entity, itemset);
    }
    itemset_1.removeFrom = removeFrom;
    /**
     * No comment provided
     *
     * Hash: 0x20A4BF0E09BEE146 | Since: 1207
     */
    function clear(itemset) {
        ClearItemset(itemset);
    }
    itemset_1.clear = clear;
})(itemset || (itemset = {}));
export var law;
(function (law) {
    /**
     * No comment provided
     *
     * Hash: 0x0E3BDEED21BEB945 | Since: 1207
     */
    function addBounty(player, itemValueAmount) {
        const _player = player instanceof Player ? player.localId() : player;
        AddBounty(_player, itemValueAmount);
    }
    law.addBounty = addBounty;
    /**
     * No comment provided
     *
     * Hash: 0x69E181772886F48B | Since: 1207
     */
    function areWitnessesActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return AreWitnessesActive(_player);
    }
    law.areWitnessesActive = areWitnessesActive;
    /**
     * No comment provided
     *
     * Hash: 0xC76F252371150D9A | Since: 1207
     */
    function clearBounty(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ClearBounty(_player);
    }
    law.clearBounty = clearBounty;
    /**
     * No comment provided
     *
     * Hash: 0xBCC6DC59E32A2BDC | Since: 1207
     */
    function clearPlayerPastCrimes(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ClearPlayerPastCrimes(_player);
    }
    law.clearPlayerPastCrimes = clearPlayerPastCrimes;
    /**
     * No comment provided
     *
     * Hash: 0x062B4A4A3396351D | Since: 1207
     */
    function clearWantedScore(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ClearWantedScore(_player);
    }
    law.clearWantedScore = clearWantedScore;
    /**
     * No comment provided
     *
     * Hash: 0x54310AAB97B92816 | Since: 1207
     */
    function getBounty(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetBounty(_player);
    }
    law.getBounty = getBounty;
    /**
     * No comment provided
     *
     * Hash: 0x532C5FDDB986EE5C | Since: 1207
     */
    function getPlayerRegisteredCrime(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerRegisteredCrime(_player, 0);
    }
    law.getPlayerRegisteredCrime = getPlayerRegisteredCrime;
    /**
     * No comment provided
     *
     * Hash: 0xDD5FD601481F648B | Since: 1207
     */
    function getWantedScore(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetWantedScore(_player);
    }
    law.getWantedScore = getWantedScore;
    /**
     * No comment provided
     *
     * Hash: 0xAD401C63158ACBAA | Since: 1207
     */
    function isIncidentActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsLawIncidentActive(_player);
    }
    law.isIncidentActive = isIncidentActive;
    /**
     * Returns amount of suppressed crimes to be used later in the function MPINTRO_CRIME_MONITOR_MAINTAIN
     *
     * Hash: 0xC08E804C91F47C80 | Since: 1207
     */
    function numCrimesSuppressed(player, crimeType) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        return NumCrimesSuppressed(_player, crimeType);
    }
    law.numCrimesSuppressed = numCrimesSuppressed;
    /**
     * No comment provided
     *
     * Hash: 0x2728C77FBC4B9796 | Since: 1207
     */
    function resetWantedForNewIncident(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ResetWantedForNewIncident(_player);
    }
    law.resetWantedForNewIncident = resetWantedForNewIncident;
    /**
     * No comment provided
     *
     * Hash: 0x093A9D1F72DF0D19 | Since: 1207
     */
    function setBounty(player, amount) {
        const _player = player instanceof Player ? player.localId() : player;
        SetBounty(_player, amount);
    }
    law.setBounty = setBounty;
    /**
     * No comment provided
     *
     * Hash: 0xDE5FAA741A781F73 | Since: 1207
     */
    function setDisableDisturbanceCrimes(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDisableDisturbanceCrimes(_player, false);
    }
    law.setDisableDisturbanceCrimes = setDisableDisturbanceCrimes;
    /**
     * Default range is 1.0f
     *
     * Hash: 0xFEC85339AACA2A35 | Since: 1207
     */
    function setSenseRangeModifier(player, range) {
        const _player = player instanceof Player ? player.localId() : player;
        SetLawSenseRangeModifier(_player, range);
    }
    law.setSenseRangeModifier = setSenseRangeModifier;
    /**
     * No comment provided
     *
     * Hash: 0xE0FA74AA3CCE650B | Since: 1207
     */
    function setPlayerArrestedInRegion(player, lawRegionHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof lawRegionHash === 'string')
            lawRegionHash = misc.getHashKey(lawRegionHash);
        SetPlayerArrestedInRegion(_player, lawRegionHash);
    }
    law.setPlayerArrestedInRegion = setPlayerArrestedInRegion;
    /**
     * No comment provided
     *
     * Hash: 0x73BAD7B2F2DB50DE | Since: 1207
     */
    function setPlayerTurnedInBountyInRegion(player, lawRegionHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof lawRegionHash === 'string')
            lawRegionHash = misc.getHashKey(lawRegionHash);
        SetPlayerTurnedInBountyInRegion(_player, lawRegionHash);
    }
    law.setPlayerTurnedInBountyInRegion = setPlayerTurnedInBountyInRegion;
    /**
     * No comment provided
     *
     * Hash: 0x362086B911657B1A | Since: 1207
     */
    function setPostponeDisturbanceCrimesDuringCombat(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPostponeDisturbanceCrimesDuringCombat(_player, false);
    }
    law.setPostponeDisturbanceCrimesDuringCombat = setPostponeDisturbanceCrimesDuringCombat;
    /**
     * No comment provided
     *
     * Hash: 0xA80FF73F772ACF6A | Since: 1207
     */
    function setWantedScore(player, intensity) {
        const _player = player instanceof Player ? player.localId() : player;
        SetWantedScore(_player, intensity);
    }
    law.setWantedScore = setWantedScore;
    /**
     * crimeType: see _REPORT_CRIME
     *
     * Hash: 0x785177E4D57D7389 | Since: 1207
     */
    function suppressCrimeThisFrame(player, crimeType) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        SuppressCrimeThisFrame(_player, crimeType, 0, 0, 0);
    }
    law.suppressCrimeThisFrame = suppressCrimeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x00DB0BC05E3FAA4E | Since: 1207
     */
    function _0x00DB0BC05E3FAA4E(ped, bitset) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x00DB0BC05E3FAA4E', _ped, bitset);
    }
    law._0x00DB0BC05E3FAA4E = _0x00DB0BC05E3FAA4E;
    /**
     * No comment provided
     *
     * Hash: 0x018F30D762E62DF8 | Since: 1207
     */
    function _0x018F30D762E62DF8(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x018F30D762E62DF8', _ped);
    }
    law._0x018F30D762E62DF8 = _0x018F30D762E62DF8;
    /**
     * Used in SP only, called together with 0x55F37F5F3F2475E1 & CLEAR_WANTED_SCORE
     * _REPORT_*
     *
     * Hash: 0x07E8B8B20570271C | Since: 1207
     */
    function _0x07E8B8B20570271C(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x07E8B8B20570271C', _player);
    }
    law._0x07E8B8B20570271C = _0x07E8B8B20570271C;
    /**
     * Only used in net_fetch R* Script
     *
     * Hash: 0x0BDFEBCF40A5F7E3 | Since: 1207
     */
    function _0x0BDFEBCF40A5F7E3(crimeType) {
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        return Citizen.invokeNative('0x0BDFEBCF40A5F7E3', crimeType);
    }
    law._0x0BDFEBCF40A5F7E3 = _0x0BDFEBCF40A5F7E3;
    /**
     * No comment provided
     *
     * Hash: 0x0C392DB374655176 | Since: 1207
     */
    function _0x0C392DB374655176(pos, itemSet) {
        Citizen.invokeNative('0x0C392DB374655176', pos.x, pos.y, pos.z, 0, itemSet);
    }
    law._0x0C392DB374655176 = _0x0C392DB374655176;
    /**
     * Only used in sisikapenitentiary R* Script: name = SISIKA
     * _IS_G* or _IS_H*
     *
     * Hash: 0x0DBACA9C38C9A686 | Since: 1207
     */
    function _0x0DBACA9C38C9A686(name) {
        return Citizen.invokeNative('0x0DBACA9C38C9A686', name);
    }
    law._0x0DBACA9C38C9A686 = _0x0DBACA9C38C9A686;
    /**
     * No comment provided
     *
     * Hash: 0x0EAF918F751F27BA | Since: 1207
     */
    function _0x0EAF918F751F27BA(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x0EAF918F751F27BA', _ped);
    }
    law._0x0EAF918F751F27BA = _0x0EAF918F751F27BA;
    /**
     * No comment provided
     *
     * Hash: 0x0F230DE0DDBE3649 | Since: 1207
     */
    function _0x0F230DE0DDBE3649(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x0F230DE0DDBE3649', _player);
    }
    law._0x0F230DE0DDBE3649 = _0x0F230DE0DDBE3649;
    /**
     * No comment provided
     *
     * Hash: 0x148E7AC8141C9E64 | Since: 1207
     */
    function _0x148E7AC8141C9E64(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x148E7AC8141C9E64', _player);
    }
    law._0x148E7AC8141C9E64 = _0x148E7AC8141C9E64;
    /**
     * Params: p0 either 0, 1 or -1 in R* Scripts
     * Set to 0 called together with _SUPPRESS_CRIME
     *
     * Hash: 0x15ABD5004CAD2D99 | Since: 1207
     */
    function _0x15ABD5004CAD2D99() {
        Citizen.invokeNative('0x15ABD5004CAD2D99', 0);
    }
    law._0x15ABD5004CAD2D99 = _0x15ABD5004CAD2D99;
    /**
     * Only used in resapwn_dump_body R* Script
     *
     * Hash: 0x2001687F9562FD9D | Since: 1207
     */
    function _0x2001687F9562FD9D() {
        Citizen.invokeNative('0x2001687F9562FD9D', undefined);
    }
    law._0x2001687F9562FD9D = _0x2001687F9562FD9D;
    /**
     * No comment provided
     *
     * Hash: 0x21213B833EF4DAE7 | Since: 1207
     */
    function _0x21213B833EF4DAE7(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x21213B833EF4DAE7', _player, _ped);
    }
    law._0x21213B833EF4DAE7 = _0x21213B833EF4DAE7;
    /**
     * Used in SP only
     * _REPORT_*
     *
     * Hash: 0x22741652985C84D0 | Since: 1207
     */
    function _0x22741652985C84D0(player, lawRegionHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof lawRegionHash === 'string')
            lawRegionHash = misc.getHashKey(lawRegionHash);
        Citizen.invokeNative('0x22741652985C84D0', _player, lawRegionHash);
    }
    law._0x22741652985C84D0 = _0x22741652985C84D0;
    /**
     * No comment provided
     *
     * Hash: 0x26934083D3F2579C | Since: 1207
     */
    function _0x26934083D3F2579C(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x26934083D3F2579C', _player);
    }
    law._0x26934083D3F2579C = _0x26934083D3F2579C;
    /**
     * Only used in R* Script fm_mission_controller
     * _CLEAR_WANTED_*
     *
     * Hash: 0x292AD61A33A7A485 | Since: 1207
     */
    function _0x292AD61A33A7A485() {
        Citizen.invokeNative('0x292AD61A33A7A485');
    }
    law._0x292AD61A33A7A485 = _0x292AD61A33A7A485;
    /**
     * No comment provided
     *
     * Hash: 0x29CD4896ECB66C12 | Since: 1207
     */
    function _0x29CD4896ECB66C12() {
        Citizen.invokeNative('0x29CD4896ECB66C12');
    }
    law._0x29CD4896ECB66C12 = _0x29CD4896ECB66C12;
    /**
     * Only used in R* SP Script av_amb_camp_robbery
     *
     * Hash: 0x318F0F9A4426CFA2 | Since: 1207
     */
    function _0x318F0F9A4426CFA2(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x318F0F9A4426CFA2', _ped);
    }
    law._0x318F0F9A4426CFA2 = _0x318F0F9A4426CFA2;
    /**
     * No comment provided
     *
     * Hash: 0x331D349E0380B097 | Since: 1207
     */
    function _0x331D349E0380B097() {
        Citizen.invokeNative('0x331D349E0380B097', undefined);
    }
    law._0x331D349E0380B097 = _0x331D349E0380B097;
    /**
     * No comment provided
     *
     * Hash: 0x3738B784DDD35CC6 | Since: 1207
     */
    function _0x3738B784DDD35CC6(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x3738B784DDD35CC6', _player, 0, 0);
    }
    law._0x3738B784DDD35CC6 = _0x3738B784DDD35CC6;
    /**
     * No comment provided
     *
     * Hash: 0x3852237A3D9DF145 | Since: 1207
     */
    function _0x3852237A3D9DF145() {
        Citizen.invokeNative('0x3852237A3D9DF145', 0);
    }
    law._0x3852237A3D9DF145 = _0x3852237A3D9DF145;
    /**
     * _CLEAR*
     *
     * Hash: 0x390710D2DAFA6BFF | Since: 1207
     */
    function _0x390710D2DAFA6BFF(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x390710D2DAFA6BFF', _player, false);
    }
    law._0x390710D2DAFA6BFF = _0x390710D2DAFA6BFF;
    /**
     * No comment provided
     *
     * Hash: 0x3D2674828A4E6B3C | Since: 1207
     */
    function _0x3D2674828A4E6B3C() {
        return Citizen.invokeNative('0x3D2674828A4E6B3C');
    }
    law._0x3D2674828A4E6B3C = _0x3D2674828A4E6B3C;
    /**
     * No comment provided
     *
     * Hash: 0x40851BCC33ACD9AB | Since: 1207
     */
    function _0x40851BCC33ACD9AB(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x40851BCC33ACD9AB', _ped);
    }
    law._0x40851BCC33ACD9AB = _0x40851BCC33ACD9AB;
    /**
     * No comment provided
     *
     * Hash: 0x522F74636DF10201 | Since: 1207
     */
    function _0x522F74636DF10201(player, itemSet) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x522F74636DF10201', _player, itemSet);
    }
    law._0x522F74636DF10201 = _0x522F74636DF10201;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0x5E6F375CA101C108 | Since: 1207
     */
    function _0x5E6F375CA101C108(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x5E6F375CA101C108', _player, false);
    }
    law._0x5E6F375CA101C108 = _0x5E6F375CA101C108;
    /**
     * No comment provided
     *
     * Hash: 0x61B98367D93F012F | Since: 1207
     */
    function _0x61B98367D93F012F(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x61B98367D93F012F', _player);
    }
    law._0x61B98367D93F012F = _0x61B98367D93F012F;
    /**
     * No comment provided
     *
     * Hash: 0x6ABC50979655BEE7 | Since: 1207
     */
    function _0x6ABC50979655BEE7(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x6ABC50979655BEE7', _player, undefined);
    }
    law._0x6ABC50979655BEE7 = _0x6ABC50979655BEE7;
    /**
     * Only used in shoprobberies
     *
     * Hash: 0x7351DA734F989F4E | Since: 1207
     */
    function _0x7351DA734F989F4E(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x7351DA734F989F4E', _entity);
    }
    law._0x7351DA734F989F4E = _0x7351DA734F989F4E;
    /**
     * No comment provided
     *
     * Hash: 0x7803436E68C32B26 | Since: 1207
     */
    function _0x7803436E68C32B26() {
        Citizen.invokeNative('0x7803436E68C32B26');
    }
    law._0x7803436E68C32B26 = _0x7803436E68C32B26;
    /**
     * _SET_DISPATCH_*
     *
     * Hash: 0x7EF2A2FE38D74456 | Since: 1207
     */
    function _0x7EF2A2FE38D74456(flag) {
        Citizen.invokeNative('0x7EF2A2FE38D74456', flag, false);
    }
    law._0x7EF2A2FE38D74456 = _0x7EF2A2FE38D74456;
    /**
     * Only used in R* Script long_update
     * Returns a value thats being subtracted from GET_GAME_TIMER
     *
     * Hash: 0x7FC667F6DDFBCDCC | Since: 1207
     */
    function _0x7FC667F6DDFBCDCC(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x7FC667F6DDFBCDCC', _player);
    }
    law._0x7FC667F6DDFBCDCC = _0x7FC667F6DDFBCDCC;
    /**
     * Only used in rcm_gunslinger1_1 R* Script: p0 = 0
     *
     * Hash: 0x82F11E1296996574 | Since: 1207
     */
    function _0x82F11E1296996574() {
        Citizen.invokeNative('0x82F11E1296996574', 0);
    }
    law._0x82F11E1296996574 = _0x82F11E1296996574;
    /**
     * No comment provided
     *
     * Hash: 0x856CE8FDE2416602 | Since: 1207
     */
    function _0x856CE8FDE2416602(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x856CE8FDE2416602', _ped);
    }
    law._0x856CE8FDE2416602 = _0x856CE8FDE2416602;
    /**
     * No comment provided
     *
     * Hash: 0x89E005B1662F6E48 | Since: 1207
     */
    function _0x89E005B1662F6E48(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x89E005B1662F6E48', _player, 0, 0);
    }
    law._0x89E005B1662F6E48 = _0x89E005B1662F6E48;
    /**
     * No comment provided
     *
     * Hash: 0x95878B13E272EF1F | Since: 1207
     */
    function _0x95878B13E272EF1F(entity, ped, pos, crimeType) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        return Citizen.invokeNative('0x95878B13E272EF1F', _entity, _ped, false, pos.x, pos.y, pos.z, crimeType);
    }
    law._0x95878B13E272EF1F = _0x95878B13E272EF1F;
    /**
     * Only used in loanshark_miner1 R* Script: name = ANNESBURG_MINES
     *
     * Hash: 0x9772395CC73E8D1F | Since: 1207
     */
    function _0x9772395CC73E8D1F(ped, name) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9772395CC73E8D1F', _ped, name);
    }
    law._0x9772395CC73E8D1F = _0x9772395CC73E8D1F;
    /**
     * No comment provided
     *
     * Hash: 0x987BE590FB9D41E5 | Since: 1207
     */
    function _0x987BE590FB9D41E5() {
        Citizen.invokeNative('0x987BE590FB9D41E5', false);
    }
    law._0x987BE590FB9D41E5 = _0x987BE590FB9D41E5;
    /**
     * No comment provided
     *
     * Hash: 0x9945A3E2528A02E8 | Since: 1207
     */
    function _0x9945A3E2528A02E8(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x9945A3E2528A02E8', _player);
    }
    law._0x9945A3E2528A02E8 = _0x9945A3E2528A02E8;
    /**
     * No comment provided
     *
     * Hash: 0x9B4C564BFA7CFF37 | Since: 1207
     */
    function _0x9B4C564BFA7CFF37() {
        Citizen.invokeNative('0x9B4C564BFA7CFF37', 0);
    }
    law._0x9B4C564BFA7CFF37 = _0x9B4C564BFA7CFF37;
    /**
     * No comment provided
     *
     * Hash: 0x9C5BD8C562565CE6 | Since: 1207
     */
    function _0x9C5BD8C562565CE6() {
        return Citizen.invokeNative('0x9C5BD8C562565CE6');
    }
    law._0x9C5BD8C562565CE6 = _0x9C5BD8C562565CE6;
    /**
     * Only used in act_bankrobbery01 R* Script
     *
     * Hash: 0x9C8A2BF37E966464 | Since: 1207
     */
    function _0x9C8A2BF37E966464(player, itemSet) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x9C8A2BF37E966464', _player, itemSet);
    }
    law._0x9C8A2BF37E966464 = _0x9C8A2BF37E966464;
    /**
     * No comment provided
     *
     * Hash: 0x9D5C9A5A3321B128 | Since: 1207
     */
    function _0x9D5C9A5A3321B128(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x9D5C9A5A3321B128', _player);
    }
    law._0x9D5C9A5A3321B128 = _0x9D5C9A5A3321B128;
    /**
     * Only used in shoprobberies R* Scripts
     *
     * Hash: 0x9EF07CFBB19A9733 | Since: 1207
     */
    function _0x9EF07CFBB19A9733() {
        return Citizen.invokeNative('0x9EF07CFBB19A9733');
    }
    law._0x9EF07CFBB19A9733 = _0x9EF07CFBB19A9733;
    /**
     * No comment provided
     *
     * Hash: 0xB527099D1E1EED49 | Since: 1207
     */
    function _0xB527099D1E1EED49(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xB527099D1E1EED49', _player, 0);
    }
    law._0xB527099D1E1EED49 = _0xB527099D1E1EED49;
    /**
     * Called together with REPORT_POLICE_SPOTTED_PLAYER
     *
     * Hash: 0xBD944A3D36E992DE | Since: 1207
     */
    function _0xBD944A3D36E992DE() {
        Citizen.invokeNative('0xBD944A3D36E992DE');
    }
    law._0xBD944A3D36E992DE = _0xBD944A3D36E992DE;
    /**
     * Only used in rcm_serial_killer1 R* Script
     *
     * Hash: 0xC0DF161950FB101E | Since: 1207
     */
    function _0xC0DF161950FB101E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xC0DF161950FB101E', _ped);
    }
    law._0xC0DF161950FB101E = _0xC0DF161950FB101E;
    /**
     * No comment provided
     *
     * Hash: 0xC310239ACCCF5579 | Since: 1207
     */
    function _0xC310239ACCCF5579() {
        Citizen.invokeNative('0xC310239ACCCF5579');
    }
    law._0xC310239ACCCF5579 = _0xC310239ACCCF5579;
    /**
     * No comment provided
     *
     * Hash: 0xC5EB2755FA25F1E9 | Since: 1207
     */
    function _0xC5EB2755FA25F1E9() {
        Citizen.invokeNative('0xC5EB2755FA25F1E9', false);
    }
    law._0xC5EB2755FA25F1E9 = _0xC5EB2755FA25F1E9;
    /**
     * No comment provided
     *
     * Hash: 0xC687A23E166DCF68 | Since: 1207
     */
    function _0xC687A23E166DCF68() {
        return Citizen.invokeNative('0xC687A23E166DCF68');
    }
    law._0xC687A23E166DCF68 = _0xC687A23E166DCF68;
    /**
     * _GET_DISPATCH_*
     *
     * Hash: 0xC7DC5A0A7DF608CB | Since: 1207
     */
    function _0xC7DC5A0A7DF608CB(flag) {
        return Citizen.invokeNative('0xC7DC5A0A7DF608CB', flag);
    }
    law._0xC7DC5A0A7DF608CB = _0xC7DC5A0A7DF608CB;
    /**
     * No comment provided
     *
     * Hash: 0xCBFB4951F2E3934C | Since: 1207
     */
    function _0xCBFB4951F2E3934C(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xCBFB4951F2E3934C', _player);
    }
    law._0xCBFB4951F2E3934C = _0xCBFB4951F2E3934C;
    /**
     * No comment provided
     *
     * Hash: 0xD6C0A8C7C0B2F82C | Since: 1207
     */
    function _0xD6C0A8C7C0B2F82C(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xD6C0A8C7C0B2F82C', _player, false);
    }
    law._0xD6C0A8C7C0B2F82C = _0xD6C0A8C7C0B2F82C;
    /**
     * Only used in R* SP Scripts
     * Params: p2 either 1 or 2
     *
     * Hash: 0xD7494DED50C6EF52 | Since: 1207
     */
    function _0xD7494DED50C6EF52(player, crimeType) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        Citizen.invokeNative('0xD7494DED50C6EF52', _player, crimeType, 0);
    }
    law._0xD7494DED50C6EF52 = _0xD7494DED50C6EF52;
    /**
     * Only used in R* SP Scripts
     * Params: p1 = true, p2 = false
     *
     * Hash: 0xDA1A9ADC4E3D4B16 | Since: 1207
     */
    function _0xDA1A9ADC4E3D4B16(itemSet) {
        Citizen.invokeNative('0xDA1A9ADC4E3D4B16', itemSet, false, false);
    }
    law._0xDA1A9ADC4E3D4B16 = _0xDA1A9ADC4E3D4B16;
    /**
     * crimeType: see _REPORT_CRIME
     *
     * Hash: 0xDAEFDFDB2AEECE37 | Since: 1207
     */
    function _0xDAEFDFDB2AEECE37(crimeType) {
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        return Citizen.invokeNative('0xDAEFDFDB2AEECE37', crimeType, undefined);
    }
    law._0xDAEFDFDB2AEECE37 = _0xDAEFDFDB2AEECE37;
    /**
     * No comment provided
     *
     * Hash: 0xDCF12B89624AAC96 | Since: 1207
     */
    function _0xDCF12B89624AAC96() {
        Citizen.invokeNative('0xDCF12B89624AAC96', false);
    }
    law._0xDCF12B89624AAC96 = _0xDCF12B89624AAC96;
    /**
     * No comment provided
     *
     * Hash: 0xDDCE8E960D1DE240 | Since: 1207
     */
    function setCantLoseThisResponse(enable) {
        Citizen.invokeNative('0xDDCE8E960D1DE240', enable);
    }
    law.setCantLoseThisResponse = setCantLoseThisResponse;
    /**
     * No comment provided
     *
     * Hash: 0xDEA083C16BB91345 | Since: 1207
     */
    function _0xDEA083C16BB91345() {
        Citizen.invokeNative('0xDEA083C16BB91345');
    }
    law._0xDEA083C16BB91345 = _0xDEA083C16BB91345;
    /**
     * No comment provided
     *
     * Hash: 0xE083BEDA81709891 | Since: 1207
     */
    function _0xE083BEDA81709891(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xE083BEDA81709891', _player);
    }
    law._0xE083BEDA81709891 = _0xE083BEDA81709891;
    /**
     * No comment provided
     *
     * Hash: 0xE4D6E45F491A66CB | Since: 1207
     */
    function _0xE4D6E45F491A66CB(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xE4D6E45F491A66CB', _player, 0);
    }
    law._0xE4D6E45F491A66CB = _0xE4D6E45F491A66CB;
    /**
     * Seems to disable lawmen guarding behaviors (like during a region lockdown). Must be called every frame.
     * Only used in R* SP Scripts, mostly used in train_fast_travel_core
     *
     * Hash: 0xE94B5E938619712E | Since: 1207
     */
    function _0xE94B5E938619712E() {
        Citizen.invokeNative('0xE94B5E938619712E');
    }
    law._0xE94B5E938619712E = _0xE94B5E938619712E;
    /**
     * Only used in R* SP Scripts
     * Params: p1 = 0
     *
     * Hash: 0xE9AC8466ABE484BB | Since: 1207
     */
    function _0xE9AC8466ABE484BB() {
        Citizen.invokeNative('0xE9AC8466ABE484BB', false, undefined);
    }
    law._0xE9AC8466ABE484BB = _0xE9AC8466ABE484BB;
    /**
     * Returns p1 value for 0xE4D6E45F491A66CB
     *
     * Hash: 0xE9EB79CBF9C0F58A | Since: 1207
     */
    function _0xE9EB79CBF9C0F58A(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xE9EB79CBF9C0F58A', _player);
    }
    law._0xE9EB79CBF9C0F58A = _0xE9EB79CBF9C0F58A;
    /**
     * _SET_C* - _SET_D*
     *
     * Hash: 0xEDFC6C1FD1C964F5 | Since: 1207
     */
    function _0xEDFC6C1FD1C964F5(player, crimeType, bounty) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        Citizen.invokeNative('0xEDFC6C1FD1C964F5', _player, crimeType, bounty, 0, 0, false, 0, 0, undefined);
    }
    law._0xEDFC6C1FD1C964F5 = _0xEDFC6C1FD1C964F5;
    /**
     * No comment provided
     *
     * Hash: 0xF46108C50A22B029 | Since: 1207
     */
    function _0xF46108C50A22B029() {
        return Citizen.invokeNative('0xF46108C50A22B029');
    }
    law._0xF46108C50A22B029 = _0xF46108C50A22B029;
    /**
     * No comment provided
     *
     * Hash: 0xF611DE44AEB36A1D | Since: 1207
     */
    function _0xF611DE44AEB36A1D(crimeType) {
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        Citizen.invokeNative('0xF611DE44AEB36A1D', crimeType, false);
    }
    law._0xF611DE44AEB36A1D = _0xF611DE44AEB36A1D;
    /**
     * No comment provided
     *
     * Hash: 0xFFEBE5AA96BC2E4E | Since: 1207
     */
    function _0xFFEBE5AA96BC2E4E(ped, crimeType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        return Citizen.invokeNative('0xFFEBE5AA96BC2E4E', _ped, crimeType, false);
    }
    law._0xFFEBE5AA96BC2E4E = _0xFFEBE5AA96BC2E4E;
    /**
     * No comment provided
     *
     * Hash: 0x10827B5A0AAC56A7 | Since: 1207
     */
    function addWitnessResponse(player, crimeType, pedGroup) {
        const _player = player instanceof Player ? player.localId() : player;
        const _pedGroup = pedGroup instanceof Ped ? pedGroup.handle() : pedGroup;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        AddWitnessResponse(_player, crimeType, _pedGroup);
    }
    law.addWitnessResponse = addWitnessResponse;
    /**
     * Only used in rcm_homerob00 R* Script
     *
     * Hash: 0xECE3C34B270428D5 | Since: 1207
     */
    function areAnyPedsInvestigating() {
        return AreAnyLawPedsInvestigating();
    }
    law.areAnyPedsInvestigating = areAnyPedsInvestigating;
    /**
     * No comment provided
     *
     * Hash: 0xF0FBFB9AB15F7734 | Since: 1207
     */
    function areInvestigatorsActive(player, areInvestigatorsActive) {
        const _player = player instanceof Player ? player.localId() : player;
        return AreInvestigatorsActive(_player, areInvestigatorsActive, undefined);
    }
    law.areInvestigatorsActive = areInvestigatorsActive;
    /**
     * Only used in trainrobbery_ambient R* Script
     *
     * Hash: 0xA22C46F16359471C | Since: 1207
     */
    function arePedsEnabledForTrain() {
        return AreLawPedsEnabledForTrain();
    }
    law.arePedsEnabledForTrain = arePedsEnabledForTrain;
    /**
     * No comment provided
     *
     * Hash: 0x0BB6DE7D23C60626 | Since: 1207
     */
    function areWitnessesPending(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return AreWitnessesPending(_player);
    }
    law.areWitnessesPending = areWitnessesPending;
    /**
     * No comment provided
     *
     * Hash: 0x8F9DE75680275C9F | Since: 1207
     */
    function createGuardZone(name) {
        CreateGuardZone(name);
    }
    law.createGuardZone = createGuardZone;
    /**
     * Returns true when investigation creation was successful
     *
     * Hash: 0x0D4B77E862475ED3 | Since: 1311
     */
    function createGuardZoneForEntity(guardZoneName, entity, pos) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return CreateGuardZoneForEntity(guardZoneName, _entity, pos.x, pos.y, pos.z);
    }
    law.createGuardZoneForEntity = createGuardZoneForEntity;
    /**
     * dispatchResponseHash: see common/data/dispatchresponses/..
     *
     * Hash: 0x75CBF20BA47E4F89 | Since: 1207
     */
    function createDispatchResponseForCoords(pos, dispatchResponseHash) {
        if (typeof dispatchResponseHash === 'string')
            dispatchResponseHash = misc.getHashKey(dispatchResponseHash);
        return CreateLawDispatchResponseForCoords(pos.x, pos.y, pos.z, dispatchResponseHash);
    }
    law.createDispatchResponseForCoords = createDispatchResponseForCoords;
    /**
     * No comment provided
     *
     * Hash: 0x26D558692B25DD95 | Since: 1207
     */
    function disableGuardZone(name) {
        DisableGuardZone(name);
    }
    law.disableGuardZone = disableGuardZone;
    /**
     * No comment provided
     *
     * Hash: 0xC805EB785824F712 | Since: 1207
     */
    function enableDispatch(toggle) {
        EnableDispatchLaw(toggle);
    }
    law.enableDispatch = enableDispatch;
    /**
     * No comment provided
     *
     * Hash: 0x710448D44A64C213 | Since: 1207
     */
    function enableDispatch2(toggle) {
        EnableDispatchLaw2(toggle);
    }
    law.enableDispatch2 = enableDispatch2;
    /**
     * No comment provided
     *
     * Hash: 0x956510F8C36B5C64 | Since: 1207
     */
    function forceOnLocalPlayerImmediately() {
        ForceLawOnLocalPlayerImmediately();
    }
    law.forceOnLocalPlayerImmediately = forceOnLocalPlayerImmediately;
    /**
     * p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
     *
     * Hash: 0x76CF93D4B416B288 | Since: 1207
     */
    function getBountyHunterGlobalCooldown(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return GetBountyHunterGlobalCooldown(p0);
    }
    law.getBountyHunterGlobalCooldown = getBountyHunterGlobalCooldown;
    /**
     * Returns bounty (increment) value
     *
     * Hash: 0x35E5E21F9159849C | Since: 1207
     */
    function getCrimeBountyAmountByType(crimeType) {
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        return GetCrimeBountyAmountByType(crimeType);
    }
    law.getCrimeBountyAmountByType = getCrimeBountyAmountByType;
    /**
     * See _REPORT_CRIME
     *
     * Hash: 0x259CE340A8738814 | Since: 1207
     */
    function getHudPlayerCrimeType(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetHudPlayerCrimeType(_player);
    }
    law.getHudPlayerCrimeType = getHudPlayerCrimeType;
    /**
     * Returns the amount of time (probably in game minutes) since last seen by the law / left the wanted radius
     *
     * Hash: 0x717DA2281DF90855 | Since: 1207
     */
    function getTimeSinceLastSeenBy(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetTimeSinceLastSeenByLaw(_player);
    }
    law.getTimeSinceLastSeenBy = getTimeSinceLastSeenBy;
    /**
     * No comment provided
     *
     * Hash: 0xD743C4293F47AFAD | Since: 1207
     */
    function isGuardPedInvestigating(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsGuardPedInvestigating(_ped);
    }
    law.isGuardPedInvestigating = isGuardPedInvestigating;
    /**
     * No comment provided
     *
     * Hash: 0xF0B67BAD53C35BD9 | Since: 1207
     */
    function witnessResponseTask(pedGroup1, ped, pedGroup2, pos, crimeType) {
        const _pedGroup1 = pedGroup1 instanceof Ped ? pedGroup1.handle() : pedGroup1;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _pedGroup2 = pedGroup2 instanceof Ped ? pedGroup2.handle() : pedGroup2;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        return LawWitnessResponseTask(_pedGroup1, _ped, _pedGroup2, pos.x, pos.y, pos.z, crimeType);
    }
    law.witnessResponseTask = witnessResponseTask;
    /**
     * p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
     *
     * Hash: 0xC61EDEBF16CD9668 | Since: 1207
     */
    function pauseBountyHunterCooldown(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        PauseBountyHunterCooldown(p0, false, undefined);
    }
    law.pauseBountyHunterCooldown = pauseBountyHunterCooldown;
    /**
     * No comment provided
     *
     * Hash: 0x67EBDD958835956C | Since: 1207
     */
    function removeGuardZone(name) {
        RemoveGuardZone(name);
    }
    law.removeGuardZone = removeGuardZone;
    /**
     * crimeType:
     * enum eCrimeType : Hash
     * {
     * CRIME_ACCOMPLICE = 0xAF074F6D,
     * CRIME_ARSON = 0x68134DC7,
     * CRIME_ASSAULT = 0x0BADC882,
     * CRIME_ASSAULT_ANIMAL = 0x18DA55EE,
     * CRIME_ASSAULT_CORPSE = 0x4E5F23F2,
     * CRIME_ASSAULT_HORSE = 0xC4736181,
     * CRIME_ASSAULT_LAW = 0xD7466D7C,
     * CRIME_ASSAULT_LIVESTOCK = 0xCCE1CCBD,
     * CRIME_BANK_ROBBERY = 0x6A1ADE3D,
     * CRIME_BURGLARY = 0xA54C77E0,
     * CRIME_CHEATING = 0xA2FF1145,
     * CRIME_DISTURBANCE = 0x5011F613,
     * CRIME_EXPLOSION = 0x3EBA7A37,
     * CRIME_EXPLOSION_POISON = 0x91D0A0E1,
     * CRIME_GRAVE_ROBBERY = 0x971EA5AF,
     * CRIME_HASSLE = 0x58488776,
     * CRIME_HIT_AND_RUN = 0xFF0A3CC4,
     * CRIME_HIT_AND_RUN_LAW = 0x064814AF,
     * CRIME_INTIMIDATION = 0x8319FBAB,
     * CRIME_JACK_HORSE = 0x82F7E4A2,
     * CRIME_JACK_VEHICLE = 0x6B981F4C,
     * CRIME_JAIL_BREAK = 0x12C1D589,
     * CRIME_KIDNAPPING = 0x98F908DB,
     * CRIME_KIDNAPPING_LAW = 0xFD72A7EA,
     * CRIME_LASSO_ASSAULT = 0x56EE5D5A,
     * CRIME_LAW_IS_THREATENED = 0x1CB91DF0,
     * CRIME_LOITERING = 0x6629D2F4,
     * CRIME_LOOTING = 0x55AD2BEB,
     * CRIME_MURDER = 0xE28ECE7E,
     * CRIME_MURDER_ANIMAL = 0x48F59A66,
     * CRIME_MURDER_HORSE = 0xC7261D79,
     * CRIME_MURDER_LAW = 0x7797FCE7,
     * CRIME_MURDER_LIVESTOCK = 0x9569C546,
     * CRIME_MURDER_PLAYER = 0xF5ABD6C9,
     * CRIME_MURDER_PLAYER_HORSE = 0xD55C6A79,
     * CRIME_PROPERTY_DESTRUCTION = 0x533B003D,
     * CRIME_RESIST_ARREST = 0xDF577BA5,
     * CRIME_ROBBERY = 0xA3BEDE4C,
     * CRIME_SELF_DEFENCE = 0xBD6A0AA3,
     * CRIME_STAGECOACH_ROBBERY = 0xFC738E61,
     * CRIME_STOLEN_GOODS = 0x9A949C79,
     * CRIME_THEFT = 0x72ADE410,
     * CRIME_THEFT_HORSE = 0xBE3A5838,
     * CRIME_THEFT_LIVESTOCK = 0x85BA08FD,
     * CRIME_THEFT_VEHICLE = 0x43A9ECA1,
     * CRIME_THREATEN = 0x941C985A,
     * CRIME_THREATEN_LAW = 0x7F908566,
     * CRIME_TRAIN_ROBBERY = 0x647D2A5A,
     * CRIME_TRAMPLE = 0x45DB39D8,
     * CRIME_TRAMPLE_LAW = 0xF00F266B,
     * CRIME_TRAMPLE_PLAYER = 0x75970C15,
     * CRIME_TRESPASSING = 0xAEDE8E35,
     * CRIME_UNARMED_ASSAULT = 0x5098CC5A,
     * CRIME_VANDALISM = 0x80FDC759,
     * CRIME_VANDALISM_VEHICLE = 0xF9E7ECE4,
     * CRIME_VEHICLE_DESTRUCTION = 0x54A85DDC,
     * CRIME_WANTED_LEVEL_UP_DEBUG_HIGH = 0x99C52FF5,
     * CRIME_WANTED_LEVEL_UP_DEBUG_LOW = 0xD891890F
     * };
     *
     * Hash: 0xF60386770878A98F | Since: 1207
     */
    function reportCrime(player, crimeType, bounty, entity, isKnownSuspect) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof crimeType === 'string')
            crimeType = misc.getHashKey(crimeType);
        ReportCrime(_player, crimeType, bounty, _entity, isKnownSuspect);
    }
    law.reportCrime = reportCrime;
    /**
     * No comment provided
     *
     * Hash: 0x9C4352134B2835FB | Since: 1207
     */
    function reportPlayerDispatchResponseOverride(player, dispatchResponseHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof dispatchResponseHash === 'string')
            dispatchResponseHash = misc.getHashKey(dispatchResponseHash);
        ReportPlayerLawDispatchResponseOverride(_player, dispatchResponseHash);
    }
    law.reportPlayerDispatchResponseOverride = reportPlayerDispatchResponseOverride;
    /**
     * No comment provided
     *
     * Hash: 0x4B52BF96E225D230 | Since: 1207
     */
    function setAllowDisabledResponses(toggle) {
        SetAllowDisabledLawResponses(toggle);
    }
    law.setAllowDisabledResponses = setAllowDisabledResponses;
    /**
     * p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
     *
     * Hash: 0xF19706B1F8FFA88F | Since: 1207
     */
    function setBountyHunterGlobalCooldown(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        SetBountyHunterGlobalCooldown(p0, 0);
    }
    law.setBountyHunterGlobalCooldown = setBountyHunterGlobalCooldown;
    /**
     * Force clears local player's wanted level
     *
     * Hash: 0x55F37F5F3F2475E1 | Since: 1207
     */
    function setBountyHunterPursuitCleared() {
        SetBountyHunterPursuitCleared();
    }
    law.setBountyHunterPursuitCleared = setBountyHunterPursuitCleared;
    /**
     * Note: This native is only used in multiplayer scripts
     * dispatchResponseHash: see update1/common/data/dispatchresponses/..
     *
     * Hash: 0x009CF9A29972C298 | Since: 1207
     */
    function setCustomDispatchResponse(dispatchResponseHash) {
        if (typeof dispatchResponseHash === 'string')
            dispatchResponseHash = misc.getHashKey(dispatchResponseHash);
        SetCustomLawDispatchResponse(dispatchResponseHash);
    }
    law.setCustomDispatchResponse = setCustomDispatchResponse;
    /**
     * No comment provided
     *
     * Hash: 0x002BABE0B7D53136 | Since: 1207
     */
    function setDispatchMultiplierOverride(multiplier) {
        SetDispatchMultiplierOverride(multiplier);
    }
    law.setDispatchMultiplierOverride = setDispatchMultiplierOverride;
    /**
     * No comment provided
     *
     * Hash: 0x7E7BF59F89FC6C6D | Since: 1207
     */
    function setGuardZonePosition(name, pos) {
        SetGuardZonePosition(name, pos.x, pos.y, pos.z);
    }
    law.setGuardZonePosition = setGuardZonePosition;
    /**
     * No comment provided
     *
     * Hash: 0x2F9005E2EA4E5EE4 | Since: 1207
     */
    function setGuardZonePosition2(name, pos) {
        SetGuardZonePosition2(name, pos.x, pos.y, pos.z);
    }
    law.setGuardZonePosition2 = setGuardZonePosition2;
    /**
     * No comment provided
     *
     * Hash: 0xA8A74AA79FB67159 | Since: 1207
     */
    function setGuardZoneVolumeRegistrationEnd(name, volume) {
        SetGuardZoneVolumeRegistrationEnd(name, volume);
    }
    law.setGuardZoneVolumeRegistrationEnd = setGuardZoneVolumeRegistrationEnd;
    /**
     * No comment provided
     *
     * Hash: 0x8C598A930F471938 | Since: 1207
     */
    function setGuardZoneVolumeRegistrationStart(name, volume) {
        SetGuardZoneVolumeRegistrationStart(name, volume);
    }
    law.setGuardZoneVolumeRegistrationStart = setGuardZoneVolumeRegistrationStart;
    /**
     * No comment provided
     *
     * Hash: 0x35815F372D43E1E5 | Since: 1207
     */
    function setGuardZoneVolumeRestricted(name, volume) {
        SetGuardZoneVolumeRestricted(name, volume);
    }
    law.setGuardZoneVolumeRestricted = setGuardZoneVolumeRestricted;
    /**
     * No comment provided
     *
     * Hash: 0xA1B0E6301E2E02A6 | Since: 1207
     */
    function setGuardZoneVolumeThreat(volume) {
        return SetGuardZoneVolumeThreat(volume);
    }
    law.setGuardZoneVolumeThreat = setGuardZoneVolumeThreat;
    /**
     * No comment provided
     *
     * Hash: 0xAD3E07C37A7C1ADC | Since: 1207
     */
    function setGuardZoneVolumeWarning(volume) {
        return SetGuardZoneVolumeWarning(volume);
    }
    law.setGuardZoneVolumeWarning = setGuardZoneVolumeWarning;
    /**
     * No comment provided
     *
     * Hash: 0x8DE82BC774F3B862 | Since: 1207
     */
    function setDisabled(toggle) {
        SetLawDisabled(toggle);
    }
    law.setDisabled = setDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x9BBDCB8DF789EBC1 | Since: 1207
     */
    function setRbsVolume(player, p1) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        SetLawRbsVolume(_player, p1);
    }
    law.setRbsVolume = setRbsVolume;
    /**
     * enum eLawRegion : Hash
     * {
     * LAW_DISPATCH_REGION_NONE = 0,
     * LAW_REGION_AGUASDULCES = 0x2F573EBE,
     * LAW_REGION_ANNESBURG = 0x68CAFD50,
     * LAW_REGION_ARMADILLO = 0xF0B90756,
     * LAW_REGION_BAYOU_NWA = 0x80966B1C,
     * LAW_REGION_BEECHERS_HOPE = 0xE2544977,
     * LAW_REGION_BIG_VALLEY = 0x3DF1559A,
     * LAW_REGION_BLACKWATER = 0x60D4886D,
     * LAW_REGION_BLACKWATER_MAINGAME = 0x66553576,
     * LAW_REGION_BLUEGILL_MARSH = 0x1D6AED8E,
     * LAW_REGION_BRAITHWAITE_MANOR = 0x3D71E7FF,
     * LAW_REGION_BUTCHER_CREEK = 0x2B3E1822,
     * LAW_REGION_CALIGA_HALL = 0xF3FE5080,
     * LAW_REGION_CORNWALL = 0xCC4672FA,
     * LAW_REGION_CUMBERLAND_FOREST = 0x81A78306,
     * LAW_REGION_EMERALD_RANCH = 0x5C069DF3,
     * LAW_REGION_FORT_WALLACE = 0x0AF25192,
     * LAW_REGION_GREAT_PLAINS = 0xB20573FA,
     * LAW_REGION_GREAT_PLAINS_MAINGAME = 0x9862FF7C,
     * LAW_REGION_GRIZZLIES = 0xBB936031,
     * LAW_REGION_GUAMA = 0x200DFF42,
     * LAW_REGION_HEARTLANDS = 0xAD14DA65,
     * LAW_REGION_LAGRAS = 0xC64808D3,
     * LAW_REGION_MACFARLANES_RANCH = 0x396A7D5F,
     * LAW_REGION_MANICATO = 0x039DB6BF,
     * LAW_REGION_MANZANITA_POST = 0x895E580E,
     * LAW_REGION_MANZANITA_POST_MAINGAME = 0x9BDD6A38,
     * LAW_REGION_OCCUPIED_CARAVAN_CAMP = 0x7EBABB01,
     * LAW_REGION_OLD_MAP_WILDERNESS = 0xCBB45950,
     * LAW_REGION_OLD_MAP_WILDERNESS_MAINGAME = 0x9F839BE7,
     * LAW_REGION_OUTLAW3 = 0x97A02FC1,
     * LAW_REGION_PRONGHORN_RANCH = 0x398E4BFC,
     * LAW_REGION_RHODES = 0x89222928,
     * LAW_REGION_RHODES_LOCKDOWN = 0xB1181671,
     * LAW_REGION_RIDGEWOOD_FARM = 0x635C3028,
     * LAW_REGION_ROANOKE_RIDGE = 0x46386A9A,
     * LAW_REGION_SAINT_DENIS = 0x5CF7C268,
     * LAW_REGION_SAINT_DENIS_RURAL = 0x4FD5331A,
     * LAW_REGION_SCARLETT_MEADOWS = 0x5FDD9717,
     * LAW_REGION_SISIKA = 0x2B6BBA52,
     * LAW_REGION_STRAWBERRY = 0xDD932620,
     * LAW_REGION_TALL_TREES = 0xD939B758,
     * LAW_REGION_TALL_TREES_MAINGAME = 0x084B17DF,
     * LAW_REGION_THIEVES_LANDING = 0x3D0C2EB6,
     * LAW_REGION_THIEVES_LANDING_MAINGAME = 0x61C450F3,
     * LAW_REGION_TUMBLEWEED = 0x0EFAF8DC,
     * LAW_REGION_VALENTINE = 0xA7A3F0C3,
     * LAW_REGION_VALENTINE_LOCKDOWN = 0x123582FE,
     * LAW_REGION_VAN_HORN = 0x619B528E,
     * LAW_REGION_WAPITI = 0x7A976E02
     * };
     *
     * Hash: 0x4752F68EB7F2D280 | Since: 1207
     */
    function setRegion(player, lawRegionHash, stateHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof lawRegionHash === 'string')
            lawRegionHash = misc.getHashKey(lawRegionHash);
        if (typeof stateHash === 'string')
            stateHash = misc.getHashKey(stateHash);
        SetLawRegion(_player, lawRegionHash, stateHash);
    }
    law.setRegion = setRegion;
    /**
     * behaviour: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLawBehavior__Flags
     *
     * Hash: 0x819ADD5EF1742F47 | Since: 1207
     */
    function setPedBehaviour(ped, behaviour) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedLawBehaviour(_ped, behaviour);
    }
    law.setPedBehaviour = setPedBehaviour;
})(law || (law = {}));
export var localization;
(function (localization) {
    /**
     * 0 = american (en-US)
     * 1 = french (fr-FR)
     * 2 = german (de-DE)
     * 3 = italian (it-IT)
     * 4 = spanish (es-ES)
     * 5 = brazilian (pt-BR)
     * 6 = polish (pl-PL)
     * 7 = russian (ru-RU)
     * 8 = korean (ko-KR)
     * 9 = chinesetrad (zh-TW)
     * 10 = japanese (ja-JP)
     * 11 = mexican (es-MX)
     * 12 = chinesesimp (zh-CN)
     *
     * Hash: 0xDB917DA5C6835FCC | Since: 1207
     */
    function getCurrentLanguage() {
        return GetCurrentLanguage();
    }
    localization.getCurrentLanguage = getCurrentLanguage;
    /**
     * 0 = DATE_FORMAT_DMY
     * 1 = DATE_FORMAT_MDY
     * 2 = DATE_FORMAT_YMD
     *
     * Old name: _LOCALIZATION_GET_SYSTEM_DATE_FORMAT
     *
     * Hash: 0x76E30B799EBEEA0F | Since: 1207
     */
    function getSystemDateType() {
        return LocalizationGetSystemDateType();
    }
    localization.getSystemDateType = getSystemDateType;
    /**
     * Same return values as GET_CURRENT_LANGUAGE
     *
     * Hash: 0x3C1A05F86AE6ACB5 | Since: 1207
     */
    function getSystemLanguage() {
        return LocalizationGetSystemLanguage();
    }
    localization.getSystemLanguage = getSystemLanguage;
    /**
     * Returns true if the current language is american, french, german, italian, spanish, brazilian or mexican.
     * _DOES_*
     *
     * Hash: 0x45D50415E4D885FF | Since: 1207
     */
    function doesCurrentLanguageSupportCondensedStyle() {
        return DoesCurrentLanguageSupportCondensedStyle();
    }
    localization.doesCurrentLanguageSupportCondensedStyle = doesCurrentLanguageSupportCondensedStyle;
})(localization || (localization = {}));
export var map;
(function (map) {
    /**
     * No comment provided
     *
     * Hash: 0x64C59DD6834FA942 | Since: 1207
     */
    function addPointToGpsMultiRoute(pos) {
        AddPointToGpsMultiRoute(pos.x, pos.y, pos.z, false);
    }
    map.addPointToGpsMultiRoute = addPointToGpsMultiRoute;
    /**
     * No comment provided
     *
     * Hash: 0x6E6E64788C07D2E0 | Since: 1207
     */
    function allowSonarBlips(toggle) {
        AllowSonarBlips(toggle);
    }
    map.allowSonarBlips = allowSonarBlips;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips
     * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips_mp
     *
     * Hash: 0x554D9D53F696D002 | Since: 1207
     */
    function blipAddForCoords(blipHash, pos) {
        if (typeof blipHash === 'string')
            blipHash = misc.getHashKey(blipHash);
        return BlipAddForCoords(blipHash, pos.x, pos.y, pos.z);
    }
    map.blipAddForCoords = blipAddForCoords;
    /**
     * No comment provided
     *
     * Hash: 0x23F74C2FDA6E7C61 | Since: 1207
     */
    function blipAddForEntity(blipHash, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof blipHash === 'string')
            blipHash = misc.getHashKey(blipHash);
        return BlipAddForEntity(blipHash, _entity);
    }
    map.blipAddForEntity = blipAddForEntity;
    /**
     * No comment provided
     *
     * Hash: 0xA486008892065FB9 | Since: 1207
     */
    function blipAddForPickupPlacement(blipHash, pickup) {
        if (typeof blipHash === 'string')
            blipHash = misc.getHashKey(blipHash);
        return BlipAddForPickupPlacement(blipHash, pickup);
    }
    map.blipAddForPickupPlacement = blipAddForPickupPlacement;
    /**
     * No comment provided
     *
     * Hash: 0x45F13B7E0A15C880 | Since: 1207
     */
    function blipAddForRadius(blipHash, pos, radius) {
        if (typeof blipHash === 'string')
            blipHash = misc.getHashKey(blipHash);
        return BlipAddForRadius(blipHash, pos.x, pos.y, pos.z, radius);
    }
    map.blipAddForRadius = blipAddForRadius;
    /**
     * https://alloc8or.re/rdr3/doc/enums/eBlipModifier.txt
     * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_modifiers
     *
     * Old name: _BLIP_SET_MODIFIER
     *
     * Hash: 0x662D364ABF16DE2F | Since: 1207
     */
    function blipAddModifier(blip, modifierHash) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        if (typeof modifierHash === 'string')
            modifierHash = misc.getHashKey(modifierHash);
        return BlipAddModifier(_blip, modifierHash);
    }
    map.blipAddModifier = blipAddModifier;
    /**
     * If modifierHash is 0, ALL modifiers will be removed.
     *
     * Hash: 0xB059D7BD3D78C16F | Since: 1207
     */
    function blipRemoveModifier(blip, modifierHash) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        if (typeof modifierHash === 'string')
            modifierHash = misc.getHashKey(modifierHash);
        return BlipRemoveModifier(_blip, modifierHash);
    }
    map.blipRemoveModifier = blipRemoveModifier;
    /**
     * No comment provided
     *
     * Hash: 0x1EAA5674B4D181C5 | Since: 1207
     */
    function clearGpsCustomRoute() {
        ClearGpsCustomRoute();
    }
    map.clearGpsCustomRoute = clearGpsCustomRoute;
    /**
     * Clears the GPS flags.
     *
     * Hash: 0x4D3771237C79FF41 | Since: 1207
     */
    function clearGpsFlags() {
        ClearGpsFlags();
    }
    map.clearGpsFlags = clearGpsFlags;
    /**
     * Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
     *
     * Hash: 0x9E0AB9AAEE87CE28 | Since: 1207
     */
    function clearGpsMultiRoute() {
        ClearGpsMultiRoute();
    }
    map.clearGpsMultiRoute = clearGpsMultiRoute;
    /**
     * No comment provided
     *
     * Hash: 0x08FDC6F796E350D1 | Since: 1207
     */
    function clearGpsPlayerWaypoint() {
        ClearGpsPlayerWaypoint();
    }
    map.clearGpsPlayerWaypoint = clearGpsPlayerWaypoint;
    /**
     * If Minimap / Radar should be displayed.
     *
     * Hash: 0x1B3DA717B9AFF828 | Since: 1207
     */
    function displayRadar(toggle) {
        DisplayRadar(toggle);
    }
    map.displayRadar = displayRadar;
    /**
     * No comment provided
     *
     * Hash: 0xCD82FA174080B3B1 | Since: 1207
     */
    function doesBlipExist(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        return DoesBlipExist(_blip);
    }
    map.doesBlipExist = doesBlipExist;
    /**
     * Doesn't actually return anything.
     *
     * Hash: 0xEE1C7BA69BB74B08 | Since: 1207
     */
    function forceSonarBlipsThisFrame() {
        return ForceSonarBlipsThisFrame();
    }
    map.forceSonarBlipsThisFrame = forceSonarBlipsThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x201C319797BDA603 | Since: 1207
     */
    function getBlipCoords(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        return new Vector3(GetBlipCoords(_blip));
    }
    map.getBlipCoords = getBlipCoords;
    /**
     * Returns the Blip handle of given Entity.
     *
     * Hash: 0x6D2C41A8BD6D6FD0 | Since: 1207
     */
    function getBlipFromEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetBlipFromEntity(_entity);
    }
    map.getBlipFromEntity = getBlipFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0x5CD2889B2B381D45 | Since: 1207
     */
    function getMainPlayerBlipId() {
        return GetMainPlayerBlipId();
    }
    map.getMainPlayerBlipId = getMainPlayerBlipId;
    /**
     * No comment provided
     *
     * Hash: 0x46534526B9CD2D17 | Since: 1207
     */
    function isBlipOnMini(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        return IsBlipOnMinimap(_blip);
    }
    map.isBlipOnMini = isBlipOnMini;
    /**
     * No comment provided
     *
     * Hash: 0x202B1BBFC6AB5EE4 | Since: 1207
     */
    function isWaypointActive() {
        return IsWaypointActive();
    }
    map.isWaypointActive = isWaypointActive;
    /**
     * Locks the minimap to the specified angle in integer degrees.
     *
     * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
     *
     * Hash: 0x0BFD145EF819FB3A | Since: 1207
     */
    function lockMiniAngle(angle) {
        LockMinimapAngle(angle);
    }
    map.lockMiniAngle = lockMiniAngle;
    /**
     * No comment provided
     *
     * Hash: 0xF2C3C9DA47AAA54A | Since: 1207
     */
    function removeBlip(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        RemoveBlip(_blip);
    }
    map.removeBlip = removeBlip;
    /**
     * No comment provided
     *
     * Hash: 0xEB3CB3386C775D72 | Since: 1207
     */
    function resetMiniFow(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        ResetMinimapFow(hash);
    }
    map.resetMiniFow = resetMiniFow;
    /**
     * No comment provided
     *
     * Hash: 0x4FF674F5E23D49CE | Since: 1207
     */
    function setBlipCoords(blip, pos) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        SetBlipCoords(_blip, pos.x, pos.y, pos.z);
    }
    map.setBlipCoords = setBlipCoords;
    /**
     * No comment provided
     *
     * Hash: 0x0DF2B55F717DDB10 | Since: 1207
     */
    function setBlipFlashes(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        return SetBlipFlashes(_blip);
    }
    map.setBlipFlashes = setBlipFlashes;
    /**
     * No comment provided
     *
     * Hash: 0x02FF4CF43B7209D1 | Since: 1207
     */
    function setBlipFlashTimer(blip, blipType, blipHash) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        if (typeof blipHash === 'string')
            blipHash = misc.getHashKey(blipHash);
        SetBlipFlashTimer(_blip, blipType, blipHash);
    }
    map.setBlipFlashTimer = setBlipFlashTimer;
    /**
     * No comment provided
     *
     * Hash: 0x0A062D6D7C0B2C2C | Since: 1207
     */
    function setBlipNameFromTextFile(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        return SetBlipNameFromTextFile(_blip);
    }
    map.setBlipNameFromTextFile = setBlipNameFromTextFile;
    /**
     * No comment provided
     *
     * Hash: 0x093DD5A31BC2B459 | Since: 1207
     */
    function setBlipNameToPlayerName(blip, player) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        const _player = player instanceof Player ? player.localId() : player;
        SetBlipNameToPlayerName(_blip, _player);
    }
    map.setBlipNameToPlayerName = setBlipNameToPlayerName;
    /**
     * No comment provided
     *
     * Hash: 0x6049966A94FBE706 | Since: 1207
     */
    function setBlipRotation(blip, rotation) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        SetBlipRotation(_blip, rotation);
    }
    map.setBlipRotation = setBlipRotation;
    /**
     * only works for BLIP_ADD_FOR_RADIUS AND BLIP_ADD_FOR_AREA, this native works as a radius not really a scale
     *
     * Hash: 0xD38744167B2FA257 | Since: 1207
     */
    function setBlipScale(blip, scale) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        SetBlipScale(_blip, scale);
    }
    map.setBlipScale = setBlipScale;
    /**
     * No comment provided
     *
     * Hash: 0x74F74D3207ED525C | Since: 1207
     */
    function setBlipSprite(blip, hash) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        SetBlipSprite(_blip, hash, false);
    }
    map.setBlipSprite = setBlipSprite;
    /**
     * No comment provided
     *
     * Hash: 0xF6CEF599FC470B33 | Since: 1207
     */
    function setGpsCustomRouteRender() {
        SetGpsCustomRouteRender(false, 0, 0);
    }
    map.setGpsCustomRouteRender = setGpsCustomRouteRender;
    /**
     * https://alloc8or.re/rdr3/doc/enums/rage__eGpsFlags.txt
     *
     * Hash: 0x5DE61C90DDECFA2D | Since: 1207
     */
    function setGpsFlags() {
        SetGpsFlags(0, 0);
    }
    map.setGpsFlags = setGpsFlags;
    /**
     * No comment provided
     *
     * Hash: 0x4426D65E029A4DC0 | Since: 1207
     */
    function setGpsMultiRouteRender(toggle) {
        SetGpsMultiRouteRender(toggle);
    }
    map.setGpsMultiRouteRender = setGpsMultiRouteRender;
    /**
     * Up to eight coordinates may be revealed per frame
     *
     * Hash: 0x73348402566ECB6E | Since: 1207
     */
    function setMiniFowRevealCoordinate(pos, p3) {
        if (typeof p3 === 'string')
            p3 = misc.getHashKey(p3);
        SetMinimapFowRevealCoordinate(pos.x, pos.y, pos.z, p3);
    }
    map.setMiniFowRevealCoordinate = setMiniFowRevealCoordinate;
    /**
     * No comment provided
     *
     * Hash: 0x63CBBD6CA6F321F9 | Since: 1207
     */
    function setMiniFowRevealVolume(volume, p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        SetMinimapFowRevealVolume(volume, p1);
    }
    map.setMiniFowRevealVolume = setMiniFowRevealVolume;
    /**
     * Reveals the entire minimap (FOW = Fog of War)
     *
     * Hash: 0x4B8F743A4A6D2FF8 | Since: 1207
     */
    function setMiniHideFow(toggle) {
        SetMinimapHideFow(toggle);
    }
    map.setMiniHideFow = setMiniHideFow;
    /**
     * No comment provided
     *
     * Hash: 0xA8EBBAE986FB5457 | Since: 1207
     */
    function setRadarAsExteriorThisFrame() {
        SetRadarAsExteriorThisFrame();
    }
    map.setRadarAsExteriorThisFrame = setRadarAsExteriorThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xCAF6489DA2C8DD9E | Since: 1207
     */
    function setRadarZoom(zoomLevel) {
        SetRadarZoom(zoomLevel);
    }
    map.setRadarZoom = setRadarZoom;
    /**
     * No comment provided
     *
     * Hash: 0xFA8C41E8020D3439 | Since: 1207
     */
    function setWaypointOff() {
        SetWaypointOff();
    }
    map.setWaypointOff = setWaypointOff;
    /**
     * No comment provided
     *
     * Hash: 0x3D3D15AF7BCAAF83 | Since: 1207
     */
    function startGpsMultiRoute(colorNameHash, onFoot, inVehicle) {
        if (typeof colorNameHash === 'string')
            colorNameHash = misc.getHashKey(colorNameHash);
        StartGpsMultiRoute(colorNameHash, onFoot, inVehicle);
    }
    map.startGpsMultiRoute = startGpsMultiRoute;
    /**
     * No comment provided
     *
     * Hash: 0x72DD432F3CDFC0EE | Since: 1207
     */
    function triggerSonarBlip(typeHash, pos) {
        if (typeof typeHash === 'string')
            typeHash = misc.getHashKey(typeHash);
        TriggerSonarBlip(typeHash, pos.x, pos.y, pos.z);
    }
    map.triggerSonarBlip = triggerSonarBlip;
    /**
     * No comment provided
     *
     * Hash: 0x5373DE8E179BC2A0 | Since: 1207
     */
    function unlockMiniAngle() {
        UnlockMinimapAngle();
    }
    map.unlockMiniAngle = unlockMiniAngle;
    /**
     * Clear blip data. It must be used before RemoveBlip I'm pretty sure that blips are handled internally with databinding. This function should then allow you to clear blip container and therefore free up memory?.
     *
     * Hash: 0x01B928CA2E198B01 | Since: 1207
     */
    function clearBlip(blipid) {
        const _blipid = blipid instanceof Blip ? blipid.handle() : blipid;
        return Citizen.invokeNative('0x01B928CA2E198B01', _blipid);
    }
    map.clearBlip = clearBlip;
    /**
     * It adds blip a icon to active prompts like from scenarios or pickups without the need to use lockon
     *
     * Hash: 0x1726963E6049DB53 | Since: 1207
     */
    function setBlipIconOnEntityActivePrompt(entity, blipIcon) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof blipIcon === 'string')
            blipIcon = misc.getHashKey(blipIcon);
        Citizen.invokeNative('0x1726963E6049DB53', _entity, blipIcon);
    }
    map.setBlipIconOnEntityActivePrompt = setBlipIconOnEntityActivePrompt;
    /**
     * Not official native name
     * Removes the blip from an entity and makes it static on the map, try it on GetMainPlayerBlipId() for a demonstration
     *
     * Hash: 0x250C75EB1728CC0D | Since: 1207
     */
    function blipDetachFromEntity(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        Citizen.invokeNative('0x250C75EB1728CC0D', _blip);
    }
    map.blipDetachFromEntity = blipDetachFromEntity;
    /**
     * checks if the entity lockon prompt contains an icon
     *
     * Hash: 0x3CB8859F04763C78 | Since: 1207
     */
    function isBlipIconOnLockonEntityPrompt(entity, blipId) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x3CB8859F04763C78', _entity, blipId);
    }
    map.isBlipIconOnLockonEntityPrompt = isBlipIconOnLockonEntityPrompt;
    /**
     * will remove the blip icon from the entity lockon prompt, use 0 for p1
     *
     * Hash: 0x44813684F72B563C | Since: 1207
     */
    function clearBlipIconFromLockonEntityPrompt(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x44813684F72B563C', _entity, 0);
    }
    map.clearBlipIconFromLockonEntityPrompt = clearBlipIconFromLockonEntityPrompt;
    /**
     * will add a blip icon to the entity lockon prompt that you specify
     *
     * Hash: 0x7563CBCA99253D1A | Since: 1207
     */
    function setBlipIconToLockonEntityPrompt(entity, blipIcon) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof blipIcon === 'string')
            blipIcon = misc.getHashKey(blipIcon);
        Citizen.invokeNative('0x7563CBCA99253D1A', _entity, blipIcon);
    }
    map.setBlipIconToLockonEntityPrompt = setBlipIconToLockonEntityPrompt;
    /**
     * Clears the previously set coordinates for the pause map view, removing any specified focal point and radius that were set using `SetPausemapCoordsWithRadius - 0xE0884C184728C75B`
     *
     * Hash: 0x7C9F4CDF402CA82A | Since: 1311
     */
    function clearPauseCoords() {
        Citizen.invokeNative('0x7C9F4CDF402CA82A');
    }
    map.clearPauseCoords = clearPauseCoords;
    /**
     * adds the entity blip icon to the entity lockon prompt if wrong param will remove the icon if had any
     *
     * Hash: 0x97F6F158CC5B5CA2 | Since: 1207
     */
    function setEntityBlipIconToLockonEntityPrompt(entity, blipId) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x97F6F158CC5B5CA2', _entity, blipId);
    }
    map.setEntityBlipIconToLockonEntityPrompt = setEntityBlipIconToLockonEntityPrompt;
    /**
     *
     * in the decompiles this doesnt seem to ever be executed the param needed needs to be above 0 but its always passed as 0
     * removes the icon from lockon prompt
     *
     * Hash: 0xBB68D4D3CA3DE402 | Since: 1207
     */
    function removeBlipIconFromEntityLockonPrompt(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xBB68D4D3CA3DE402', _entity, 0);
    }
    map.removeBlipIconFromEntityLockonPrompt = removeBlipIconFromEntityLockonPrompt;
    /**
     * No comment provided
     *
     * Hash: 0xD3F58E9316B7FC2A | Since: 1207
     */
    function _0xD3F58E9316B7FC2A() {
        Citizen.invokeNative('0xD3F58E9316B7FC2A', undefined);
    }
    map._0xD3F58E9316B7FC2A = _0xD3F58E9316B7FC2A;
    /**
     * Unlike `GET_WAYPOINT_COORDS - 0x29B30D07C3F7873B`, which returns a single value, this native returns the x and y coordinates of the waypoint separately as floats from pointer. To retrieve each coordinate, `Citizen.PointerValueFloat()` must be used with this function.
     *
     * Hash: 0xF08E42BFA46BDFF8 | Since: 1207
     */
    function getWaypointPosition() {
        return Citizen.invokeNative('0xF08E42BFA46BDFF8');
    }
    map.getWaypointPosition = getWaypointPosition;
    /**
     * Checks if the GPS route to the waypoint is navigable along a road. If a route exists but there is no valid road path, this function returns false.
     *
     * Hash: 0xF47A1EB2A538A3A3 | Since: 1207
     */
    function isGpsRouteOnRoad() {
        return Citizen.invokeNative('0xF47A1EB2A538A3A3');
    }
    map.isGpsRouteOnRoad = isGpsRouteOnRoad;
    /**
     * It's unclear what exactly this does, but I assume it marks the blip as "no longer needed"
     *
     * Hash: 0xDEEDE7C41742E011 | Since: 1207
     */
    function abandonBlip(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        AbandonBlip(_blip);
    }
    map.abandonBlip = abandonBlip;
    /**
     * list of minimap props: https://github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/minimapObjects
     * variations parameter are the interior locations you see on the map like these bellow
     * variation 0 https://i.imgur.com/jkLhn3Z.png
     * variation 2  https://i.imgur.com/eKV0Tcm.png
     * variation 4 https://i.imgur.com/rjwOgEH.png
     * there are more and you can find them in the decompiles
     *
     * Hash: 0x1392105DA88BBFFB | Since: 1207
     */
    function addPropToMini(minimapProp, x, y, rotation, variation) {
        if (typeof minimapProp === 'string')
            minimapProp = misc.getHashKey(minimapProp);
        AddPropToMinimap(minimapProp, x, y, rotation, variation);
    }
    map.addPropToMini = addPropToMini;
    /**
     * No comment provided
     *
     * Hash: 0xEC174ADBCB611ECC | Since: 1207
     */
    function blipAddForArea(blipHash, pos, scale) {
        if (typeof blipHash === 'string')
            blipHash = misc.getHashKey(blipHash);
        return BlipAddForArea(blipHash, pos.x, pos.y, pos.z, scale.x, scale.y, scale.z, 0);
    }
    map.blipAddForArea = blipAddForArea;
    /**
     * No comment provided
     *
     * Hash: 0x3E593DF9C2962EC6 | Since: 1207
     */
    function blipAddForStyle(styleHash) {
        if (typeof styleHash === 'string')
            styleHash = misc.getHashKey(styleHash);
        return BlipAddForStyle(styleHash);
    }
    map.blipAddForStyle = blipAddForStyle;
    /**
     * No comment provided
     *
     * Hash: 0xA6EF0C54A3443E70 | Since: 1207
     */
    function blipAddForVolume(blipHash, volume) {
        if (typeof blipHash === 'string')
            blipHash = misc.getHashKey(blipHash);
        return BlipAddForVolume(blipHash, volume);
    }
    map.blipAddForVolume = blipAddForVolume;
    /**
     * No comment provided
     *
     * Hash: 0xBD62D98799A3DAF0 | Since: 1207
     */
    function blipAddStyle(blip, styleHash) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        if (typeof styleHash === 'string')
            styleHash = misc.getHashKey(styleHash);
        return BlipAddStyle(_blip, styleHash);
    }
    map.blipAddStyle = blipAddStyle;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_styles
     * Removes any existing modifiers and sets the style.
     *
     * Hash: 0xEDD964B7984AC291 | Since: 1207
     */
    function blipSetStyle(blip, styleHash) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        if (typeof styleHash === 'string')
            styleHash = misc.getHashKey(styleHash);
        return BlipSetStyle(_blip, styleHash);
    }
    map.blipSetStyle = blipSetStyle;
    /**
     * No comment provided
     *
     * Hash: 0x9FA00E2FC134A9D0 | Since: 1207
     */
    function doesEntityHaveBlip(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return DoesEntityHaveBlip(_entity);
    }
    map.doesEntityHaveBlip = doesEntityHaveBlip;
    /**
     * No comment provided
     *
     * Hash: 0x3FDA2B79AEEE351C | Since: 1207
     */
    function findClosestGpsPosition(pos) {
        return FindClosestGpsPosition(pos.x, pos.y, pos.z);
    }
    map.findClosestGpsPosition = findClosestGpsPosition;
    /**
     * No comment provided
     *
     * Hash: 0x29B30D07C3F7873B | Since: 1207
     */
    function getWaypointCoords() {
        return new Vector3(GetWaypointCoords());
    }
    map.getWaypointCoords = getWaypointCoords;
    /**
     * No comment provided
     *
     * Hash: 0xA1B4052C2A3DCC1E | Since: 1207
     */
    function hideActivePointsOfInterest() {
        HideActivePointsOfInterest();
    }
    map.hideActivePointsOfInterest = hideActivePointsOfInterest;
    /**
     * No comment provided
     *
     * Hash: 0xE9F676788F8D5E1E | Since: 1207
     */
    function isBlipAttachedToAnyEntity(blip) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        return IsBlipAttachedToAnyEntity(_blip);
    }
    map.isBlipAttachedToAnyEntity = isBlipAttachedToAnyEntity;
    /**
     * No comment provided
     *
     * Hash: 0x6786D7AFAC3162B3 | Since: 1207
     */
    function disableRegionBlip(regionHash) {
        if (typeof regionHash === 'string')
            regionHash = misc.getHashKey(regionHash);
        MapDisableRegionBlip(regionHash);
    }
    map.disableRegionBlip = disableRegionBlip;
    /**
     * No comment provided
     *
     * Hash: 0xDA98246C7A3C2189 | Since: 1207
     */
    function discoverySetEnabled(discoveryHash) {
        if (typeof discoveryHash === 'string')
            discoveryHash = misc.getHashKey(discoveryHash);
        MapDiscoverySetEnabled(discoveryHash);
    }
    map.discoverySetEnabled = discoverySetEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xD8C7162AB2E2AF45 | Since: 1207
     */
    function discoverRegion(discoveryHash) {
        if (typeof discoveryHash === 'string')
            discoveryHash = misc.getHashKey(discoveryHash);
        MapDiscoverRegion(discoveryHash);
    }
    map.discoverRegion = discoverRegion;
    /**
     * regionHash: https://github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/wanted_regions
     *
     * Hash: 0x563FCB6620523917 | Since: 1207
     */
    function enableRegionBlip(regionHash, styleHash) {
        if (typeof regionHash === 'string')
            regionHash = misc.getHashKey(regionHash);
        if (typeof styleHash === 'string')
            styleHash = misc.getHashKey(styleHash);
        MapEnableRegionBlip(regionHash, styleHash);
    }
    map.enableRegionBlip = enableRegionBlip;
    /**
     * No comment provided
     *
     * Hash: 0x3F81EA4275D39D6F | Since: 1207
     */
    function isDiscoveryActive(discoveryHash) {
        if (typeof discoveryHash === 'string')
            discoveryHash = misc.getHashKey(discoveryHash);
        return MapIsDiscoveryActive(discoveryHash);
    }
    map.isDiscoveryActive = isDiscoveryActive;
    /**
     * No comment provided
     *
     * Hash: 0xE38450DBCBC70E3D | Since: 1207
     */
    function isRegionHighlightedWithStyle(regionHash, styleHash) {
        if (typeof regionHash === 'string')
            regionHash = misc.getHashKey(regionHash);
        if (typeof styleHash === 'string')
            styleHash = misc.getHashKey(styleHash);
        return MapIsRegionHighlightedWithStyle(regionHash, styleHash);
    }
    map.isRegionHighlightedWithStyle = isRegionHighlightedWithStyle;
    /**
     * No comment provided
     *
     * Hash: 0xE057FEA9A22EB3EE | Since: 1207
     */
    function removePropFromMini(minimapProp) {
        if (typeof minimapProp === 'string')
            minimapProp = misc.getHashKey(minimapProp);
        RemovePropFromMinimap(minimapProp);
    }
    map.removePropFromMini = removePropFromMini;
    /**
     * No comment provided
     *
     * Hash: 0xF8096DF9B87246E3 | Since: 1207
     */
    function revealMiniFow(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        RevealMinimapFow(hash);
    }
    map.revealMiniFow = revealMiniFow;
    /**
     * No comment provided
     *
     * Hash: 0x9CB1A1623062F402 | Since: 1207
     */
    function setBlipName(blip, name) {
        const _blip = blip instanceof Blip ? blip.handle() : blip;
        SetBlipName(_blip, name);
    }
    map.setBlipName = setBlipName;
    /**
     * Used for GUARMA MODE; Enabled: toggle = false, 0; Disabled: toggle = true, 0
     * Hash p1 seems to be unused, always 0
     *
     * Hash: 0x63E7279D04160477 | Since: 1207
     */
    function setFowUpdatePlayerOverride(toggle, p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        SetFowUpdatePlayerOverride(toggle, p1);
    }
    map.setFowUpdatePlayerOverride = setFowUpdatePlayerOverride;
    /**
     * No comment provided
     *
     * Hash: 0xE5A7F70B7C0F3271 | Since: 1207
     */
    function setMiniFowOverrideRevealScale(scale, p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        SetMinimapFowOverrideRevealScale(scale, p1);
    }
    map.setMiniFowOverrideRevealScale = setMiniFowOverrideRevealScale;
    /**
     * No comment provided
     *
     * Hash: 0x632AA10BF7EA53D3 | Since: 1207
     */
    function setMiniFowShouldUpdate(toggle, p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        SetMinimapFowShouldUpdate(toggle, p1);
    }
    map.setMiniFowShouldUpdate = setMiniFowShouldUpdate;
    /**
     * hash can be the hash of "guarma" or "world".
     *
     * Hash: 0xA657EC9DBC6CC900 | Since: 1207
     */
    function setMiniZone(zone) {
        if (typeof zone === 'string')
            zone = misc.getHashKey(zone);
        SetMinimapZone(zone);
    }
    map.setMiniZone = setMiniZone;
    /**
     * No comment provided
     *
     * Hash: 0xE0884C184728C75B | Since: 1207
     */
    function setPauseCoordsWithRadius(pos, radius) {
        SetPausemapCoordsWithRadius(pos.x, pos.y, pos.z, radius);
    }
    map.setPauseCoordsWithRadius = setPauseCoordsWithRadius;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/graphics/minimap/radar/radar_configs.lua
     * configHash: -1943724816, 347777538, -117986897, -789269373, -547506804, -1986542417, 2080113112
     * p1: usually 898171178 or 0 in R* scripts (doesn't seems to have any effect)
     *
     * Hash: 0x9C113883487FD53C | Since: 1207
     */
    function setRadarConfigType(configHash, p1) {
        if (typeof configHash === 'string')
            configHash = misc.getHashKey(configHash);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        SetRadarConfigType(configHash, p1);
    }
    map.setRadarConfigType = setRadarConfigType;
    /**
     * No comment provided
     *
     * Hash: 0x3FBB838AEA30C1D8 | Since: 1207
     */
    function showActivePointsOfInterest() {
        ShowActivePointsOfInterest();
    }
    map.showActivePointsOfInterest = showActivePointsOfInterest;
    /**
     * No comment provided
     *
     * Hash: 0x6B44F13D888F770D | Since: 1207
     */
    function startGpsCustomRouteFromWaypointRecordingRoute(point, numPoints, colorNameHash) {
        if (typeof colorNameHash === 'string')
            colorNameHash = misc.getHashKey(colorNameHash);
        return StartGpsCustomRouteFromWaypointRecordingRoute(point, numPoints, colorNameHash, false, false);
    }
    map.startGpsCustomRouteFromWaypointRecordingRoute = startGpsCustomRouteFromWaypointRecordingRoute;
    /**
     * No comment provided
     *
     * Hash: 0x0C7A2289A5C4D7C9 | Since: 1207
     */
    function triggerSonarBlipOnEntity(typeHash, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof typeHash === 'string')
            typeHash = misc.getHashKey(typeHash);
        TriggerSonarBlipOnEntity(typeHash, _entity);
    }
    map.triggerSonarBlipOnEntity = triggerSonarBlipOnEntity;
})(map || (map = {}));
export var minigame;
(function (minigame) {
    /**
     * No comment provided
     *
     * Hash: 0x012027C28F421F46 | Since: 1207
     */
    function _0x012027C28F421F46() {
        return Citizen.invokeNative('0x012027C28F421F46', undefined, undefined);
    }
    minigame._0x012027C28F421F46 = _0x012027C28F421F46;
    /**
     * No comment provided
     *
     * Hash: 0x0876326238914A3F | Since: 1207
     */
    function _0x0876326238914A3F() {
        Citizen.invokeNative('0x0876326238914A3F');
    }
    minigame._0x0876326238914A3F = _0x0876326238914A3F;
    /**
     * No comment provided
     *
     * Hash: 0x10342CC82E8356E9 | Since: 1207
     */
    function _0x10342CC82E8356E9() {
        return Citizen.invokeNative('0x10342CC82E8356E9', undefined, undefined);
    }
    minigame._0x10342CC82E8356E9 = _0x10342CC82E8356E9;
    /**
     * No comment provided
     *
     * Hash: 0x15E90B6A993017AA | Since: 1207
     */
    function _0x15E90B6A993017AA() {
        return Citizen.invokeNative('0x15E90B6A993017AA');
    }
    minigame._0x15E90B6A993017AA = _0x15E90B6A993017AA;
    /**
     * No comment provided
     *
     * Hash: 0x18A0D48DF9211C07 | Since: 1207
     */
    function _0x18A0D48DF9211C07() {
        Citizen.invokeNative('0x18A0D48DF9211C07');
    }
    minigame._0x18A0D48DF9211C07 = _0x18A0D48DF9211C07;
    /**
     * No comment provided
     *
     * Hash: 0x32A7C216344D623B | Since: 1207
     */
    function _0x32A7C216344D623B() {
        return Citizen.invokeNative('0x32A7C216344D623B', undefined, undefined, undefined);
    }
    minigame._0x32A7C216344D623B = _0x32A7C216344D623B;
    /**
     * No comment provided
     *
     * Hash: 0x39654E1F68B78287 | Since: 1207
     */
    function _0x39654E1F68B78287() {
        return Citizen.invokeNative('0x39654E1F68B78287');
    }
    minigame._0x39654E1F68B78287 = _0x39654E1F68B78287;
    /**
     * No comment provided
     *
     * Hash: 0x398066F893149856 | Since: 1207
     */
    function _0x398066F893149856() {
        return Citizen.invokeNative('0x398066F893149856', undefined, undefined, undefined);
    }
    minigame._0x398066F893149856 = _0x398066F893149856;
    /**
     * No comment provided
     *
     * Hash: 0x3AE451860F03CA8A | Since: 1207
     */
    function _0x3AE451860F03CA8A() {
        return Citizen.invokeNative('0x3AE451860F03CA8A', undefined, undefined);
    }
    minigame._0x3AE451860F03CA8A = _0x3AE451860F03CA8A;
    /**
     * No comment provided
     *
     * Hash: 0x3B31732FADE5BAF3 | Since: 1207
     */
    function _0x3B31732FADE5BAF3() {
        return Citizen.invokeNative('0x3B31732FADE5BAF3');
    }
    minigame._0x3B31732FADE5BAF3 = _0x3B31732FADE5BAF3;
    /**
     * No comment provided
     *
     * Hash: 0x3DF7EE3A76185108 | Since: 1207
     */
    function _0x3DF7EE3A76185108() {
        Citizen.invokeNative('0x3DF7EE3A76185108');
    }
    minigame._0x3DF7EE3A76185108 = _0x3DF7EE3A76185108;
    /**
     * No comment provided
     *
     * Hash: 0x3EECAADAB0D9FE29 | Since: 1207
     */
    function _0x3EECAADAB0D9FE29() {
        return Citizen.invokeNative('0x3EECAADAB0D9FE29');
    }
    minigame._0x3EECAADAB0D9FE29 = _0x3EECAADAB0D9FE29;
    /**
     * No comment provided
     *
     * Hash: 0x3F4FD4BED07AB8C4 | Since: 1207
     */
    function _0x3F4FD4BED07AB8C4() {
        return Citizen.invokeNative('0x3F4FD4BED07AB8C4', undefined);
    }
    minigame._0x3F4FD4BED07AB8C4 = _0x3F4FD4BED07AB8C4;
    /**
     * No comment provided
     *
     * Hash: 0x3FFE60DD8A936551 | Since: 1207
     */
    function _0x3FFE60DD8A936551() {
        return Citizen.invokeNative('0x3FFE60DD8A936551', undefined, undefined);
    }
    minigame._0x3FFE60DD8A936551 = _0x3FFE60DD8A936551;
    /**
     * No comment provided
     *
     * Hash: 0x455ECCA0715C507F | Since: 1207
     */
    function _0x455ECCA0715C507F() {
        Citizen.invokeNative('0x455ECCA0715C507F');
    }
    minigame._0x455ECCA0715C507F = _0x455ECCA0715C507F;
    /**
     * No comment provided
     *
     * Hash: 0x578907F59BA01B6D | Since: 1207
     */
    function _0x578907F59BA01B6D() {
        return Citizen.invokeNative('0x578907F59BA01B6D', undefined);
    }
    minigame._0x578907F59BA01B6D = _0x578907F59BA01B6D;
    /**
     * No comment provided
     *
     * Hash: 0x580F34C726387226 | Since: 1207
     */
    function _0x580F34C726387226() {
        return Citizen.invokeNative('0x580F34C726387226', undefined, undefined);
    }
    minigame._0x580F34C726387226 = _0x580F34C726387226;
    /**
     * No comment provided
     *
     * Hash: 0x58521E6DCDE97D74 | Since: 1207
     */
    function _0x58521E6DCDE97D74() {
        Citizen.invokeNative('0x58521E6DCDE97D74', undefined, undefined, undefined);
    }
    minigame._0x58521E6DCDE97D74 = _0x58521E6DCDE97D74;
    /**
     * No comment provided
     *
     * Hash: 0x644439B5387EE57E | Since: 1207
     */
    function _0x644439B5387EE57E() {
        return Citizen.invokeNative('0x644439B5387EE57E', undefined, undefined);
    }
    minigame._0x644439B5387EE57E = _0x644439B5387EE57E;
    /**
     * No comment provided
     *
     * Hash: 0x6480723D3BE535B6 | Since: 1207
     */
    function _0x6480723D3BE535B6() {
        Citizen.invokeNative('0x6480723D3BE535B6', undefined);
    }
    minigame._0x6480723D3BE535B6 = _0x6480723D3BE535B6;
    /**
     * No comment provided
     *
     * Hash: 0x910B088E51A511AC | Since: 1207
     */
    function _0x910B088E51A511AC() {
        return Citizen.invokeNative('0x910B088E51A511AC');
    }
    minigame._0x910B088E51A511AC = _0x910B088E51A511AC;
    /**
     * No comment provided
     *
     * Hash: 0x9DD95B405AB4983E | Since: 1207
     */
    function _0x9DD95B405AB4983E() {
        return Citizen.invokeNative('0x9DD95B405AB4983E', undefined, undefined);
    }
    minigame._0x9DD95B405AB4983E = _0x9DD95B405AB4983E;
    /**
     * No comment provided
     *
     * Hash: 0xA2DB3C6270C122E3 | Since: 1207
     */
    function _0xA2DB3C6270C122E3() {
        return Citizen.invokeNative('0xA2DB3C6270C122E3', undefined, undefined);
    }
    minigame._0xA2DB3C6270C122E3 = _0xA2DB3C6270C122E3;
    /**
     * No comment provided
     *
     * Hash: 0xBEA7D3CB47E1479C | Since: 1207
     */
    function _0xBEA7D3CB47E1479C() {
        return Citizen.invokeNative('0xBEA7D3CB47E1479C');
    }
    minigame._0xBEA7D3CB47E1479C = _0xBEA7D3CB47E1479C;
    /**
     * No comment provided
     *
     * Hash: 0xD39D32EB3B52DD83 | Since: 1207
     */
    function _0xD39D32EB3B52DD83() {
        return Citizen.invokeNative('0xD39D32EB3B52DD83', undefined);
    }
    minigame._0xD39D32EB3B52DD83 = _0xD39D32EB3B52DD83;
    /**
     * No comment provided
     *
     * Hash: 0xDF728C5AE137FC14 | Since: 1207
     */
    function _0xDF728C5AE137FC14() {
        return Citizen.invokeNative('0xDF728C5AE137FC14', undefined, undefined, undefined);
    }
    minigame._0xDF728C5AE137FC14 = _0xDF728C5AE137FC14;
    /**
     * No comment provided
     *
     * Hash: 0xE1F365C4C8F259D8 | Since: 1207
     */
    function _0xE1F365C4C8F259D8() {
        return Citizen.invokeNative('0xE1F365C4C8F259D8', undefined, undefined, undefined);
    }
    minigame._0xE1F365C4C8F259D8 = _0xE1F365C4C8F259D8;
    /**
     * No comment provided
     *
     * Hash: 0xE53A308AC35877A8 | Since: 1207
     */
    function _0xE53A308AC35877A8() {
        return Citizen.invokeNative('0xE53A308AC35877A8');
    }
    minigame._0xE53A308AC35877A8 = _0xE53A308AC35877A8;
    /**
     * No comment provided
     *
     * Hash: 0xEC819D612038EF4B | Since: 1207
     */
    function _0xEC819D612038EF4B() {
        return Citizen.invokeNative('0xEC819D612038EF4B', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    minigame._0xEC819D612038EF4B = _0xEC819D612038EF4B;
    /**
     * No comment provided
     *
     * Hash: 0xF6DE98516FD3AC9B | Since: 1207
     */
    function _0xF6DE98516FD3AC9B() {
        Citizen.invokeNative('0xF6DE98516FD3AC9B');
    }
    minigame._0xF6DE98516FD3AC9B = _0xF6DE98516FD3AC9B;
    /**
     * Hardcoded to return zero/false.
     *
     * Hash: 0x399E6CD12FC8CA89 | Since: 1207
     */
    function dominoesBuyIn() {
        return DominoesBuyIn(undefined);
    }
    minigame.dominoesBuyIn = dominoesBuyIn;
    /**
     * Hardcoded to return zero/false.
     *
     * Hash: 0xB79A29B33BF29BA5 | Since: 1207
     */
    function dominoesPlaceDomino() {
        return DominoesPlaceDomino(undefined, undefined);
    }
    minigame.dominoesPlaceDomino = dominoesPlaceDomino;
    /**
     * Hardcoded to return zero/false.
     *
     * Hash: 0xE26AEE7E67D9E21D | Since: 1207
     */
    function dominoesRequestValidPlacements() {
        return DominoesRequestValidPlacements(undefined);
    }
    minigame.dominoesRequestValidPlacements = dominoesRequestValidPlacements;
    /**
     * No comment provided
     *
     * Hash: 0xDF728C5AE137FC13 | Since: 1207
     */
    function getNextEvent() {
        return MinigameGetNextEvent(undefined, undefined);
    }
    minigame.getNextEvent = getNextEvent;
    /**
     * No comment provided
     *
     * Hash: 0x578907F59BA01B6C | Since: 1207
     */
    function getNextEventType() {
        return MinigameGetNextEventType();
    }
    minigame.getNextEventType = getNextEventType;
    /**
     * No comment provided
     *
     * Hash: 0x2A0C4736AC5AF0CE | Since: 1207
     */
    function isConnectedToServer() {
        return MinigameIsConnectedToServer(undefined);
    }
    minigame.isConnectedToServer = isConnectedToServer;
    /**
     * No comment provided
     *
     * Hash: 0x9105A4A2556FA937 | Since: 1207
     */
    function isRequestPending() {
        return MinigameIsRequestPending(undefined);
    }
    minigame.isRequestPending = isRequestPending;
    /**
     * No comment provided
     *
     * Hash: 0x8593A8CB0ED2C3B4 | Since: 1207
     */
    function isSeatOccupied() {
        return MinigameIsSeatOccupied(undefined);
    }
    minigame.isSeatOccupied = isSeatOccupied;
    /**
     * No comment provided
     *
     * Hash: 0xF5446E47941E654C | Since: 1207
     */
    function leaveTable() {
        return MinigameLeaveTable(undefined);
    }
    minigame.leaveTable = leaveTable;
    /**
     * No comment provided
     *
     * Hash: 0x833E03BAEBADC4B0 | Since: 1207
     */
    function popNextEvent() {
        MinigamePopNextEvent();
    }
    minigame.popNextEvent = popNextEvent;
    /**
     * No comment provided
     *
     * Hash: 0xF6AC6085D8D6C004 | Since: 1207
     */
    function requestSeatAtTable() {
        return MinigameRequestSeatAtTable();
    }
    minigame.requestSeatAtTable = requestSeatAtTable;
    /**
     * No comment provided
     *
     * Hash: 0xB4D610EA5A1FDE74 | Since: 1207
     */
    function pokerBuyIn() {
        return PokerBuyIn(undefined, undefined);
    }
    minigame.pokerBuyIn = pokerBuyIn;
    /**
     * No comment provided
     *
     * Hash: 0x8DED681B161EBD78 | Since: 1207
     */
    function pokerCall() {
        return PokerCall(undefined, undefined);
    }
    minigame.pokerCall = pokerCall;
    /**
     * No comment provided
     *
     * Hash: 0x49A045628D9B1B86 | Since: 1207
     */
    function pokerCheck() {
        return PokerCheck(undefined, undefined);
    }
    minigame.pokerCheck = pokerCheck;
    /**
     * No comment provided
     *
     * Hash: 0x3DFAB7D9BB45B5BE | Since: 1207
     */
    function pokerFold() {
        return PokerFold(undefined);
    }
    minigame.pokerFold = pokerFold;
    /**
     * No comment provided
     *
     * Hash: 0x2D20E12E1990D584 | Since: 1207
     */
    function pokerGetGameSettingsForId() {
        return PokerGetGameSettingsForId(undefined);
    }
    minigame.pokerGetGameSettingsForId = pokerGetGameSettingsForId;
    /**
     * No comment provided
     *
     * Hash: 0xECCF45A79A17BB96 | Since: 1207
     */
    function pokerRaise() {
        return PokerRaise(undefined, undefined);
    }
    minigame.pokerRaise = pokerRaise;
    /**
     * No comment provided
     *
     * Hash: 0x2F2131DB0A8B02DC | Since: 1207
     */
    function pokerReveal() {
        return PokerReveal(undefined);
    }
    minigame.pokerReveal = pokerReveal;
})(minigame || (minigame = {}));
export var misc;
(function (misc) {
    /**
     * No comment provided
     *
     * Hash: 0x134549B388167CBF | Since: 1207
     */
    function absf(value) {
        return Absf(value);
    }
    misc.absf = absf;
    /**
     * No comment provided
     *
     * Hash: 0x0C214D5B8A38C828 | Since: 1207
     */
    function absi(value) {
        return Absi(value);
    }
    misc.absi = absi;
    /**
     * No comment provided
     *
     * Hash: 0x586690F0176DC575 | Since: 1207
     */
    function acos() {
        return Acos(0);
    }
    misc.acos = acos;
    /**
     * Appears to remove stealth kill action from memory (?)
     *
     * Hash: 0x7ACF124C12A2B045 | Since: 1207
     */
    function actionManagerEnableAction(hash, enable) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        ActionManagerEnableAction(hash, enable);
    }
    misc.actionManagerEnableAction = actionManagerEnableAction;
    /**
     * No comment provided
     *
     * Hash: 0xFD0759658268FD8E | Since: 1207
     */
    function actionManagerIsActionEnabled(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return ActionManagerIsActionEnabled(hash);
    }
    misc.actionManagerIsActionEnabled = actionManagerIsActionEnabled;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x91D657230BC208D2 | Since: 1207
     */
    function activityFeedActionStartWithCommandLine() {
        ActivityFeedActionStartWithCommandLine(undefined, undefined);
    }
    misc.activityFeedActionStartWithCommandLine = activityFeedActionStartWithCommandLine;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x1694A053DFB61A34 | Since: 1207
     */
    function activityFeedActionStartWithCommandLineAdd() {
        ActivityFeedActionStartWithCommandLineAdd(undefined);
    }
    misc.activityFeedActionStartWithCommandLineAdd = activityFeedActionStartWithCommandLineAdd;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x9935F76407C32539 | Since: 1207
     */
    function activityFeedAddSubstringToCaption() {
        ActivityFeedAddSubstringToCaption(undefined);
    }
    misc.activityFeedAddSubstringToCaption = activityFeedAddSubstringToCaption;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xCC7FC854B956A128 | Since: 1207
     */
    function activityFeedCreate() {
        return ActivityFeedCreate();
    }
    misc.activityFeedCreate = activityFeedCreate;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xB16FC7B364D86585 | Since: 1207
     */
    function activityFeedPost() {
        ActivityFeedPost();
    }
    misc.activityFeedPost = activityFeedPost;
    /**
     * No comment provided
     *
     * Hash: 0x5EBDA1A3B8CB5EF7 | Since: 1207
     */
    function addPopMultiplierArea(x1, y1, z1, x2, y2, z2, pedDensity, trafficDensity) {
        return AddPopMultiplierArea(x1, y1, z1, x2, y2, z2, pedDensity, trafficDensity, false, false);
    }
    misc.addPopMultiplierArea = addPopMultiplierArea;
    /**
     * Params: p3 is 0 in R* Script utopia2
     *
     * Hash: 0xE4EE55E63FA9AF45 | Since: 1207
     */
    function addTacticalNavMeshPoint(pos) {
        AddTacticalNavMeshPoint(pos.x, pos.y, pos.z, 0);
    }
    misc.addTacticalNavMeshPoint = addTacticalNavMeshPoint;
    /**
     * No comment provided
     *
     * Hash: 0xD3852F22AB713A1F | Since: 1207
     */
    function areStringsEqual() {
        return AreStringsEqual();
    }
    misc.areStringsEqual = areStringsEqual;
    /**
     * No comment provided
     *
     * Hash: 0x6E3C15D296C15583 | Since: 1207
     */
    function asin() {
        return Asin(0);
    }
    misc.asin = asin;
    /**
     * No comment provided
     *
     * Hash: 0x503054DED0B78027 | Since: 1207
     */
    function atan() {
        return Atan(0);
    }
    misc.atan = atan;
    /**
     * No comment provided
     *
     * Hash: 0x965B220A066E3F07 | Since: 1207
     */
    function atan2() {
        return Atan2(0, 0);
    }
    misc.atan2 = atan2;
    /**
     * dispatchService: see ENABLE_DISPATCH_SERVICE
     *
     * Hash: 0x66947E61A44DE2C6 | Since: 1207
     */
    function blockDispatchServiceResourceCreation(dispatchService, toggle) {
        BlockDispatchServiceResourceCreation(dispatchService, toggle);
    }
    misc.blockDispatchServiceResourceCreation = blockDispatchServiceResourceCreation;
    /**
     * Old name: _CANCEL_ONSCREEN_KEYBOARD
     *
     * Hash: 0x58A39BE597CE99CD | Since: 1207
     */
    function cancelOnscreenKeyboard() {
        CancelOnscreenKeyboard();
    }
    misc.cancelOnscreenKeyboard = cancelOnscreenKeyboard;
    /**
     * No comment provided
     *
     * Hash: 0xA4D83115C1E02F8A | Since: 1207
     */
    function clearAngledAreaOfVehicles() {
        ClearAngledAreaOfVehicles(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    misc.clearAngledAreaOfVehicles = clearAngledAreaOfVehicles;
    /**
     * Possible flag names:
     * ALL_BASE = 0,
     * PROJECTILES = 1,
     * BROADCAST = 524288,
     * AMBIENT_POPULATION = 1048576
     *
     * Hash: 0x3B882A96EA77D5B1 | Since: 1207
     */
    function clearArea(pos, radius, flag) {
        ClearArea(pos.x, pos.y, pos.z, radius, flag);
    }
    misc.clearArea = clearArea;
    /**
     * No comment provided
     *
     * Hash: 0x7D1D4A3602B6AD4E | Since: 1207
     */
    function clearBit(offset) {
        return ClearBit(offset);
    }
    misc.clearBit = clearBit;
    /**
     * No comment provided
     *
     * Hash: 0x80A398F16FFE3CC3 | Since: 1207
     */
    function clearOverrideWeather() {
        ClearOverrideWeather();
    }
    misc.clearOverrideWeather = clearOverrideWeather;
    /**
     * No comment provided
     *
     * Hash: 0xD93B6516C6878267 | Since: 1207
     */
    function clearTacticalNavMeshPoints() {
        ClearTacticalNavMeshPoints();
    }
    misc.clearTacticalNavMeshPoints = clearTacticalNavMeshPoints;
    /**
     * No comment provided
     *
     * Hash: 0xD85DFE5C131E4AE9 | Since: 1207
     */
    function clearWeatherTypePersist() {
        ClearWeatherTypePersist();
    }
    misc.clearWeatherTypePersist = clearWeatherTypePersist;
    /**
     * No comment provided
     *
     * Hash: 0xBFBB74A15EFC149B | Since: 1207
     */
    function compareStrings(matchCase, maxLength) {
        return CompareStrings(matchCase, maxLength);
    }
    misc.compareStrings = compareStrings;
    /**
     * Old name: _COPY_MEMORY
     *
     * Hash: 0xF7AC7DC0DEE7C9BE | Since: 1207
     */
    function copyScriptStruct(size) {
        return CopyScriptStruct(size);
    }
    misc.copyScriptStruct = copyScriptStruct;
    /**
     * dispatchService: see ENABLE_DISPATCH_SERVICE
     *
     * Hash: 0x3F892CAF67444AE7 | Since: 1207
     */
    function createIncident(dispatchService, pos, numUnits, radius) {
        return CreateIncident(dispatchService, pos.x, pos.y, pos.z, numUnits, radius, undefined, undefined);
    }
    misc.createIncident = createIncident;
    /**
     * Delete an incident with a given id.
     *
     * Hash: 0x5CFD0F0D6AAE0AEE | Since: 1207
     */
    function deleteIncident(incidentId) {
        DeleteIncident(incidentId);
    }
    misc.deleteIncident = deleteIncident;
    /**
     * disables prompt eat
     *
     * Hash: 0x40D72189F46D2E15 | Since: 1207
     */
    function disableLootingCompositeLootableThisFrame(compositeId, disable) {
        DisableLootingCompositeLootableThisFrame(compositeId, disable);
    }
    misc.disableLootingCompositeLootableThisFrame = disableLootingCompositeLootableThisFrame;
    /**
     * enum eOnscreenKeyboardTextType
     * {
     * KTEXTTYPE_INVALID = -1,
     * KTEXTTYPE_DEFAULT,
     * KTEXTTYPE_EMAIL,
     * KTEXTTYPE_PASSWORD,
     * KTEXTTYPE_NUMERIC,
     * KTEXTTYPE_ALPHABET,
     * KTEXTTYPE_GAMERTAG,
     * KTEXTTYPE_FILENAME,
     * KTEXTTYPE_COUNT
     * };
     *
     * Hash: 0x044131118D8DB3CD | Since: 1207
     */
    function displayOnscreenKeyboard(textType, maxInputLength) {
        return DisplayOnscreenKeyboard(textType, maxInputLength);
    }
    misc.displayOnscreenKeyboard = displayOnscreenKeyboard;
    /**
     * No comment provided
     *
     * Hash: 0x03BA619C81A646B3 | Since: 1207
     */
    function doesPopMultiplierAreaExist(id) {
        return DoesPopMultiplierAreaExist(id);
    }
    misc.doesPopMultiplierAreaExist = doesPopMultiplierAreaExist;
    /**
     * enum DispatchType
     * {
     * DT_Invalid,
     * DT_PoliceAutomobile,
     * DT_PoliceHelicopter,
     * DT_FireDepartment,
     * DT_SwatAutomobile,
     * DT_AmbulanceDepartment,
     * DT_PoliceRiders,
     * DT_PoliceVehicleRequest,
     * DT_PoliceRoadBlock,
     * DT_PoliceAutomobileWaitPulledOver,
     * DT_PoliceAutomobileWaitCruising,
     * DT_Gangs,
     * DT_SwatHelicopter,
     * DT_PoliceBoat,
     * DT_ArmyVehicle,
     * DT_OnFoot,
     * DT_PoliceDogs
     * };
     *
     * Hash: 0x50E52637EF70EF77 | Since: 1207
     */
    function enableDispatchService(dispatchService, toggle) {
        EnableDispatchService(dispatchService, toggle);
    }
    misc.enableDispatchService = enableDispatchService;
    /**
     * No comment provided
     *
     * Hash: 0xCBC9A21F6A2A679C | Since: 1207
     */
    function fireSingleBullet() {
        return FireSingleBullet();
    }
    misc.fireSingleBullet = fireSingleBullet;
    /**
     * creates single lightning+thunder at random position
     *
     * Hash: 0x369DB5B2510FA080 | Since: 1207
     */
    function forceLightningFlash() {
        ForceLightningFlash();
    }
    misc.forceLightningFlash = forceLightningFlash;
    /**
     * No comment provided
     *
     * Hash: 0x4CABE596D632E4B0 | Since: 1207
     */
    function gameFrameworkManagerInit(transitionMode) {
        if (typeof transitionMode === 'string')
            transitionMode = misc.getHashKey(transitionMode);
        return GameFrameworkManagerInit(transitionMode);
    }
    misc.gameFrameworkManagerInit = gameFrameworkManagerInit;
    /**
     * No comment provided
     *
     * Hash: 0xD0DFE1C486097BBB | Since: 1207
     */
    function getAngleBetween2dVectors(x1, y1, x2, y2) {
        return GetAngleBetween2dVectors(x1, y1, x2, y2);
    }
    misc.getAngleBetween2dVectors = getAngleBetween2dVectors;
    /**
     * Returns value of the '-benchmarkIterations' command line option.
     *
     * Old name: _GET_BENCHMARK_ITERATIONS_FROM_COMMAND_LINE
     *
     * Hash: 0x22FC52CF470CC98D | Since: 1207
     */
    function getBenchmarkIterations() {
        return GetBenchmarkIterations();
    }
    misc.getBenchmarkIterations = getBenchmarkIterations;
    /**
     * Returns value of the '-benchmarkPass' command line option.
     *
     * Old name: _GET_BENCHMARK_PASS_FROM_COMMAND_LINE
     *
     * Hash: 0x9297DACF3A2CDFF7 | Since: 1207
     */
    function getBenchmarkPass() {
        return GetBenchmarkPass();
    }
    misc.getBenchmarkPass = getBenchmarkPass;
    /**
     * No comment provided
     *
     * Hash: 0x68E1352AF48F905D | Since: 1207
     */
    function getBitsInRange(_var, rangeStart, rangeEnd) {
        return GetBitsInRange(_var, rangeStart, rangeEnd);
    }
    misc.getBitsInRange = getBitsInRange;
    /**
     * No comment provided
     *
     * Hash: 0x83ACC65D9ACEC5EF | Since: 1207
     */
    function getClosestPointOnLine() {
        return new Vector3(GetClosestPointOnLine(0, 0, 0, 0, 0, 0, 0, 0, 0, false));
    }
    misc.getClosestPointOnLine = getClosestPointOnLine;
    /**
     * No comment provided
     *
     * Hash: 0xD73C960A681052DF | Since: 1207
     */
    function getCoordsOfProjectileTypeWithinDistance(ped, weaponHash, distance, mustBeOwnedByThisPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetCoordsOfProjectileTypeWithinDistance(_ped, weaponHash, distance, false, mustBeOwnedByThisPed);
    }
    misc.getCoordsOfProjectileTypeWithinDistance = getCoordsOfProjectileTypeWithinDistance;
    /**
     * Params: percentWeather2: 0f - 0.75f in R* Scripts
     *
     * Old name: _GET_WEATHER_TYPE_TRANSITION
     *
     * Hash: 0x0AC679B2342F14F2 | Since: 1207
     */
    function getCurrWeatherState() {
        return GetCurrWeatherState();
    }
    misc.getCurrWeatherState = getCurrWeatherState;
    /**
     * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
     *
     * `Consider using this faster native instead: BUILTIN::VDIST - DVIST always takes in consideration the 3D coordinates.`
     *
     * Hash: 0x0BE7F4E3CDBAFB28 | Since: 1207
     */
    function getDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ) {
        return GetDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ);
    }
    misc.getDistanceBetweenCoords = getDistanceBetweenCoords;
    /**
     * No comment provided
     *
     * Hash: 0x77DFA958FCF100C1 | Since: 1207
     */
    function getFrameCount() {
        return GetFrameCount();
    }
    misc.getFrameCount = getFrameCount;
    /**
     * No comment provided
     *
     * Hash: 0x5E72022914CE3C38 | Since: 1207
     */
    function getFrameTime() {
        return GetFrameTime();
    }
    misc.getFrameTime = getFrameTime;
    /**
     * No comment provided
     *
     * Hash: 0x4F67E8ECA7D3F667 | Since: 1207
     */
    function getGameTimer() {
        return GetGameTimer();
    }
    misc.getGameTimer = getGameTimer;
    /**
     * No comment provided
     *
     * Hash: 0x2A29CA9A6319E6AB | Since: 1207
     */
    function getGroundZAndNormalFor3dCoord(pos) {
        return GetGroundZAndNormalFor3dCoord(pos.x, pos.y, pos.z);
    }
    misc.getGroundZAndNormalFor3dCoord = getGroundZAndNormalFor3dCoord;
    /**
     * No comment provided
     *
     * Hash: 0x24FA4267BB8D2431 | Since: 1207
     */
    function getGroundZFor3dCoord(pos) {
        return GetGroundZFor3dCoord(pos.x, pos.y, pos.z, false);
    }
    misc.getGroundZFor3dCoord = getGroundZFor3dCoord;
    /**
     * Computes a hash for the given string. It is hashed using Jenkins' One-at-a-Time hash algorithm (https://en.wikipedia.org/wiki/Jenkins_hash_function)
     * Note: this implementation is case-insensitive.
     *
     * Hash: 0xFD340785ADF8CFB7 | Since: 1207
     */
    function getHashKey(_string) {
        return GetHashKey(_string);
    }
    misc.getHashKey = getHashKey;
    /**
     * dx = x1 - x2
     * dy = y1 - y2
     *
     * Hash: 0x38D5202FF9271C62 | Since: 1207
     */
    function getHeadingFromVector2d(dx, dy) {
        return GetHeadingFromVector2d(dx, dy);
    }
    misc.getHeadingFromVector2d = getHeadingFromVector2d;
    /**
     * No comment provided
     *
     * Hash: 0xAB6A04CEC428258B | Since: 1207
     */
    function getLinePlaneIntersection() {
        return GetLinePlaneIntersection(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    misc.getLinePlaneIntersection = getLinePlaneIntersection;
    /**
     * No comment provided
     *
     * Hash: 0xB15CD1CF58771DE1 | Since: 1207
     */
    function getMissionFlag() {
        return GetMissionFlag();
    }
    misc.getMissionFlag = getMissionFlag;
    /**
     * No comment provided
     *
     * Hash: 0xDCB8DDD5D054A7E7 | Since: 1207
     */
    function getModelDimensions(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetModelDimensions(modelHash);
    }
    misc.getModelDimensions = getModelDimensions;
    /**
     * No comment provided
     *
     * Hash: 0x40DC2907A9697EF7 | Since: 1207
     */
    function getNumberOfFreeStacksOfThisSize(stackSize) {
        return GetNumberOfFreeStacksOfThisSize(stackSize);
    }
    misc.getNumberOfFreeStacksOfThisSize = getNumberOfFreeStacksOfThisSize;
    /**
     * No comment provided
     *
     * Hash: 0xB0CE5E5ED8BB3581 | Since: 1207
     */
    function getNumberOfMicrosecondsSinceLastCall() {
        return GetNumberOfMicrosecondsSinceLastCall();
    }
    misc.getNumberOfMicrosecondsSinceLastCall = getNumberOfMicrosecondsSinceLastCall;
    /**
     * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
     *
     * Hash: 0xAFB4CF58A4A292B1 | Since: 1207
     */
    function getOnscreenKeyboardResult() {
        return GetOnscreenKeyboardResult();
    }
    misc.getOnscreenKeyboardResult = getOnscreenKeyboardResult;
    /**
     * No comment provided
     *
     * Hash: 0x9578986A6105A6AD | Since: 1207
     */
    function getProjectileOfProjectileTypeWithinDistance(ped, weaponHash, distance, mustBeOwnedByThisPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetProjectileOfProjectileTypeWithinDistance(_ped, weaponHash, distance, false, mustBeOwnedByThisPed);
    }
    misc.getProjectileOfProjectileTypeWithinDistance = getProjectileOfProjectileTypeWithinDistance;
    /**
     * No comment provided
     *
     * Hash: 0x931B5F4CC130224B | Since: 1207
     */
    function getRainLevel() {
        return GetRainLevel();
    }
    misc.getRainLevel = getRainLevel;
    /**
     * No comment provided
     *
     * Hash: 0x924D54E5698AE3E0 | Since: 1207
     */
    function getRandomEventFlag() {
        return GetRandomEventFlag();
    }
    misc.getRandomEventFlag = getRandomEventFlag;
    /**
     * No comment provided
     *
     * Hash: 0xE29F927A961F8AAA | Since: 1207
     */
    function getRandomFloatInRange(startRange, endRange) {
        return GetRandomFloatInRange(startRange, endRange);
    }
    misc.getRandomFloatInRange = getRandomFloatInRange;
    /**
     * No comment provided
     *
     * Hash: 0xD53343AA4FB7DD28 | Since: 1207
     */
    function getRandomIntInRange(startRange, endRange) {
        return GetRandomIntInRange(startRange, endRange);
    }
    misc.getRandomIntInRange = getRandomIntInRange;
    /**
     * Returns GET_GAME_TIMER() / 1000
     * Only used in rcm_pearson1.ysc
     *
     * Hash: 0x2E036F0480B8BF02 | Since: 1207
     */
    function getRealWorldTime() {
        return GetRealWorldTime();
    }
    misc.getRealWorldTime = getRealWorldTime;
    /**
     * No comment provided
     *
     * Hash: 0x63219768C586667C | Since: 1207
     */
    function getScriptTimeWithinFrameInMicroseconds() {
        return GetScriptTimeWithinFrameInMicroseconds();
    }
    misc.getScriptTimeWithinFrameInMicroseconds = getScriptTimeWithinFrameInMicroseconds;
    /**
     * No comment provided
     *
     * Hash: 0x1E5D727041BE1709 | Since: 1207
     */
    function getSnowLevel() {
        return GetSnowLevel();
    }
    misc.getSnowLevel = getSnowLevel;
    /**
     * No comment provided
     *
     * Hash: 0xBE7F225417E35A7C | Since: 1207
     */
    function getSystemTime() {
        return GetSystemTime();
    }
    misc.getSystemTime = getSystemTime;
    /**
     * Old name: _GET_BENCHMARK_TIME
     *
     * Hash: 0x3F3172FEAE3AFE1C | Since: 1207
     */
    function getSystemTimeStep() {
        return GetSystemTimeStep();
    }
    misc.getSystemTimeStep = getSystemTimeStep;
    /**
     * No comment provided
     *
     * Hash: 0xF703E82F3FE14A5F | Since: 1207
     */
    function getWindDirection() {
        return new Vector3(GetWindDirection());
    }
    misc.getWindDirection = getWindDirection;
    /**
     * No comment provided
     *
     * Hash: 0xFFB7E74E041150A4 | Since: 1207
     */
    function getWindSpeed() {
        return GetWindSpeed();
    }
    misc.getWindSpeed = getWindSpeed;
    /**
     * p3 - possibly radius?
     *
     * Hash: 0xC153E5BCCF411814 | Since: 1207
     */
    function hasBulletImpactedInArea(pos) {
        return HasBulletImpactedInArea(pos.x, pos.y, pos.z, 0, false, false);
    }
    misc.hasBulletImpactedInArea = hasBulletImpactedInArea;
    /**
     * No comment provided
     *
     * Hash: 0x3B6A4C05FB2B33AC | Since: 1207
     */
    function hasBulletImpactedInBox() {
        return HasBulletImpactedInBox(0, 0, 0, 0, 0, 0, false, false);
    }
    misc.hasBulletImpactedInBox = hasBulletImpactedInBox;
    /**
     * No comment provided
     *
     * Hash: 0x6C9FF40FF1B69F8F | Since: 1207
     */
    function ignoreNextRestart(toggle) {
        IgnoreNextRestart(toggle);
    }
    misc.ignoreNextRestart = ignoreNextRestart;
    /**
     * No comment provided
     *
     * Hash: 0x708DF841B8F27AA2 | Since: 1207
     */
    function informCodeOfContentIdOfCurrentUgcMission() {
        InformCodeOfContentIdOfCurrentUgcMission(undefined);
    }
    misc.informCodeOfContentIdOfCurrentUgcMission = informCodeOfContentIdOfCurrentUgcMission;
    /**
     * No comment provided
     *
     * Hash: 0x4ED6CFDFE8D4131A | Since: 1207
     */
    function isBitSet(address, offset) {
        return IsBitSet(address, offset);
    }
    misc.isBitSet = isBitSet;
    /**
     * No comment provided
     *
     * Hash: 0x9D09D8493747CF02 | Since: 1207
     */
    function isBulletInAngledArea() {
        return IsBulletInAngledArea(0, 0, 0, 0, 0, 0, 0, false);
    }
    misc.isBulletInAngledArea = isBulletInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0xC652FD308772D79E | Since: 1207
     */
    function isBulletInArea() {
        return IsBulletInArea(0, 0, 0, 0, false);
    }
    misc.isBulletInArea = isBulletInArea;
    /**
     * No comment provided
     *
     * Hash: 0xC128137C52152741 | Since: 1207
     */
    function isBulletInBox() {
        return IsBulletInBox(0, 0, 0, 0, 0, 0, false);
    }
    misc.isBulletInBox = isBulletInBox;
    /**
     * Hardcoded to return false.
     * Checks for XBOXONE Game Build.
     *
     * Hash: 0xD1CCC2A2639D325F | Since: 1207
     */
    function isDurangoVersion() {
        return IsDurangoVersion();
    }
    misc.isDurangoVersion = isDurangoVersion;
    /**
     * No comment provided
     *
     * Hash: 0xF9E7DBB39080640B | Since: 1207
     */
    function isGameSessionStateMachineIdle() {
        return IsGameSessionStateMachineIdle();
    }
    misc.isGameSessionStateMachineIdle = isGameSessionStateMachineIdle;
    /**
     * No comment provided
     *
     * Hash: 0x39F2B1BAD412246A | Since: 1207
     */
    function isIncidentValid(incidentId) {
        return IsIncidentValid(incidentId);
    }
    misc.isIncidentValid = isIncidentValid;
    /**
     * magdemo = magazine demo, i. e. for magazines such as IGN, pre play phases to prepare articles etc. - example 2012 builds for V
     * Hardcoded to return false.
     *
     * Hash: 0x5FC9357C26DAEFCE | Since: 1207
     */
    function isMagDemo1Active() {
        return IsMagDemo1Active();
    }
    misc.isMagDemo1Active = isMagDemo1Active;
    /**
     * No comment provided
     *
     * Hash: 0xF4D8BCD052E7EA1B | Since: 1207
     */
    function isMinigameInProgress() {
        return IsMinigameInProgress();
    }
    misc.isMinigameInProgress = isMinigameInProgress;
    /**
     * Hardcoded to return false.
     * Checks for PS4 Game Build.
     *
     * Hash: 0x88CFAE250D3E0C71 | Since: 1207
     */
    function isOrbisVersion() {
        return IsOrbisVersion();
    }
    misc.isOrbisVersion = isOrbisVersion;
    /**
     * Hardcoded to return true.
     *
     * Hash: 0xB0FB6CFAA5A1C833 | Since: 1207
     */
    function isPcVersion() {
        return IsPcVersion();
    }
    misc.isPcVersion = isPcVersion;
    /**
     * No comment provided
     *
     * Hash: 0x825CA3ED43831015 | Since: 1207
     */
    function isPositionOccupied(pos, range) {
        return IsPositionOccupied(pos.x, pos.y, pos.z, range, false, false, false, false, false, undefined, false);
    }
    misc.isPositionOccupied = isPositionOccupied;
    /**
     * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
     *
     * ownedByPlayer = only projectiles fired by the player will be detected.
     *
     * Hash: 0x05B0061EFDFC8941 | Since: 1207
     */
    function isProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer) {
        return IsProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer);
    }
    misc.isProjectileInArea = isProjectileInArea;
    /**
     * No comment provided
     *
     * Hash: 0x928431F4133CD3D4 | Since: 1207
     */
    function isProjectileTypeInAngledArea() {
        return IsProjectileTypeInAngledArea(0, 0, 0, 0, 0, 0, 0, undefined, false);
    }
    misc.isProjectileTypeInAngledArea = isProjectileTypeInAngledArea;
    /**
     * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a rectangle.
     *
     * Hash: 0x04965FB9E14235C7 | Since: 1207
     */
    function isProjectileTypeInArea(xMin, yMin, zMin, xMax, yMax, zMax, weaponType, isPlayer) {
        if (typeof weaponType === 'string')
            weaponType = misc.getHashKey(weaponType);
        return IsProjectileTypeInArea(xMin, yMin, zMin, xMax, yMax, zMax, weaponType, isPlayer);
    }
    misc.isProjectileTypeInArea = isProjectileTypeInArea;
    /**
     * No comment provided
     *
     * Hash: 0xF51C9BAAD9ED64C4 | Since: 1207
     */
    function isProjectileTypeWithinDistance() {
        return IsProjectileTypeWithinDistance(0, 0, 0, undefined, 0, false);
    }
    misc.isProjectileTypeWithinDistance = isProjectileTypeWithinDistance;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x268AB8420A9E4ED7 | Since: 1207
     */
    function isStadiaVersion() {
        return IsStadiaVersion();
    }
    misc.isStadiaVersion = isStadiaVersion;
    /**
     * No comment provided
     *
     * Hash: 0x602102324604D96B | Since: 1207
     */
    function isStringNull(_string) {
        return IsStringNull(_string);
    }
    misc.isStringNull = isStringNull;
    /**
     * No comment provided
     *
     * Hash: 0x2CF12F9ACF18F048 | Since: 1207
     */
    function isStringNullOrEmpty(_string) {
        return IsStringNullOrEmpty(_string);
    }
    misc.isStringNullOrEmpty = isStringNullOrEmpty;
    /**
     * Returns true if the entire string consists only of space characters.
     *
     * Hash: 0x375F5870A7B8BEC1 | Since: 1207
     */
    function isStringNullOrEmptyOrSpaces(_string) {
        return IsStringNullOrEmptyOrSpaces(_string);
    }
    misc.isStringNullOrEmptyOrSpaces = isStringNullOrEmptyOrSpaces;
    /**
     * No comment provided
     *
     * Hash: 0x3D0EAC6385DD6100 | Since: 1207
     */
    function networkSetScriptIsSafeForNetworkGame() {
        NetworkSetScriptIsSafeForNetworkGame();
    }
    misc.networkSetScriptIsSafeForNetworkGame = networkSetScriptIsSafeForNetworkGame;
    /**
     * No comment provided
     *
     * Hash: 0x5CB71EAA1429A358 | Since: 1207
     */
    function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(fontBitField) {
        NextOnscreenKeyboardResultWillDisplayUsingTheseFonts(fontBitField);
    }
    misc.nextOnscreenKeyboardResultWillDisplayUsingTheseFonts = nextOnscreenKeyboardResultWillDisplayUsingTheseFonts;
    /**
     * No comment provided
     *
     * Hash: 0xB2C69E11A37B5AF0 | Since: 1207
     */
    function overrideSaveHouse(override, pos, heading, isAutosave) {
        return OverrideSaveHouse(override, pos.x, pos.y, pos.z, heading, isAutosave);
    }
    misc.overrideSaveHouse = overrideSaveHouse;
    /**
     * No comment provided
     *
     * Hash: 0x66AB6B6C7E72F393 | Since: 1207
     */
    function pauseDeathArrestRestart(toggle) {
        PauseDeathArrestRestart(toggle);
    }
    misc.pauseDeathArrestRestart = pauseDeathArrestRestart;
    /**
     * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
     *
     * Hash: 0xEA6DC3A8ADD2005F | Since: 1207
     */
    function populateNow() {
        PopulateNow();
    }
    misc.populateNow = populateNow;
    /**
     * p3 is usually the same value of radius
     * p8 determines whether the ILO prompt is a lock on prompt with RMB
     *
     * Hash: 0x870708A6E147A9AD | Since: 1207
     */
    function registerInteractionLockonPrompt(entity, text, radius, flag, prompt) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return RegisterInteractionLockonPrompt(_entity, text, radius, 0, flag, 0, 0, prompt, false, 0);
    }
    misc.registerInteractionLockonPrompt = registerInteractionLockonPrompt;
    /**
     * No comment provided
     *
     * Hash: 0x49F751F6868DDC5B | Since: 1207
     */
    function removeDispatchSpawnBlockingArea() {
        RemoveDispatchSpawnBlockingArea(undefined);
    }
    misc.removeDispatchSpawnBlockingArea = removeDispatchSpawnBlockingArea;
    /**
     * No comment provided
     *
     * Hash: 0x88CB484364EFB37A | Since: 1207
     */
    function removePopMultiplierArea(id) {
        RemovePopMultiplierArea(id, false);
    }
    misc.removePopMultiplierArea = removePopMultiplierArea;
    /**
     * No comment provided
     *
     * Hash: 0xC7817264BC4B6377 | Since: 1207
     */
    function resetDispatchIdealSpawnDistance() {
        ResetDispatchIdealSpawnDistance();
    }
    misc.resetDispatchIdealSpawnDistance = resetDispatchIdealSpawnDistance;
    /**
     * Begins with RESET_*. Next character in the name is either D or E.
     *
     * Old name: _RESET_BENCHMARK_RECORDING
     *
     * Hash: 0xECBABD0307FB216F | Since: 1207
     */
    function resetEndUserBenchmark() {
        ResetEndUserBenchmark();
    }
    misc.resetEndUserBenchmark = resetEndUserBenchmark;
    /**
     * No comment provided
     *
     * Hash: 0x1411A7CBC3A6EB7B | Since: 1207
     */
    function resetScriptTimeWithinFrame() {
        ResetScriptTimeWithinFrame();
    }
    misc.resetScriptTimeWithinFrame = resetScriptTimeWithinFrame;
    /**
     * No comment provided
     *
     * Hash: 0xEF42F56F69877125 | Since: 1207
     */
    function resetWantedResponseNumPedsToSpawn() {
        ResetWantedResponseNumPedsToSpawn();
    }
    misc.resetWantedResponseNumPedsToSpawn = resetWantedResponseNumPedsToSpawn;
    /**
     * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\Red Dead Redemption 2\Benchmarks and submits some metrics.
     *
     * Old name: _SAVE_BENCHMARK_RECORDING
     *
     * Hash: 0xF4743E2ECC02B3DA | Since: 1207
     */
    function saveEndUserBenchmark() {
        SaveEndUserBenchmark();
    }
    misc.saveEndUserBenchmark = saveEndUserBenchmark;
    /**
     * No comment provided
     *
     * Hash: 0x769E848C66E3C2BB | Since: 1207
     */
    function scriptRaceGetPlayerSplitTime() {
        return ScriptRaceGetPlayerSplitTime(undefined);
    }
    misc.scriptRaceGetPlayerSplitTime = scriptRaceGetPlayerSplitTime;
    /**
     * No comment provided
     *
     * Hash: 0x8AE059F47158417E | Since: 1207
     */
    function scriptRaceInit(numCheckpoints, numLaps, numPlayers) {
        ScriptRaceInit(numCheckpoints, numLaps, numPlayers, undefined);
    }
    misc.scriptRaceInit = scriptRaceInit;
    /**
     * No comment provided
     *
     * Hash: 0xBA62B4D80FA66BD6 | Since: 1207
     */
    function scriptRacePlayerHitCheckpoint(part, checkpoint, lap, time) {
        ScriptRacePlayerHitCheckpoint(part, checkpoint, lap, time);
    }
    misc.scriptRacePlayerHitCheckpoint = scriptRacePlayerHitCheckpoint;
    /**
     * No comment provided
     *
     * Hash: 0x334CE0DA4FAF330C | Since: 1207
     */
    function scriptRaceShutdown() {
        ScriptRaceShutdown();
    }
    misc.scriptRaceShutdown = scriptRaceShutdown;
    /**
     * No comment provided
     *
     * Hash: 0xF73FBE4845C43B5B | Since: 1207
     */
    function setBit(offset) {
        return SetBit(offset);
    }
    misc.setBit = setBit;
    /**
     * No comment provided
     *
     * Hash: 0x324DC1CEF57F31E6 | Since: 1207
     */
    function setBitsInRange(rangeStart, rangeEnd) {
        return SetBitsInRange(rangeStart, rangeEnd, 0);
    }
    misc.setBitsInRange = setBitsInRange;
    /**
     * Cheats are GTA IV cheats:
     *
     * 0 = unknown
     * 1 = unknown (same as 0)
     * 2 = Max Health and Armor
     * 3 = Raise Wanted Level
     * 4 = Lower Wanted Level
     * 5 = unknown (does nothing)
     * 6 = Change Weather
     * 7 = Spawn Annihilator
     * 8 = Spawn NRG 900
     * 9 = Spawn FBI
     * 10 = Spawn Jetmax
     * 11 = Spawn Comet
     * 12 = Spawn Turismo
     * 13 = Spawn Cognoscenti
     * 14 = Spawn Super GT
     * 15 = Spawn Sanchez
     *
     * Initially used in Max Payne 3, that's why we know the name.
     *
     * Hash: 0xD4958E8CF0DE0DD0 | Since: 1207
     */
    function setCheatActive(cheatId) {
        SetCheatActive(cheatId);
    }
    misc.setCheatActive = setCheatActive;
    /**
     * No comment provided
     *
     * Hash: 0xD37BECF862DA726F | Since: 1207
     */
    function setCreditsActive(toggle) {
        SetCreditsActive(toggle);
    }
    misc.setCreditsActive = setCreditsActive;
    /**
     * Params: BOOL p3 is always true
     *
     * Old name: _SET_WEATHER_TYPE_TRANSITION
     *
     * Hash: 0xFA3E3CA8A1DE6D5D | Since: 1207
     */
    function setCurrWeatherState(weatherType1, weatherType2, percentWeather2, enabled) {
        if (typeof weatherType1 === 'string')
            weatherType1 = misc.getHashKey(weatherType1);
        if (typeof weatherType2 === 'string')
            weatherType2 = misc.getHashKey(weatherType2);
        SetCurrWeatherState(weatherType1, weatherType2, percentWeather2, enabled);
    }
    misc.setCurrWeatherState = setCurrWeatherState;
    /**
     * No comment provided
     *
     * Hash: 0xEAB6823B82FBD283 | Since: 1207
     */
    function setDispatchIdealSpawnDistance(fIdealSpawnDistance) {
        SetDispatchIdealSpawnDistance(fIdealSpawnDistance);
    }
    misc.setDispatchIdealSpawnDistance = setDispatchIdealSpawnDistance;
    /**
     * Sets whether the game should fade in after the player dies or is arrested.
     *
     * Hash: 0xDF3B5846DE5904AF | Since: 1207
     */
    function setFadeInAfterDeathArrest(toggle) {
        SetFadeInAfterDeathArrest(toggle);
    }
    misc.setFadeInAfterDeathArrest = setFadeInAfterDeathArrest;
    /**
     * No comment provided
     *
     * Hash: 0xAC806C4CAB973517 | Since: 1207
     */
    function setFadeInAfterLoad(toggle) {
        SetFadeInAfterLoad(toggle);
    }
    misc.setFadeInAfterLoad = setFadeInAfterLoad;
    /**
     * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused.
     *
     * Hash: 0xFAEC088D28B1DE4A | Since: 1207
     */
    function setGamePaused(toggle) {
        SetGamePaused(toggle);
    }
    misc.setGamePaused = setGamePaused;
    /**
     * If true, the player can't save the game.
     *
     * Hash: 0x36694B456BE80D0A | Since: 1207
     */
    function setMissionFlag(toggle) {
        SetMissionFlag(toggle);
    }
    misc.setMissionFlag = setMissionFlag;
    /**
     * No comment provided
     *
     * Hash: 0x674B90BE1115846D | Since: 1207
     */
    function setPedDecomposed(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDecomposed(_ped, toggle);
    }
    misc.setPedDecomposed = setPedDecomposed;
    /**
     * Old name: _SET_RAIN_LEVEL
     *
     * Hash: 0x193DFC0526830FD6 | Since: 1207
     */
    function setRain(intensity) {
        SetRain(intensity);
    }
    misc.setRain = setRain;
    /**
     * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
     * Does nothing if the mission flag is set.
     *
     * Hash: 0xB1ADCCC4150C6473 | Since: 1207
     */
    function setRandomEventFlag(toggle) {
        SetRandomEventFlag(toggle);
    }
    misc.setRandomEventFlag = setRandomEventFlag;
    /**
     * No comment provided
     *
     * Hash: 0x5CD7A49104AFCB6B | Since: 1207
     */
    function setRandomSeed(seed) {
        SetRandomSeed(seed);
    }
    misc.setRandomSeed = setRandomSeed;
    /**
     * No comment provided
     *
     * Hash: 0x6E5A7FBEECAB3C72 | Since: 1207
     */
    function setRandomWeatherType() {
        SetRandomWeatherType(false, false);
    }
    misc.setRandomWeatherType = setRandomWeatherType;
    /**
     * No comment provided
     *
     * Hash: 0xB3E9BE963F10C445 | Since: 1207
     */
    function setSuperJumpThisFrame(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SetSuperJumpThisFrame(_player);
    }
    misc.setSuperJumpThisFrame = setSuperJumpThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x3215376E79F6EA18 | Since: 1207
     */
    function setThisScriptCanBePaused(toggle) {
        SetThisScriptCanBePaused(toggle);
    }
    misc.setThisScriptCanBePaused = setThisScriptCanBePaused;
    /**
     * No comment provided
     *
     * Hash: 0x8ABD939C2E5D00ED | Since: 1207
     */
    function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle) {
        SetThisScriptCanRemoveBlipsCreatedByAnyScript(toggle);
    }
    misc.setThisScriptCanRemoveBlipsCreatedByAnyScript = setThisScriptCanRemoveBlipsCreatedByAnyScript;
    /**
     * Maximum value is 1.0f
     * At a value of 0.0f the game will still run at a minimum time scale.
     *
     * Hash: 0x9682AF6050854856 | Since: 1207
     */
    function setTimeScale(timeScale) {
        SetTimeScale(timeScale);
    }
    misc.setTimeScale = setTimeScale;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/weather/weather_types.lua
     *
     * Hash: 0x59174F1AFE095B5A | Since: 1207
     */
    function setWeatherType(weatherType, transition, transitionTime) {
        if (typeof weatherType === 'string')
            weatherType = misc.getHashKey(weatherType);
        SetWeatherType(weatherType, false, false, transition, transitionTime, false);
    }
    misc.setWeatherType = setWeatherType;
    /**
     * No comment provided
     *
     * Hash: 0xB56C4F5F57A45600 | Since: 1207
     */
    function setWindDirection(direction) {
        SetWindDirection(direction);
    }
    misc.setWindDirection = setWindDirection;
    /**
     * No comment provided
     *
     * Hash: 0xD00C2D82DC04A99F | Since: 1207
     */
    function setWindSpeed(speed) {
        SetWindSpeed(speed);
    }
    misc.setWindSpeed = setWindSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x867654CBC7606F2C | Since: 1207
     */
    function shootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, weaponHash, ownerPed, isAudible, isInvisible, speed) {
        const _ownerPed = ownerPed instanceof Ped ? ownerPed.handle() : ownerPed;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        ShootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, false, weaponHash, _ownerPed, isAudible, isInvisible, speed, false);
    }
    misc.shootSingleBulletBetweenCoords = shootSingleBulletBetweenCoords;
    /**
     * Returns whether the game's measurement system is set to metric.
     *
     * Hash: 0x4FB556ACEFA93098 | Since: 1207
     */
    function shouldUseMetricMeasurements() {
        return ShouldUseMetricMeasurements();
    }
    misc.shouldUseMetricMeasurements = shouldUseMetricMeasurements;
    /**
     * Begins with START_*. Next character in the name is either D or E.
     *
     * Old name: _START_BENCHMARK_RECORDING
     *
     * Hash: 0x29D1F6DF864A094E | Since: 1207
     */
    function startEndUserBenchmark() {
        StartEndUserBenchmark();
    }
    misc.startEndUserBenchmark = startEndUserBenchmark;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xA565FAC215CBC77D | Since: 1207
     */
    function stopCurrentLoadingProgressTimer() {
        StopCurrentLoadingProgressTimer();
    }
    misc.stopCurrentLoadingProgressTimer = stopCurrentLoadingProgressTimer;
    /**
     * Begins with STOP_*. Next character in the name is either D or E.
     *
     * Old name: _STOP_BENCHMARK_RECORDING
     *
     * Hash: 0xB89AEC71AFF2B599 | Since: 1207
     */
    function stopEndUserBenchmark() {
        StopEndUserBenchmark();
    }
    misc.stopEndUserBenchmark = stopEndUserBenchmark;
    /**
     * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
     *
     * Hash: 0xF2DD2298B3AF23E2 | Since: 1207
     */
    function stringToInt(_string) {
        return StringToInt(_string);
    }
    misc.stringToInt = stringToInt;
    /**
     * No comment provided
     *
     * Hash: 0x8C13DB96497B7ABF | Since: 1207
     */
    function tan() {
        return Tan(0);
    }
    misc.tan = tan;
    /**
     * Hardcoded to return false.
     *
     * Old name: _UI_IS_SINGLEPLAYER_PAUSE_MENU_ACTIVE
     *
     * Hash: 0x4FFA0386A6216113 | Since: 1207
     */
    function uiStartedEndUserBenchmark() {
        return UiStartedEndUserBenchmark();
    }
    misc.uiStartedEndUserBenchmark = uiStartedEndUserBenchmark;
    /**
     * No comment provided
     *
     * Hash: 0xE98D55C5983F2509 | Since: 1207
     */
    function unregisterInteractionLockonPrompt(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return UnregisterInteractionLockonPrompt(_entity);
    }
    misc.unregisterInteractionLockonPrompt = unregisterInteractionLockonPrompt;
    /**
     * Returns the current status of the onscreen keyboard, and updates the output.
     *
     * Status Codes:
     *
     * 0 - User still editing
     * 1 - User has finished editing
     * 2 - User has canceled editing
     * 3 - Keyboard isn't active
     *
     * Hash: 0x37DF360F235A3893 | Since: 1207
     */
    function updateOnscreenKeyboard() {
        return UpdateOnscreenKeyboard();
    }
    misc.updateOnscreenKeyboard = updateOnscreenKeyboard;
    /**
     * Note: The first bit in 'flags' must not be set.
     * It is also required to pass at least one extra argument (this must be a text label string or hash).
     * When passing a hash, flags should be 0.
     *
     * Hash: 0xFA925AC00EB830B9 | Since: 1207
     */
    function varString(flags, ...params) {
        return VarString(flags, ...params);
    }
    misc.varString = varString;
    /**
     * Only used in smuggler2 script
     *
     * Hash: 0xF06C5B66DE20B2B8 | Since: 1207
     */
    function waterOverrideSetOceanwavemaxamplitude(maxAmplitude) {
        WaterOverrideSetOceanwavemaxamplitude(maxAmplitude);
    }
    misc.waterOverrideSetOceanwavemaxamplitude = waterOverrideSetOceanwavemaxamplitude;
    /**
     * Only used in smuggler2 script
     *
     * Hash: 0x55123D5A7D9D3C42 | Since: 1207
     */
    function waterOverrideSetShorewaveamplitude(amplitude) {
        WaterOverrideSetShorewaveamplitude(amplitude);
    }
    misc.waterOverrideSetShorewaveamplitude = waterOverrideSetShorewaveamplitude;
    /**
     * No comment provided
     *
     * Hash: 0x0358B8A41916C613 | Since: 1207
     */
    function _0x0358B8A41916C613() {
        return Citizen.invokeNative('0x0358B8A41916C613', undefined, undefined, undefined, undefined);
    }
    misc._0x0358B8A41916C613 = _0x0358B8A41916C613;
    /**
     * No comment provided
     *
     * Hash: 0x0730E518486DEEC3 | Since: 1207
     */
    function _0x0730E518486DEEC3() {
        Citizen.invokeNative('0x0730E518486DEEC3', undefined);
    }
    misc._0x0730E518486DEEC3 = _0x0730E518486DEEC3;
    /**
     * disables composite Pick prompt
     *
     * Hash: 0x082C043C7AFC3747 | Since: 1207
     */
    function disableCompositePickPromptThisFrame(compositeId, disable) {
        Citizen.invokeNative('0x082C043C7AFC3747', compositeId, disable);
    }
    misc.disableCompositePickPromptThisFrame = disableCompositePickPromptThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x0A487CC74A517FB5 | Since: 1207
     */
    function _0x0A487CC74A517FB5() {
        Citizen.invokeNative('0x0A487CC74A517FB5', undefined);
    }
    misc._0x0A487CC74A517FB5 = _0x0A487CC74A517FB5;
    /**
     * No comment provided
     *
     * Hash: 0x0D0AE5081F88CFE1 | Since: 1207
     */
    function _0x0D0AE5081F88CFE1(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0x0D0AE5081F88CFE1', p0);
    }
    misc._0x0D0AE5081F88CFE1 = _0x0D0AE5081F88CFE1;
    /**
     * _SET_MISSION_NAME_*(FOR_ACTIVITY?/MINIGAME?)
     *
     * Hash: 0x1096603B519C905F | Since: 1207
     */
    function _0x1096603B519C905F(name) {
        Citizen.invokeNative('0x1096603B519C905F', name);
    }
    misc._0x1096603B519C905F = _0x1096603B519C905F;
    /**
     * No comment provided
     *
     * Hash: 0x154340E87D8CC178 | Since: 1207
     */
    function _0x154340E87D8CC178() {
        Citizen.invokeNative('0x154340E87D8CC178', undefined);
    }
    misc._0x154340E87D8CC178 = _0x154340E87D8CC178;
    /**
     * No comment provided
     *
     * Hash: 0x183672FE838A661B | Since: 1207
     */
    function _0x183672FE838A661B() {
        return Citizen.invokeNative('0x183672FE838A661B');
    }
    misc._0x183672FE838A661B = _0x183672FE838A661B;
    /**
     * No comment provided
     *
     * Hash: 0x243CEDE8F916B994 | Since: 1207
     */
    function _0x243CEDE8F916B994() {
        Citizen.invokeNative('0x243CEDE8F916B994');
    }
    misc._0x243CEDE8F916B994 = _0x243CEDE8F916B994;
    /**
     * No comment provided
     *
     * Hash: 0x2916B30DC6C41179 | Since: 1207
     */
    function _0x2916B30DC6C41179(weatherType) {
        if (typeof weatherType === 'string')
            weatherType = misc.getHashKey(weatherType);
        Citizen.invokeNative('0x2916B30DC6C41179', weatherType);
    }
    misc._0x2916B30DC6C41179 = _0x2916B30DC6C41179;
    /**
     * No comment provided
     *
     * Hash: 0x33982467B1E349EF | Since: 1207
     */
    function _0x33982467B1E349EF() {
        return Citizen.invokeNative('0x33982467B1E349EF', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    misc._0x33982467B1E349EF = _0x33982467B1E349EF;
    /**
     * No comment provided
     *
     * Hash: 0x35165C658077CD0B | Since: 1207
     */
    function _0x35165C658077CD0B() {
        return Citizen.invokeNative('0x35165C658077CD0B');
    }
    misc._0x35165C658077CD0B = _0x35165C658077CD0B;
    /**
     * No comment provided
     *
     * Hash: 0x38C0C9CAE1544500 | Since: 1207
     */
    function _0x38C0C9CAE1544500(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        Citizen.invokeNative('0x38C0C9CAE1544500', p0);
    }
    misc._0x38C0C9CAE1544500 = _0x38C0C9CAE1544500;
    /**
     * No comment provided
     *
     * Hash: 0x38C2BF94D15F464D | Since: 1207
     */
    function _0x38C2BF94D15F464D() {
        return Citizen.invokeNative('0x38C2BF94D15F464D', undefined);
    }
    misc._0x38C2BF94D15F464D = _0x38C2BF94D15F464D;
    /**
     * No comment provided
     *
     * Hash: 0x3A87FDA8F1B6CDFB | Since: 1207
     */
    function _0x3A87FDA8F1B6CDFB() {
        Citizen.invokeNative('0x3A87FDA8F1B6CDFB', undefined, undefined, undefined);
    }
    misc._0x3A87FDA8F1B6CDFB = _0x3A87FDA8F1B6CDFB;
    /**
     * No comment provided
     *
     * Hash: 0x3C3C7B1B5EC08764 | Since: 1207
     */
    function _0x3C3C7B1B5EC08764() {
        Citizen.invokeNative('0x3C3C7B1B5EC08764');
    }
    misc._0x3C3C7B1B5EC08764 = _0x3C3C7B1B5EC08764;
    /**
     * No comment provided
     *
     * Hash: 0x4647842FE8F31C1E | Since: 1207
     */
    function _0x4647842FE8F31C1E() {
        Citizen.invokeNative('0x4647842FE8F31C1E', undefined, undefined);
    }
    misc._0x4647842FE8F31C1E = _0x4647842FE8F31C1E;
    /**
     * No comment provided
     *
     * Hash: 0x49C44FE78A135A1D | Since: 1207
     */
    function _0x49C44FE78A135A1D() {
        Citizen.invokeNative('0x49C44FE78A135A1D', undefined);
    }
    misc._0x49C44FE78A135A1D = _0x49C44FE78A135A1D;
    /**
     * No comment provided
     *
     * Hash: 0x49F3241C28EBBFBC | Since: 1207
     */
    function _0x49F3241C28EBBFBC() {
        Citizen.invokeNative('0x49F3241C28EBBFBC', 0);
    }
    misc._0x49F3241C28EBBFBC = _0x49F3241C28EBBFBC;
    /**
     * No comment provided
     *
     * Hash: 0x4B0501A468B749F8 | Since: 1207
     */
    function _0x4B0501A468B749F8() {
        Citizen.invokeNative('0x4B0501A468B749F8');
    }
    misc._0x4B0501A468B749F8 = _0x4B0501A468B749F8;
    /**
     * No comment provided
     *
     * Hash: 0x4B101DBCC9482F2D | Since: 1207
     */
    function _0x4B101DBCC9482F2D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x4B101DBCC9482F2D', _ped);
    }
    misc._0x4B101DBCC9482F2D = _0x4B101DBCC9482F2D;
    /**
     * No comment provided
     *
     * Hash: 0x4D5C9CC7E7E23E09 | Since: 1207
     */
    function _0x4D5C9CC7E7E23E09() {
        Citizen.invokeNative('0x4D5C9CC7E7E23E09');
    }
    misc._0x4D5C9CC7E7E23E09 = _0x4D5C9CC7E7E23E09;
    /**
     * UPDATE_PICKUP_COLLECTIBLE: set Eagle Eye fountain
     * _J*, _K*, _L*
     *
     * Hash: 0x553D67295DDD2309 | Since: 1207
     */
    function _0x553D67295DDD2309(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x553D67295DDD2309', _entity);
    }
    misc._0x553D67295DDD2309 = _0x553D67295DDD2309;
    /**
     * No comment provided
     *
     * Hash: 0x5801BE2DF2AF07EC | Since: 1207
     */
    function _0x5801BE2DF2AF07EC() {
        Citizen.invokeNative('0x5801BE2DF2AF07EC', undefined);
    }
    misc._0x5801BE2DF2AF07EC = _0x5801BE2DF2AF07EC;
    /**
     * No comment provided
     *
     * Hash: 0x5B4A8121A47D844D | Since: 1207
     */
    function _0x5B4A8121A47D844D() {
        return Citizen.invokeNative('0x5B4A8121A47D844D', undefined);
    }
    misc._0x5B4A8121A47D844D = _0x5B4A8121A47D844D;
    /**
     * No comment provided
     *
     * Hash: 0x627B68D9CE6EE8DE | Since: 1207
     */
    function _0x627B68D9CE6EE8DE() {
        return Citizen.invokeNative('0x627B68D9CE6EE8DE', undefined);
    }
    misc._0x627B68D9CE6EE8DE = _0x627B68D9CE6EE8DE;
    /**
     * No comment provided
     *
     * Hash: 0x68319452C5064ABA | Since: 1207
     */
    function _0x68319452C5064ABA() {
        Citizen.invokeNative('0x68319452C5064ABA', undefined, undefined);
    }
    misc._0x68319452C5064ABA = _0x68319452C5064ABA;
    /**
     * _SET_DISPATCH_*, unused
     *
     * Hash: 0x6BCF7B5CD338281A | Since: 1207
     */
    function _0x6BCF7B5CD338281A() {
        Citizen.invokeNative('0x6BCF7B5CD338281A', undefined, undefined, undefined);
    }
    misc._0x6BCF7B5CD338281A = _0x6BCF7B5CD338281A;
    /**
     * No comment provided
     *
     * Hash: 0x6BED40493A1AFDB8 | Since: 1207
     */
    function _0x6BED40493A1AFDB8() {
        return Citizen.invokeNative('0x6BED40493A1AFDB8', 0);
    }
    misc._0x6BED40493A1AFDB8 = _0x6BED40493A1AFDB8;
    /**
     * No comment provided
     *
     * Hash: 0x6C7B68D3CE60E8DE | Since: 1207
     */
    function _0x6C7B68D3CE60E8DE() {
        return Citizen.invokeNative('0x6C7B68D3CE60E8DE', undefined);
    }
    misc._0x6C7B68D3CE60E8DE = _0x6C7B68D3CE60E8DE;
    /**
     * No comment provided
     *
     * Hash: 0x6F02B5E50511721E | Since: 1207
     */
    function _0x6F02B5E50511721E() {
        return Citizen.invokeNative('0x6F02B5E50511721E', undefined);
    }
    misc._0x6F02B5E50511721E = _0x6F02B5E50511721E;
    /**
     * No comment provided
     *
     * Hash: 0x745808BB01CEC6B9 | Since: 1207
     */
    function _0x745808BB01CEC6B9() {
        Citizen.invokeNative('0x745808BB01CEC6B9', 0);
    }
    misc._0x745808BB01CEC6B9 = _0x745808BB01CEC6B9;
    /**
     * No comment provided
     *
     * Hash: 0x74ACA66484CEBAF0 | Since: 1207
     */
    function _0x74ACA66484CEBAF0() {
        Citizen.invokeNative('0x74ACA66484CEBAF0', undefined);
    }
    misc._0x74ACA66484CEBAF0 = _0x74ACA66484CEBAF0;
    /**
     * No comment provided
     *
     * Hash: 0x7A76104CC2CC69E8 | Since: 1207
     */
    function _0x7A76104CC2CC69E8(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x7A76104CC2CC69E8', _entity, 0, 0);
    }
    misc._0x7A76104CC2CC69E8 = _0x7A76104CC2CC69E8;
    /**
     * No comment provided
     *
     * Hash: 0x7CF96F1250EF3221 | Since: 1207
     */
    function _0x7CF96F1250EF3221() {
        return Citizen.invokeNative('0x7CF96F1250EF3221', undefined);
    }
    misc._0x7CF96F1250EF3221 = _0x7CF96F1250EF3221;
    /**
     * No comment provided
     *
     * Hash: 0x7FA58CED69405F9A | Since: 1207
     */
    function _0x7FA58CED69405F9A() {
        Citizen.invokeNative('0x7FA58CED69405F9A', undefined, undefined);
    }
    misc._0x7FA58CED69405F9A = _0x7FA58CED69405F9A;
    /**
     * No comment provided
     *
     * Hash: 0x8314FC2013ECE2DA | Since: 1207
     */
    function _0x8314FC2013ECE2DA() {
        return Citizen.invokeNative('0x8314FC2013ECE2DA', undefined, undefined, undefined);
    }
    misc._0x8314FC2013ECE2DA = _0x8314FC2013ECE2DA;
    /**
     * No comment provided
     *
     * Hash: 0x8BB99B85444544D9 | Since: 1207
     */
    function _0x8BB99B85444544D9() {
        return Citizen.invokeNative('0x8BB99B85444544D9', undefined, undefined);
    }
    misc._0x8BB99B85444544D9 = _0x8BB99B85444544D9;
    /**
     * No comment provided
     *
     * Hash: 0x8C0F6A3D7236DEEB | Since: 1207
     */
    function _0x8C0F6A3D7236DEEB() {
        Citizen.invokeNative('0x8C0F6A3D7236DEEB', undefined, undefined);
    }
    misc._0x8C0F6A3D7236DEEB = _0x8C0F6A3D7236DEEB;
    /**
     * No comment provided
     *
     * Hash: 0x8DB104CCEBCD58C5 | Since: 1207
     */
    function _0x8DB104CCEBCD58C5() {
        return Citizen.invokeNative('0x8DB104CCEBCD58C5', undefined, undefined);
    }
    misc._0x8DB104CCEBCD58C5 = _0x8DB104CCEBCD58C5;
    /**
     * Not officially named
     * , Counts the number of segments in a string that are separated by specified delimiter characters, ignoring consecutive delimiters.
     *
     * Hash: 0x94E8CA3DEE952789 | Since: 1207
     */
    function stringSplitAndCountSegments() {
        return Citizen.invokeNative('0x94E8CA3DEE952789');
    }
    misc.stringSplitAndCountSegments = stringSplitAndCountSegments;
    /**
     * No comment provided
     *
     * Hash: 0x94FCADCF9F0C368E | Since: 1207
     */
    function _0x94FCADCF9F0C368E() {
        Citizen.invokeNative('0x94FCADCF9F0C368E', undefined);
    }
    misc._0x94FCADCF9F0C368E = _0x94FCADCF9F0C368E;
    /**
     * No comment provided
     *
     * Hash: 0x96282005C5C6801F | Since: 1311
     */
    function _0x96282005C5C6801F() {
        Citizen.invokeNative('0x96282005C5C6801F', undefined, undefined);
    }
    misc._0x96282005C5C6801F = _0x96282005C5C6801F;
    /**
     * No comment provided
     *
     * Hash: 0x970339EFA4FDE518 | Since: 1207
     */
    function _0x970339EFA4FDE518() {
        return Citizen.invokeNative('0x970339EFA4FDE518', undefined, undefined, undefined);
    }
    misc._0x970339EFA4FDE518 = _0x970339EFA4FDE518;
    /**
     * No comment provided
     *
     * Hash: 0x9A252AA23D7098F2 | Since: 1207
     */
    function _0x9A252AA23D7098F2() {
        Citizen.invokeNative('0x9A252AA23D7098F2');
    }
    misc._0x9A252AA23D7098F2 = _0x9A252AA23D7098F2;
    /**
     * No comment provided
     *
     * Hash: 0x9BF2C0C568C61641 | Since: 1207
     */
    function _0x9BF2C0C568C61641() {
        Citizen.invokeNative('0x9BF2C0C568C61641', undefined);
    }
    misc._0x9BF2C0C568C61641 = _0x9BF2C0C568C61641;
    /**
     * _CLEAR*
     *
     * Hash: 0xA08111B053D84B4D | Since: 1207
     */
    function _0xA08111B053D84B4D() {
        Citizen.invokeNative('0xA08111B053D84B4D', undefined);
    }
    misc._0xA08111B053D84B4D = _0xA08111B053D84B4D;
    /**
     * No comment provided
     *
     * Hash: 0xA3A8926951471C82 | Since: 1207
     */
    function _0xA3A8926951471C82() {
        Citizen.invokeNative('0xA3A8926951471C82');
    }
    misc._0xA3A8926951471C82 = _0xA3A8926951471C82;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xA9342743B634A462 | Since: 1207
     */
    function _0xA9342743B634A462() {
        Citizen.invokeNative('0xA9342743B634A462', undefined);
    }
    misc._0xA9342743B634A462 = _0xA9342743B634A462;
    /**
     * No comment provided
     *
     * Hash: 0xAB26DEEE120FD3FD | Since: 1207
     */
    function _0xAB26DEEE120FD3FD() {
        Citizen.invokeNative('0xAB26DEEE120FD3FD', undefined, undefined);
    }
    misc._0xAB26DEEE120FD3FD = _0xAB26DEEE120FD3FD;
    /**
     * No comment provided
     *
     * Hash: 0xAD44856A1CD29635 | Since: 1207
     */
    function _0xAD44856A1CD29635() {
        Citizen.invokeNative('0xAD44856A1CD29635', undefined, undefined, undefined);
    }
    misc._0xAD44856A1CD29635 = _0xAD44856A1CD29635;
    /**
     * No comment provided
     *
     * Hash: 0xAF3A84C7DE6A1DC5 | Since: 1207
     */
    function _0xAF3A84C7DE6A1DC5() {
        Citizen.invokeNative('0xAF3A84C7DE6A1DC5', undefined, undefined);
    }
    misc._0xAF3A84C7DE6A1DC5 = _0xAF3A84C7DE6A1DC5;
    /**
     * Hardcoded to return one/true.
     *
     * Hash: 0xAF530E56505D1BD6 | Since: 1207
     */
    function _0xAF530E56505D1BD6() {
        return Citizen.invokeNative('0xAF530E56505D1BD6', undefined);
    }
    misc._0xAF530E56505D1BD6 = _0xAF530E56505D1BD6;
    /**
     * No comment provided
     *
     * Hash: 0xB08C4FA25BC29DB9 | Since: 1207
     */
    function _0xB08C4FA25BC29DB9() {
        Citizen.invokeNative('0xB08C4FA25BC29DB9', undefined);
    }
    misc._0xB08C4FA25BC29DB9 = _0xB08C4FA25BC29DB9;
    /**
     * No comment provided
     *
     * Hash: 0xB1F6665AA54DCD5C | Since: 1207
     */
    function _0xB1F6665AA54DCD5C(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0xB1F6665AA54DCD5C', p0);
    }
    misc._0xB1F6665AA54DCD5C = _0xB1F6665AA54DCD5C;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xB711EB4BC8D06013 | Since: 1207
     */
    function _0xB711EB4BC8D06013() {
        Citizen.invokeNative('0xB711EB4BC8D06013');
    }
    misc._0xB711EB4BC8D06013 = _0xB711EB4BC8D06013;
    /**
     * No comment provided
     *
     * Hash: 0xBB282CF5D2333FB8 | Since: 1207
     */
    function _0xBB282CF5D2333FB8() {
        Citizen.invokeNative('0xBB282CF5D2333FB8', undefined, undefined);
    }
    misc._0xBB282CF5D2333FB8 = _0xBB282CF5D2333FB8;
    /**
     * No comment provided
     *
     * Hash: 0xBBE5B63EFFB08E68 | Since: 1207
     */
    function _0xBBE5B63EFFB08E68() {
        return Citizen.invokeNative('0xBBE5B63EFFB08E68', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    misc._0xBBE5B63EFFB08E68 = _0xBBE5B63EFFB08E68;
    /**
     * No comment provided
     *
     * Hash: 0xCC1BAF72D571DB8D | Since: 1207
     */
    function _0xCC1BAF72D571DB8D() {
        return Citizen.invokeNative('0xCC1BAF72D571DB8D', undefined, undefined, undefined);
    }
    misc._0xCC1BAF72D571DB8D = _0xCC1BAF72D571DB8D;
    /**
     * No comment provided
     *
     * Hash: 0xCC3EDC5614B03F61 | Since: 1207
     */
    function _0xCC3EDC5614B03F61() {
        Citizen.invokeNative('0xCC3EDC5614B03F61', 0);
    }
    misc._0xCC3EDC5614B03F61 = _0xCC3EDC5614B03F61;
    /**
     * No comment provided
     *
     * Hash: 0xD3F943B88F55376A | Since: 1207
     */
    function _0xD3F943B88F55376A(weatherType) {
        if (typeof weatherType === 'string')
            weatherType = misc.getHashKey(weatherType);
        Citizen.invokeNative('0xD3F943B88F55376A', weatherType);
    }
    misc._0xD3F943B88F55376A = _0xD3F943B88F55376A;
    /**
     * No comment provided
     *
     * Hash: 0xDA4D8EB04E8E2928 | Since: 1207
     */
    function _0xDA4D8EB04E8E2928() {
        Citizen.invokeNative('0xDA4D8EB04E8E2928', undefined);
    }
    misc._0xDA4D8EB04E8E2928 = _0xDA4D8EB04E8E2928;
    /**
     * No comment provided
     *
     * Hash: 0xDBDA48EC456ED908 | Since: 1436
     */
    function _0xDBDA48EC456ED908() {
        Citizen.invokeNative('0xDBDA48EC456ED908');
    }
    misc._0xDBDA48EC456ED908 = _0xDBDA48EC456ED908;
    /**
     * Hardcoded to return one/true.
     *
     * Hash: 0xDC057B86FC157031 | Since: 1207
     */
    function _0xDC057B86FC157031() {
        return Citizen.invokeNative('0xDC057B86FC157031');
    }
    misc._0xDC057B86FC157031 = _0xDC057B86FC157031;
    /**
     * No comment provided
     *
     * Hash: 0xDC416CA762BC4F43 | Since: 1207
     */
    function _0xDC416CA762BC4F43() {
        return Citizen.invokeNative('0xDC416CA762BC4F43', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    misc._0xDC416CA762BC4F43 = _0xDC416CA762BC4F43;
    /**
     * No comment provided
     *
     * Hash: 0xDE2C3B74D2B3705C | Since: 1207
     */
    function _0xDE2C3B74D2B3705C() {
        Citizen.invokeNative('0xDE2C3B74D2B3705C', undefined, undefined);
    }
    misc._0xDE2C3B74D2B3705C = _0xDE2C3B74D2B3705C;
    /**
     * Not implemented.
     *
     * Hash: 0xEB946B9E579729AD | Since: 1207
     */
    function _0xEB946B9E579729AD(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xEB946B9E579729AD', _ped, undefined);
    }
    misc._0xEB946B9E579729AD = _0xEB946B9E579729AD;
    /**
     * No comment provided
     *
     * Hash: 0xF569E33FB72ED28E | Since: 1207
     */
    function _0xF569E33FB72ED28E() {
        Citizen.invokeNative('0xF569E33FB72ED28E');
    }
    misc._0xF569E33FB72ED28E = _0xF569E33FB72ED28E;
    /**
     * No comment provided
     *
     * Hash: 0xF63FA29D4A9ACA86 | Since: 1207
     */
    function _0xF63FA29D4A9ACA86() {
        Citizen.invokeNative('0xF63FA29D4A9ACA86', undefined, undefined);
    }
    misc._0xF63FA29D4A9ACA86 = _0xF63FA29D4A9ACA86;
    /**
     * No comment provided
     *
     * Hash: 0xF650DCF5D6F312C1 | Since: 1232
     */
    function _0xF650DCF5D6F312C1() {
        Citizen.invokeNative('0xF650DCF5D6F312C1', undefined);
    }
    misc._0xF650DCF5D6F312C1 = _0xF650DCF5D6F312C1;
    /**
     * No comment provided
     *
     * Hash: 0xF81C53561D15F330 | Since: 1207
     */
    function _0xF81C53561D15F330() {
        return Citizen.invokeNative('0xF81C53561D15F330');
    }
    misc._0xF81C53561D15F330 = _0xF81C53561D15F330;
    /**
     * No comment provided
     *
     * Hash: 0xFC6ECB9170145ECE | Since: 1207
     */
    function _0xFC6ECB9170145ECE() {
        Citizen.invokeNative('0xFC6ECB9170145ECE');
    }
    misc._0xFC6ECB9170145ECE = _0xFC6ECB9170145ECE;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xFF252E2BAFB7330F | Since: 1207
     */
    function _0xFF252E2BAFB7330F() {
        Citizen.invokeNative('0xFF252E2BAFB7330F', undefined);
    }
    misc._0xFF252E2BAFB7330F = _0xFF252E2BAFB7330F;
    /**
     * No comment provided
     *
     * Hash: 0xA2D5A26208421426 | Since: 1207
     */
    function addDispatchSpawnBlockingArea(volume) {
        return AddDispatchSpawnBlockingArea(volume);
    }
    misc.addDispatchSpawnBlockingArea = addDispatchSpawnBlockingArea;
    /**
     * Only used in script function PROCESS_ZONE_CREATION
     * Returns Pop multiplier volume ID
     *
     * Hash: 0x3233C4EC0514C7EC | Since: 1207
     */
    function addPopMultiplierVolume(volume, pedDensity, vehicleDensity) {
        return AddPopMultiplierVolume(volume, pedDensity, vehicleDensity, false, false);
    }
    misc.addPopMultiplierVolume = addPopMultiplierVolume;
    /**
     * No comment provided
     *
     * Hash: 0xD2D74F89DF844A50 | Since: 1207
     */
    function clearAllBitFlags() {
        return ClearAllBitFlags();
    }
    misc.clearAllBitFlags = clearAllBitFlags;
    /**
     * No comment provided
     *
     * Hash: 0xB909149F2BB5F6DA | Since: 1207
     */
    function clearBitFlag(flag) {
        return ClearBitFlag(flag);
    }
    misc.clearBitFlag = clearBitFlag;
    /**
     * No comment provided
     *
     * Hash: 0x2FCD528A397E5C88 | Since: 1207
     */
    function clearVolumeArea(volume, flag) {
        ClearVolumeArea(volume, flag);
    }
    misc.clearVolumeArea = clearVolumeArea;
    /**
     * No comment provided
     *
     * Hash: 0xCE7690C0A0D1C36D | Since: 1207
     */
    function clearWeatherTypePersistOvertime(milliseconds) {
        ClearWeatherTypePersistOvertime(milliseconds);
    }
    misc.clearWeatherTypePersistOvertime = clearWeatherTypePersistOvertime;
    /**
     * No comment provided
     *
     * Hash: 0x0E71C80FA4EC8147 | Since: 1207
     */
    function clearWeatherVariation(weatherType) {
        ClearWeatherVariation(weatherType, false);
    }
    misc.clearWeatherVariation = clearWeatherVariation;
    /**
     * No comment provided
     *
     * Hash: 0xE704838F36F93B7B | Since: 1355
     */
    function countBitFlags() {
        return CountBitFlags();
    }
    misc.countBitFlags = countBitFlags;
    /**
     * aiMemoryType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/_CREATE_AI_MEMORY
     *
     * Hash: 0x88BC5F4AEF77FC4E | Since: 1207
     */
    function createAiMemory(aiMemoryType) {
        return CreateAiMemory(aiMemoryType);
    }
    misc.createAiMemory = createAiMemory;
    /**
     * Returns a formatted string (0x%x)
     *
     * Hash: 0xBCC2CFADEA1AEA6C | Since: 1207
     */
    function createColorString(rgb) {
        return CreateColorString(rgb);
    }
    misc.createColorString = createColorString;
    /**
     * dispatchService: see ENABLE_DISPATCH_SERVICE
     *
     * The entities must be added to itemSet.
     *
     * Hash: 0xAB3D3F45436DB1D8 | Since: 1207
     */
    function createIncidentWithEntities(dispatchService, pos, itemSet, radius) {
        return CreateIncidentWithEntities(dispatchService, pos.x, pos.y, pos.z, itemSet, radius);
    }
    misc.createIncidentWithEntities = createIncidentWithEntities;
    /**
     * No comment provided
     *
     * Hash: 0xBDC6E364C9C78178 | Since: 1207
     */
    function doesItemHaveValidBase(item) {
        return DoesItemHaveValidBase(item);
    }
    misc.doesItemHaveValidBase = doesItemHaveValidBase;
    /**
     * No comment provided
     *
     * Hash: 0x39D6DACE323A20B6 | Since: 1207
     */
    function doesPopMultiplierAreaExistForVolume(volume) {
        return DoesPopMultiplierAreaExistForVolume(volume);
    }
    misc.doesPopMultiplierAreaExistForVolume = doesPopMultiplierAreaExistForVolume;
    /**
     * No comment provided
     *
     * Hash: 0x9382D5D43D2AA6FF | Since: 1207
     */
    function doesStringExistInString() {
        return DoesStringExistInString();
    }
    misc.doesStringExistInString = doesStringExistInString;
    /**
     * p3 is always -1.0f in the scripts
     *
     * Hash: 0x67943537D179597C | Since: 1207
     */
    function forceLightningFlashAtCoords(pos) {
        ForceLightningFlashAtCoords(pos.x, pos.y, pos.z, 0);
    }
    misc.forceLightningFlashAtCoords = forceLightningFlashAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xFAED234C7F53ABEB | Since: 1207
     */
    function gameFrameworkManagerGetMode() {
        return GameFrameworkManagerGetMode();
    }
    misc.gameFrameworkManagerGetMode = gameFrameworkManagerGetMode;
    /**
     * No comment provided
     *
     * Hash: 0xAFF2FD8ADD927585 | Since: 1207
     */
    function gameFrameworkManagerShutdown() {
        GameFrameworkManagerShutdown();
    }
    misc.gameFrameworkManagerShutdown = gameFrameworkManagerShutdown;
    /**
     * No comment provided
     *
     * Hash: 0xFDF38E2B711BF78E | Since: 1207
     */
    function getAiPedDoesHaveEventMemory() {
        return GetAiPedDoesHaveEventMemory(0);
    }
    misc.getAiPedDoesHaveEventMemory = getAiPedDoesHaveEventMemory;
    /**
     * https://easings.net/
     *
     * enum class eEasingCurveType
     * {
     * TYPE_LINEAR,
     * TYPE_QUADRATIC_IN,
     * TYPE_QUADRATIC_OUT,
     * TYPE_QUADRATIC_INOUT,
     * TYPE_CUBIC_IN,
     * TYPE_CUBIC_OUT,
     * TYPE_CUBIC_INOUT,
     * TYPE_QUARTIC_IN,
     * TYPE_QUARTIC_OUT,
     * TYPE_QUARTIC_INOUT,
     * TYPE_QUINTIC_IN,
     * TYPE_QUINTIC_OUT,
     * TYPE_QUINTIC_INOUT,
     * TYPE_EXPONENTIAL_IN,
     * TYPE_EXPONENTIAL_OUT,
     * TYPE_EXPONENTIAL_INOUT,
     * TYPE_SINE_IN,
     * TYPE_SINE_OUT,
     * TYPE_SINE_INOUT,
     * TYPE_CIRCULAR_IN,
     * TYPE_CIRCULAR_OUT,
     * TYPE_CIRCULAR_INOUT,
     * TYPE_BOUNCE_IN,
     * TYPE_BOUNCE_OUT,
     * TYPE_BOUNCE_INOUT,
     * TYPE_CUSTOM
     * };
     *
     * Hash: 0xEF50E344A8F93784 | Since: 1207
     */
    function getEasingCurveValue(t, b, d, easingCurveType) {
        return GetEasingCurveValue(t, b, d, easingCurveType);
    }
    misc.getEasingCurveValue = getEasingCurveValue;
    /**
     * No comment provided
     *
     * Hash: 0xEE04C0AFD4EFAF0E | Since: 1207
     */
    function getEntityFromItem(item) {
        return GetEntityFromItem(item);
    }
    misc.getEntityFromItem = getEntityFromItem;
    /**
     * Returns the weather type that has been set by a script
     *
     * Hash: 0xDD560ABEF5D3784C | Since: 1207
     */
    function getForcedWeather() {
        return GetForcedWeather();
    }
    misc.getForcedWeather = getForcedWeather;
    /**
     * `Returns rage::fwTimer::sm_nonScaledClippedTime`
     *
     * Hash: 0x483B8C542103AD72 | Since: 1207
     */
    function getGameTimerNonScaledClipped() {
        return GetGameTimerNonScaledClipped();
    }
    misc.getGameTimerNonScaledClipped = getGameTimerNonScaledClipped;
    /**
     * 0 = invalid
     * 1 = CEntity
     * `2 = rage::volBase`
     * `3 = rage::volSphere`
     * `4 = rage::volBox`
     * `5 = rage::volAggregate`
     * `6 = rage::volCylinder`
     * 7 = CScriptedCoverPoint
     * `8 = rage::ptfxScriptInfo`
     * 9 = CPed
     * 10 = CVehicle
     * 11 = CObject
     * 12 = CItemSet
     * 13 = CPersistentCharacter
     *
     * Hash: 0xDC8D2FF478DF9553 | Since: 1207
     */
    function getItemType(handle) {
        return GetItemType(handle);
    }
    misc.getItemType = getItemType;
    /**
     * Event names in the scripts: MGBegin, MGEnd, ReadyForCut
     *
     * Hash: 0xF9B91C5129EABC08 | Since: 1207
     */
    function getLootingEventHasFired(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLootingEventHasFired(_ped);
    }
    misc.getLootingEventHasFired = getLootingEventHasFired;
    /**
     * No comment provided
     *
     * Hash: 0xC43CD2668B204419 | Since: 1207
     */
    function getMaxNumInstructions() {
        return GetMaxNumInstructions();
    }
    misc.getMaxNumInstructions = getMaxNumInstructions;
    /**
     * No comment provided
     *
     * Hash: 0x51021D36F62AAA83 | Since: 1207
     */
    function getNextWeatherTypeHashName() {
        return GetNextWeatherTypeHashName();
    }
    misc.getNextWeatherTypeHashName = getNextWeatherTypeHashName;
    /**
     * No comment provided
     *
     * Hash: 0x72904D3D62AF5839 | Since: 1207
     */
    function getNumberOfInstructions() {
        return GetNumberOfInstructions();
    }
    misc.getNumberOfInstructions = getNumberOfInstructions;
    /**
     * No comment provided
     *
     * Hash: 0x18013392501CE5DC | Since: 1207
     */
    function getObjectFromIndexedItem(item) {
        return GetObjectFromIndexedItem(item);
    }
    misc.getObjectFromIndexedItem = getObjectFromIndexedItem;
    /**
     * No comment provided
     *
     * Hash: 0x3FFB15534067DCD4 | Since: 1207
     */
    function getPedFromIndexedItem(item) {
        return GetPedFromIndexedItem(item);
    }
    misc.getPedFromIndexedItem = getPedFromIndexedItem;
    /**
     * No comment provided
     *
     * Hash: 0x4BEB42AEBCA732E9 | Since: 1207
     */
    function getPrevWeatherTypeHashName() {
        return GetPrevWeatherTypeHashName();
    }
    misc.getPrevWeatherTypeHashName = getPrevWeatherTypeHashName;
    /**
     * No comment provided
     *
     * Hash: 0x1359C181BC625503 | Since: 1207
     */
    function getRandomWeatherType() {
        return GetRandomWeatherType();
    }
    misc.getRandomWeatherType = getRandomWeatherType;
    /**
     * No comment provided
     *
     * Hash: 0x7F4CE164D9A11DFE | Since: 1207
     */
    function getRandomWeatherTypeIndex() {
        return GetRandomWeatherTypeIndex();
    }
    misc.getRandomWeatherTypeIndex = getRandomWeatherTypeIndex;
    /**
     * Only 0 and 1 are valid for p0, higher values causes the native to return 2.
     *
     * Hash: 0x1B065A2BF7953815 | Since: 1207
     */
    function getStatusOfSavegameOperation() {
        return GetStatusOfSavegameOperation(0);
    }
    misc.getStatusOfSavegameOperation = getStatusOfSavegameOperation;
    /**
     * No comment provided
     *
     * Hash: 0xF216F74101968DB0 | Since: 1207
     */
    function getStringFromBool(value) {
        return GetStringFromBool(value);
    }
    misc.getStringFromBool = getStringFromBool;
    /**
     * No comment provided
     *
     * Hash: 0x2B6846401D68E563 | Since: 1207
     */
    function getStringFromFloat(value, digits) {
        return GetStringFromFloat(value, digits);
    }
    misc.getStringFromFloat = getStringFromFloat;
    /**
     * Returns a string in the following format: <<%.4f,%.4f,%.4f>>
     *
     * Hash: 0x6C4DBF553885F9EB | Since: 1207
     */
    function getStringFromVector(pos) {
        return GetStringFromVector(pos.x, pos.y, pos.z);
    }
    misc.getStringFromVector = getStringFromVector;
    /**
     * No comment provided
     *
     * Hash: 0xB98B78C3768AF6E0 | Since: 1207
     */
    function getTemperatureAtCoords(pos) {
        return GetTemperatureAtCoords(pos.x, pos.y, pos.z);
    }
    misc.getTemperatureAtCoords = getTemperatureAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xE578C8AE173719B3 | Since: 1207
     */
    function getVehicleFromIndexedItem(item) {
        return GetVehicleFromIndexedItem(item);
    }
    misc.getVehicleFromIndexedItem = getVehicleFromIndexedItem;
    /**
     * No comment provided
     *
     * Hash: 0xF18AF483DF70BBDE | Since: 1207
     */
    function getVolumeFromIndexedItem(item) {
        return GetVolumeFromIndexedItem(item);
    }
    misc.getVolumeFromIndexedItem = getVolumeFromIndexedItem;
    /**
     * Note: the buffer should be exactly 32 bytes long
     *
     * Hash: 0xCF11C0CEB40C401B | Since: 1207
     */
    function intToString(value, format) {
        return IntToString(value, format);
    }
    misc.intToString = intToString;
    /**
     * No comment provided
     *
     * Hash: 0x80E9C316EF84DD81 | Since: 1207
     */
    function isAnyBitFlagSet() {
        return IsAnyBitFlagSet();
    }
    misc.isAnyBitFlagSet = isAnyBitFlagSet;
    /**
     * No comment provided
     *
     * Hash: 0xFEC1D4B5C82C176F | Since: 1207
     */
    function isBaseACoverPoint(handle) {
        return IsBaseACoverPoint(handle);
    }
    misc.isBaseACoverPoint = isBaseACoverPoint;
    /**
     * No comment provided
     *
     * Hash: 0x716F17F8A0419F95 | Since: 1207
     */
    function isBaseAPersistentCharacter(handle) {
        return IsBaseAPersistentCharacter(handle);
    }
    misc.isBaseAPersistentCharacter = isBaseAPersistentCharacter;
    /**
     * No comment provided
     *
     * Hash: 0x8F4F050054005C27 | Since: 1207
     */
    function isBitFlagSet(flag) {
        return IsBitFlagSet(flag);
    }
    misc.isBitFlagSet = isBitFlagSet;
    /**
     * No comment provided
     *
     * Hash: 0xACB7E1418A8B6E32 | Since: 1207
     */
    function isGlobalBlockValid(index) {
        return IsGlobalBlockValid(index);
    }
    misc.isGlobalBlockValid = isGlobalBlockValid;
    /**
     * No comment provided
     *
     * Hash: 0xF236C84C6ADFCB2F | Since: 1207
     */
    function isMissionCreatorActive() {
        return IsMissionCreatorActive();
    }
    misc.isMissionCreatorActive = isMissionCreatorActive;
    /**
     * No comment provided
     *
     * Hash: 0x5170DDA6D63ACAAA | Since: 1207
     */
    function isPedDecomposed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedDecomposed(_ped);
    }
    misc.isPedDecomposed = isPedDecomposed;
    /**
     * No comment provided
     *
     * Hash: 0x36040772DF5E59A0 | Since: 1355
     */
    function isPlayerOwningStandaloneSp() {
        return IsPlayerOwningStandaloneSp();
    }
    misc.isPlayerOwningStandaloneSp = isPlayerOwningStandaloneSp;
    /**
     * No comment provided
     *
     * Hash: 0x48E4D50F87A96AA5 | Since: 1207
     */
    function lootTablesGetInfo(ped, lootTableKey) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof lootTableKey === 'string')
            lootTableKey = misc.getHashKey(lootTableKey);
        return LootTablesGetInfo(_ped, false, false, lootTableKey, undefined);
    }
    misc.lootTablesGetInfo = lootTablesGetInfo;
    /**
     * p0 must be < 2
     *
     * Hash: 0x279B0696DA4657EB | Since: 1207
     */
    function queueSavegameOperation() {
        return QueueSavegameOperation(0);
    }
    misc.queueSavegameOperation = queueSavegameOperation;
    /**
     * Reads the passed value as floating point value and returns it.
     * Example: _READ_INT_AS_FLOAT(0x3F800000) returns 1.0f because 0x3F800000 is the hexadecimal representation of 1.0f.
     *
     * Hash: 0xD2C9126410DFA1B2 | Since: 1207
     */
    function readIntAsFloat(value) {
        return ReadIntAsFloat(value);
    }
    misc.readIntAsFloat = readIntAsFloat;
    /**
     * No comment provided
     *
     * Hash: 0xBD090F5B1DB82189 | Since: 1207
     */
    function removePopMultiplierAreaForVolume(volume) {
        RemovePopMultiplierAreaForVolume(volume, 0);
    }
    misc.removePopMultiplierAreaForVolume = removePopMultiplierAreaForVolume;
    /**
     * No comment provided
     *
     * Hash: 0x54EC7B6BC72BAD69 | Since: 1207
     */
    function resetDispatchMaxSpawnDistance() {
        ResetDispatchMaxSpawnDistance();
    }
    misc.resetDispatchMaxSpawnDistance = resetDispatchMaxSpawnDistance;
    /**
     * No comment provided
     *
     * Hash: 0x96498D922D8D0D0A | Since: 1207
     */
    function resetDispatchMinSpawnDistance() {
        ResetDispatchMinSpawnDistance();
    }
    misc.resetDispatchMinSpawnDistance = resetDispatchMinSpawnDistance;
    /**
     * Used in CAIConditionAmbientAIMemoryReactionsEnabled
     *
     * Hash: 0x6AC4AF46A6B8DFB2 | Since: 1207
     */
    function setAiMemoryReactionsEnabled(enabled) {
        SetAiMemoryReactionsEnabled(enabled);
    }
    misc.setAiMemoryReactionsEnabled = setAiMemoryReactionsEnabled;
    /**
     * Similar to SET_BIT but specifically designed for large (>32 flags) bit flag sets.
     * The flags are stored in an int array where each int has the ability to hold 32 flags.
     * Flags 0-31 would be stored in the first int, flags 32-63 in the second int, etc.
     *
     * Hash: 0xE84AAC1B22A73E99 | Since: 1207
     */
    function setBitFlag(flag) {
        return SetBitFlag(flag);
    }
    misc.setBitFlag = setBitFlag;
    /**
     * No comment provided
     *
     * Hash: 0x89314FB3463E28DE | Since: 1207
     */
    function setDispatchMaxSpawnDistance(maxSpawnDistance) {
        SetDispatchMaxSpawnDistance(maxSpawnDistance);
    }
    misc.setDispatchMaxSpawnDistance = setDispatchMaxSpawnDistance;
    /**
     * No comment provided
     *
     * Hash: 0x27A1B170AA8AF84C | Since: 1207
     */
    function setDispatchMinSpawnDistance(minSpawnDistance) {
        SetDispatchMinSpawnDistance(minSpawnDistance);
    }
    misc.setDispatchMinSpawnDistance = setDispatchMinSpawnDistance;
    /**
     * Note: this native was added in build 1232.56
     *
     * Hash: 0x550F05CFFBD63C8C | Since: 1232
     */
    function setGameLogicPaused() {
        SetGameLogicPaused();
    }
    misc.setGameLogicPaused = setGameLogicPaused;
    /**
     * No comment provided
     *
     * Hash: 0xE97240065406CB80 | Since: 1207
     */
    function setGlobalBlockIsLoaded(index, toggle) {
        SetGlobalBlockIsLoaded(index, toggle);
    }
    misc.setGlobalBlockIsLoaded = setGlobalBlockIsLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x9617B6E5F6537B63 | Since: 1207
     */
    function setIncidentUnk(incidentId) {
        SetIncidentUnk(incidentId);
    }
    misc.setIncidentUnk = setIncidentUnk;
    /**
     * No comment provided
     *
     * Hash: 0x9B47971234169990 | Since: 1207
     */
    function setLootPeltSatchelItem(ped, item) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetLootPeltSatchelItem(_ped, item);
    }
    misc.setLootPeltSatchelItem = setLootPeltSatchelItem;
    /**
     * No comment provided
     *
     * Hash: 0xBE83CAE8ED77A94F | Since: 1207
     */
    function setOverrideWeather(weatherType) {
        if (typeof weatherType === 'string')
            weatherType = misc.getHashKey(weatherType);
        SetOverrideWeather(weatherType);
    }
    misc.setOverrideWeather = setOverrideWeather;
    /**
     * No comment provided
     *
     * Hash: 0xF6BEE7E80EC5CA40 | Since: 1207
     */
    function setSnowLevel(level) {
        SetSnowLevel(level);
    }
    misc.setSnowLevel = setSnowLevel;
    /**
     * No comment provided
     *
     * Hash: 0x2C6A07AF9AEDABD8 | Since: 1207
     */
    function setWeatherType2(weatherType) {
        if (typeof weatherType === 'string')
            weatherType = misc.getHashKey(weatherType);
        SetWeatherType2(weatherType, 0, 0, 0, false);
    }
    misc.setWeatherType2 = setWeatherType2;
    /**
     * No comment provided
     *
     * Hash: 0xD74ACDF7DB8114AF | Since: 1207
     */
    function setWeatherTypeFrozen(toggle) {
        SetWeatherTypeFrozen(toggle);
    }
    misc.setWeatherTypeFrozen = setWeatherTypeFrozen;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/weather/weather_variations.lua
     *
     * Hash: 0x3373779BAF7CAF48 | Since: 1207
     */
    function setWeatherVariation() {
        return SetWeatherVariation();
    }
    misc.setWeatherVariation = setWeatherVariation;
    /**
     * No comment provided
     *
     * Hash: 0x0177CF20345F44DD | Since: 1207
     */
    function shouldUse24HourClock() {
        return ShouldUse24HourClock();
    }
    misc.shouldUse24HourClock = shouldUse24HourClock;
    /**
     * Same as SHOULD_USE_METRIC_MEASUREMENTS
     *
     * Hash: 0x58BCDC75BA52110A | Since: 1207
     */
    function shouldUseMetricMeasurements2() {
        return ShouldUseMetricMeasurements2();
    }
    misc.shouldUseMetricMeasurements2 = shouldUseMetricMeasurements2;
    /**
     * No comment provided
     *
     * Hash: 0xFF4AAF3275BAAB4F | Since: 1207
     */
    function shouldUseMetricTemperature() {
        return ShouldUseMetricTemperature();
    }
    misc.shouldUseMetricTemperature = shouldUseMetricTemperature;
    /**
     * No comment provided
     *
     * Hash: 0x8F24157FEDB85EA2 | Since: 1207
     */
    function shouldUseMetricWeight() {
        return ShouldUseMetricWeight();
    }
    misc.shouldUseMetricWeight = shouldUseMetricWeight;
})(misc || (misc = {}));
export var missiondata;
(function (missiondata) {
    /**
     * No comment provided
     *
     * Hash: 0x57E798B65C45EE17 | Since: 1232
     */
    function getCatagory(missionId) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        return MissiondataGetCatagory(missionId);
    }
    missiondata.getCatagory = getCatagory;
    /**
     * No comment provided
     *
     * Hash: 0x9AABABF8313C3516 | Since: 1207
     */
    function getHighScore(missionId) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        return MissiondataGetHighScore(missionId);
    }
    missiondata.getHighScore = getHighScore;
    /**
     * No comment provided
     *
     * Hash: 0x57E798B54C45EE1A | Since: 1207
     */
    function getRating(missionId) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        return MissiondataGetRating(missionId);
    }
    missiondata.getRating = getRating;
    /**
     * No comment provided
     *
     * Hash: 0x8C32D86E9556ED86 | Since: 1207
     */
    function getReplayState() {
        return MissiondataGetReplayState(undefined);
    }
    missiondata.getReplayState = getReplayState;
    /**
     * No comment provided
     *
     * Hash: 0x57E798B56C45EE15 | Since: 1207
     */
    function getTextureName(missionId) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        return MissiondataGetTextureName(missionId);
    }
    missiondata.getTextureName = getTextureName;
    /**
     * No comment provided
     *
     * Hash: 0x57E798B57C45EE16 | Since: 1207
     */
    function getTextureTxd(missionId) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        return MissiondataGetTextureTxd(missionId);
    }
    missiondata.getTextureTxd = getTextureTxd;
    /**
     * No comment provided
     *
     * Hash: 0xE824CE7D13FCB35E | Since: 1207
     */
    function isRequiredStoryMission(missionId) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        return MissiondataIsRequiredStoryMission(missionId);
    }
    missiondata.isRequiredStoryMission = isRequiredStoryMission;
    /**
     * No comment provided
     *
     * Hash: 0xE54DC27571D5EDC5 | Since: 1207
     */
    function isValid() {
        return MissiondataIsValid(undefined);
    }
    missiondata.isValid = isValid;
    /**
     * No comment provided
     *
     * Hash: 0x3A04F0169DA87A9D | Since: 1207
     */
    function setHighScore(missionId, score) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        MissiondataSetHighScore(missionId, score);
    }
    missiondata.setHighScore = setHighScore;
    /**
     * No comment provided
     *
     * Hash: 0x12F65317708749A5 | Since: 1207
     */
    function setRatingScores(missionId, bronzeScore, silverScore, goldScore) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        MissiondataSetRatingScores(missionId, bronzeScore, silverScore, goldScore);
    }
    missiondata.setRatingScores = setRatingScores;
    /**
     * No comment provided
     *
     * Hash: 0x957A830C9B4B99EA | Since: 1232
     */
    function setReplayLockedForCategory(category, locked) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        MissiondataSetReplayLockedForCategory(category, locked);
    }
    missiondata.setReplayLockedForCategory = setReplayLockedForCategory;
    /**
     * see: missions.meta
     *
     * Hash: 0xE54DC27571D5EDC4 | Since: 1207
     */
    function wasCompleted(missionId) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        return MissiondataWasCompleted(missionId);
    }
    missiondata.wasCompleted = wasCompleted;
    /**
     * No comment provided
     *
     * Hash: 0xE145864DECC34219 | Since: 1232
     */
    function isReplayCategoryLocked(category) {
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        return MissiondataIsReplayCategoryLocked(category);
    }
    missiondata.isReplayCategoryLocked = isReplayCategoryLocked;
    /**
     * MISSION_RATING_INCOMPLETE = 0,
     * MISSION_RATING_SKIPPED,
     * MISSION_RATING_COMPLETE,
     * MISSION_RATING_BRONZE,
     * MISSION_RATING_SILVER,
     * MISSION_RATING_GOLD,
     *
     * Hash: 0xE824CE7D13FCB300 | Since: 1207
     */
    function setMissionRating(missionId, rating) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        MissiondataSetMissionRating(missionId, rating);
    }
    missiondata.setMissionRating = setMissionRating;
    /**
     * replayState: MISSIONDATA_GET_REPLAY_STATE
     *
     * Hash: 0xE4E2C581F127A11C | Since: 1207
     */
    function setReplayStateLocked(missionId, replayState) {
        if (typeof missionId === 'string')
            missionId = misc.getHashKey(missionId);
        MissiondataSetReplayStateLocked(missionId, replayState);
    }
    missiondata.setReplayStateLocked = setReplayStateLocked;
    /**
     * No comment provided
     *
     * Hash: 0x7F89E15A8FB8DE97 | Since: 1207
     */
    function timecycleBoxDelete() {
        MissiondataTimecycleBoxDelete();
    }
    missiondata.timecycleBoxDelete = timecycleBoxDelete;
    /**
     * No comment provided
     *
     * Hash: 0x7E8F86A4FA33033C | Since: 1207
     */
    function timecycleBoxExists() {
        return MissiondataTimecycleBoxExists();
    }
    missiondata.timecycleBoxExists = timecycleBoxExists;
    /**
     * No comment provided
     *
     * Hash: 0x25855B1574BF8CD5 | Since: 1207
     */
    function timecycleBoxSetModifier(timecycleName) {
        MissiondataTimecycleBoxSetModifier(timecycleName);
    }
    missiondata.timecycleBoxSetModifier = timecycleBoxSetModifier;
})(missiondata || (missiondata = {}));
export var money;
(function (money) {
    /**
     * No comment provided
     *
     * Hash: 0x07AD9E43FD478527 | Since: 1207
     */
    function _0x07AD9E43FD478527() {
        return Citizen.invokeNative('0x07AD9E43FD478527', undefined, undefined);
    }
    money._0x07AD9E43FD478527 = _0x07AD9E43FD478527;
    /**
     * No comment provided
     *
     * Hash: 0xA46FD001D1BE896C | Since: 1207
     */
    function _0xA46FD001D1BE896C() {
        return Citizen.invokeNative('0xA46FD001D1BE896C');
    }
    money._0xA46FD001D1BE896C = _0xA46FD001D1BE896C;
    /**
     * No comment provided
     *
     * Hash: 0x466BC8769CF26A7A | Since: 1207
     */
    function decrementCashBalance(amount) {
        return MoneyDecrementCashBalance(amount);
    }
    money.decrementCashBalance = decrementCashBalance;
    /**
     * No comment provided
     *
     * Hash: 0x0C02DABFA3B98176 | Since: 1207
     */
    function getCashBalance() {
        return MoneyGetCashBalance();
    }
    money.getCashBalance = getCashBalance;
    /**
     * No comment provided
     *
     * Hash: 0xBC3422DC91667621 | Since: 1207
     */
    function incrementCashBalance(amount, addReason) {
        if (typeof addReason === 'string')
            addReason = misc.getHashKey(addReason);
        return MoneyIncrementCashBalance(amount, addReason);
    }
    money.incrementCashBalance = incrementCashBalance;
    /**
     * No comment provided
     *
     * Hash: 0x8A67120DBC299525 | Since: 1207
     */
    function networkGetCashBalance() {
        return NetworkGetCashBalance();
    }
    money.networkGetCashBalance = networkGetCashBalance;
    /**
     * No comment provided
     *
     * Hash: 0x282D36FF103D78DF | Since: 1207
     */
    function networkGetStringCashBalance() {
        return NetworkGetStringCashBalance();
    }
    money.networkGetStringCashBalance = networkGetStringCashBalance;
    /**
     * No comment provided
     *
     * Hash: 0xAEC5F0119867E457 | Since: 1207
     */
    function networkIsBalanceNotLessThan(cashBalance, goldBarBalance) {
        return NetworkIsMoneyBalanceNotLessThan(cashBalance, goldBarBalance);
    }
    money.networkIsBalanceNotLessThan = networkIsBalanceNotLessThan;
})(money || (money = {}));
export var netshopping;
(function (netshopping) {
    /**
     * No comment provided
     *
     * Hash: 0xC019112F8995DC1C | Since: 1207
     */
    function cashinventoryInitSessionStatus() {
        return CashinventoryInitSessionStatus();
    }
    netshopping.cashinventoryInitSessionStatus = cashinventoryInitSessionStatus;
    /**
     * No comment provided
     *
     * Hash: 0x6CE9FB6332B5E46E | Since: 1207
     */
    function cashinventoryIsConnectionFaulted() {
        return CashinventoryIsConnectionFaulted();
    }
    netshopping.cashinventoryIsConnectionFaulted = cashinventoryIsConnectionFaulted;
    /**
     * No comment provided
     *
     * Hash: 0x38640A8C2DEF011B | Since: 1311
     */
    function _0x38640A8C2DEF011B() {
        return Citizen.invokeNative('0x38640A8C2DEF011B', 0);
    }
    netshopping._0x38640A8C2DEF011B = _0x38640A8C2DEF011B;
    /**
     * No comment provided
     *
     * Hash: 0x3FA09DD57B93C0DE | Since: 1207
     */
    function _0x3FA09DD57B93C0DE(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0x3FA09DD57B93C0DE', p0, 0, 0, undefined, 0);
    }
    netshopping._0x3FA09DD57B93C0DE = _0x3FA09DD57B93C0DE;
    /**
     * No comment provided
     *
     * Hash: 0x92A32BA29622763F | Since: 1207
     */
    function _0x92A32BA29622763F(id, index) {
        return Citizen.invokeNative('0x92A32BA29622763F', id, index);
    }
    netshopping._0x92A32BA29622763F = _0x92A32BA29622763F;
    /**
     * No comment provided
     *
     * Hash: 0xA0B7094629724974 | Since: 1207
     */
    function _0xA0B7094629724974(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0xA0B7094629724974', p0, undefined);
    }
    netshopping._0xA0B7094629724974 = _0xA0B7094629724974;
    /**
     * No comment provided
     *
     * Hash: 0xA3B8D31C13CB4239 | Since: 1311
     */
    function _0xA3B8D31C13CB4239(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0xA3B8D31C13CB4239', 0, p1, 0, 0);
    }
    netshopping._0xA3B8D31C13CB4239 = _0xA3B8D31C13CB4239;
    /**
     * No comment provided
     *
     * Hash: 0xB6F4557060EF0FB4 | Since: 1207
     */
    function _0xB6F4557060EF0FB4() {
        return Citizen.invokeNative('0xB6F4557060EF0FB4', 0, 0);
    }
    netshopping._0xB6F4557060EF0FB4 = _0xB6F4557060EF0FB4;
    /**
     * No comment provided
     *
     * Hash: 0xCE54C9ABE6FBC6DB | Since: 1207
     */
    function _0xCE54C9ABE6FBC6DB(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0xCE54C9ABE6FBC6DB', p0);
    }
    netshopping._0xCE54C9ABE6FBC6DB = _0xCE54C9ABE6FBC6DB;
    /**
     * No comment provided
     *
     * Hash: 0xD1555FBC96C88444 | Since: 1207
     */
    function _0xD1555FBC96C88444(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0xD1555FBC96C88444', p0, 0, 0, undefined, 0);
    }
    netshopping._0xD1555FBC96C88444 = _0xD1555FBC96C88444;
    /**
     * No comment provided
     *
     * Hash: 0xD1CE92D1D9BE170A | Since: 1207
     */
    function cashinventoryInitSessionIsFaulted() {
        return CashinventoryInitSessionIsFaulted();
    }
    netshopping.cashinventoryInitSessionIsFaulted = cashinventoryInitSessionIsFaulted;
    /**
     * No comment provided
     *
     * Hash: 0xFCC24220FDDAC929 | Since: 1207
     */
    function cashinventoryIsSessionReady() {
        return CashinventoryIsSessionReady();
    }
    netshopping.cashinventoryIsSessionReady = cashinventoryIsSessionReady;
    /**
     * No comment provided
     *
     * Hash: 0x52BDE32F21BA3B6D | Since: 1207
     */
    function cashinventoryTransactionAddAward(id, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return CashinventoryTransactionAddAward(id, hash);
    }
    netshopping.cashinventoryTransactionAddAward = cashinventoryTransactionAddAward;
    /**
     * No comment provided
     *
     * Hash: 0x3745C002F5A21C45 | Since: unknown
     */
    function cashinventoryTransactionAddItem(id, item) {
        return CashinventoryTransactionAddItem(id, item, 0);
    }
    netshopping.cashinventoryTransactionAddItem = cashinventoryTransactionAddItem;
    /**
     * No comment provided
     *
     * Hash: 0xF65D2D35037BF5EC | Since: unknown
     */
    function cashinventoryTransactionAddItemWithIngredients(id, item) {
        return CashinventoryTransactionAddItemWithIngredients(id, item, 0, undefined, 0);
    }
    netshopping.cashinventoryTransactionAddItemWithIngredients = cashinventoryTransactionAddItemWithIngredients;
    /**
     * No comment provided
     *
     * Hash: 0x592BC00BF6629BE7 | Since: 1207
     */
    function cashinventoryTransactionCheckout(id) {
        return CashinventoryTransactionCheckout(id);
    }
    netshopping.cashinventoryTransactionCheckout = cashinventoryTransactionCheckout;
    /**
     * No comment provided
     *
     * Hash: 0x26C008791D066F37 | Since: 1207
     */
    function cashinventoryTransactionCheckoutStatus(id) {
        return CashinventoryTransactionCheckoutStatus(id);
    }
    netshopping.cashinventoryTransactionCheckoutStatus = cashinventoryTransactionCheckoutStatus;
    /**
     * No comment provided
     *
     * Hash: 0x59EF5D516E2D96B9 | Since: 1207
     */
    function cashinventoryTransactionDelete(id) {
        return CashinventoryTransactionDelete(id);
    }
    netshopping.cashinventoryTransactionDelete = cashinventoryTransactionDelete;
    /**
     * No comment provided
     *
     * Hash: 0xFFEA09CCEC4AF32F | Since: 1207
     */
    function cashinventoryTransactionFireAndForgetItem(actionHash) {
        if (typeof actionHash === 'string')
            actionHash = misc.getHashKey(actionHash);
        return CashinventoryTransactionFireAndForgetItem(actionHash, 0);
    }
    netshopping.cashinventoryTransactionFireAndForgetItem = cashinventoryTransactionFireAndForgetItem;
    /**
     * No comment provided
     *
     * Hash: 0xBD2D520C51CCFF52 | Since: 1207
     */
    function cashinventoryTransactionGetAction(id) {
        return CashinventoryTransactionGetAction(id);
    }
    netshopping.cashinventoryTransactionGetAction = cashinventoryTransactionGetAction;
    /**
     * No comment provided
     *
     * Hash: 0x52A226ADF4A270D2 | Since: 1207
     */
    function cashinventoryTransactionGetBasketIsValid(id) {
        return CashinventoryTransactionGetBasketIsValid(id);
    }
    netshopping.cashinventoryTransactionGetBasketIsValid = cashinventoryTransactionGetBasketIsValid;
    /**
     * No comment provided
     *
     * Hash: 0x7616B5F0895C2D99 | Since: 1207
     */
    function cashinventoryTransactionGetItemInfo(id, index) {
        return CashinventoryTransactionGetItemInfo(id, index);
    }
    netshopping.cashinventoryTransactionGetItemInfo = cashinventoryTransactionGetItemInfo;
    /**
     * No comment provided
     *
     * Hash: 0xCF2D04D076847478 | Since: 1207
     */
    function cashinventoryTransactionGetNumOfItems(id) {
        return CashinventoryTransactionGetNumOfItems(id);
    }
    netshopping.cashinventoryTransactionGetNumOfItems = cashinventoryTransactionGetNumOfItems;
    /**
     * No comment provided
     *
     * Hash: 0x98412398BBE73F61 | Since: 1207
     */
    function cashinventoryTransactionResponseGetItemInfo(id, index) {
        return CashinventoryTransactionResponseGetItemInfo(id, index);
    }
    netshopping.cashinventoryTransactionResponseGetItemInfo = cashinventoryTransactionResponseGetItemInfo;
    /**
     * No comment provided
     *
     * Hash: 0xF039EC27F4490E96 | Since: 1207
     */
    function cashinventoryTransactionStart(_type, actionHash) {
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        if (typeof actionHash === 'string')
            actionHash = misc.getHashKey(actionHash);
        return CashinventoryTransactionStart(_type, actionHash);
    }
    netshopping.cashinventoryTransactionStart = cashinventoryTransactionStart;
    /**
     * No comment provided
     *
     * Hash: 0x6C9F12700BCE69F4 | Since: 1207
     */
    function cashinventoryTransactionValidateItem(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return CashinventoryTransactionValidateItem(p0);
    }
    netshopping.cashinventoryTransactionValidateItem = cashinventoryTransactionValidateItem;
})(netshopping || (netshopping = {}));
export var network;
(function (network) {
    /**
     * No comment provided
     *
     * Hash: 0xD45B1FFCCD52FF19 | Since: 1207
     */
    function activateDamageTrackerOnId(netID, toggle) {
        ActivateDamageTrackerOnNetworkId(netID, toggle);
    }
    network.activateDamageTrackerOnId = activateDamageTrackerOnId;
    /**
     * No comment provided
     *
     * Hash: 0x69778E7564BADE6D | Since: 1207
     */
    function canRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt) {
        return CanRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt);
    }
    network.canRegisterMissionEntities = canRegisterMissionEntities;
    /**
     * No comment provided
     *
     * Hash: 0x800DD4721A8B008B | Since: 1207
     */
    function canRegisterMissionObjects(amount) {
        return CanRegisterMissionObjects(amount);
    }
    network.canRegisterMissionObjects = canRegisterMissionObjects;
    /**
     * No comment provided
     *
     * Hash: 0xBCBF4FEF9FA5D781 | Since: 1207
     */
    function canRegisterMissionPeds(amount) {
        return CanRegisterMissionPeds(amount);
    }
    network.canRegisterMissionPeds = canRegisterMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0xF0460C7BF80011EA | Since: 1207
     */
    function canRegisterMissionPickups(amount) {
        return CanRegisterMissionPickups(amount);
    }
    network.canRegisterMissionPickups = canRegisterMissionPickups;
    /**
     * No comment provided
     *
     * Hash: 0x7277F1F2E085EE74 | Since: 1207
     */
    function canRegisterMissionVehicles(amount) {
        return CanRegisterMissionVehicles(amount);
    }
    network.canRegisterMissionVehicles = canRegisterMissionVehicles;
    /**
     * Old name: _CLEAR_LAUNCH_PARAMS
     *
     * Hash: 0x966DD84FB6A46017 | Since: 1207
     */
    function clearServiceEventArguments() {
        ClearServiceEventArguments();
    }
    network.clearServiceEventArguments = clearServiceEventArguments;
    /**
     * No comment provided
     *
     * Hash: 0x3A3D5568AF297CD5 | Since: 1207
     */
    function cloudDidRequestSucceed(id) {
        return CloudDidRequestSucceed(id);
    }
    network.cloudDidRequestSucceed = cloudDidRequestSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x4C61B39930D045DA | Since: 1207
     */
    function cloudHasRequestCompleted(id) {
        return CloudHasRequestCompleted(id);
    }
    network.cloudHasRequestCompleted = cloudHasRequestCompleted;
    /**
     * Takes the specified time and writes it to the structure specified in the second argument.
     *
     * struct date_time
     * {
     * int year;
     * int PADDING1;
     * int month;
     * int PADDING2;
     * int day;
     * int PADDING3;
     * int hour;
     * int PADDING4;
     * int minute;
     * int PADDING5;
     * int second;
     * int PADDING6;
     * };
     *
     * Hash: 0xAC97AF97FA68E5D5 | Since: 1207
     */
    function convertPosixTime(posixTime) {
        return ConvertPosixTime(posixTime);
    }
    network.convertPosixTime = convertPosixTime;
    /**
     * No comment provided
     *
     * Hash: 0x9A73240B49945C76 | Since: 1207
     */
    function getCloudTimeAsInt() {
        return GetCloudTimeAsInt();
    }
    network.getCloudTimeAsInt = getCloudTimeAsInt;
    /**
     * No comment provided
     *
     * Hash: 0x65E65CA6A0FE59D4 | Since: 1207
     */
    function getLaunchParamValue(paramName) {
        return GetLaunchParamValue(paramName);
    }
    network.getLaunchParamValue = getLaunchParamValue;
    /**
     * Always returns 60
     *
     * Hash: 0xC7BE335216B5EC7C | Since: 1207
     */
    function getMaxNumObjects() {
        return GetMaxNumNetworkObjects();
    }
    network.getMaxNumObjects = getMaxNumObjects;
    /**
     * Always returns 110
     *
     * Hash: 0x0C1F7D49C39D2289 | Since: 1207
     */
    function getMaxNumPeds() {
        return GetMaxNumNetworkPeds();
    }
    network.getMaxNumPeds = getMaxNumPeds;
    /**
     * Always returns 80
     *
     * Hash: 0xA72835064DD63E4C | Since: 1207
     */
    function getMaxNumPickups() {
        return GetMaxNumNetworkPickups();
    }
    network.getMaxNumPickups = getMaxNumPickups;
    /**
     * Always returns 40
     *
     * Hash: 0x0AFCE529F69B21FF | Since: 1207
     */
    function getMaxNumVehicles() {
        return GetMaxNumNetworkVehicles();
    }
    network.getMaxNumVehicles = getMaxNumVehicles;
    /**
     * No comment provided
     *
     * Hash: 0x7A5487FE9FAA6B48 | Since: 1207
     */
    function getTime() {
        return GetNetworkTime();
    }
    network.getTime = getTime;
    /**
     * No comment provided
     *
     * Hash: 0x89023FBBF9200E9F | Since: 1207
     */
    function getTimeAccurate() {
        return GetNetworkTimeAccurate();
    }
    network.getTimeAccurate = getTimeAccurate;
    /**
     * No comment provided
     *
     * Hash: 0x12B6281B6C6706C0 | Since: 1207
     */
    function getNumCreatedMissionObjects() {
        return GetNumCreatedMissionObjects(false);
    }
    network.getNumCreatedMissionObjects = getNumCreatedMissionObjects;
    /**
     * No comment provided
     *
     * Hash: 0xCB215C4B56A7FAE7 | Since: 1207
     */
    function getNumCreatedMissionPeds() {
        return GetNumCreatedMissionPeds(false);
    }
    network.getNumCreatedMissionPeds = getNumCreatedMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0x0CD9AB83489430EA | Since: 1207
     */
    function getNumCreatedMissionVehicles() {
        return GetNumCreatedMissionVehicles(false);
    }
    network.getNumCreatedMissionVehicles = getNumCreatedMissionVehicles;
    /**
     * p0 appears to be for MP
     *
     * Hash: 0xAA81B5F10BC43AC2 | Since: 1207
     */
    function getNumReservedMissionObjects() {
        return GetNumReservedMissionObjects(false);
    }
    network.getNumReservedMissionObjects = getNumReservedMissionObjects;
    /**
     * p0 appears to be for MP
     *
     * Hash: 0x1F13D5AE5CB17E17 | Since: 1207
     */
    function getNumReservedMissionPeds() {
        return GetNumReservedMissionPeds(false);
    }
    network.getNumReservedMissionPeds = getNumReservedMissionPeds;
    /**
     * p0 appears to be for MP
     *
     * Hash: 0xCF3A965906452031 | Since: 1207
     */
    function getNumReservedMissionVehicles() {
        return GetNumReservedMissionVehicles(false);
    }
    network.getNumReservedMissionVehicles = getNumReservedMissionVehicles;
    /**
     * Used in Script Function NET_ACE_CLIENT_VERIFY_ENTITY_RESERVATIONS
     * Coords: Slot world position
     *
     * Old name: _GET_RESERVATIONS_FOR_SLOT_WORLD_POSITION
     *
     * Hash: 0x5E71E72A94985214 | Since: 1207
     */
    function getReservedMissionEntitiesInArea(pos) {
        return GetReservedMissionEntitiesInArea(pos.x, pos.y, pos.z, false);
    }
    network.getReservedMissionEntitiesInArea = getReservedMissionEntitiesInArea;
    /**
     * 0 = succeeded
     * 1 = pending
     * 2 = failed
     *
     * Hash: 0x8BD6C6DEA20E82C6 | Since: 1207
     */
    function getStatusOfTextureDownload(textureDownloadId) {
        return GetStatusOfTextureDownload(textureDownloadId);
    }
    network.getStatusOfTextureDownload = getStatusOfTextureDownload;
    /**
     * Subtracts the second argument from the first.
     *
     * Hash: 0xA2C6FC031D46FFF0 | Since: 1207
     */
    function getTimeDifference(timeA, timeB) {
        return GetTimeDifference(timeA, timeB);
    }
    network.getTimeDifference = getTimeDifference;
    /**
     * Adds the first argument to the second.
     *
     * Hash: 0x017008CCDAD48503 | Since: 1207
     */
    function getTimeOffset(timeA, timeB) {
        return GetTimeOffset(timeA, timeB);
    }
    network.getTimeOffset = getTimeOffset;
    /**
     * No comment provided
     *
     * Hash: 0x07F723401B9D921C | Since: 1207
     */
    function getUniqueIntForPlayer(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetUniqueIntForPlayer(_player);
    }
    network.getUniqueIntForPlayer = getUniqueIntForPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x46718ACEEDEAFC84 | Since: 1207
     */
    function hasTimeStarted() {
        return HasNetworkTimeStarted();
    }
    network.hasTimeStarted = hasTimeStarted;
    /**
     * No comment provided
     *
     * Hash: 0x6E192E33AD436366 | Since: 1207
     */
    function isDamageTrackerActiveOnId(netID) {
        return IsDamageTrackerActiveOnNetworkId(netID);
    }
    network.isDamageTrackerActiveOnId = isDamageTrackerActiveOnId;
    /**
     * Old name: _IS_ENTITY_GHOSTED_TO_LOCAL_PLAYER
     *
     * Hash: 0x21D04D7BC538C146 | Since: 1207
     */
    function isEntityAGhost(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityAGhost(_entity);
    }
    network.isEntityAGhost = isEntityAGhost;
    /**
     * No comment provided
     *
     * Hash: 0xA1607996431332DF | Since: 1207
     */
    function isIdOwnedByParticipant(netId) {
        return IsNetworkIdOwnedByParticipant(netId);
    }
    network.isIdOwnedByParticipant = isIdOwnedByParticipant;
    /**
     * Note: this native was added in build 1311.16
     *
     * Hash: 0x8FE9EB11EC9CC23A | Since: 1311
     */
    function isObjectReassignmentInProgress() {
        return IsObjectReassignmentInProgress();
    }
    network.isObjectReassignmentInProgress = isObjectReassignmentInProgress;
    /**
     * No comment provided
     *
     * Hash: 0xD82CF8E64C8729D8 | Since: 1207
     */
    function isSphereVisibleToAnotherMachine() {
        return IsSphereVisibleToAnotherMachine(undefined, undefined, undefined, undefined, undefined);
    }
    network.isSphereVisibleToAnotherMachine = isSphereVisibleToAnotherMachine;
    /**
     * No comment provided
     *
     * Hash: 0xDC3A310219E5DA62 | Since: 1207
     */
    function isSphereVisibleToPlayer() {
        return IsSphereVisibleToPlayer(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    network.isSphereVisibleToPlayer = isSphereVisibleToPlayer;
    /**
     * Subtracts the second argument from the first, then returns whether the result is negative.
     *
     * Hash: 0xCB2CF5148012C8D0 | Since: 1207
     */
    function isTimeLessThan(timeA, timeB) {
        return IsTimeLessThan(timeA, timeB);
    }
    network.isTimeLessThan = isTimeLessThan;
    /**
     * Subtracts the first argument from the second, then returns whether the result is negative.
     *
     * Hash: 0xDE350F8651E4346C | Since: 1207
     */
    function isTimeMoreThan(timeA, timeB) {
        return IsTimeMoreThan(timeA, timeB);
    }
    network.isTimeMoreThan = isTimeMoreThan;
    /**
     * No comment provided
     *
     * Hash: 0xE1BC73D6815BA361 | Since: 1207
     */
    function keepIdInFastInstance(netId) {
        KeepNetworkIdInFastInstance(netId, false, 0);
    }
    network.keepIdInFastInstance = keepIdInFastInstance;
    /**
     * No comment provided
     *
     * Hash: 0xB2CEA5105AAC8DDE | Since: 1207
     */
    function acceptRsInvite() {
        return NetworkAcceptRsInvite(0);
    }
    network.acceptRsInvite = acceptRsInvite;
    /**
     * No comment provided
     *
     * Hash: 0xAA6A47A573ABB75A | Since: 1207
     */
    function accessTunableBool(tunableContext, tunableName) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkAccessTunableBool(tunableContext, tunableName);
    }
    network.accessTunableBool = accessTunableBool;
    /**
     * No comment provided
     *
     * Hash: 0x8BE1146DFD5D4468 | Since: 1207
     */
    function accessTunableInt(tunableContext, tunableName) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkAccessTunableInt(tunableContext, tunableName);
    }
    network.accessTunableInt = accessTunableInt;
    /**
     * No comment provided
     *
     * Hash: 0x3B82ACC3F4B6240C | Since: 1207
     */
    function actionPlatformInvite() {
        return NetworkActionPlatformInvite();
    }
    network.actionPlatformInvite = actionPlatformInvite;
    /**
     * No comment provided
     *
     * Hash: 0x3FE141FDB990E3D1 | Since: 1207
     */
    function activityResetToIdle() {
        NetworkActivityResetToIdle();
    }
    network.activityResetToIdle = activityResetToIdle;
    /**
     * No comment provided
     *
     * Hash: 0x9ADAC065D9F6706F | Since: 1207
     */
    function activitySetCurrent(netPlaylistActivity) {
        NetworkActivitySetCurrent(netPlaylistActivity);
    }
    network.activitySetCurrent = activitySetCurrent;
    /**
     * No comment provided
     *
     * Hash: 0x8E02D73914064223 | Since: 1207
     */
    function addFriend(message) {
        return NetworkAddFriend(message);
    }
    network.addFriend = addFriend;
    /**
     * No comment provided
     *
     * Hash: 0x4B05B97BA46F419D | Since: 1207
     */
    function allowAllEntityFadingForInstances(toggle) {
        NetworkAllowAllEntityFadingForInstances(toggle);
    }
    network.allowAllEntityFadingForInstances = allowAllEntityFadingForInstances;
    /**
     * No comment provided
     *
     * Hash: 0xF3354D6CA46F419D | Since: 1207
     */
    function allowEntityFadingForInstances(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        NetworkAllowEntityFadingForInstances(_entity, toggle);
    }
    network.allowEntityFadingForInstances = allowEntityFadingForInstances;
    /**
     * Old name: _NETWORK_ALLOW_LOCAL_ENTITY_ATTACHMENT
     *
     * Hash: 0x267C78C60E806B9A | Since: 1207
     */
    function allowRemoteAttachmentModification(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        NetworkAllowRemoteAttachmentModification(_entity, toggle);
    }
    network.allowRemoteAttachmentModification = allowRemoteAttachmentModification;
    /**
     * No comment provided
     *
     * Hash: 0x57DBA049E110F217 | Since: 1207
     */
    function areHandlesTheSame() {
        return NetworkAreHandlesTheSame();
    }
    network.areHandlesTheSame = areHandlesTheSame;
    /**
     * Old name: _NETWORK_IS_PLAYER_EQUAL_TO_INDEX
     *
     * Hash: 0x9DE986FC9A87C474 | Since: 1207
     */
    function arePlayersInSameTutorialSession(player, index) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkArePlayersInSameTutorialSession(_player, index);
    }
    network.arePlayersInSameTutorialSession = arePlayersInSameTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0xE404BFF0ABA23CDC | Since: 1207
     */
    function autoSessionCanSplitSession() {
        return NetworkAutoSessionCanSplitSession();
    }
    network.autoSessionCanSplitSession = autoSessionCanSplitSession;
    /**
     * No comment provided
     *
     * Hash: 0xBB51299166B844F3 | Since: 1207
     */
    function autoSessionFinishInstance() {
        NetworkAutoSessionFinishInstance();
    }
    network.autoSessionFinishInstance = autoSessionFinishInstance;
    /**
     * No comment provided
     *
     * Hash: 0xAADED99A6B268A27 | Since: 1207
     */
    function autoSessionIsAllowedToMerge() {
        return NetworkAutoSessionIsAllowedToMerge();
    }
    network.autoSessionIsAllowedToMerge = autoSessionIsAllowedToMerge;
    /**
     * No comment provided
     *
     * Hash: 0x0E2C3AEE6CE603B7 | Since: 1207
     */
    function autoSessionIsObjectCreationPaused() {
        return NetworkAutoSessionIsObjectCreationPaused();
    }
    network.autoSessionIsObjectCreationPaused = autoSessionIsObjectCreationPaused;
    /**
     * No comment provided
     *
     * Hash: 0xC223D299C670413D | Since: 1207
     */
    function autoSessionSplitSession(playersToTake, maxInstancePlayers, sessionFlags, bucketId) {
        return NetworkAutoSessionSplitSession(playersToTake, maxInstancePlayers, sessionFlags, bucketId);
    }
    network.autoSessionSplitSession = autoSessionSplitSession;
    /**
     * No comment provided
     *
     * Hash: 0xFBE782B3165AC8EC | Since: 1207
     */
    function awardHasReachedMaxclaim() {
        return NetworkAwardHasReachedMaxclaim(undefined);
    }
    network.awardHasReachedMaxclaim = awardHasReachedMaxclaim;
    /**
     * No comment provided
     *
     * Hash: 0xAF50DA1A3F8B1BA4 | Since: 1207
     */
    function canAccessMultiplayer() {
        return NetworkCanAccessMultiplayer();
    }
    network.canAccessMultiplayer = canAccessMultiplayer;
    /**
     * No comment provided
     *
     * Hash: 0x1AF5E28E64A76A9F | Since: 1207
     */
    function canRefreshFriendPage() {
        return NetworkCanRefreshFriendPage();
    }
    network.canRefreshFriendPage = canRefreshFriendPage;
    /**
     * No comment provided
     *
     * Hash: 0x4EEBC3694E49C572 | Since: 1207
     */
    function canSessionEnd() {
        return NetworkCanSessionEnd();
    }
    network.canSessionEnd = canSessionEnd;
    /**
     * No comment provided
     *
     * Hash: 0x246545C37C27A717 | Since: 1207
     */
    function canViewGamerUserContent() {
        return NetworkCanViewGamerUserContent();
    }
    network.canViewGamerUserContent = canViewGamerUserContent;
    /**
     * No comment provided
     *
     * Hash: 0x2A8112A974DE1EF6 | Since: 1207
     */
    function checkAccessAndAlertIfFail() {
        return NetworkCheckAccessAndAlertIfFail();
    }
    network.checkAccessAndAlertIfFail = checkAccessAndAlertIfFail;
    /**
     * No comment provided
     *
     * Hash: 0x83F28CE49FBBFFBA | Since: 1207
     */
    function checkCommunicationPrivileges() {
        return NetworkCheckCommunicationPrivileges(0);
    }
    network.checkCommunicationPrivileges = checkCommunicationPrivileges;
    /**
     * No comment provided
     *
     * Hash: 0x595F028698072DD9 | Since: 1207
     */
    function checkUserContentPrivileges() {
        return NetworkCheckUserContentPrivileges(0);
    }
    network.checkUserContentPrivileges = checkUserContentPrivileges;
    /**
     * No comment provided
     *
     * Hash: 0xD972DF67326F966E | Since: 1207
     */
    function clearClockTimeOverride() {
        NetworkClearClockTimeOverride();
    }
    network.clearClockTimeOverride = clearClockTimeOverride;
    /**
     * No comment provided
     *
     * Hash: 0x6D14CCEE1B40381A | Since: 1207
     */
    function clearFoundGamers() {
        NetworkClearFoundGamers();
    }
    network.clearFoundGamers = clearFoundGamers;
    /**
     * No comment provided
     *
     * Hash: 0x86E0660E4F5C956D | Since: 1207
     */
    function clearGetGamerStatus() {
        NetworkClearGetGamerStatus();
    }
    network.clearGetGamerStatus = clearGetGamerStatus;
    /**
     * No comment provided
     *
     * Hash: 0xA4484173759749B1 | Since: 1207
     */
    function clearPlatformInvite() {
        NetworkClearPlatformInvite();
    }
    network.clearPlatformInvite = clearPlatformInvite;
    /**
     * No comment provided
     *
     * Hash: 0xBBDF066252829606 | Since: 1207
     */
    function concealPlayer(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        NetworkConcealPlayer(_player, toggle);
    }
    network.concealPlayer = concealPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xF9B83B77929D8863 | Since: 1207
     */
    function didFindGamersSucceed() {
        return NetworkDidFindGamersSucceed();
    }
    network.didFindGamersSucceed = didFindGamersSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x5AE17C6B0134B7F1 | Since: 1207
     */
    function didGetGamerStatusSucceed() {
        return NetworkDidGetGamerStatusSucceed();
    }
    network.didGetGamerStatusSucceed = didGetGamerStatusSucceed;
    /**
     * No comment provided
     *
     * Hash: 0xC505036A35AFD01B | Since: 1207
     */
    function disableLeaveRemotePedBehind(toggle) {
        NetworkDisableLeaveRemotePedBehind(toggle);
    }
    network.disableLeaveRemotePedBehind = disableLeaveRemotePedBehind;
    /**
     * No comment provided
     *
     * Hash: 0x407091CF6037118E | Since: 1207
     */
    function disableProximityMigration(netID) {
        NetworkDisableProximityMigration(netID);
    }
    network.disableProximityMigration = disableProximityMigration;
    /**
     * No comment provided
     *
     * Hash: 0x236905C700FDB54D | Since: 1207
     */
    function disableRealtimeMultiplayer() {
        NetworkDisableRealtimeMultiplayer();
    }
    network.disableRealtimeMultiplayer = disableRealtimeMultiplayer;
    /**
     * Hardcoded to return -1.
     *
     * Hash: 0xD66C9E72B3CC4982 | Since: 1207
     */
    function displaynamesFromHandlesStart() {
        return NetworkDisplaynamesFromHandlesStart(undefined);
    }
    network.displaynamesFromHandlesStart = displaynamesFromHandlesStart;
    /**
     * No comment provided
     *
     * Hash: 0x38CE16C96BD11344 | Since: 1207
     */
    function doesNetworkIdExist(netID) {
        return NetworkDoesNetworkIdExist(netID);
    }
    network.doesNetworkIdExist = doesNetworkIdExist;
    /**
     * No comment provided
     *
     * Hash: 0x85E5F8B9B898B20A | Since: 1207
     */
    function doesTunableExist(tunableContext, tunableName) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkDoesTunableExist(tunableContext, tunableName);
    }
    network.doesTunableExist = doesTunableExist;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xAEDF1BC1C133D6E3 | Since: 1207
     */
    function dumpNetIfConfig() {
        NetworkDumpNetIfConfig();
    }
    network.dumpNetIfConfig = dumpNetIfConfig;
    /**
     * No comment provided
     *
     * Hash: 0xD0AFAFF5A51D72F7 | Since: 1207
     */
    function endTutorialSession() {
        NetworkEndTutorialSession();
    }
    network.endTutorialSession = endTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0x4CACA84440FA26F6 | Since: 1207
     */
    function getAssistedDamageOfEntity(player, entity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return NetworkGetAssistedDamageOfEntity(_player, _entity);
    }
    network.getAssistedDamageOfEntity = getAssistedDamageOfEntity;
    /**
     * Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER
     *
     * Hash: 0xD414BE129BB81B32 | Since: 1207
     */
    function getAverageLatency(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetAverageLatency(_player);
    }
    network.getAverageLatency = getAverageLatency;
    /**
     * Old name: _NETWORK_GET_AVERAGE_PACKET_LOSS_FOR_PLAYER
     *
     * Hash: 0x350C23949E43686C | Since: 1207
     */
    function getAveragePacketLoss(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetAveragePacketLoss(_player);
    }
    network.getAveragePacketLoss = getAveragePacketLoss;
    /**
     * Same as NETWORK_GET_AVERAGE_LATENCY (0xD414BE129BB81B32)
     *
     * Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER_2
     *
     * Hash: 0x0E3A041ED6AC2B45 | Since: 1207
     */
    function getAveragePing(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetAveragePing(_player);
    }
    network.getAveragePing = getAveragePing;
    /**
     * No comment provided
     *
     * Hash: 0x7A1ADEEF01740A24 | Since: 1207
     */
    function getDestroyerOfNetworkId(netId) {
        return NetworkGetDestroyerOfNetworkId(netId);
    }
    network.getDestroyerOfNetworkId = getDestroyerOfNetworkId;
    /**
     * Hardcoded to return zero.
     *
     * Hash: 0x58CC181719256197 | Since: 1207
     */
    function getDisplaynamesFromHandles() {
        return NetworkGetDisplaynamesFromHandles(undefined, undefined, undefined);
    }
    network.getDisplaynamesFromHandles = getDisplaynamesFromHandles;
    /**
     * No comment provided
     *
     * Hash: 0xCE4E5D9B0A4FF560 | Since: 1207
     */
    function getEntityFromNetworkId(netId) {
        return NetworkGetEntityFromNetworkId(netId);
    }
    network.getEntityFromNetworkId = getEntityFromNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0xC7827959479DCC78 | Since: 1207
     */
    function getEntityIsNetworked(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return NetworkGetEntityIsNetworked(_entity);
    }
    network.getEntityIsNetworked = getEntityIsNetworked;
    /**
     * No comment provided
     *
     * Hash: 0x42B2DAA6B596F5F8 | Since: 1207
     */
    function getEntityKillerOfPlayer(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetEntityKillerOfPlayer(_player);
    }
    network.getEntityKillerOfPlayer = getEntityKillerOfPlayer;
    /**
     * Always returns a null string.
     *
     * Hash: 0x426141162EBE5CDB | Since: 1207
     */
    function getGamertagFromHandle() {
        return NetworkGetGamertagFromHandle();
    }
    network.getGamertagFromHandle = getGamertagFromHandle;
    /**
     * No comment provided
     *
     * Hash: 0x225640E09EFFDC3F | Since: 1207
     */
    function getGameMode() {
        return NetworkGetGameMode();
    }
    network.getGameMode = getGameMode;
    /**
     * No comment provided
     *
     * Hash: 0x11A7ADCD629E170F | Since: 1207
     */
    function getGlobalClock() {
        return NetworkGetGlobalClock();
    }
    network.getGlobalClock = getGlobalClock;
    /**
     * No comment provided
     *
     * Hash: 0x6D03BFBD643B2A02 | Since: 1207
     */
    function getGlobalMultiplayerClock() {
        return NetworkGetGlobalMultiplayerClock();
    }
    network.getGlobalMultiplayerClock = getGlobalMultiplayerClock;
    /**
     * Old name: _NETWORK_GET_OLDEST_RESEND_COUNT_FOR_PLAYER
     *
     * Hash: 0x52C1EADAF7B10302 | Since: 1207
     */
    function getHighestReliableResendCount(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetHighestReliableResendCount(_player);
    }
    network.getHighestReliableResendCount = getHighestReliableResendCount;
    /**
     * No comment provided
     *
     * Hash: 0x1D6A14F1F9A736FC | Since: 1436
     */
    function getHostOfScript(scriptName) {
        return NetworkGetHostOfScript(scriptName, 0, 0);
    }
    network.getHostOfScript = getHostOfScript;
    /**
     * No comment provided
     *
     * Hash: 0xC7B4D79B01FA7A5C | Since: 1232
     */
    function getHostOfThisScript() {
        return NetworkGetHostOfThisScript();
    }
    network.getHostOfThisScript = getHostOfThisScript;
    /**
     * No comment provided
     *
     * Hash: 0xB4A25351D79B444C | Since: 1207
     */
    function getHostOfThread(threadId) {
        return NetworkGetHostOfThread(threadId);
    }
    network.getHostOfThread = getHostOfThread;
    /**
     * No comment provided
     *
     * Hash: 0x638A3A81733086DB | Since: 1207
     */
    function getInstanceIdOfThisScript() {
        return NetworkGetInstanceIdOfThisScript();
    }
    network.getInstanceIdOfThisScript = getInstanceIdOfThisScript;
    /**
     * No comment provided
     *
     * Hash: 0xE86051786B66CD8E | Since: 1207
     */
    function getLocalHandle() {
        return NetworkGetLocalHandle();
    }
    network.getLocalHandle = getLocalHandle;
    /**
     * Seems to always return 0, but it's used in quite a few loops.
     *
     * `for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)`
     * {
     * `if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)`
     * {
     * `var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));`
     *
     * Hash: 0xA6C90FBC38E395EE | Since: 1207
     */
    function getMaxNumParticipants() {
        return NetworkGetMaxNumParticipants();
    }
    network.getMaxNumParticipants = getMaxNumParticipants;
    /**
     * No comment provided
     *
     * Hash: 0xA11700682F3AD45C | Since: 1207
     */
    function getNetworkIdFromEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return NetworkGetNetworkIdFromEntity(_entity);
    }
    network.getNetworkIdFromEntity = getNetworkIdFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0x42871327315EDAE8 | Since: 1207
     */
    function getNetworkIdFromRopeId(ropeId) {
        return NetworkGetNetworkIdFromRopeId(ropeId);
    }
    network.getNetworkIdFromRopeId = getNetworkIdFromRopeId;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x6FD992C4A1C1B986 | Since: 1207
     */
    function getNetStatisticsInfo() {
        NetworkGetNetStatisticsInfo();
    }
    network.getNetStatisticsInfo = getNetStatisticsInfo;
    /**
     * Hardcoded to return zero.
     *
     * ==== PS4 specific info ====
     *
     * Returns some sort of unavailable reason:
     * -1 = REASON_INVALID
     * 0 = REASON_OTHER
     * 1 = REASON_SYSTEM_UPDATE
     * 2 = REASON_GAME_UPDATE
     * 3 = REASON_SIGNED_OUT
     * 4 = REASON_AGE
     * 5 = REASON_CONNECTION
     *
     * =================================
     *
     * Hash: 0x74FB3E29E6D10FA9 | Since: 1207
     */
    function getNpUnavailableReason() {
        return NetworkGetNpUnavailableReason();
    }
    network.getNpUnavailableReason = getNpUnavailableReason;
    /**
     * Returns the amount of players connected in the current session. Only works when connected to a session/server.
     *
     * Hash: 0xA4A79DD2D9600654 | Since: 1207
     */
    function getNumConnectedPlayers() {
        return NetworkGetNumConnectedPlayers();
    }
    network.getNumConnectedPlayers = getNumConnectedPlayers;
    /**
     * No comment provided
     *
     * Hash: 0x18D0456E86604654 | Since: 1207
     */
    function getNumParticipants() {
        return NetworkGetNumParticipants();
    }
    network.getNumParticipants = getNumParticipants;
    /**
     * No comment provided
     *
     * Hash: 0x3658E8CD94FC121A | Since: 1207
     */
    function getNumScriptParticipants(scriptName, instanceId, position) {
        if (typeof position === 'string')
            position = misc.getHashKey(position);
        return NetworkGetNumScriptParticipants(scriptName, instanceId, position);
    }
    network.getNumScriptParticipants = getNumScriptParticipants;
    /**
     * Old name: _NETWORK_GET_NUM_UNACKED_FOR_PLAYER
     *
     * Hash: 0xFF8FCF9FFC458A1C | Since: 1207
     */
    function getNumUnackedReliables(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetNumUnackedReliables(_player);
    }
    network.getNumUnackedReliables = getNumUnackedReliables;
    /**
     * No comment provided
     *
     * Hash: 0x1B84DF6AF2A46938 | Since: 1207
     */
    function getParticipantIndex(index) {
        return NetworkGetParticipantIndex(index);
    }
    network.getParticipantIndex = getParticipantIndex;
    /**
     * No comment provided
     *
     * Hash: 0xCE5F689CF5A0A49D | Since: 1207
     */
    function getPlayerFromGamerHandle() {
        return NetworkGetPlayerFromGamerHandle();
    }
    network.getPlayerFromGamerHandle = getPlayerFromGamerHandle;
    /**
     * No comment provided
     *
     * Hash: 0x24FB80D107371267 | Since: 1207
     */
    function getPlayerIndex(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetPlayerIndex(_player);
    }
    network.getPlayerIndex = getPlayerIndex;
    /**
     * Returns the Player associated to a given Ped when in an online session.
     *
     * Hash: 0x6C0E2E0125610278 | Since: 1207
     */
    function getPlayerIndexFromPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return NetworkGetPlayerIndexFromPed(_ped);
    }
    network.getPlayerIndexFromPed = getPlayerIndexFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x3B39236746714134 | Since: unknown
     */
    function getPlayerTutorialSessionInstance(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetPlayerTutorialSessionInstance(_player);
    }
    network.getPlayerTutorialSessionInstance = getPlayerTutorialSessionInstance;
    /**
     * Hardcoded to return zero.
     *
     * Hash: 0x2FB53C631A49BE92 | Since: 1207
     */
    function getPromotionDlgSeenCount() {
        return NetworkGetPromotionDlgSeenCount();
    }
    network.getPromotionDlgSeenCount = getPromotionDlgSeenCount;
    /**
     * No comment provided
     *
     * Hash: 0xE30CF56F1EFA5F43 | Since: 1207
     */
    function getRandomIntRanged(rangeStart, rangeEnd) {
        return NetworkGetRandomIntRanged(rangeStart, rangeEnd);
    }
    network.getRandomIntRanged = getRandomIntRanged;
    /**
     * No comment provided
     *
     * Hash: 0xFEFCC345CE357453 | Since: 1207
     */
    function getRecentGamerNames(dataSize) {
        return NetworkGetRecentGamerNames(0, 0, dataSize);
    }
    network.getRecentGamerNames = getRecentGamerNames;
    /**
     * No comment provided
     *
     * Hash: 0xEB1A4DD8352EC828 | Since: 1207
     */
    function getRopeIdFromNetworkId(netId) {
        return NetworkGetRopeIdFromNetworkId(netId);
    }
    network.getRopeIdFromNetworkId = getRopeIdFromNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x57D158647A6BFABF | Since: 1207
     */
    function getScriptStatus() {
        return NetworkGetScriptStatus();
    }
    network.getScriptStatus = getScriptStatus;
    /**
     * No comment provided
     *
     * Hash: 0x2910669969E9535E | Since: 1207
     */
    function getThisScriptIsNetworkScript() {
        return NetworkGetThisScriptIsNetworkScript();
    }
    network.getThisScriptIsNetworkScript = getThisScriptIsNetworkScript;
    /**
     * No comment provided
     *
     * Hash: 0x5ED0356A0CE3A34F | Since: 1207
     */
    function getTimeoutTime() {
        return NetworkGetTimeoutTime();
    }
    network.getTimeoutTime = getTimeoutTime;
    /**
     * No comment provided
     *
     * Hash: 0xDB7ABDD203FA3704 | Since: 1207
     */
    function getTotalNumFriends() {
        return NetworkGetTotalNumFriends();
    }
    network.getTotalNumFriends = getTotalNumFriends;
    /**
     * No comment provided
     *
     * Hash: 0xCF61D4B4702EE9EB | Since: 1207
     */
    function getTotalNumPlayers() {
        return NetworkGetTotalNumPlayers();
    }
    network.getTotalNumPlayers = getTotalNumPlayers;
    /**
     * No comment provided
     *
     * Hash: 0x10BD227A753B0D84 | Since: 1436
     */
    function getTunableCloudCrc() {
        return NetworkGetTunableCloudCrc();
    }
    network.getTunableCloudCrc = getTunableCloudCrc;
    /**
     * Old name: _NETWORK_GET_UNRELIABLE_RESEND_COUNT_FOR_PLAYER
     *
     * Hash: 0x3765C3A3E8192E10 | Since: 1207
     */
    function getUnreliableResendCount(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetUnreliableResendCount(_player);
    }
    network.getUnreliableResendCount = getUnreliableResendCount;
    /**
     * No comment provided
     *
     * Hash: 0xD45CB817D7E177D2 | Since: 1207
     */
    function handleFromFriend(friendIndex) {
        return NetworkHandleFromFriend(friendIndex);
    }
    network.handleFromFriend = handleFromFriend;
    /**
     * No comment provided
     *
     * Hash: 0x388EB2B86C73B6B3 | Since: 1207
     */
    function handleFromPlayer(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkHandleFromPlayer(_player);
    }
    network.handleFromPlayer = handleFromPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xBC1D768F2F5D6C05 | Since: 1207
     */
    function hashFromPlayerHandle(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkHashFromPlayerHandle(_player);
    }
    network.hashFromPlayerHandle = hashFromPlayerHandle;
    /**
     * No comment provided
     *
     * Hash: 0x01BF60A500E28887 | Since: 1207
     */
    function hasControlOfEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return NetworkHasControlOfEntity(_entity);
    }
    network.hasControlOfEntity = hasControlOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0x4D36070FE0215186 | Since: 1207
     */
    function hasControlOfNetworkId(netId) {
        return NetworkHasControlOfNetworkId(netId);
    }
    network.hasControlOfNetworkId = hasControlOfNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x5BC9495F0B3B6FA6 | Since: 1207
     */
    function hasControlOfPickup(pickup) {
        return NetworkHasControlOfPickup(pickup);
    }
    network.hasControlOfPickup = hasControlOfPickup;
    /**
     * No comment provided
     *
     * Hash: 0x51EABCF2786515AB | Since: 1311
     */
    function hasControlOfPickupPlacement() {
        return NetworkHasControlOfPickupPlacement(undefined);
    }
    network.hasControlOfPickupPlacement = hasControlOfPickupPlacement;
    /**
     * No comment provided
     *
     * Hash: 0xB07D3185E11657A5 | Since: 1207
     */
    function hasEntityBeenRegisteredWithThisThread(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return NetworkHasEntityBeenRegisteredWithThisThread(_entity);
    }
    network.hasEntityBeenRegisteredWithThisThread = hasEntityBeenRegisteredWithThisThread;
    /**
     * No comment provided
     *
     * Hash: 0xD0498AD30E16B6BD | Since: 1207
     */
    function hasPendingInviteFailure() {
        return NetworkHasPendingInviteFailure();
    }
    network.hasPendingInviteFailure = hasPendingInviteFailure;
    /**
     * No comment provided
     *
     * Hash: 0x5D10B3795F3FC886 | Since: 1207
     */
    function hasReceivedHostBroadcastData() {
        return NetworkHasReceivedHostBroadcastData();
    }
    network.hasReceivedHostBroadcastData = hasReceivedHostBroadcastData;
    /**
     * No comment provided
     *
     * Hash: 0xA699957E60D80214 | Since: 1207
     */
    function hasRosPrivilege(index) {
        return NetworkHasRosPrivilege(index);
    }
    network.hasRosPrivilege = hasRosPrivilege;
    /**
     * No comment provided
     *
     * Hash: 0x67A5589628E0CFF6 | Since: 1207
     */
    function hasSocialClubAccount() {
        return NetworkHasSocialClubAccount();
    }
    network.hasSocialClubAccount = hasSocialClubAccount;
    /**
     * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
     *
     * Hash: 0x85443FF4C328F53B | Since: 1207
     */
    function hasValidRosCredentials() {
        return NetworkHasValidRosCredentials();
    }
    network.hasValidRosCredentials = hasValidRosCredentials;
    /**
     * No comment provided
     *
     * Hash: 0x25CB5A9F37BFD063 | Since: 1207
     */
    function haveOnlinePrivileges() {
        return NetworkHaveOnlinePrivileges();
    }
    network.haveOnlinePrivileges = haveOnlinePrivileges;
    /**
     * No comment provided
     *
     * Hash: 0x8020A73847E0CA7D | Since: 1207
     */
    function haveRosBannedPriv() {
        return NetworkHaveRosBannedPriv();
    }
    network.haveRosBannedPriv = haveRosBannedPriv;
    /**
     * No comment provided
     *
     * Hash: 0x8E7CE19219669AEB | Since: 1207
     */
    function isAimCamActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsAimCamActive(_player);
    }
    network.isAimCamActive = isAimCamActive;
    /**
     * No comment provided
     *
     * Hash: 0xD7C95D322FF57522 | Since: 1207
     */
    function isClockTimeOverridden() {
        return NetworkIsClockTimeOverridden();
    }
    network.isClockTimeOverridden = isClockTimeOverridden;
    /**
     * No comment provided
     *
     * Hash: 0x9A4CF4F48AD77302 | Since: 1207
     */
    function isCloudAvailable() {
        return NetworkIsCloudAvailable();
    }
    network.isCloudAvailable = isCloudAvailable;
    /**
     * Old name: _NETWORK_IS_CONNECTION_ENDPOINT_RELAY_SERVER
     *
     * Hash: 0x16D3D49902F697BB | Since: 1207
     */
    function isConnectedViaRelay(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsConnectedViaRelay(_player);
    }
    network.isConnectedViaRelay = isConnectedViaRelay;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x78A9535AF83715C6 | Since: 1207
     */
    function isCustomUpsellEnabled() {
        return NetworkIsCustomUpsellEnabled();
    }
    network.isCustomUpsellEnabled = isCustomUpsellEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x9C725D149622BFDE | Since: 1207
     */
    function isFeatureSupported(featureId) {
        return NetworkIsFeatureSupported(featureId);
    }
    network.isFeatureSupported = isFeatureSupported;
    /**
     * No comment provided
     *
     * Hash: 0xDDDF64C91BFCF0AA | Since: 1207
     */
    function isFindingGamers() {
        return NetworkIsFindingGamers();
    }
    network.isFindingGamers = isFindingGamers;
    /**
     * No comment provided
     *
     * Hash: 0x1A24A179F9B31654 | Since: 1207
     */
    function isFriend() {
        return NetworkIsFriend();
    }
    network.isFriend = isFriend;
    /**
     * No comment provided
     *
     * Hash: 0x0F10B05DDF8D16E9 | Since: 1207
     */
    function isGamerInMySession() {
        return NetworkIsGamerInMySession();
    }
    network.isGamerInMySession = isGamerInMySession;
    /**
     * No comment provided
     *
     * Hash: 0x10FAB35428CCC9D7 | Since: 1207
     */
    function isGameInProgress() {
        return NetworkIsGameInProgress();
    }
    network.isGameInProgress = isGameInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x6F79B93B0A8E4133 | Since: 1207
     */
    function isHandleValid() {
        return NetworkIsHandleValid();
    }
    network.isHandleValid = isHandleValid;
    /**
     * If you are host, returns true else returns false.
     *
     * Hash: 0x8DB296B814EDDA07 | Since: 1207
     */
    function isHost() {
        return NetworkIsHost();
    }
    network.isHost = isHost;
    /**
     * No comment provided
     *
     * Hash: 0x83CD99A1E6061AB5 | Since: 1207
     */
    function isHostOfThisScript() {
        return NetworkIsHostOfThisScript();
    }
    network.isHostOfThisScript = isHostOfThisScript;
    /**
     * No comment provided
     *
     * Hash: 0x6CC27C9FA2040220 | Since: 1207
     */
    function isInMpCutscene() {
        return NetworkIsInMpCutscene();
    }
    network.isInMpCutscene = isInMpCutscene;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x2FC5650B0271CB57 | Since: 1207
     */
    function isInPlatformParty() {
        return NetworkIsInPlatformParty();
    }
    network.isInPlatformParty = isInPlatformParty;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0xFD8B834A8BA05048 | Since: 1207
     */
    function isInPlatformPartyChat() {
        return NetworkIsInPlatformPartyChat();
    }
    network.isInPlatformPartyChat = isInPlatformPartyChat;
    /**
     * No comment provided
     *
     * Hash: 0xCA97246103B63917 | Since: 1207
     */
    function isInSession() {
        return NetworkIsInSession();
    }
    network.isInSession = isInSession;
    /**
     * No comment provided
     *
     * Hash: 0x048746E388762E11 | Since: 1207
     */
    function isInSpectatorMode() {
        return NetworkIsInSpectatorMode();
    }
    network.isInSpectatorMode = isInSpectatorMode;
    /**
     * No comment provided
     *
     * Hash: 0xADA24309FE08DACF | Since: 1207
     */
    function isInTutorialSession() {
        return NetworkIsInTutorialSession();
    }
    network.isInTutorialSession = isInTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0x6FF8FF40B6357D45 | Since: 1207
     */
    function isParticipantActive() {
        return NetworkIsParticipantActive(0);
    }
    network.isParticipantActive = isParticipantActive;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x0BE73DA6984A6E33 | Since: 1207
     */
    function isPendingFriend() {
        return NetworkIsPendingFriend();
    }
    network.isPendingFriend = isPendingFriend;
    /**
     * No comment provided
     *
     * Hash: 0xFC4165C9165C166F | Since: 1207
     */
    function isPlatformInvitePending() {
        return NetworkIsPlatformInvitePending();
    }
    network.isPlatformInvitePending = isPlatformInvitePending;
    /**
     * No comment provided
     *
     * Hash: 0xB8DFD30D6973E135 | Since: 1207
     */
    function isPlayerActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsPlayerActive(_player);
    }
    network.isPlayerActive = isPlayerActive;
    /**
     * No comment provided
     *
     * Hash: 0x3CA58F6CB7CBD784 | Since: 1207
     */
    function isPlayerAParticipant(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsPlayerAParticipant(_player);
    }
    network.isPlayerAParticipant = isPlayerAParticipant;
    /**
     * No comment provided
     *
     * Hash: 0x1AD5B71586B94820 | Since: 1207
     */
    function isPlayerAParticipantOnScript(p0) {
        const _p0 = p0 instanceof Player ? p0.localId() : p0;
        return NetworkIsPlayerAParticipantOnScript(_p0, undefined);
    }
    network.isPlayerAParticipantOnScript = isPlayerAParticipantOnScript;
    /**
     * No comment provided
     *
     * Hash: 0x919B3C98ED8292F9 | Since: 1207
     */
    function isPlayerConcealed(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsPlayerConcealed(_player);
    }
    network.isPlayerConcealed = isPlayerConcealed;
    /**
     * No comment provided
     *
     * Hash: 0x93DC1BE4E1ABE9D1 | Since: 1207
     */
    function isPlayerConnected(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsPlayerConnected(_player);
    }
    network.isPlayerConnected = isPlayerConnected;
    /**
     * Returns true if the passed value is less than 32.
     *
     * Hash: 0x255A5EF65EDA9167 | Since: 1207
     */
    function isPlayerIndexValid(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsPlayerIndexValid(_player);
    }
    network.isPlayerIndexValid = isPlayerIndexValid;
    /**
     * Note: scripts seem to indicate that this was renamed to NETWORK_IS_PLAYER_IN_MP_FAST_INSTANCE
     *
     * Hash: 0x63F9EE203C3619F2 | Since: 1207
     */
    function isPlayerInMpCutscene(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsPlayerInMpCutscene(_player);
    }
    network.isPlayerInMpCutscene = isPlayerInMpCutscene;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x8FF6059DA26E688A | Since: 1207
     */
    function isPromotionEnabled() {
        return NetworkIsPromotionEnabled();
    }
    network.isPromotionEnabled = isPromotionEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x1BB50CD340A996E6 | Since: 1207
     */
    function isResettingPopulation() {
        return NetworkIsResettingPopulation();
    }
    network.isResettingPopulation = isResettingPopulation;
    /**
     * No comment provided
     *
     * Hash: 0x9D40DF90FAD26098 | Since: 1207
     */
    function isScriptActive(scriptName) {
        return NetworkIsScriptActive(scriptName, 0, false, 0);
    }
    network.isScriptActive = isScriptActive;
    /**
     * No comment provided
     *
     * Hash: 0x1B89BC43B6E69107 | Since: 1207
     */
    function isScriptActiveByHash(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return NetworkIsScriptActiveByHash(scriptHash, 0, false, 0);
    }
    network.isScriptActiveByHash = isScriptActiveByHash;
    /**
     * No comment provided
     *
     * Hash: 0xD83C2B94E7508980 | Since: 1207
     */
    function isSessionActive() {
        return NetworkIsSessionActive();
    }
    network.isSessionActive = isSessionActive;
    /**
     * No comment provided
     *
     * Hash: 0x9DE624D2FC4B603F | Since: 1207
     */
    function isSessionStarted() {
        return NetworkIsSessionStarted();
    }
    network.isSessionStarted = isSessionStarted;
    /**
     * No comment provided
     *
     * Hash: 0x1077788E268557C2 | Since: 1207
     */
    function isSignedOnline() {
        return NetworkIsSignedOnline();
    }
    network.isSignedOnline = isSignedOnline;
    /**
     * No comment provided
     *
     * Hash: 0x0467C11ED88B7D28 | Since: 1207
     */
    function isTunableCloudRequestPending() {
        return NetworkIsTunableCloudRequestPending();
    }
    network.isTunableCloudRequestPending = isTunableCloudRequestPending;
    /**
     * No comment provided
     *
     * Hash: 0x35F0B98A8387274D | Since: 1207
     */
    function isTutorialSessionChangePending() {
        return NetworkIsTutorialSessionChangePending();
    }
    network.isTutorialSessionChangePending = isTutorialSessionChangePending;
    /**
     * No comment provided
     *
     * Hash: 0x2302C0264EA58D31 | Since: 1207
     */
    function preventScriptHostMigration() {
        NetworkPreventScriptHostMigration();
    }
    network.preventScriptHostMigration = preventScriptHostMigration;
    /**
     * No comment provided
     *
     * Hash: 0x1F51F367B710A832 | Since: 1207
     */
    function refreshCurrentFriendPage() {
        return NetworkRefreshCurrentFriendPage();
    }
    network.refreshCurrentFriendPage = refreshCurrentFriendPage;
    /**
     * No comment provided
     *
     * Hash: 0x06FAACD625D80CAA | Since: 1207
     */
    function registerEntityAsNetworked(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        NetworkRegisterEntityAsNetworked(_entity);
    }
    network.registerEntityAsNetworked = registerEntityAsNetworked;
    /**
     * No comment provided
     *
     * Hash: 0x3E9B2F01C50DF595 | Since: 1207
     */
    function registerHostBroadcastVariables() {
        NetworkRegisterHostBroadcastVariables(undefined, undefined, undefined);
    }
    network.registerHostBroadcastVariables = registerHostBroadcastVariables;
    /**
     * No comment provided
     *
     * Hash: 0x3364AA97340CA215 | Since: 1207
     */
    function registerPlayerBroadcastVariables() {
        NetworkRegisterPlayerBroadcastVariables(undefined, undefined, undefined);
    }
    network.registerPlayerBroadcastVariables = registerPlayerBroadcastVariables;
    /**
     * Note: this native was added in build 1311.23, but was only used after build 1436.25
     *
     * Hash: 0x42FB3B532D526E6C | Since: 1311
     */
    function requestCloudTunables() {
        NetworkRequestCloudTunables();
    }
    network.requestCloudTunables = requestCloudTunables;
    /**
     * No comment provided
     *
     * Hash: 0xB69317BF5E782347 | Since: 1207
     */
    function requestControlOfEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return NetworkRequestControlOfEntity(_entity);
    }
    network.requestControlOfEntity = requestControlOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0xA670B3662FAFFBD0 | Since: 1207
     */
    function requestControlOfNetworkId(netId) {
        return NetworkRequestControlOfNetworkId(netId);
    }
    network.requestControlOfNetworkId = requestControlOfNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x56ED2C48558DAB78 | Since: 1311
     */
    function requestControlOfPickupPlacement() {
        return NetworkRequestControlOfPickupPlacement(undefined);
    }
    network.requestControlOfPickupPlacement = requestControlOfPickupPlacement;
    /**
     * No comment provided
     *
     * Hash: 0xE483BB6BE686F632 | Since: 1207
     */
    function requestJoin() {
        return NetworkRequestJoin(undefined);
    }
    network.requestJoin = requestJoin;
    /**
     * No comment provided
     *
     * Hash: 0x6D206D383BB5F6B1 | Since: 1207
     */
    function requestRecentGamerNames(playerCount) {
        return NetworkRequestRecentGamerNames(0, playerCount);
    }
    network.requestRecentGamerNames = requestRecentGamerNames;
    /**
     * flags:
     * enum eSessionRequestOptionFlags
     * {
     * SESSION_REQUEST_OPTION_FLAG_INCLUDE_GANG_MEMBERS = (1 << 1),
     * SESSION_REQUEST_OPTION_FLAG_LEADER_KEEPS_GANG = (1 << 7),
     * };
     *
     * seamlessType:
     * enum eSeamlessType
     * {
     * SEAMLESS_TYPE_NORMAL,
     * SEAMLESS_TYPE_PVE,
     * SEAMLESS_TYPE_DEV,
     * SEAMLESS_TYPE_NO_SEAMLESS
     * };
     *
     * Hash: 0x04019AE4956D4393 | Since: 1207
     */
    function requestSessionSeamless(flags, seamlessType) {
        return NetworkRequestSessionSeamless(flags, seamlessType);
    }
    network.requestSessionSeamless = requestSessionSeamless;
    /**
     * No comment provided
     *
     * Hash: 0x101F538C25ABB39A | Since: 1207
     */
    function resetPopulation() {
        return NetworkResetPopulation(false, 0);
    }
    network.resetPopulation = resetPopulation;
    /**
     * No comment provided
     *
     * Hash: 0xEA23C49EAA83ACFB | Since: 1207
     */
    function resurrectLocalPlayer(pos, heading) {
        NetworkResurrectLocalPlayer(pos.x, pos.y, pos.z, heading, 0, false, undefined, false);
    }
    network.resurrectLocalPlayer = resurrectLocalPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xF1B84178F8674195 | Since: 1207
     */
    function seedRandomNumberGenerator(seed) {
        NetworkSeedRandomNumberGenerator(seed);
    }
    network.seedRandomNumberGenerator = seedRandomNumberGenerator;
    /**
     * No comment provided
     *
     * Hash: 0x51F33DBC1A41CBFD | Since: 1207
     */
    function sessionGetSessionFlags() {
        return NetworkSessionGetSessionFlags();
    }
    network.sessionGetSessionFlags = sessionGetSessionFlags;
    /**
     * No comment provided
     *
     * Hash: 0xF0C0C94B404206FA | Since: 1207
     */
    function sessionGetSessionType() {
        return NetworkSessionGetSessionType();
    }
    network.sessionGetSessionType = sessionGetSessionType;
    /**
     * No comment provided
     *
     * Hash: 0xBAFFDE5F953720D9 | Since: 1207
     */
    function sessionIsAnyRequestInProgress() {
        return NetworkSessionIsAnyRequestInProgress();
    }
    network.sessionIsAnyRequestInProgress = sessionIsAnyRequestInProgress;
    /**
     * Checks for session flag 'SF_PRIVATE'
     *
     * Hash: 0xCEF70AA5B3F89BA1 | Since: 1207
     */
    function sessionIsPrivate() {
        return NetworkSessionIsPrivate();
    }
    network.sessionIsPrivate = sessionIsPrivate;
    /**
     * No comment provided
     *
     * Hash: 0x8FB7C254CFCBF78E | Since: 1207
     */
    function sessionIsRequestInProgress() {
        return NetworkSessionIsRequestInProgress();
    }
    network.sessionIsRequestInProgress = sessionIsRequestInProgress;
    /**
     * No comment provided
     *
     * Hash: 0xCCF878D50F8AB10D | Since: 1207
     */
    function sessionIsRequestPendingTransition() {
        return NetworkSessionIsRequestPendingTransition();
    }
    network.sessionIsRequestPendingTransition = sessionIsRequestPendingTransition;
    /**
     * No comment provided
     *
     * Hash: 0x2F54B146D3EDCE4D | Since: 1207
     */
    function sessionIsSessionRequestIdValid() {
        return NetworkSessionIsSessionRequestIdValid();
    }
    network.sessionIsSessionRequestIdValid = sessionIsSessionRequestIdValid;
    /**
     * No comment provided
     *
     * Hash: 0xF2CBC969C4F090C7 | Since: 1207
     */
    function sessionIsTransitioning() {
        return NetworkSessionIsTransitioning();
    }
    network.sessionIsTransitioning = sessionIsTransitioning;
    /**
     * No comment provided
     *
     * Hash: 0x17C21B7319A05047 | Since: 1207
     */
    function sessionLeaveSession() {
        return NetworkSessionLeaveSession();
    }
    network.sessionLeaveSession = sessionLeaveSession;
    /**
     * No comment provided
     *
     * Hash: 0xECE6A0C1B59CD8BE | Since: 1207
     */
    function sessionLeftQueueOrRequestedSession() {
        return NetworkSessionLeftQueueOrRequestedSession();
    }
    network.sessionLeftQueueOrRequestedSession = sessionLeftQueueOrRequestedSession;
    /**
     * See _NETWORK_SESSION_ADD_SESSION_FLAGS
     *
     * Hash: 0x78335E12DB0BF961 | Since: 1207
     */
    function sessionRemoveSessionFlags(flags) {
        return NetworkSessionRemoveSessionFlags(flags);
    }
    network.sessionRemoveSessionFlags = sessionRemoveSessionFlags;
    /**
     * matchType:
     * enum eMatchType
     * {
     * MATCHTYPE_DEPRECATED,
     * MATCHTYPE_UGCPLAYLIST,
     * MATCHTYPE_UGCMISSION,
     * MATCHTYPE_MINIGAME,
     * MATCHTYPE_SEAMLESS,
     * MATCHTYPE_PRIVATE_DO_NOT_USE
     * };
     *
     * Hash: 0x309BBEBEA8A3986C | Since: 1207
     */
    function sessionRequestSessionCompetitive(flags, matchType, userHash) {
        return NetworkSessionRequestSessionCompetitive(flags, matchType, userHash, 0);
    }
    network.sessionRequestSessionCompetitive = sessionRequestSessionCompetitive;
    /**
     * Session flag 'SF_PRIVATE' is set internally
     * p1 represents max amount of players in private session
     *
     * Hash: 0x39A8EF7AF29A192C | Since: 1207
     */
    function sessionRequestSessionPrivate(flags, numPlayers, userHash) {
        return NetworkSessionRequestSessionPrivate(flags, numPlayers, userHash);
    }
    network.sessionRequestSessionPrivate = sessionRequestSessionPrivate;
    /**
     * Equivalent to NETWORK_REQUEST_SESSION_SEAMLESS if userHash == 0.
     * Otherwise it is equivalent to NETWORK_SESSION_REQUEST_SESSION_COMPETITIVE(flags, MATCHTYPE_SEAMLESS, userHash, 0, sessionRequestId);
     *
     * p1 is unused
     *
     * Hash: 0x2989E131FDE37E97 | Since: 1207
     */
    function sessionRequestSessionSeamless(flags, seamlessType, userHash) {
        return NetworkSessionRequestSessionSeamless(flags, seamlessType, userHash);
    }
    network.sessionRequestSessionSeamless = sessionRequestSessionSeamless;
    /**
     * No comment provided
     *
     * Hash: 0x2C5BD9A43987AA27 | Since: 1207
     */
    function setCompletedMpIntroFlowOnCurrentSlot(completed) {
        return NetworkSetCompletedMpIntroFlowOnCurrentSlot(completed);
    }
    network.setCompletedMpIntroFlowOnCurrentSlot = setCompletedMpIntroFlowOnCurrentSlot;
    /**
     * if set to true other network players can't see it
     * if set to false other network player can see it
     * =========================================
     * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
     *
     * pc or last gen?
     *
     * ^^ last-gen
     *
     * Old name: _NETWORK_SET_ENTITY_INVISIBLE_TO_NETWORK
     *
     * Hash: 0xF1CA12B18AEF5298 | Since: 1207
     */
    function setEntityOnlyExistsForParticipants(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        NetworkSetEntityOnlyExistsForParticipants(_entity, toggle);
    }
    network.setEntityOnlyExistsForParticipants = setEntityOnlyExistsForParticipants;
    /**
     * No comment provided
     *
     * Hash: 0xD785864798258032 | Since: 1207
     */
    function setEntityRemainsWhenUnnetworked(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        NetworkSetEntityRemainsWhenUnnetworked(_entity, toggle);
    }
    network.setEntityRemainsWhenUnnetworked = setEntityRemainsWhenUnnetworked;
    /**
     * No comment provided
     *
     * Hash: 0xF808475FA571D823 | Since: 1207
     */
    function setFriendlyFireOption(toggle) {
        NetworkSetFriendlyFireOption(toggle);
    }
    network.setFriendlyFireOption = setFriendlyFireOption;
    /**
     * No comment provided
     *
     * Hash: 0x9CA5DE655269FEC4 | Since: 1207
     */
    function setInMpCutscene() {
        NetworkSetInMpCutscene(false, false, 0, false);
    }
    network.setInMpCutscene = setInMpCutscene;
    /**
     * No comment provided
     *
     * Hash: 0x423DE3854BB50894 | Since: 1207
     */
    function setInSpectatorMode(toggle, playerPed) {
        const _playerPed = playerPed instanceof Ped ? playerPed.handle() : playerPed;
        NetworkSetInSpectatorMode(toggle, _playerPed);
    }
    network.setInSpectatorMode = setInSpectatorMode;
    /**
     * No comment provided
     *
     * Hash: 0x2D95C7E2D7E07307 | Since: 1207
     */
    function setLocalPlayerInvincibleTime(time) {
        NetworkSetLocalPlayerInvincibleTime(time);
    }
    network.setLocalPlayerInvincibleTime = setLocalPlayerInvincibleTime;
    /**
     * No comment provided
     *
     * Hash: 0x007FF852DCF49DA4 | Since: 1207
     */
    function setLocalPlayerPendingFastInstanceId(instanceId) {
        NetworkSetLocalPlayerPendingFastInstanceId(instanceId);
    }
    network.setLocalPlayerPendingFastInstanceId = setLocalPlayerPendingFastInstanceId;
    /**
     * No comment provided
     *
     * Hash: 0x524FF0AEFF9C3973 | Since: 1207
     */
    function setLocalPlayerSyncLookAt(toggle) {
        NetworkSetLocalPlayerSyncLookAt(toggle);
    }
    network.setLocalPlayerSyncLookAt = setLocalPlayerSyncLookAt;
    /**
     * No comment provided
     *
     * Hash: 0x3B3D11CD9FFCDFC9 | Since: 1207
     */
    function setMissionFinished() {
        NetworkSetMissionFinished();
    }
    network.setMissionFinished = setMissionFinished;
    /**
     * No comment provided
     *
     * Hash: 0x86FD10251A7118A4 | Since: 1207
     */
    function setMpMissionFlagOnCurrentSlot(enabled, flagIndex) {
        return NetworkSetMpMissionFlagOnCurrentSlot(enabled, flagIndex);
    }
    network.setMpMissionFlagOnCurrentSlot = setMpMissionFlagOnCurrentSlot;
    /**
     * Old name: _NETWORK_SET_PASSIVE_MODE_OPTION
     *
     * Hash: 0x9C25E8EC4C535FBD | Since: 1207
     */
    function setPlayerIsPassive(toggle) {
        NetworkSetPlayerIsPassive(toggle);
    }
    network.setPlayerIsPassive = setPlayerIsPassive;
    /**
     * No comment provided
     *
     * Hash: 0x29FE035D35B8589C | Since: 1207
     */
    function setRecentGamersEnabled(toggle) {
        NetworkSetRecentGamersEnabled(toggle);
    }
    network.setRecentGamersEnabled = setRecentGamersEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x1DCCACDCFC569362 | Since: 1207
     */
    function setRichPresence() {
        return NetworkSetRichPresence(0, 0, 0);
    }
    network.setRichPresence = setRichPresence;
    /**
     * No comment provided
     *
     * Hash: 0x7AC752103856FB20 | Since: 1207
     */
    function setScriptReadyForEvents(toggle) {
        NetworkSetScriptReadyForEvents(toggle);
    }
    network.setScriptReadyForEvents = setScriptReadyForEvents;
    /**
     * No comment provided
     *
     * Hash: 0x1CA59E306ECB80A5 | Since: 1207
     */
    function setThisScriptIsNetworkScript(maxNumMissionParticipants, instanceId) {
        NetworkSetThisScriptIsNetworkScript(maxNumMissionParticipants, false, instanceId);
    }
    network.setThisScriptIsNetworkScript = setThisScriptIsNetworkScript;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0xDA4B1A479C414FB2 | Since: 1207
     */
    function shouldShowPromotionDlg() {
        return NetworkShouldShowPromotionDlg();
    }
    network.shouldShowPromotionDlg = shouldShowPromotionDlg;
    /**
     * No comment provided
     *
     * Hash: 0x83FE8D7229593017 | Since: 1207
     */
    function showAccountUpgradeUi() {
        NetworkShowAccountUpgradeUi();
    }
    network.showAccountUpgradeUi = showAccountUpgradeUi;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x6BFF5F84102DF80A | Since: 1207
     */
    function showChatRestrictionMsc(player) {
        const _player = player instanceof Player ? player.localId() : player;
        NetworkShowChatRestrictionMsc(_player);
    }
    network.showChatRestrictionMsc = showChatRestrictionMsc;
    /**
     * No comment provided
     *
     * Hash: 0x859ED1CEA343FCA8 | Since: 1207
     */
    function showProfileUi() {
        return NetworkShowProfileUi();
    }
    network.showProfileUi = showProfileUi;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x5C497525F803486B | Since: 1207
     */
    function showPsnUgcRestriction() {
        NetworkShowPsnUgcRestriction();
    }
    network.showPsnUgcRestriction = showPsnUgcRestriction;
    /**
     * No comment provided
     *
     * Hash: 0xF94A0D5B254375DF | Since: 1207
     */
    function spawnConfigSetFlags(flags) {
        NetworkSpawnConfigSetFlags(flags);
    }
    network.spawnConfigSetFlags = spawnConfigSetFlags;
    /**
     * No comment provided
     *
     * Hash: 0x59577799F6AE2F34 | Since: 1207
     */
    function spawnConfigSetGroundToRootOffset(offset) {
        NetworkSpawnConfigSetGroundToRootOffset(offset);
    }
    network.spawnConfigSetGroundToRootOffset = spawnConfigSetGroundToRootOffset;
    /**
     * No comment provided
     *
     * Hash: 0x0608326F7B98C08D | Since: 1207
     */
    function spawnConfigSetTuningFloat(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        NetworkSpawnConfigSetTuningFloat(p0, 0);
    }
    network.spawnConfigSetTuningFloat = spawnConfigSetTuningFloat;
    /**
     * No comment provided
     *
     * Hash: 0x17E0198B3882C2CB | Since: 1207
     */
    function startSoloTutorialSession() {
        NetworkStartSoloTutorialSession();
    }
    network.startSoloTutorialSession = startSoloTutorialSession;
    /**
     * Always returns -1. Seems to be XB1 specific.
     *
     * Hash: 0xDEB2B99A1AF1A2A6 | Since: 1207
     */
    function startUserContentPermissionsCheck() {
        return NetworkStartUserContentPermissionsCheck();
    }
    network.startUserContentPermissionsCheck = startUserContentPermissionsCheck;
    /**
     * Old name: _NETWORK_SET_VEHICLE_WHEELS_DESTRUCTIBLE
     *
     * Hash: 0x0C8BC052AE87D744 | Since: 1207
     */
    function triggerDamageEventForZeroDamage(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        NetworkTriggerDamageEventForZeroDamage(_entity, false);
    }
    network.triggerDamageEventForZeroDamage = triggerDamageEventForZeroDamage;
    /**
     * No comment provided
     *
     * Hash: 0xB2AD5D29A99D4B26 | Since: 1207
     */
    function tryAccessTunableBoolHash(tunableContext, tunableName, defaultValue) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkTryAccessTunableBoolHash(tunableContext, tunableName, defaultValue);
    }
    network.tryAccessTunableBoolHash = tryAccessTunableBoolHash;
    /**
     * No comment provided
     *
     * Hash: 0xA18393089C05E49C | Since: 1207
     */
    function tryAccessTunableFloatHash(tunableContext, tunableName, defaultValue) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkTryAccessTunableFloatHash(tunableContext, tunableName, defaultValue);
    }
    network.tryAccessTunableFloatHash = tryAccessTunableFloatHash;
    /**
     * No comment provided
     *
     * Hash: 0xA25E006B36719774 | Since: 1207
     */
    function tryAccessTunableIntHash(tunableContext, tunableName, defaultValue) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkTryAccessTunableIntHash(tunableContext, tunableName, defaultValue);
    }
    network.tryAccessTunableIntHash = tryAccessTunableIntHash;
    /**
     * gets the entity id of a network id
     *
     * Hash: 0xBFFEAB45A9A9094A | Since: 1207
     */
    function netToEnt(netHandle) {
        return NetToEnt(netHandle);
    }
    network.netToEnt = netToEnt;
    /**
     * gets the object id of a network id
     *
     * Hash: 0xD8515F5FEA14CB3F | Since: 1207
     */
    function netToObj(netHandle) {
        return NetToObj(netHandle);
    }
    network.netToObj = netToObj;
    /**
     * gets the ped id of a network id
     *
     * Hash: 0xBDCD95FC216A8B3E | Since: 1207
     */
    function netToPed(netHandle) {
        return NetToPed(netHandle);
    }
    network.netToPed = netToPed;
    /**
     * No comment provided
     *
     * Hash: 0x367B936610BA360C | Since: 1207
     */
    function netToVeh(netHandle) {
        return NetToVeh(netHandle);
    }
    network.netToVeh = netToVeh;
    /**
     * Returns the network ID of the given object.
     *
     * Hash: 0x99BFDC94A603E541 | Since: 1207
     */
    function objToNet(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return ObjToNet(__object);
    }
    network.objToNet = objToNet;
    /**
     * Return the local Participant ID
     *
     * Hash: 0x90986E8876CE0A83 | Since: 1207
     */
    function participantId() {
        return ParticipantId();
    }
    network.participantId = participantId;
    /**
     * Return the local Participant ID.
     *
     * This native is exactly the same as 'PARTICIPANT_ID' native.
     *
     * Hash: 0x57A3BDDAD8E5AA0A | Since: 1207
     */
    function participantIdToInt() {
        return ParticipantIdToInt();
    }
    network.participantIdToInt = participantIdToInt;
    /**
     * Returns the network ID of the given ped.
     *
     * Hash: 0x0EDEC3C276198689 | Since: 1207
     */
    function pedToNet(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return PedToNet(_ped);
    }
    network.pedToNet = pedToNet;
    /**
     * No comment provided
     *
     * Hash: 0x89D803CD48622150 | Since: 1207
     */
    function preventMigrationOfEntitiesInFastInstanceForLocalPlayer(toggle) {
        PreventMigrationOfEntitiesInFastInstanceForLocalPlayer(toggle);
    }
    network.preventMigrationOfEntitiesInFastInstanceForLocalPlayer = preventMigrationOfEntitiesInFastInstanceForLocalPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x7182EDDA1EE7DB5A | Since: 1207
     */
    function preventIdMigration(netId) {
        PreventNetworkIdMigration(netId);
    }
    network.preventIdMigration = preventIdMigration;
    /**
     * No comment provided
     *
     * Hash: 0xE7DDA8BD3BCF751C | Since: 1207
     */
    function reserveClientMissionObjects(amount) {
        ReserveNetworkClientMissionObjects(amount);
    }
    network.reserveClientMissionObjects = reserveClientMissionObjects;
    /**
     * No comment provided
     *
     * Hash: 0x807E119F80231732 | Since: 1207
     */
    function reserveClientMissionPeds(amount) {
        ReserveNetworkClientMissionPeds(amount);
    }
    network.reserveClientMissionPeds = reserveClientMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0x4E5C93BD0C32FBF8 | Since: 1207
     */
    function reserveMissionObjects(amount) {
        ReserveNetworkMissionObjects(amount);
    }
    network.reserveMissionObjects = reserveMissionObjects;
    /**
     * No comment provided
     *
     * Hash: 0xB60FEBA45333D36F | Since: 1207
     */
    function reserveMissionPeds(amount) {
        ReserveNetworkMissionPeds(amount);
    }
    network.reserveMissionPeds = reserveMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0x4D40E7D749BC6E6D | Since: 1207
     */
    function reserveMissionPickups(amount) {
        ReserveNetworkMissionPickups(amount);
    }
    network.reserveMissionPickups = reserveMissionPickups;
    /**
     * No comment provided
     *
     * Hash: 0x76B02E21ED27A469 | Since: 1207
     */
    function reserveMissionVehicles(amount) {
        ReserveNetworkMissionVehicles(amount);
    }
    network.reserveMissionVehicles = reserveMissionVehicles;
    /**
     * No comment provided
     *
     * Hash: 0xE0031D3C8F36AB82 | Since: 1207
     */
    function setEntityVisibleInCutscene(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityVisibleInCutscene(_entity, false, false, 0);
    }
    network.setEntityVisibleInCutscene = setEntityVisibleInCutscene;
    /**
     * Old name: _SET_LOCAL_PLAYER_AS_GHOST
     *
     * Hash: 0x5FFE9B4144F9712F | Since: 1207
     */
    function setLocalPlayerAsGhost(toggle) {
        SetLocalPlayerAsGhost(toggle);
    }
    network.setLocalPlayerAsGhost = setLocalPlayerAsGhost;
    /**
     * No comment provided
     *
     * Hash: 0xE5F773C1A1D9D168 | Since: 1207
     */
    function setLocalPlayerInvisibleLocally() {
        SetLocalPlayerInvisibleLocally(false);
    }
    network.setLocalPlayerInvisibleLocally = setLocalPlayerInvisibleLocally;
    /**
     * No comment provided
     *
     * Hash: 0xD1065D68947E7B6E | Since: 1207
     */
    function setLocalPlayerVisibleInCutscene(local, remote, instanceId) {
        SetLocalPlayerVisibleInCutscene(local, remote, instanceId);
    }
    network.setLocalPlayerVisibleInCutscene = setLocalPlayerVisibleInCutscene;
    /**
     * No comment provided
     *
     * Hash: 0xA8A024587329F36A | Since: 1207
     */
    function setIdAlwaysExistsForPlayer(netId, player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetNetworkIdAlwaysExistsForPlayer(netId, _player, toggle);
    }
    network.setIdAlwaysExistsForPlayer = setIdAlwaysExistsForPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xE05E81A888FA63C8 | Since: 1207
     */
    function setIdExistsOnAllMachines(netId, toggle) {
        SetNetworkIdExistsOnAllMachines(netId, toggle);
    }
    network.setIdExistsOnAllMachines = setIdExistsOnAllMachines;
    /**
     * No comment provided
     *
     * Hash: 0x9ED3108D6847760A | Since: 1207
     */
    function setIdStopCloning(networkId, bStopCloning) {
        SetNetworkIdStopCloning(networkId, bStopCloning);
    }
    network.setIdStopCloning = setIdStopCloning;
    /**
     * No comment provided
     *
     * Hash: 0xA6928482543022B4 | Since: 1207
     */
    function setIdVisibleInCutscene() {
        SetNetworkIdVisibleInCutscene(undefined, undefined, undefined, undefined);
    }
    network.setIdVisibleInCutscene = setIdVisibleInCutscene;
    /**
     * No comment provided
     *
     * Hash: 0x12B37D54667DB0B8 | Since: 1207
     */
    function setPlayerInvisibleLocally(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerInvisibleLocally(_player, toggle);
    }
    network.setPlayerInvisibleLocally = setPlayerInvisibleLocally;
    /**
     * No comment provided
     *
     * Hash: 0xFAA10F1FAFB11AF2 | Since: 1207
     */
    function setPlayerVisibleLocally(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerVisibleLocally(_player, toggle);
    }
    network.setPlayerVisibleLocally = setPlayerVisibleLocally;
    /**
     * No comment provided
     *
     * Hash: 0x3448505B6E35262D | Since: 1207
     */
    function textureDownloadGetName(textureDownloadId) {
        return TextureDownloadGetName(textureDownloadId);
    }
    network.textureDownloadGetName = textureDownloadGetName;
    /**
     * No comment provided
     *
     * Hash: 0x487EB90B98E9FB19 | Since: 1207
     */
    function textureDownloadRelease(textureDownloadId) {
        TextureDownloadRelease(textureDownloadId);
    }
    network.textureDownloadRelease = textureDownloadRelease;
    /**
     * Returns textureDownloadId
     *
     * Hash: 0x16160DA74A8E74A2 | Since: 1207
     */
    function textureDownloadRequest(filePath, name) {
        return TextureDownloadRequest(filePath, name, false);
    }
    network.textureDownloadRequest = textureDownloadRequest;
    /**
     * No comment provided
     *
     * Hash: 0xE931354FEA710038 | Since: 1207
     */
    function ugcClearQueryResults(ugcRequestId) {
        UgcClearQueryResults(ugcRequestId);
    }
    network.ugcClearQueryResults = ugcClearQueryResults;
    /**
     * No comment provided
     *
     * Hash: 0x162C23CA83ED0A62 | Since: 1207
     */
    function ugcDidDescriptionRequestSucceed(description) {
        if (typeof description === 'string')
            description = misc.getHashKey(description);
        return UgcDidDescriptionRequestSucceed(description);
    }
    network.ugcDidDescriptionRequestSucceed = ugcDidDescriptionRequestSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x0B6009A90B8495F1 | Since: 1207
     */
    function ugcDidRequestSucceed(ugcRequestId) {
        return UgcDidRequestSucceed(ugcRequestId);
    }
    network.ugcDidRequestSucceed = ugcDidRequestSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x40F7E66472DF3E5C | Since: 1207
     */
    function ugcGetCachedDescription(description, length) {
        if (typeof description === 'string')
            description = misc.getHashKey(description);
        return UgcGetCachedDescription(description, length);
    }
    network.ugcGetCachedDescription = ugcGetCachedDescription;
    /**
     * No comment provided
     *
     * Hash: 0xEBFA8D50ADDC54C4 | Since: 1207
     */
    function ugcHasDescriptionRequestFinished(description) {
        if (typeof description === 'string')
            description = misc.getHashKey(description);
        return UgcHasDescriptionRequestFinished(description);
    }
    network.ugcHasDescriptionRequestFinished = ugcHasDescriptionRequestFinished;
    /**
     * No comment provided
     *
     * Hash: 0xA9EB4D606076615D | Since: 1207
     */
    function ugcHasRequestFinished(ugcRequestId) {
        return UgcHasRequestFinished(ugcRequestId);
    }
    network.ugcHasRequestFinished = ugcHasRequestFinished;
    /**
     * No comment provided
     *
     * Hash: 0x2D5DC831176D0114 | Since: 1207
     */
    function ugcIsDescriptionRequestInProgress(description) {
        if (typeof description === 'string')
            description = misc.getHashKey(description);
        return UgcIsDescriptionRequestInProgress(description);
    }
    network.ugcIsDescriptionRequestInProgress = ugcIsDescriptionRequestInProgress;
    /**
     * No comment provided
     *
     * Hash: 0xF53E48461B71EECB | Since: 1207
     */
    function ugcIsLanguageSupported(languageId) {
        return UgcIsLanguageSupported(languageId);
    }
    network.ugcIsLanguageSupported = ugcIsLanguageSupported;
    /**
     * No comment provided
     *
     * Hash: 0xF4AC4FA844FD559A | Since: 1207
     */
    function ugcIsRequestPending(ugcRequestId) {
        return UgcIsRequestPending(ugcRequestId);
    }
    network.ugcIsRequestPending = ugcIsRequestPending;
    /**
     * No comment provided
     *
     * Hash: 0xF794765390A6DCA5 | Since: 1207
     */
    function ugcQueryGetContentHasPlayerRecord(index) {
        return UgcQueryGetContentHasPlayerRecord(undefined, index);
    }
    network.ugcQueryGetContentHasPlayerRecord = ugcQueryGetContentHasPlayerRecord;
    /**
     * No comment provided
     *
     * Hash: 0x76160E0396142765 | Since: 1207
     */
    function ugcQueryGetContentNum(ugcRequestId) {
        return UgcQueryGetContentNum(ugcRequestId);
    }
    network.ugcQueryGetContentNum = ugcQueryGetContentNum;
    /**
     * No comment provided
     *
     * Hash: 0xF8F0705E77A0E705 | Since: 1207
     */
    function ugcQueryWasForceCancelled(ugcRequestId) {
        return UgcQueryWasForceCancelled(ugcRequestId);
    }
    network.ugcQueryWasForceCancelled = ugcQueryWasForceCancelled;
    /**
     * No comment provided
     *
     * Hash: 0x68103E2247887242 | Since: 1207
     */
    function ugcReleaseAllCachedDescriptions() {
        UgcReleaseAllCachedDescriptions();
    }
    network.ugcReleaseAllCachedDescriptions = ugcReleaseAllCachedDescriptions;
    /**
     * No comment provided
     *
     * Hash: 0x5A34CD9C3C5BEC44 | Since: 1207
     */
    function ugcReleaseCachedDescription(description) {
        if (typeof description === 'string')
            description = misc.getHashKey(description);
        return UgcReleaseCachedDescription(description);
    }
    network.ugcReleaseCachedDescription = ugcReleaseCachedDescription;
    /**
     * No comment provided
     *
     * Hash: 0x5E0165278F6339EE | Since: 1207
     */
    function ugcRequestCachedDescription(description) {
        if (typeof description === 'string')
            description = misc.getHashKey(description);
        return UgcRequestCachedDescription(description);
    }
    network.ugcRequestCachedDescription = ugcRequestCachedDescription;
    /**
     * No comment provided
     *
     * Hash: 0x7FD2990AF016795E | Since: 1207
     */
    function ugcRequestContentDataFromParams(contentTypeName, contentId, fileId, fileVersion, languageId) {
        return UgcRequestContentDataFromParams(contentTypeName, contentId, fileId, fileVersion, languageId);
    }
    network.ugcRequestContentDataFromParams = ugcRequestContentDataFromParams;
    /**
     * No comment provided
     *
     * Hash: 0xF98DDE0A8ED09323 | Since: 1207
     */
    function ugcSetQueryDataFromOffline() {
        UgcSetQueryDataFromOffline(false);
    }
    network.ugcSetQueryDataFromOffline = ugcSetQueryDataFromOffline;
    /**
     * No comment provided
     *
     * Hash: 0x308F96458B7087CC | Since: 1207
     */
    function ugcTextureDownloadRequest() {
        return UgcTextureDownloadRequest(undefined, undefined, undefined, false);
    }
    network.ugcTextureDownloadRequest = ugcTextureDownloadRequest;
    /**
     * Returns the network ID of the given vehicle.
     *
     * Hash: 0xB4C94523F023419C | Since: 1207
     */
    function vehToNet(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return VehToNet(_vehicle);
    }
    network.vehToNet = vehToNet;
    /**
     * Note: this native was added in build 1311.16
     *
     * GET_NUM_*
     *
     * Hash: 0x02B3CDD652B3CDD6 | Since: 1311
     */
    function _0x02B3CDD652B3CDD6() {
        return Citizen.invokeNative('0x02B3CDD652B3CDD6');
    }
    network._0x02B3CDD652B3CDD6 = _0x02B3CDD652B3CDD6;
    /**
     * Only used in SP R* Script dominoes_sp: p1 = 0
     *
     * Hash: 0x02C4C6C2900D84DF | Since: 1207
     */
    function _0x02C4C6C2900D84DF(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x02C4C6C2900D84DF', _player, undefined);
    }
    network._0x02C4C6C2900D84DF = _0x02C4C6C2900D84DF;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x039AD6B57D5179FF | Since: 1311
     */
    function _0x039AD6B57D5179FF() {
        return Citizen.invokeNative('0x039AD6B57D5179FF');
    }
    network._0x039AD6B57D5179FF = _0x039AD6B57D5179FF;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x039B692B3318FAB6 | Since: 1311
     */
    function _0x039B692B3318FAB6() {
        return Citizen.invokeNative('0x039B692B3318FAB6', false);
    }
    network._0x039B692B3318FAB6 = _0x039B692B3318FAB6;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x062842D61D0D53FD | Since: 1311
     */
    function _0x062842D61D0D53FD() {
        return Citizen.invokeNative('0x062842D61D0D53FD');
    }
    network._0x062842D61D0D53FD = _0x062842D61D0D53FD;
    /**
     * No comment provided
     *
     * Hash: 0x0B6B4507AC5EA8B8 | Since: 1207
     */
    function _0x0B6B4507AC5EA8B8() {
        return Citizen.invokeNative('0x0B6B4507AC5EA8B8');
    }
    network._0x0B6B4507AC5EA8B8 = _0x0B6B4507AC5EA8B8;
    /**
     * No comment provided
     *
     * Hash: 0x0BF90CBB6B72977B | Since: 1207
     */
    function _0x0BF90CBB6B72977B() {
        Citizen.invokeNative('0x0BF90CBB6B72977B');
    }
    network._0x0BF90CBB6B72977B = _0x0BF90CBB6B72977B;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x0CC28C08613BA9E5 | Since: 1207
     */
    function _0x0CC28C08613BA9E5() {
        Citizen.invokeNative('0x0CC28C08613BA9E5', 0);
    }
    network._0x0CC28C08613BA9E5 = _0x0CC28C08613BA9E5;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x0D183D8490EE4366 | Since: 1311
     */
    function _0x0D183D8490EE4366() {
        Citizen.invokeNative('0x0D183D8490EE4366', 0, 0);
    }
    network._0x0D183D8490EE4366 = _0x0D183D8490EE4366;
    /**
     * No comment provided
     *
     * Hash: 0x0E54D4DA6018FF8E | Since: 1207
     */
    function _0x0E54D4DA6018FF8E() {
        return Citizen.invokeNative('0x0E54D4DA6018FF8E');
    }
    network._0x0E54D4DA6018FF8E = _0x0E54D4DA6018FF8E;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x106CBDD5077DEDE1 | Since: 1311
     */
    function _0x106CBDD5077DEDE1() {
        return Citizen.invokeNative('0x106CBDD5077DEDE1', false);
    }
    network._0x106CBDD5077DEDE1 = _0x106CBDD5077DEDE1;
    /**
     * No comment provided
     *
     * Hash: 0x13F592FC3BF0EA84 | Since: 1207
     */
    function _0x13F592FC3BF0EA84(volume, originalWeight) {
        Citizen.invokeNative('0x13F592FC3BF0EA84', volume, false, originalWeight, undefined, undefined);
    }
    network._0x13F592FC3BF0EA84 = _0x13F592FC3BF0EA84;
    /**
     * No comment provided
     *
     * Hash: 0x1413B6BF27AB7A95 | Since: 1207
     */
    function _0x1413B6BF27AB7A95() {
        return Citizen.invokeNative('0x1413B6BF27AB7A95');
    }
    network._0x1413B6BF27AB7A95 = _0x1413B6BF27AB7A95;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x160F0CE6D76A39C9 | Since: 1207
     */
    function _0x160F0CE6D76A39C9() {
        return Citizen.invokeNative('0x160F0CE6D76A39C9');
    }
    network._0x160F0CE6D76A39C9 = _0x160F0CE6D76A39C9;
    /**
     * No comment provided
     *
     * Hash: 0x16EFB123C4451032 | Since: 1207
     */
    function _0x16EFB123C4451032() {
        return Citizen.invokeNative('0x16EFB123C4451032', 0);
    }
    network._0x16EFB123C4451032 = _0x16EFB123C4451032;
    /**
     * No comment provided
     *
     * Hash: 0x18B94666CF610AEB | Since: 1207
     */
    function _0x18B94666CF610AEB() {
        return Citizen.invokeNative('0x18B94666CF610AEB');
    }
    network._0x18B94666CF610AEB = _0x18B94666CF610AEB;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x19447FCAE97704DC | Since: 1311
     */
    function _0x19447FCAE97704DC(ctx, ec, ex, ro) {
        if (typeof ctx === 'string')
            ctx = misc.getHashKey(ctx);
        Citizen.invokeNative('0x19447FCAE97704DC', ctx, ec, ex, ro);
    }
    network._0x19447FCAE97704DC = _0x19447FCAE97704DC;
    /**
     * No comment provided
     *
     * Hash: 0x19B52C20B5C4757C | Since: 1207
     */
    function _0x19B52C20B5C4757C() {
        Citizen.invokeNative('0x19B52C20B5C4757C');
    }
    network._0x19B52C20B5C4757C = _0x19B52C20B5C4757C;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x1E4E097D71D449FB | Since: 1311
     */
    function _0x1E4E097D71D449FB() {
        return Citizen.invokeNative('0x1E4E097D71D449FB', false);
    }
    network._0x1E4E097D71D449FB = _0x1E4E097D71D449FB;
    /**
     * No comment provided
     *
     * Hash: 0x232E1EB23CDB313C | Since: 1207
     */
    function _0x232E1EB23CDB313C() {
        return Citizen.invokeNative('0x232E1EB23CDB313C');
    }
    network._0x232E1EB23CDB313C = _0x232E1EB23CDB313C;
    /**
     * _NETWORK_GET_A* - _NETWORK_GET_D*
     *
     * Hash: 0x236321F1178A5446 | Since: 1207
     */
    function _0x236321F1178A5446(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x236321F1178A5446', _player, _ped);
    }
    network._0x236321F1178A5446 = _0x236321F1178A5446;
    /**
     * No comment provided
     *
     * Hash: 0x2686BD9566B65EDA | Since: 1207
     */
    function _0x2686BD9566B65EDA(pos) {
        Citizen.invokeNative('0x2686BD9566B65EDA', pos.x, pos.y, pos.z);
    }
    network._0x2686BD9566B65EDA = _0x2686BD9566B65EDA;
    /**
     * _GET_LAUNCH_PARAM_(RESPOT?)*
     * Name is probably invalid since this native only reads data from parsed entity.
     *
     * Hash: 0x26A867C0B7A456D1 | Since: 1232
     */
    function _0x26A867C0B7A456D1(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x26A867C0B7A456D1', _entity);
    }
    network._0x26A867C0B7A456D1 = _0x26A867C0B7A456D1;
    /**
     * No comment provided
     *
     * Hash: 0x271F95E55C663B8B | Since: 1207
     */
    function _0x271F95E55C663B8B() {
        return Citizen.invokeNative('0x271F95E55C663B8B', undefined, undefined);
    }
    network._0x271F95E55C663B8B = _0x271F95E55C663B8B;
    /**
     * No comment provided
     *
     * Hash: 0x273E04A3A7AD1F2D | Since: 1207
     */
    function _0x273E04A3A7AD1F2D() {
        return Citizen.invokeNative('0x273E04A3A7AD1F2D');
    }
    network._0x273E04A3A7AD1F2D = _0x273E04A3A7AD1F2D;
    /**
     * No comment provided
     *
     * Hash: 0x27B1AE4D8C652F08 | Since: 1207
     */
    function _0x27B1AE4D8C652F08() {
        return Citizen.invokeNative('0x27B1AE4D8C652F08', 0);
    }
    network._0x27B1AE4D8C652F08 = _0x27B1AE4D8C652F08;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x2C4E98DDA475364F | Since: 1207
     */
    function _0x2C4E98DDA475364F() {
        Citizen.invokeNative('0x2C4E98DDA475364F', undefined);
    }
    network._0x2C4E98DDA475364F = _0x2C4E98DDA475364F;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x2CD41AC000E6F611 | Since: 1207
     */
    function _0x2CD41AC000E6F611() {
        Citizen.invokeNative('0x2CD41AC000E6F611');
    }
    network._0x2CD41AC000E6F611 = _0x2CD41AC000E6F611;
    /**
     * No comment provided
     *
     * Hash: 0x3034C77C79A58880 | Since: 1207
     */
    function _0x3034C77C79A58880() {
        Citizen.invokeNative('0x3034C77C79A58880', false);
    }
    network._0x3034C77C79A58880 = _0x3034C77C79A58880;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x316FD416C432C761 | Since: 1311
     */
    function _0x316FD416C432C761() {
        return Citizen.invokeNative('0x316FD416C432C761');
    }
    network._0x316FD416C432C761 = _0x316FD416C432C761;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x335AF56613CA0F49 | Since: 1311
     */
    function _0x335AF56613CA0F49() {
        Citizen.invokeNative('0x335AF56613CA0F49', 0);
    }
    network._0x335AF56613CA0F49 = _0x335AF56613CA0F49;
    /**
     * _NETWORK_A* - _NETWORK_C*
     *
     * Hash: 0x34BC1E79546BA543 | Since: 1232
     */
    function _0x34BC1E79546BA543() {
        Citizen.invokeNative('0x34BC1E79546BA543', false);
    }
    network._0x34BC1E79546BA543 = _0x34BC1E79546BA543;
    /**
     * No comment provided
     *
     * Hash: 0x3AA0CDC63696166D | Since: 1207
     */
    function _0x3AA0CDC63696166D() {
        return Citizen.invokeNative('0x3AA0CDC63696166D', 0);
    }
    network._0x3AA0CDC63696166D = _0x3AA0CDC63696166D;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x3CBD6565D9C3B133 | Since: 1311
     */
    function _0x3CBD6565D9C3B133() {
        Citizen.invokeNative('0x3CBD6565D9C3B133', 0, 0, 0);
    }
    network._0x3CBD6565D9C3B133 = _0x3CBD6565D9C3B133;
    /**
     * No comment provided
     *
     * Hash: 0x3E4A16BC669E71B3 | Since: 1207
     */
    function _0x3E4A16BC669E71B3() {
        return Citizen.invokeNative('0x3E4A16BC669E71B3');
    }
    network._0x3E4A16BC669E71B3 = _0x3E4A16BC669E71B3;
    /**
     * No comment provided
     *
     * Hash: 0x3E74A687A73979C6 | Since: 1207
     */
    function _0x3E74A687A73979C6() {
        Citizen.invokeNative('0x3E74A687A73979C6', false);
    }
    network._0x3E74A687A73979C6 = _0x3E74A687A73979C6;
    /**
     * Stadia only; always returns -1 on other platforms. p0 may be a BOOL.
     *
     * Hash: 0x3E8CCE6769DB5F34 | Since: 1207
     */
    function _0x3E8CCE6769DB5F34() {
        return Citizen.invokeNative('0x3E8CCE6769DB5F34', 0);
    }
    network._0x3E8CCE6769DB5F34 = _0x3E8CCE6769DB5F34;
    /**
     * No comment provided
     *
     * Hash: 0x3F0ABAE38A0515AD | Since: 1207
     */
    function _0x3F0ABAE38A0515AD() {
        Citizen.invokeNative('0x3F0ABAE38A0515AD', 0, 0);
    }
    network._0x3F0ABAE38A0515AD = _0x3F0ABAE38A0515AD;
    /**
     * No comment provided
     *
     * Hash: 0x3F2EE18A3E294801 | Since: 1207
     */
    function _0x3F2EE18A3E294801() {
        return Citizen.invokeNative('0x3F2EE18A3E294801', 0);
    }
    network._0x3F2EE18A3E294801 = _0x3F2EE18A3E294801;
    /**
     * No comment provided
     *
     * Hash: 0x405DDEFB1F531B18 | Since: 1207
     */
    function _0x405DDEFB1F531B18(volume) {
        Citizen.invokeNative('0x405DDEFB1F531B18', volume, false, undefined, undefined);
    }
    network._0x405DDEFB1F531B18 = _0x405DDEFB1F531B18;
    /**
     * Note: this native was added in build 1355.30
     *
     * Hash: 0x40FEDB13870042F1 | Since: 1355
     */
    function _0x40FEDB13870042F1() {
        Citizen.invokeNative('0x40FEDB13870042F1');
    }
    network._0x40FEDB13870042F1 = _0x40FEDB13870042F1;
    /**
     * No comment provided
     *
     * Hash: 0x41452E8A3B9C0C4B | Since: 1207
     */
    function _0x41452E8A3B9C0C4B() {
        return Citizen.invokeNative('0x41452E8A3B9C0C4B');
    }
    network._0x41452E8A3B9C0C4B = _0x41452E8A3B9C0C4B;
    /**
     * Note: this native was added in build 1355.30
     *
     * Hash: 0x422F9D6D6C7BC290 | Since: 1355
     */
    function _0x422F9D6D6C7BC290() {
        Citizen.invokeNative('0x422F9D6D6C7BC290', 0);
    }
    network._0x422F9D6D6C7BC290 = _0x422F9D6D6C7BC290;
    /**
     * No comment provided
     *
     * Hash: 0x43CF999205084B4B | Since: 1207
     */
    function _0x43CF999205084B4B() {
        Citizen.invokeNative('0x43CF999205084B4B');
    }
    network._0x43CF999205084B4B = _0x43CF999205084B4B;
    /**
     * Returns the entity associated with the given network ID.
     *
     * Hash: 0x4538EE7C321590BC | Since: 1207
     */
    function _0x4538EE7C321590BC(networkId) {
        return Citizen.invokeNative('0x4538EE7C321590BC', networkId);
    }
    network._0x4538EE7C321590BC = _0x4538EE7C321590BC;
    /**
     * No comment provided
     *
     * Hash: 0x455156F47DC6B78C | Since: 1207
     */
    function _0x455156F47DC6B78C() {
        Citizen.invokeNative('0x455156F47DC6B78C', false);
    }
    network._0x455156F47DC6B78C = _0x455156F47DC6B78C;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x4835413EA6F9C9CD | Since: 1311
     */
    function _0x4835413EA6F9C9CD() {
        return Citizen.invokeNative('0x4835413EA6F9C9CD', false);
    }
    network._0x4835413EA6F9C9CD = _0x4835413EA6F9C9CD;
    /**
     * No comment provided
     *
     * Hash: 0x49CF17A564918E8D | Since: 1207
     */
    function _0x49CF17A564918E8D() {
        Citizen.invokeNative('0x49CF17A564918E8D');
    }
    network._0x49CF17A564918E8D = _0x49CF17A564918E8D;
    /**
     * Hardcoded to return zero.
     *
     * Hash: 0x5133CF81924F1129 | Since: 1207
     */
    function _0x5133CF81924F1129() {
        return Citizen.invokeNative('0x5133CF81924F1129');
    }
    network._0x5133CF81924F1129 = _0x5133CF81924F1129;
    /**
     * No comment provided
     *
     * Hash: 0x51951DE06C0D1C40 | Since: 1207
     */
    function _0x51951DE06C0D1C40(player, _type) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x51951DE06C0D1C40', _player, _type);
    }
    network._0x51951DE06C0D1C40 = _0x51951DE06C0D1C40;
    /**
     * No comment provided
     *
     * Hash: 0x564552C6AF1EEAB1 | Since: 1207
     */
    function _0x564552C6AF1EEAB1() {
        Citizen.invokeNative('0x564552C6AF1EEAB1');
    }
    network._0x564552C6AF1EEAB1 = _0x564552C6AF1EEAB1;
    /**
     * No comment provided
     *
     * Hash: 0x5759160AC17C13CE | Since: 1207
     */
    function _0x5759160AC17C13CE(message) {
        return Citizen.invokeNative('0x5759160AC17C13CE', message);
    }
    network._0x5759160AC17C13CE = _0x5759160AC17C13CE;
    /**
     * No comment provided
     *
     * Hash: 0x5A91BCEF74944E93 | Since: 1207
     */
    function _0x5A91BCEF74944E93(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x5A91BCEF74944E93', _player, 0);
    }
    network._0x5A91BCEF74944E93 = _0x5A91BCEF74944E93;
    /**
     * No comment provided
     *
     * Hash: 0x5B9C6AC118FD4774 | Since: 1207
     */
    function _0x5B9C6AC118FD4774() {
        Citizen.invokeNative('0x5B9C6AC118FD4774');
    }
    network._0x5B9C6AC118FD4774 = _0x5B9C6AC118FD4774;
    /**
     * No comment provided
     *
     * Hash: 0x5CB8B0C846D0F30B | Since: 1207
     */
    function _0x5CB8B0C846D0F30B() {
        Citizen.invokeNative('0x5CB8B0C846D0F30B', undefined);
    }
    network._0x5CB8B0C846D0F30B = _0x5CB8B0C846D0F30B;
    /**
     * No comment provided
     *
     * Hash: 0x5CD3AAD8FF9ED121 | Since: 1207
     */
    function _0x5CD3AAD8FF9ED121() {
        Citizen.invokeNative('0x5CD3AAD8FF9ED121', undefined);
    }
    network._0x5CD3AAD8FF9ED121 = _0x5CD3AAD8FF9ED121;
    /**
     * _NETWORK_SPAWN_CONFIG_*
     *
     * Hash: 0x5D3C528B7A7DF836 | Since: 1207
     */
    function _0x5D3C528B7A7DF836(nsctf) {
        if (typeof nsctf === 'string')
            nsctf = misc.getHashKey(nsctf);
        Citizen.invokeNative('0x5D3C528B7A7DF836', nsctf);
    }
    network._0x5D3C528B7A7DF836 = _0x5D3C528B7A7DF836;
    /**
     * No comment provided
     *
     * Hash: 0x5ED39DA62BEB1330 | Since: 1207
     */
    function _0x5ED39DA62BEB1330() {
        return Citizen.invokeNative('0x5ED39DA62BEB1330', 0);
    }
    network._0x5ED39DA62BEB1330 = _0x5ED39DA62BEB1330;
    /**
     * No comment provided
     *
     * Hash: 0x5F0E99071582DECA | Since: 1207
     */
    function _0x5F0E99071582DECA(index) {
        return Citizen.invokeNative('0x5F0E99071582DECA', undefined, index, 0);
    }
    network._0x5F0E99071582DECA = _0x5F0E99071582DECA;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x5F328FC909F0E0FF | Since: 1311
     */
    function _0x5F328FC909F0E0FF() {
        return Citizen.invokeNative('0x5F328FC909F0E0FF', 0, 0, 0, 0);
    }
    network._0x5F328FC909F0E0FF = _0x5F328FC909F0E0FF;
    /**
     * No comment provided
     *
     * Hash: 0x603469298A4308AF | Since: 1207
     */
    function _0x603469298A4308AF() {
        Citizen.invokeNative('0x603469298A4308AF', false);
    }
    network._0x603469298A4308AF = _0x603469298A4308AF;
    /**
     * No comment provided
     *
     * Hash: 0x61BFBAA795E712AD | Since: 1207
     */
    function _0x61BFBAA795E712AD() {
        Citizen.invokeNative('0x61BFBAA795E712AD');
    }
    network._0x61BFBAA795E712AD = _0x61BFBAA795E712AD;
    /**
     * No comment provided
     *
     * Hash: 0x64A36BA85CE01A81 | Since: 1207
     */
    function _0x64A36BA85CE01A81() {
        return Citizen.invokeNative('0x64A36BA85CE01A81', undefined, undefined, undefined, undefined);
    }
    network._0x64A36BA85CE01A81 = _0x64A36BA85CE01A81;
    /**
     * No comment provided
     *
     * Hash: 0x67CCDF74C4DF7169 | Since: 1207
     */
    function _0x67CCDF74C4DF7169() {
        return Citizen.invokeNative('0x67CCDF74C4DF7169');
    }
    network._0x67CCDF74C4DF7169 = _0x67CCDF74C4DF7169;
    /**
     * No comment provided
     *
     * Hash: 0x691E4DE5309EAEFC | Since: 1207
     */
    function _0x691E4DE5309EAEFC() {
        return Citizen.invokeNative('0x691E4DE5309EAEFC', undefined);
    }
    network._0x691E4DE5309EAEFC = _0x691E4DE5309EAEFC;
    /**
     * No comment provided
     *
     * Hash: 0x6C27442A225A241A | Since: 1207
     */
    function _0x6C27442A225A241A() {
        return Citizen.invokeNative('0x6C27442A225A241A', 0);
    }
    network._0x6C27442A225A241A = _0x6C27442A225A241A;
    /**
     * No comment provided
     *
     * Hash: 0x6C7E04E9DE451789 | Since: 1207
     */
    function _0x6C7E04E9DE451789() {
        Citizen.invokeNative('0x6C7E04E9DE451789');
    }
    network._0x6C7E04E9DE451789 = _0x6C7E04E9DE451789;
    /**
     * _NETWORK_SPAWN_CONFIG_*
     *
     * Hash: 0x6CEE2E30021DAEC6 | Since: 1207
     */
    function _0x6CEE2E30021DAEC6() {
        Citizen.invokeNative('0x6CEE2E30021DAEC6');
    }
    network._0x6CEE2E30021DAEC6 = _0x6CEE2E30021DAEC6;
    /**
     * _NETWORK_GET_A* - _NETWORK_GET_D*
     *
     * Hash: 0x6CF82A7F65A5AD5F | Since: 1207
     */
    function _0x6CF82A7F65A5AD5F(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x6CF82A7F65A5AD5F', _ped);
    }
    network._0x6CF82A7F65A5AD5F = _0x6CF82A7F65A5AD5F;
    /**
     * No comment provided
     *
     * Hash: 0x704F92B3AF20D857 | Since: 1207
     */
    function _0x704F92B3AF20D857(setting) {
        Citizen.invokeNative('0x704F92B3AF20D857', setting);
    }
    network._0x704F92B3AF20D857 = _0x704F92B3AF20D857;
    /**
     * Only used in R* Script fm_race_controller
     *
     * Hash: 0x71FA2D1880C48032 | Since: 1207
     */
    function _0x71FA2D1880C48032() {
        Citizen.invokeNative('0x71FA2D1880C48032', false);
    }
    network._0x71FA2D1880C48032 = _0x71FA2D1880C48032;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x744BFBB0CA908161 | Since: 1311
     */
    function _0x744BFBB0CA908161() {
        return Citizen.invokeNative('0x744BFBB0CA908161', false);
    }
    network._0x744BFBB0CA908161 = _0x744BFBB0CA908161;
    /**
     * No comment provided
     *
     * Hash: 0x75FC34A2BA345BD1 | Since: 1207
     */
    function _0x75FC34A2BA345BD1(entity, player) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x75FC34A2BA345BD1', _entity, _player);
    }
    network._0x75FC34A2BA345BD1 = _0x75FC34A2BA345BD1;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x7673C0D2C5CDAC55 | Since: 1311
     */
    function _0x7673C0D2C5CDAC55() {
        Citizen.invokeNative('0x7673C0D2C5CDAC55');
    }
    network._0x7673C0D2C5CDAC55 = _0x7673C0D2C5CDAC55;
    /**
     * No comment provided
     *
     * Hash: 0x77B299E8799B1332 | Since: 1207
     */
    function _0x77B299E8799B1332() {
        return Citizen.invokeNative('0x77B299E8799B1332', undefined, undefined, undefined);
    }
    network._0x77B299E8799B1332 = _0x77B299E8799B1332;
    /**
     * No comment provided
     *
     * Hash: 0x780A13F780A13F1B | Since: 1311
     */
    function _0x780A13F780A13F1B(toggle) {
        Citizen.invokeNative('0x780A13F780A13F1B', toggle);
    }
    network._0x780A13F780A13F1B = _0x780A13F780A13F1B;
    /**
     * Note: this native was added in build 1436.31
     *
     * Hash: 0x78271BC02AE9AF83 | Since: 1436
     */
    function _0x78271BC02AE9AF83() {
        return Citizen.invokeNative('0x78271BC02AE9AF83', 0);
    }
    network._0x78271BC02AE9AF83 = _0x78271BC02AE9AF83;
    /**
     * No comment provided
     *
     * Hash: 0x7A8E8DF782B47EB0 | Since: 1207
     */
    function _0x7A8E8DF782B47EB0() {
        return Citizen.invokeNative('0x7A8E8DF782B47EB0', undefined, undefined, undefined);
    }
    network._0x7A8E8DF782B47EB0 = _0x7A8E8DF782B47EB0;
    /**
     * No comment provided
     *
     * Hash: 0x7B3FF2D193628126 | Since: 1207
     */
    function _0x7B3FF2D193628126(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x7B3FF2D193628126', _player);
    }
    network._0x7B3FF2D193628126 = _0x7B3FF2D193628126;
    /**
     * No comment provided
     *
     * Hash: 0x7BCA0A3972708436 | Since: 1207
     */
    function _0x7BCA0A3972708436() {
        return Citizen.invokeNative('0x7BCA0A3972708436', 0);
    }
    network._0x7BCA0A3972708436 = _0x7BCA0A3972708436;
    /**
     * No comment provided
     *
     * Hash: 0x7E300B5B86AB1D1A | Since: 1207
     */
    function _0x7E300B5B86AB1D1A() {
        return Citizen.invokeNative('0x7E300B5B86AB1D1A', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    network._0x7E300B5B86AB1D1A = _0x7E300B5B86AB1D1A;
    /**
     * No comment provided
     *
     * Hash: 0x814729078AED6D30 | Since: 1207
     */
    function _0x814729078AED6D30() {
        Citizen.invokeNative('0x814729078AED6D30');
    }
    network._0x814729078AED6D30 = _0x814729078AED6D30;
    /**
     * No comment provided
     *
     * Hash: 0x862C5040F4888741 | Since: 1207
     */
    function _0x862C5040F4888741(player1, player2) {
        const _player1 = player1 instanceof Player ? player1.localId() : player1;
        const _player2 = player2 instanceof Player ? player2.localId() : player2;
        return Citizen.invokeNative('0x862C5040F4888741', _player1, _player2);
    }
    network._0x862C5040F4888741 = _0x862C5040F4888741;
    /**
     * Params: p5 = 50.f, p6 = 0 in R* Script net_fetch (NET_FETCH_CLIENT_UPDATE_PED_ROLE_CLUE_IDLE)
     *
     * Hash: 0x880A7202301E282B | Since: 1311
     */
    function _0x880A7202301E282B(pos) {
        return Citizen.invokeNative('0x880A7202301E282B', pos.x, pos.y, pos.z, 0, undefined);
    }
    network._0x880A7202301E282B = _0x880A7202301E282B;
    /**
     * No comment provided
     *
     * Hash: 0x894B5ECAB45D2342 | Since: 1207
     */
    function _0x894B5ECAB45D2342(netHandle) {
        Citizen.invokeNative('0x894B5ECAB45D2342', netHandle, undefined);
    }
    network._0x894B5ECAB45D2342 = _0x894B5ECAB45D2342;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x917AD74BDCF8B6E9 | Since: 1311
     */
    function _0x917AD74BDCF8B6E9() {
        return Citizen.invokeNative('0x917AD74BDCF8B6E9', false);
    }
    network._0x917AD74BDCF8B6E9 = _0x917AD74BDCF8B6E9;
    /**
     * No comment provided
     *
     * Hash: 0x923346025512DFB7 | Since: 1207
     */
    function _0x923346025512DFB7() {
        return Citizen.invokeNative('0x923346025512DFB7', undefined);
    }
    network._0x923346025512DFB7 = _0x923346025512DFB7;
    /**
     * Related to container entity (RANSACK_ATTACHED_LOCKBOX / RANSACK_ATTACHED_CHEST)
     *
     * Hash: 0x950ACD8F05B7B9DF | Since: 1355
     */
    function _0x950ACD8F05B7B9DF() {
        return Citizen.invokeNative('0x950ACD8F05B7B9DF', undefined);
    }
    network._0x950ACD8F05B7B9DF = _0x950ACD8F05B7B9DF;
    /**
     * Must be called from a background script, otherwise it will do nothing.
     *
     * Hash: 0x979765465A6F25FC | Since: 1207
     */
    function _0x979765465A6F25FC(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x979765465A6F25FC', _entity, false);
    }
    network._0x979765465A6F25FC = _0x979765465A6F25FC;
    /**
     * No comment provided
     *
     * Hash: 0x97BCE4C4B3191228 | Since: 1207
     */
    function _0x97BCE4C4B3191228() {
        Citizen.invokeNative('0x97BCE4C4B3191228');
    }
    network._0x97BCE4C4B3191228 = _0x97BCE4C4B3191228;
    /**
     * No comment provided
     *
     * Hash: 0x981146E5C9CE9250 | Since: 1207
     */
    function _0x981146E5C9CE9250(inviteIndex) {
        return Citizen.invokeNative('0x981146E5C9CE9250', inviteIndex);
    }
    network._0x981146E5C9CE9250 = _0x981146E5C9CE9250;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x982D7AD755B8F62C | Since: 1311
     */
    function _0x982D7AD755B8F62C() {
        return Citizen.invokeNative('0x982D7AD755B8F62C', false);
    }
    network._0x982D7AD755B8F62C = _0x982D7AD755B8F62C;
    /**
     * No comment provided
     *
     * Hash: 0x9B39B0555CC692B5 | Since: 1207
     */
    function _0x9B39B0555CC692B5() {
        Citizen.invokeNative('0x9B39B0555CC692B5');
    }
    network._0x9B39B0555CC692B5 = _0x9B39B0555CC692B5;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x9E5A47744C0F0376 | Since: 1311
     */
    function _0x9E5A47744C0F0376() {
        return Citizen.invokeNative('0x9E5A47744C0F0376', 0);
    }
    network._0x9E5A47744C0F0376 = _0x9E5A47744C0F0376;
    /**
     * No comment provided
     *
     * Hash: 0x9F24A34863FD35DA | Since: unknown
     */
    function _0x9F24A34863FD35DA() {
        Citizen.invokeNative('0x9F24A34863FD35DA', undefined);
    }
    network._0x9F24A34863FD35DA = _0x9F24A34863FD35DA;
    /**
     * No comment provided
     *
     * Hash: 0xA2837A5E21FB5A58 | Since: 1207
     */
    function _0xA2837A5E21FB5A58() {
        return Citizen.invokeNative('0xA2837A5E21FB5A58', undefined);
    }
    network._0xA2837A5E21FB5A58 = _0xA2837A5E21FB5A58;
    /**
     * No comment provided
     *
     * Hash: 0xA47D48D06AA5A188 | Since: 1207
     */
    function _0xA47D48D06AA5A188() {
        return Citizen.invokeNative('0xA47D48D06AA5A188');
    }
    network._0xA47D48D06AA5A188 = _0xA47D48D06AA5A188;
    /**
     * No comment provided
     *
     * Hash: 0xA63E4F050F20021F | Since: 1207
     */
    function _0xA63E4F050F20021F() {
        Citizen.invokeNative('0xA63E4F050F20021F');
    }
    network._0xA63E4F050F20021F = _0xA63E4F050F20021F;
    /**
     * No comment provided
     *
     * Hash: 0xA6F1BAABFF6AD7B9 | Since: 1207
     */
    function _0xA6F1BAABFF6AD7B9() {
        return Citizen.invokeNative('0xA6F1BAABFF6AD7B9');
    }
    network._0xA6F1BAABFF6AD7B9 = _0xA6F1BAABFF6AD7B9;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0xA7670F7991099680 | Since: 1311
     */
    function _0xA7670F7991099680() {
        Citizen.invokeNative('0xA7670F7991099680', 0);
    }
    network._0xA7670F7991099680 = _0xA7670F7991099680;
    /**
     * No comment provided
     *
     * Hash: 0xA94ECE191D90637A | Since: 1207
     */
    function _0xA94ECE191D90637A() {
        return Citizen.invokeNative('0xA94ECE191D90637A');
    }
    network._0xA94ECE191D90637A = _0xA94ECE191D90637A;
    /**
     * No comment provided
     *
     * Hash: 0xA95470DA137587F5 | Since: 1207
     */
    function _0xA95470DA137587F5() {
        Citizen.invokeNative('0xA95470DA137587F5', false);
    }
    network._0xA95470DA137587F5 = _0xA95470DA137587F5;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xACC44768AF229042 | Since: 1207
     */
    function _0xACC44768AF229042() {
        Citizen.invokeNative('0xACC44768AF229042');
    }
    network._0xACC44768AF229042 = _0xACC44768AF229042;
    /**
     * No comment provided
     *
     * Hash: 0xAFA14F98327791CE | Since: 1207
     */
    function _0xAFA14F98327791CE() {
        return Citizen.invokeNative('0xAFA14F98327791CE');
    }
    network._0xAFA14F98327791CE = _0xAFA14F98327791CE;
    /**
     * No comment provided
     *
     * Hash: 0xB131E686BD97B3F8 | Since: 1207
     */
    function _0xB131E686BD97B3F8() {
        Citizen.invokeNative('0xB131E686BD97B3F8');
    }
    network._0xB131E686BD97B3F8 = _0xB131E686BD97B3F8;
    /**
     * No comment provided
     *
     * Hash: 0xB389289F031F059A | Since: 1207
     */
    function _0xB389289F031F059A() {
        return Citizen.invokeNative('0xB389289F031F059A');
    }
    network._0xB389289F031F059A = _0xB389289F031F059A;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0xBAF7E2979442B29F | Since: 1311
     */
    function _0xBAF7E2979442B29F() {
        return Citizen.invokeNative('0xBAF7E2979442B29F', false);
    }
    network._0xBAF7E2979442B29F = _0xBAF7E2979442B29F;
    /**
     * No comment provided
     *
     * Hash: 0xBB1EC8C2EEF33BAA | Since: 1207
     */
    function _0xBB1EC8C2EEF33BAA(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xBB1EC8C2EEF33BAA', _entity);
    }
    network._0xBB1EC8C2EEF33BAA = _0xBB1EC8C2EEF33BAA;
    /**
     * No comment provided
     *
     * Hash: 0xBB697756309D77EE | Since: 1207
     */
    function _0xBB697756309D77EE() {
        return Citizen.invokeNative('0xBB697756309D77EE', false);
    }
    network._0xBB697756309D77EE = _0xBB697756309D77EE;
    /**
     * Only used in fm_race_controller R* Script (PROCESS_LOCAL_PLAYER_INIT)
     *
     * Hash: 0xBC7D36946D19E60E | Since: 1207
     */
    function _0xBC7D36946D19E60E() {
        Citizen.invokeNative('0xBC7D36946D19E60E', false);
    }
    network._0xBC7D36946D19E60E = _0xBC7D36946D19E60E;
    /**
     * No comment provided
     *
     * Hash: 0xBF8276E51761F9DA | Since: 1207
     */
    function _0xBF8276E51761F9DA() {
        return Citizen.invokeNative('0xBF8276E51761F9DA');
    }
    network._0xBF8276E51761F9DA = _0xBF8276E51761F9DA;
    /**
     * No comment provided
     *
     * Hash: 0xC028B3F52C707C49 | Since: 1207
     */
    function _0xC028B3F52C707C49() {
        return Citizen.invokeNative('0xC028B3F52C707C49', undefined);
    }
    network._0xC028B3F52C707C49 = _0xC028B3F52C707C49;
    /**
     * No comment provided
     *
     * Hash: 0xC0CFFDA87C2C163D | Since: 1207
     */
    function _0xC0CFFDA87C2C163D() {
        return Citizen.invokeNative('0xC0CFFDA87C2C163D', 0, undefined, 0);
    }
    network._0xC0CFFDA87C2C163D = _0xC0CFFDA87C2C163D;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0xC1968045EEB563B7 | Since: 1311
     */
    function _0xC1968045EEB563B7() {
        Citizen.invokeNative('0xC1968045EEB563B7', 0);
    }
    network._0xC1968045EEB563B7 = _0xC1968045EEB563B7;
    /**
     * No comment provided
     *
     * Hash: 0xC8B6D18E22484643 | Since: 1207
     */
    function _0xC8B6D18E22484643() {
        Citizen.invokeNative('0xC8B6D18E22484643');
    }
    network._0xC8B6D18E22484643 = _0xC8B6D18E22484643;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xC964FCD3D1720697 | Since: 1207
     */
    function _0xC964FCD3D1720697() {
        return Citizen.invokeNative('0xC964FCD3D1720697');
    }
    network._0xC964FCD3D1720697 = _0xC964FCD3D1720697;
    /**
     * No comment provided
     *
     * Hash: 0xCA58D4FD20D70F24 | Since: 1207
     */
    function _0xCA58D4FD20D70F24() {
        return Citizen.invokeNative('0xCA58D4FD20D70F24', undefined);
    }
    network._0xCA58D4FD20D70F24 = _0xCA58D4FD20D70F24;
    /**
     * No comment provided
     *
     * Hash: 0xCC4E72C339461ED1 | Since: 1207
     */
    function _0xCC4E72C339461ED1() {
        return Citizen.invokeNative('0xCC4E72C339461ED1');
    }
    network._0xCC4E72C339461ED1 = _0xCC4E72C339461ED1;
    /**
     * No comment provided
     *
     * Hash: 0xCD53E6CBF609C012 | Since: 1207
     */
    function _0xCD53E6CBF609C012(ugcRequestId) {
        return Citizen.invokeNative('0xCD53E6CBF609C012', ugcRequestId);
    }
    network._0xCD53E6CBF609C012 = _0xCD53E6CBF609C012;
    /**
     * No comment provided
     *
     * Hash: 0xCF23AB5BD47B384D | Since: 1207
     */
    function _0xCF23AB5BD47B384D() {
        Citizen.invokeNative('0xCF23AB5BD47B384D', undefined);
    }
    network._0xCF23AB5BD47B384D = _0xCF23AB5BD47B384D;
    /**
     * No comment provided
     *
     * Hash: 0xD1FFB246F4E088AC | Since: 1207
     */
    function _0xD1FFB246F4E088AC() {
        return Citizen.invokeNative('0xD1FFB246F4E088AC', 0);
    }
    network._0xD1FFB246F4E088AC = _0xD1FFB246F4E088AC;
    /**
     * No comment provided
     *
     * Hash: 0xD39A72AE5EBD57E5 | Since: 1207
     */
    function _0xD39A72AE5EBD57E5() {
        Citizen.invokeNative('0xD39A72AE5EBD57E5');
    }
    network._0xD39A72AE5EBD57E5 = _0xD39A72AE5EBD57E5;
    /**
     * No comment provided
     *
     * Hash: 0xD3A3C8B9F3BDEF81 | Since: 1207
     */
    function _0xD3A3C8B9F3BDEF81() {
        return Citizen.invokeNative('0xD3A3C8B9F3BDEF81');
    }
    network._0xD3A3C8B9F3BDEF81 = _0xD3A3C8B9F3BDEF81;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0xD3B6EBC6C3D77D44 | Since: 1311
     */
    function _0xD3B6EBC6C3D77D44() {
        Citizen.invokeNative('0xD3B6EBC6C3D77D44', 0);
    }
    network._0xD3B6EBC6C3D77D44 = _0xD3B6EBC6C3D77D44;
    /**
     * No comment provided
     *
     * Hash: 0xD4022C7286B0DFA2 | Since: 1207
     */
    function _0xD4022C7286B0DFA2() {
        return Citizen.invokeNative('0xD4022C7286B0DFA2', undefined, 0, 0);
    }
    network._0xD4022C7286B0DFA2 = _0xD4022C7286B0DFA2;
    /**
     * No comment provided
     *
     * Hash: 0xD42C543F73233041 | Since: 1232
     */
    function _0xD42C543F73233041() {
        Citizen.invokeNative('0xD42C543F73233041', false);
    }
    network._0xD42C543F73233041 = _0xD42C543F73233041;
    /**
     * No comment provided
     *
     * Hash: 0xD637D327080CD86E | Since: 1207
     */
    function _0xD637D327080CD86E() {
        Citizen.invokeNative('0xD637D327080CD86E', 0);
    }
    network._0xD637D327080CD86E = _0xD637D327080CD86E;
    /**
     * No comment provided
     *
     * Hash: 0xD78A26024BB13E08 | Since: 1207
     */
    function _0xD78A26024BB13E08(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xD78A26024BB13E08', _player);
    }
    network._0xD78A26024BB13E08 = _0xD78A26024BB13E08;
    /**
     * No comment provided
     *
     * Hash: 0xD7BAD4062074B9C1 | Since: 1207
     */
    function _0xD7BAD4062074B9C1() {
        return Citizen.invokeNative('0xD7BAD4062074B9C1', undefined);
    }
    network._0xD7BAD4062074B9C1 = _0xD7BAD4062074B9C1;
    /**
     * No comment provided
     *
     * Hash: 0xD7D0DF27CB1765B5 | Since: 1355
     */
    function _0xD7D0DF27CB1765B5() {
        return Citizen.invokeNative('0xD7D0DF27CB1765B5', 0);
    }
    network._0xD7D0DF27CB1765B5 = _0xD7D0DF27CB1765B5;
    /**
     * No comment provided
     *
     * Hash: 0xDA1BFED8582F61F0 | Since: 1207
     */
    function _0xDA1BFED8582F61F0() {
        return Citizen.invokeNative('0xDA1BFED8582F61F0');
    }
    network._0xDA1BFED8582F61F0 = _0xDA1BFED8582F61F0;
    /**
     * Note: this native was added in build 1491.50
     *
     * Hash: 0xDBDF80673BBA3D65 | Since: 1491
     */
    function _0xDBDF80673BBA3D65() {
        return Citizen.invokeNative('0xDBDF80673BBA3D65', 0);
    }
    network._0xDBDF80673BBA3D65 = _0xDBDF80673BBA3D65;
    /**
     * No comment provided
     *
     * Hash: 0xDC6AD5C046F33AB4 | Since: 1207
     */
    function _0xDC6AD5C046F33AB4() {
        Citizen.invokeNative('0xDC6AD5C046F33AB4', false, false);
    }
    network._0xDC6AD5C046F33AB4 = _0xDC6AD5C046F33AB4;
    /**
     * No comment provided
     *
     * Hash: 0xDCA4A74135E1DEA5 | Since: 1207
     */
    function _0xDCA4A74135E1DEA5() {
        return Citizen.invokeNative('0xDCA4A74135E1DEA5', undefined);
    }
    network._0xDCA4A74135E1DEA5 = _0xDCA4A74135E1DEA5;
    /**
     * No comment provided
     *
     * Hash: 0xE10F2D7715ABABEC | Since: 1207
     */
    function _0xE10F2D7715ABABEC() {
        return Citizen.invokeNative('0xE10F2D7715ABABEC', undefined);
    }
    network._0xE10F2D7715ABABEC = _0xE10F2D7715ABABEC;
    /**
     * No comment provided
     *
     * Hash: 0xE31A04513237DC89 | Since: 1207
     */
    function unregisterNetworkedEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xE31A04513237DC89', _entity);
    }
    network.unregisterNetworkedEntity = unregisterNetworkedEntity;
    /**
     * No comment provided
     *
     * Hash: 0xE39600E50D608693 | Since: 1207
     */
    function _0xE39600E50D608693() {
        return Citizen.invokeNative('0xE39600E50D608693', undefined, undefined);
    }
    network._0xE39600E50D608693 = _0xE39600E50D608693;
    /**
     * No comment provided
     *
     * Hash: 0xE3AB5EEFCB6671A2 | Since: 1207
     */
    function _0xE3AB5EEFCB6671A2(setting) {
        Citizen.invokeNative('0xE3AB5EEFCB6671A2', setting);
    }
    network._0xE3AB5EEFCB6671A2 = _0xE3AB5EEFCB6671A2;
    /**
     * No comment provided
     *
     * Hash: 0xE5634491A58C2703 | Since: 1207
     */
    function _0xE5634491A58C2703() {
        Citizen.invokeNative('0xE5634491A58C2703', 0);
    }
    network._0xE5634491A58C2703 = _0xE5634491A58C2703;
    /**
     * No comment provided
     *
     * Hash: 0xE59F4924BD3A718D | Since: 1207
     */
    function _0xE59F4924BD3A718D() {
        return Citizen.invokeNative('0xE59F4924BD3A718D', 0);
    }
    network._0xE59F4924BD3A718D = _0xE59F4924BD3A718D;
    /**
     * No comment provided
     *
     * Hash: 0xE5FF65CFF5160752 | Since: 1207
     */
    function _0xE5FF65CFF5160752() {
        Citizen.invokeNative('0xE5FF65CFF5160752');
    }
    network._0xE5FF65CFF5160752 = _0xE5FF65CFF5160752;
    /**
     * No comment provided
     *
     * Hash: 0xE79BA3BC265895DA | Since: 1207
     */
    function _0xE79BA3BC265895DA() {
        return Citizen.invokeNative('0xE79BA3BC265895DA', 0);
    }
    network._0xE79BA3BC265895DA = _0xE79BA3BC265895DA;
    /**
     * No comment provided
     *
     * Hash: 0xE8E633215471BB5D | Since: 1207
     */
    function _0xE8E633215471BB5D() {
        return Citizen.invokeNative('0xE8E633215471BB5D', undefined);
    }
    network._0xE8E633215471BB5D = _0xE8E633215471BB5D;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xEC089F84A9C16C62 | Since: 1207
     */
    function _0xEC089F84A9C16C62() {
        return Citizen.invokeNative('0xEC089F84A9C16C62');
    }
    network._0xEC089F84A9C16C62 = _0xEC089F84A9C16C62;
    /**
     * No comment provided
     *
     * Hash: 0xF23A6D6C11D8EC15 | Since: 1207
     */
    function _0xF23A6D6C11D8EC15() {
        return Citizen.invokeNative('0xF23A6D6C11D8EC15');
    }
    network._0xF23A6D6C11D8EC15 = _0xF23A6D6C11D8EC15;
    /**
     * Same Native Handler as VEH_TO_NET, PED_TO_NET, OBJ_TO_NET and NETWORK_GET_NETWORK_ID_FROM_ENTITY
     *
     * Hash: 0xF260AF6F43953316 | Since: 1207
     */
    function _0xF260AF6F43953316(handle) {
        return Citizen.invokeNative('0xF260AF6F43953316', handle);
    }
    network._0xF260AF6F43953316 = _0xF260AF6F43953316;
    /**
     * Returns the entity's network ID.
     *
     * Hash: 0xF302AB9D978352EE | Since: 1207
     */
    function _0xF302AB9D978352EE(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0xF302AB9D978352EE', _entity);
    }
    network._0xF302AB9D978352EE = _0xF302AB9D978352EE;
    /**
     * No comment provided
     *
     * Hash: 0xF342F6BD0A8287D5 | Since: 1207
     */
    function _0xF342F6BD0A8287D5() {
        Citizen.invokeNative('0xF342F6BD0A8287D5', undefined);
    }
    network._0xF342F6BD0A8287D5 = _0xF342F6BD0A8287D5;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0xF8DC69DC1AD19072 | Since: 1311
     */
    function _0xF8DC69DC1AD19072() {
        return Citizen.invokeNative('0xF8DC69DC1AD19072', false);
    }
    network._0xF8DC69DC1AD19072 = _0xF8DC69DC1AD19072;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0xFB3205788F8AFA3F | Since: 1311
     */
    function _0xFB3205788F8AFA3F() {
        return Citizen.invokeNative('0xFB3205788F8AFA3F');
    }
    network._0xFB3205788F8AFA3F = _0xFB3205788F8AFA3F;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xFC6FCF4C03F1BBF6 | Since: 1207
     */
    function _0xFC6FCF4C03F1BBF6() {
        Citizen.invokeNative('0xFC6FCF4C03F1BBF6');
    }
    network._0xFC6FCF4C03F1BBF6 = _0xFC6FCF4C03F1BBF6;
    /**
     * Only used in R* Script startup_clip Seems to just kill the network connection, sets the players coords to 0, 0, 0 when doing GetEntityCoords
     *
     * Hash: 0xFD4272A137703449 | Since: 1207
     */
    function leaveSession() {
        Citizen.invokeNative('0xFD4272A137703449');
    }
    network.leaveSession = leaveSession;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0xFD8112109A96877C | Since: 1311
     */
    function _0xFD8112109A96877C() {
        Citizen.invokeNative('0xFD8112109A96877C');
    }
    network._0xFD8112109A96877C = _0xFD8112109A96877C;
    /**
     * No comment provided
     *
     * Hash: 0xFE53B1F8D43F19BF | Since: 1207
     */
    function _0xFE53B1F8D43F19BF(player1, player2) {
        const _player1 = player1 instanceof Player ? player1.localId() : player1;
        const _player2 = player2 instanceof Player ? player2.localId() : player2;
        return Citizen.invokeNative('0xFE53B1F8D43F19BF', _player1, _player2);
    }
    network._0xFE53B1F8D43F19BF = _0xFE53B1F8D43F19BF;
    /**
     * No comment provided
     *
     * Hash: 0xFF36F36B07E69059 | Since: 1207
     */
    function _0xFF36F36B07E69059() {
        Citizen.invokeNative('0xFF36F36B07E69059', undefined);
    }
    network._0xFF36F36B07E69059 = _0xFF36F36B07E69059;
    /**
     * No comment provided
     *
     * Hash: 0xE0D73CDDEA79DDCD | Since: 1207
     */
    function animSceneToNet(animScene) {
        return AnimSceneToNet(animScene);
    }
    network.animSceneToNet = animSceneToNet;
    /**
     * No comment provided
     *
     * Hash: 0x782C94DB6469634D | Since: 1207
     */
    function clearLaunchParam(paramName) {
        ClearLaunchParam(paramName);
    }
    network.clearLaunchParam = clearLaunchParam;
    /**
     * No comment provided
     *
     * Hash: 0xDBC754CB6CCB9378 | Since: 1232
     */
    function commerceStoreIsEnabled() {
        return CommerceStoreIsEnabled();
    }
    network.commerceStoreIsEnabled = commerceStoreIsEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xCE5E79D9E303628E | Since: 1355
     */
    function commerceStoreIsOpen() {
        return CommerceStoreIsOpen();
    }
    network.commerceStoreIsOpen = commerceStoreIsOpen;
    /**
     * No comment provided
     *
     * Hash: 0x02E97CE283648CD9 | Since: 1207
     */
    function getLaunchParamExists(paramName) {
        return GetLaunchParamExists(paramName);
    }
    network.getLaunchParamExists = getLaunchParamExists;
    /**
     * No comment provided
     *
     * Hash: 0xC59AB6A04333C502 | Since: 1207
     */
    function getLaunchParamString() {
        return GetLaunchParamString();
    }
    network.getLaunchParamString = getLaunchParamString;
    /**
     * No comment provided
     *
     * Hash: 0xD2BA051B94CA9BCC | Since: 1207
     */
    function getNumCreatedMissionPickups() {
        return GetNumCreatedMissionPickups(false);
    }
    network.getNumCreatedMissionPickups = getNumCreatedMissionPickups;
    /**
     * Note: this native was added in build 1311.16
     *
     * Hash: 0x4FE932E84FE932E8 | Since: 1311
     */
    function getNumPeerNegotiationResponses() {
        return GetNumPeerNegotiationResponses();
    }
    network.getNumPeerNegotiationResponses = getNumPeerNegotiationResponses;
    /**
     * No comment provided
     *
     * Hash: 0x62BE3ECC79FBD004 | Since: 1207
     */
    function getNumReservedMissionPickups() {
        return GetNumReservedMissionPickups(false);
    }
    network.getNumReservedMissionPickups = getNumReservedMissionPickups;
    /**
     * No comment provided
     *
     * Hash: 0xDCC4B7F7112E8AB7 | Since: 1207
     */
    function getPlayerWaypointIsActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerWaypointIsActive(_player);
    }
    network.getPlayerWaypointIsActive = getPlayerWaypointIsActive;
    /**
     * Only used in R* Script net_stable_manager
     *
     * Hash: 0x99AAC89C510DEB0D | Since: 1491
     */
    function getReservedMissionEntitiesForThread(threadId) {
        return GetReservedMissionEntitiesForThread(threadId);
    }
    network.getReservedMissionEntitiesForThread = getReservedMissionEntitiesForThread;
    /**
     * No comment provided
     *
     * Hash: 0xD0541EF28E9C4783 | Since: 1207
     */
    function getSocialMatchmakingAllowed() {
        return GetSocialMatchmakingAllowed();
    }
    network.getSocialMatchmakingAllowed = getSocialMatchmakingAllowed;
    /**
     * No comment provided
     *
     * Hash: 0x6E2FD8CF7EB10E53 | Since: 1207
     */
    function localPlayerPedshotTextureDownloadRequest(playerSlot, personaPhotoLocalCacheType) {
        return LocalPlayerPedshotTextureDownloadRequest(playerSlot, personaPhotoLocalCacheType);
    }
    network.localPlayerPedshotTextureDownloadRequest = localPlayerPedshotTextureDownloadRequest;
    /**
     * Returns textureDownloadId
     *
     * Hash: 0x9B5DB6CEAFAA10BB | Since: 1207
     */
    function mugshotTextureDownloadRequest(name) {
        return MugshotTextureDownloadRequest(0, name, false);
    }
    network.mugshotTextureDownloadRequest = mugshotTextureDownloadRequest;
    /**
     * No comment provided
     *
     * Hash: 0x157D8F3DE12B307F | Since: 1207
     */
    function addPlayerToRecentGamersList(player) {
        const _player = player instanceof Player ? player.localId() : player;
        NetworkAddPlayerToRecentGamersList(_player, 0);
    }
    network.addPlayerToRecentGamersList = addPlayerToRecentGamersList;
    /**
     * No comment provided
     *
     * Hash: 0x1BAA028F52EED310 | Since: 1311
     */
    function alert(ctx, lh, ec, h) {
        if (typeof ctx === 'string')
            ctx = misc.getHashKey(ctx);
        if (typeof lh === 'string')
            lh = misc.getHashKey(lh);
        NetworkAlert(ctx, lh, ec, h);
    }
    network.alert = alert;
    /**
     * Returns value of fwuiCachedSetting "general.onlineNotificationsInStoryMode"
     *
     * Hash: 0xF5C5929E07512F80 | Since: 1207
     */
    function areOnlineNotificationsShownInStoryMode() {
        return NetworkAreOnlineNotificationsShownInStoryMode();
    }
    network.areOnlineNotificationsShownInStoryMode = areOnlineNotificationsShownInStoryMode;
    /**
     * No comment provided
     *
     * Hash: 0x11820D1AE80DEA39 | Since: 1207
     */
    function arePlayersInSamePlatformParty() {
        return NetworkArePlayersInSamePlatformParty();
    }
    network.arePlayersInSamePlatformParty = arePlayersInSamePlatformParty;
    /**
     * No comment provided
     *
     * Hash: 0xE258570E0C116A66 | Since: 1207
     */
    function autoSessionIsAutoWarpDisabled() {
        return NetworkAutoSessionIsAutoWarpDisabled();
    }
    network.autoSessionIsAutoWarpDisabled = autoSessionIsAutoWarpDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x277865A734918AE6 | Since: 1207
     */
    function autoSessionIsInstancedSession() {
        return NetworkAutoSessionIsInstancedSession();
    }
    network.autoSessionIsInstancedSession = autoSessionIsInstancedSession;
    /**
     * No comment provided
     *
     * Hash: 0xA021095C983F20D8 | Since: 1207
     */
    function autoSessionIsProcessingSessionSplit() {
        return NetworkAutoSessionIsProcessingSessionSplit();
    }
    network.autoSessionIsProcessingSessionSplit = autoSessionIsProcessingSessionSplit;
    /**
     * No comment provided
     *
     * Hash: 0x63246A24F5747510 | Since: 1207
     */
    function autoSessionSetAllowedToMerge(toggle) {
        return NetworkAutoSessionSetAllowedToMerge(toggle, 0);
    }
    network.autoSessionSetAllowedToMerge = autoSessionSetAllowedToMerge;
    /**
     * No comment provided
     *
     * Hash: 0x0A428058079EE65C | Since: 1207
     */
    function autoSessionSetAllowedToSplit(toggle) {
        NetworkAutoSessionSetAllowedToSplit(toggle);
    }
    network.autoSessionSetAllowedToSplit = autoSessionSetAllowedToSplit;
    /**
     * No comment provided
     *
     * Hash: 0x4440FEE3EFE78F54 | Since: 1207
     */
    function autoSessionSetAutoWarpEnabled(toggle) {
        NetworkAutoSessionSetAutoWarpEnabled(toggle);
    }
    network.autoSessionSetAutoWarpEnabled = autoSessionSetAutoWarpEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x6D87BA8EF15226CD | Since: 1207
     */
    function autoSessionSplitSessionSuccessful() {
        return NetworkAutoSessionSplitSessionSuccessful();
    }
    network.autoSessionSplitSessionSuccessful = autoSessionSplitSessionSuccessful;
    /**
     * On PC this returns true if gamerHandle is a valid handle.
     *
     * Hash: 0x99ABE9BF9DADA162 | Since: 1207
     */
    function canAddFriend() {
        return NetworkCanAddFriend();
    }
    network.canAddFriend = canAddFriend;
    /**
     * No comment provided
     *
     * Hash: 0xF23D6475640D29EB | Since: 1207
     */
    function canReceiveInviteFromHandle() {
        return NetworkCanReceiveInviteFromHandle();
    }
    network.canReceiveInviteFromHandle = canReceiveInviteFromHandle;
    /**
     * No comment provided
     *
     * Hash: 0x65F040D91001ED4B | Since: 1207
     */
    function clearClockOverrideOvertime(milliseconds) {
        NetworkClearClockOverrideOvertime(milliseconds);
    }
    network.clearClockOverrideOvertime = clearClockOverrideOvertime;
    /**
     * No comment provided
     *
     * Hash: 0x669E223E64B1903C | Since: 1207
     */
    function clockTimeOverride(hour, minute, second, transitionTime, pauseClock) {
        NetworkClockTimeOverride(hour, minute, second, transitionTime, pauseClock);
    }
    network.clockTimeOverride = clockTimeOverride;
    /**
     * No comment provided
     *
     * Hash: 0xE28C13ECC36FF14E | Since: 1207
     */
    function clockTimeOverride2(hour, minute, second, transitionTime, pauseClock, clockwise) {
        NetworkClockTimeOverride2(hour, minute, second, transitionTime, pauseClock, clockwise);
    }
    network.clockTimeOverride2 = clockTimeOverride2;
    /**
     * Must be called from a background script, otherwise it will do nothing.
     *
     * Hash: 0xFA38B52F91B59075 | Since: 1207
     */
    function debugRequestEntityPosition() {
        return NetworkDebugRequestEntityPosition();
    }
    network.debugRequestEntityPosition = debugRequestEntityPosition;
    /**
     * No comment provided
     *
     * Hash: 0x12AEB56B489415C5 | Since: 1207
     */
    function didRecentGamerNamesRequestSucceed() {
        return NetworkDidRecentGamerNamesRequestSucceed();
    }
    network.didRecentGamerNamesRequestSucceed = didRecentGamerNamesRequestSucceed;
    /**
     * No comment provided
     *
     * Hash: 0xA3EEC0A5AFF3FC5B | Since: 1207
     */
    function getCurrentFriendPageData() {
        return NetworkGetCurrentFriendPageData();
    }
    network.getCurrentFriendPageData = getCurrentFriendPageData;
    /**
     * Example:
     *
     * char displayName[64];
     * if (_NETWORK_GET_DISPLAY_NAME_FROM_HANDLE(handle, displayName))
     * {
     * // use displayName
     * }
     *
     * Hash: 0x7FEE4F07C54B6B3C | Since: 1207
     */
    function getDisplayNameFromHandle() {
        return NetworkGetDisplayNameFromHandle();
    }
    network.getDisplayNameFromHandle = getDisplayNameFromHandle;
    /**
     * No comment provided
     *
     * Hash: 0x5659D87BE674AB17 | Since: 1207
     */
    function getGamertagFromFriend() {
        return NetworkGetGamertagFromFriend();
    }
    network.getGamertagFromFriend = getGamertagFromFriend;
    /**
     * No comment provided
     *
     * Hash: 0xFBDFE1C1356E12E8 | Since: 1207
     */
    function getGamerSessionFromHandle(count) {
        return NetworkGetGamerSessionFromHandle(count);
    }
    network.getGamerSessionFromHandle = getGamerSessionFromHandle;
    /**
     * No comment provided
     *
     * Hash: 0xDDAEB478E58F8DEA | Since: 1207
     */
    function getGamerStatus() {
        return NetworkGetGamerStatus(0);
    }
    network.getGamerStatus = getGamerStatus;
    /**
     * No comment provided
     *
     * Hash: 0xDD7806FD0543BC3D | Since: 1207
     */
    function getGlobalEntityFlags(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return NetworkGetGlobalEntityFlags(_entity);
    }
    network.getGlobalEntityFlags = getGlobalEntityFlags;
    /**
     * No comment provided
     *
     * Hash: 0xFB9ECED5B68F3B78 | Since: 1207
     */
    function getInstanceIdOfThread(threadId) {
        return NetworkGetInstanceIdOfThread(threadId);
    }
    network.getInstanceIdOfThread = getInstanceIdOfThread;
    /**
     * No comment provided
     *
     * Hash: 0x37A834AEC6A4F74A | Since: 1207
     */
    function getNumRecentGamers() {
        return NetworkGetNumRecentGamers();
    }
    network.getNumRecentGamers = getNumRecentGamers;
    /**
     * No comment provided
     *
     * Hash: 0x9BCF28FB5D65A9BE | Since: 1207
     */
    function getPlatformInviteId() {
        return NetworkGetPlatformInviteId();
    }
    network.getPlatformInviteId = getPlatformInviteId;
    /**
     * No comment provided
     *
     * Hash: 0xD9267375834C5EAB | Since: 1207
     */
    function getPlayerFastInstanceId(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkGetPlayerFastInstanceId(_player);
    }
    network.getPlayerFastInstanceId = getPlayerFastInstanceId;
    /**
     * No comment provided
     *
     * Hash: 0xA6C0787443C9583E | Since: 1207
     */
    function getPlayerOwnerOfNetworkId(netId) {
        return NetworkGetPlayerOwnerOfNetworkId(netId);
    }
    network.getPlayerOwnerOfNetworkId = getPlayerOwnerOfNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x32C90CDFAF40514C | Since: 1207
     */
    function getRank() {
        return NetworkGetRank();
    }
    network.getRank = getRank;
    /**
     * Returns CGameConfig->ConfigOnlineServices->RosTitleName (see gameconfig.xml)
     *
     * Hash: 0xAC6153A0722F524C | Since: 1207
     */
    function getRosTitleName() {
        return NetworkGetRosTitleName();
    }
    network.getRosTitleName = getRosTitleName;
    /**
     * No comment provided
     *
     * Hash: 0x8DC9AA3B508B1A85 | Since: 1207
     */
    function getSessionHost() {
        return NetworkGetSessionHost();
    }
    network.getSessionHost = getSessionHost;
    /**
     * No comment provided
     *
     * Hash: 0xBA24095EA96DFE17 | Since: 1207
     */
    function getSizeOfHostBroadcastDataStorage() {
        return NetworkGetSizeOfHostBroadcastDataStorage();
    }
    network.getSizeOfHostBroadcastDataStorage = getSizeOfHostBroadcastDataStorage;
    /**
     * No comment provided
     *
     * Hash: 0x690806BC83BC8CA2 | Since: 1207
     */
    function getSizeOfPlayerBroadcastDataStorage() {
        return NetworkGetSizeOfPlayerBroadcastDataStorage();
    }
    network.getSizeOfPlayerBroadcastDataStorage = getSizeOfPlayerBroadcastDataStorage;
    /**
     * No comment provided
     *
     * Hash: 0xDB438CC9BC6F4022 | Since: 1207
     */
    function getXp() {
        return NetworkGetXp();
    }
    network.getXp = getXp;
    /**
     * No comment provided
     *
     * Hash: 0xDD73C9838CE7181D | Since: 1207
     */
    function hasCompletedMpIntroFlowOnCurrentSlot() {
        return NetworkHasCompletedMpIntroFlowOnCurrentSlot();
    }
    network.hasCompletedMpIntroFlowOnCurrentSlot = hasCompletedMpIntroFlowOnCurrentSlot;
    /**
     * No comment provided
     *
     * Hash: 0x26A5C12FACFF8724 | Since: 1207
     */
    function hasControlOfAnimScene(animScene) {
        return NetworkHasControlOfAnimScene(animScene);
    }
    network.hasControlOfAnimScene = hasControlOfAnimScene;
    /**
     * No comment provided
     *
     * Hash: 0x25189F9908E9CD65 | Since: 1207
     */
    function hasCurrentGetGamerStatusStarted() {
        return NetworkHasCurrentGetGamerStatusStarted();
    }
    network.hasCurrentGetGamerStatusStarted = hasCurrentGetGamerStatusStarted;
    /**
     * No comment provided
     *
     * Hash: 0x665161D250850A9F | Since: 1207
     */
    function isFriendHandleInSameTitle() {
        return NetworkIsFriendHandleInSameTitle();
    }
    network.isFriendHandleInSameTitle = isFriendHandleInSameTitle;
    /**
     * No comment provided
     *
     * Hash: 0xE348D1404BD80146 | Since: 1207
     */
    function isFriendHandleOnline() {
        return NetworkIsFriendHandleOnline();
    }
    network.isFriendHandleOnline = isFriendHandleOnline;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0xC5196C42DE19F646 | Since: 1207
     */
    function isInSessionLobby() {
        return NetworkIsInSessionLobby();
    }
    network.isInSessionLobby = isInSessionLobby;
    /**
     * No comment provided
     *
     * Hash: 0x5B709519997ECF0F | Since: 1207
     */
    function isPlayerInSpectatorMode(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkIsPlayerInSpectatorMode(_player);
    }
    network.isPlayerInSpectatorMode = isPlayerInSpectatorMode;
    /**
     * _NETWORK_IS_T* - _NETWORK_RE*
     *
     * Hash: 0xA21E3BAD0A42D199 | Since: 1207
     */
    function isPreviousUploadPending() {
        return NetworkIsPreviousUploadPending();
    }
    network.isPreviousUploadPending = isPreviousUploadPending;
    /**
     * No comment provided
     *
     * Hash: 0x4664D213A0CCAF40 | Since: 1207
     */
    function isRecentGamerNamesRequestInProgress() {
        return NetworkIsRecentGamerNamesRequestInProgress();
    }
    network.isRecentGamerNamesRequestInProgress = isRecentGamerNamesRequestInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x31DAD2CD6D49546E | Since: 1207
     */
    function isThreadActive(threadId) {
        return NetworkIsThreadActive(threadId);
    }
    network.isThreadActive = isThreadActive;
    /**
     * No comment provided
     *
     * Hash: 0xE525878A35B9EEBD | Since: 1207
     */
    function isTrackedPlayerVisible(player, trackedPlayer) {
        const _player = player instanceof Player ? player.localId() : player;
        const _trackedPlayer = trackedPlayer instanceof Player ? trackedPlayer.localId() : trackedPlayer;
        return NetworkIsTrackedPlayerVisible(_player, _trackedPlayer);
    }
    network.isTrackedPlayerVisible = isTrackedPlayerVisible;
    /**
     * Returns false if pedshot push failed
     *
     * Hash: 0x2A48D9567940598F | Since: 1207
     */
    function personaPhotoWriteLocal(texture, playerSlot, personaPhotoLocalCacheType) {
        return NetworkPersonaPhotoWriteLocal(texture, playerSlot, 0, personaPhotoLocalCacheType);
    }
    network.personaPhotoWriteLocal = personaPhotoWriteLocal;
    /**
     * Returns false if pedshot push failed
     *
     * Hash: 0xB72999D3120599DF | Since: 1207
     */
    function personaPhotoWriteScProfile(texture, personaPhotoType, formatIndex) {
        return NetworkPersonaPhotoWriteScProfile(texture, personaPhotoType, formatIndex);
    }
    network.personaPhotoWriteScProfile = personaPhotoWriteScProfile;
    /**
     * No comment provided
     *
     * Hash: 0x55F618F68AB854D3 | Since: 1207
     */
    function removeFriend() {
        return NetworkRemoveFriend();
    }
    network.removeFriend = removeFriend;
    /**
     * No comment provided
     *
     * Hash: 0xAAA92B631B13F614 | Since: 1207
     */
    function requestControlOfAnimScene(animScene) {
        return NetworkRequestControlOfAnimScene(animScene);
    }
    network.requestControlOfAnimScene = requestControlOfAnimScene;
    /**
     * No comment provided
     *
     * Hash: 0x4154B7D8C75E5DCF | Since: 1207
     */
    function resurrectLocalPlayer2() {
        return NetworkResurrectLocalPlayer2();
    }
    network.resurrectLocalPlayer2 = resurrectLocalPlayer2;
    /**
     * No comment provided
     *
     * Hash: 0xE47001B7CB8B98AE | Since: 1207
     */
    function sendSessionInvite(contentId, dataSize, flags) {
        return NetworkSendSessionInvite(contentId, dataSize, 0, flags);
    }
    network.sendSessionInvite = sendSessionInvite;
    /**
     * enum eSessionFlags
     * {
     * SESSION_FLAG_NONE = 0,
     * SF_INSTANCE = (1 << 0),
     * SF_MATCH = (1 << 1),
     * SF_PRIVATE = (1 << 2),
     * SF_BLOCK_INVITES = (1 << 3),
     * SF_BLOCK_JOIN_VIA_PRESENCE = (1 << 4),
     * SF_BLOCK_NON_HOST_INVITES = (1 << 5),
     * SF_BLOCK_IN_PROGRESS_MATCHMAKING_BACKFILL = (1 << 6),
     * SF_BLOCK_IN_GAMEPLAY_MATCHMAKING_BACKFILL = (1 << 7),
     * SF_BLOCK_INVITES_TEMPORARY = (1 << 8),
     * SF_IN_GAMEPLAY = (1 << 9),
     * SF_COMPETITIVE = (1 << 10),
     * SF_MATCHMAKING_BACKFILL_IS_BLOCKED = (1 << 11)
     * };
     *
     * Hash: 0xE546BDA1B3E288EE | Since: 1207
     */
    function sessionAddSessionFlags(flags) {
        return NetworkSessionAddSessionFlags(flags);
    }
    network.sessionAddSessionFlags = sessionAddSessionFlags;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0x4DEC5000F7B508F0 | Since: 1311
     */
    function sessionAreSessionIdsEqual() {
        return NetworkSessionAreSessionIdsEqual();
    }
    network.sessionAreSessionIdsEqual = sessionAreSessionIdsEqual;
    /**
     * No comment provided
     *
     * Hash: 0xE72E5C1289BD1F40 | Since: 1207
     */
    function sessionCancelRequest() {
        return NetworkSessionCancelRequest();
    }
    network.sessionCancelRequest = sessionCancelRequest;
    /**
     * Note: this native was added in build 1311.23
     *
     * Hash: 0xE9B356C330C0A806 | Since: 1311
     */
    function sessionGetSessionId() {
        return NetworkSessionGetSessionId();
    }
    network.sessionGetSessionId = sessionGetSessionId;
    /**
     * Returns result of session request:
     * 0 - NOT_FOUND
     * 1 - IN_PROGRESS
     * 2 - TIMEOUT
     * 3 - PLAYER_OFFLINE
     * 4 - GANG_MEMBERS_CHANGED
     * 5 - PLAYER_CANCELLED
     * 6 - PLAYER_SET_TOO_LARGE
     * 7 - MATCH_ACCEPTED
     * 8 - OTHER
     *
     * Hash: 0x0DD051B1BF4B8BD6 | Since: 1207
     */
    function sessionGetSessionRequestResult() {
        return NetworkSessionGetSessionRequestResult();
    }
    network.sessionGetSessionRequestResult = sessionGetSessionRequestResult;
    /**
     * No comment provided
     *
     * Hash: 0x0F44A5C78D114922 | Since: 1207
     */
    function sessionIsNsrrSuccess() {
        return NetworkSessionIsNsrrSuccess();
    }
    network.sessionIsNsrrSuccess = sessionIsNsrrSuccess;
    /**
     * No comment provided
     *
     * Hash: 0x9E762A595CF88E4A | Since: 1207
     */
    function sessionIsRequestInProgressByQueueGroup(queueGroup) {
        return NetworkSessionIsRequestInProgressByQueueGroup(queueGroup);
    }
    network.sessionIsRequestInProgressByQueueGroup = sessionIsRequestInProgressByQueueGroup;
    /**
     * Only used in R* Script net_rolling_playlist
     *
     * Hash: 0x8F9DB6CD03B42B58 | Since: 1436
     */
    function sessionPlaylistGetUpcomingContent() {
        NetworkSessionPlaylistGetUpcomingContent();
    }
    network.sessionPlaylistGetUpcomingContent = sessionPlaylistGetUpcomingContent;
    /**
     * Only used in R* Script net_rolling_playlist
     *
     * Hash: 0xBDE605F925B07127 | Since: 1436
     */
    function sessionPlaylistGoToNextContent() {
        NetworkSessionPlaylistGoToNextContent();
    }
    network.sessionPlaylistGoToNextContent = sessionPlaylistGoToNextContent;
    /**
     * No comment provided
     *
     * Hash: 0x3215BBE34D3418C5 | Since: 1207
     */
    function sessionRemovePlayerFlags(flags) {
        return NetworkSessionRemovePlayerFlags(flags);
    }
    network.sessionRemovePlayerFlags = sessionRemovePlayerFlags;
    /**
     * No comment provided
     *
     * Hash: 0x4F4672457FF597D1 | Since: 1436
     */
    function sessionRequestSessionNominated(flags, userHash) {
        return NetworkSessionRequestSessionNominated(flags, userHash, 0);
    }
    network.sessionRequestSessionNominated = sessionRequestSessionNominated;
    /**
     * category:
     * enum eOnCallType
     * {
     * NETWORK_SESSION_REQUEST_ON_CALL_TYPE_STORY = 2,
     * NETWORK_SESSION_REQUEST_ON_CALL_TYPE_MATCH = 3
     * };
     *
     * Hash: 0x23D9C1F2E4098EDC | Since: 1207
     */
    function sessionRequestSessionOnCall(flags, category, userHash) {
        return NetworkSessionRequestSessionOnCall(flags, category, userHash);
    }
    network.sessionRequestSessionOnCall = sessionRequestSessionOnCall;
    /**
     * No comment provided
     *
     * Hash: 0x0AE241A4A9ADEEEC | Since: 1207
     */
    function sessionSetPlayerFlags(flags) {
        return NetworkSessionSetPlayerFlags(flags);
    }
    network.sessionSetPlayerFlags = sessionSetPlayerFlags;
    /**
     * No comment provided
     *
     * Hash: 0xF20B18A330E6DB5C | Since: 1207
     */
    function sessionTransitionToSession() {
        return NetworkSessionTransitionToSession();
    }
    network.sessionTransitionToSession = sessionTransitionToSession;
    /**
     * No comment provided
     *
     * Hash: 0xFBF1ECFB39A77B5F | Since: 1207
     */
    function setInStaticSpectatorMode(toggle, pos) {
        NetworkSetInStaticSpectatorMode(toggle, pos.x, pos.y, pos.z);
    }
    network.setInStaticSpectatorMode = setInStaticSpectatorMode;
    /**
     * No comment provided
     *
     * Hash: 0xEEB7818B1D307212 | Since: 1207
     */
    function spawnConfigAddExclusionVolume(volume) {
        NetworkSpawnConfigAddExclusionVolume(volume);
    }
    network.spawnConfigAddExclusionVolume = spawnConfigAddExclusionVolume;
    /**
     * No comment provided
     *
     * Hash: 0xEB6027FD1B4600D5 | Since: 1207
     */
    function spawnConfigAddPropertyPreference(configProperty, include, weight) {
        NetworkSpawnConfigAddPropertyPreference(configProperty, include, weight);
    }
    network.spawnConfigAddPropertyPreference = spawnConfigAddPropertyPreference;
    /**
     * No comment provided
     *
     * Hash: 0x44D59EC597BBF348 | Since: 1207
     */
    function spawnConfigAddPropertyScripted(configProperty, include) {
        NetworkSpawnConfigAddPropertyScripted(configProperty, include);
    }
    network.spawnConfigAddPropertyScripted = spawnConfigAddPropertyScripted;
    /**
     * No comment provided
     *
     * Hash: 0xFD1AC0B3858F224C | Since: 1207
     */
    function spawnConfigAddSpawnPoint(pos, heading) {
        NetworkSpawnConfigAddSpawnPoint(pos.x, pos.y, pos.z, heading);
    }
    network.spawnConfigAddSpawnPoint = spawnConfigAddSpawnPoint;
    /**
     * No comment provided
     *
     * Hash: 0xA35E7BF20FA269E0 | Since: 1207
     */
    function spawnConfigRemoveExclusionVolume(volume) {
        NetworkSpawnConfigRemoveExclusionVolume(volume);
    }
    network.spawnConfigRemoveExclusionVolume = spawnConfigRemoveExclusionVolume;
    /**
     * No comment provided
     *
     * Hash: 0x89EC2FC89ECB1005 | Since: 1207
     */
    function spawnConfigSearchInProgress() {
        return NetworkSpawnConfigSearchInProgress();
    }
    network.spawnConfigSearchInProgress = spawnConfigSearchInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x765E60A1DCB8B1CE | Since: 1207
     */
    function spawnConfigSetCancelSearch() {
        NetworkSpawnConfigSetCancelSearch();
    }
    network.spawnConfigSetCancelSearch = spawnConfigSetCancelSearch;
    /**
     * No comment provided
     *
     * Hash: 0xBDCC671B911040F9 | Since: 1207
     */
    function spawnConfigSetLevelWaterDepth(waterDepthLevel) {
        NetworkSpawnConfigSetLevelWaterDepth(waterDepthLevel);
    }
    network.spawnConfigSetLevelWaterDepth = spawnConfigSetLevelWaterDepth;
    /**
     * No comment provided
     *
     * Hash: 0xD7F6781A0ABAF6FB | Since: 1207
     */
    function netToAnimScene(netId) {
        return NetToAnimScene(netId);
    }
    network.netToAnimScene = netToAnimScene;
    /**
     * No comment provided
     *
     * Hash: 0xD08066E00D26C448 | Since: 1207
     */
    function netToPropset(netId) {
        return NetToPropset(netId);
    }
    network.netToPropset = netToPropset;
    /**
     * No comment provided
     *
     * Hash: 0xCBAC13F065C47596 | Since: 1207
     */
    function pedmugshotGetStatus() {
        return PedmugshotGetStatus();
    }
    network.pedmugshotGetStatus = pedmugshotGetStatus;
    /**
     * No comment provided
     *
     * Hash: 0xFBC30B70B3CDB87E | Since: 1207
     */
    function pedmugshotRequestSend() {
        return PedmugshotRequestSend();
    }
    network.pedmugshotRequestSend = pedmugshotRequestSend;
    /**
     * No comment provided
     *
     * Hash: 0xCD954F330693F5F2 | Since: 1207
     */
    function pedmugshotTake() {
        return PedmugshotTake();
    }
    network.pedmugshotTake = pedmugshotTake;
    /**
     * No comment provided
     *
     * Hash: 0x74F99EF7EF503398 | Since: 1207
     */
    function propsetToNet(propSet) {
        return PropsetToNet(propSet);
    }
    network.propsetToNet = propsetToNet;
    /**
     * No comment provided
     *
     * Hash: 0xA197C35F73AC0F12 | Since: 1207
     */
    function reportPlayer(player, reportType, description, horseName) {
        const _player = player instanceof Player ? player.localId() : player;
        ReportPlayer(_player, reportType, description, horseName);
    }
    network.reportPlayer = reportPlayer;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0x356F9FB0698C1FEB | Since: 1207
     */
    function requestPedshotTextureLocalBackupDownload(player, personaPhotoLocalCacheType) {
        return RequestPedshotTextureLocalBackupDownload(player, personaPhotoLocalCacheType);
    }
    network.requestPedshotTextureLocalBackupDownload = requestPedshotTextureLocalBackupDownload;
    /**
     * Only used in R* SP Script map_app_event_handler
     *
     * Hash: 0xCAF4CA2F87779F8F | Since: 1207
     */
    function requestPedshotTextureLocalDownload() {
        return RequestPedshotTextureLocalDownload(0);
    }
    network.requestPedshotTextureLocalDownload = requestPedshotTextureLocalDownload;
    /**
     * No comment provided
     *
     * Hash: 0xB5C4B18B12A2AF23 | Since: 1207
     */
    function requestPedshotTextureMultiplayerDownload() {
        return RequestPedshotTextureMultiplayerDownload(0);
    }
    network.requestPedshotTextureMultiplayerDownload = requestPedshotTextureMultiplayerDownload;
    /**
     * No comment provided
     *
     * Hash: 0x51D99497ABF3F451 | Since: 1207
     */
    function setDoored(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        SetDoorNetworked(doorHash);
    }
    network.setDoored = setDoored;
    /**
     * No comment provided
     *
     * Hash: 0xC1E1A3D5ED7617B8 | Since: 1207
     */
    function setDoorUned(toggle) {
        SetDoorUnnetworked(undefined, toggle);
    }
    network.setDoorUned = setDoorUned;
    /**
     * No comment provided
     *
     * Hash: 0xEE5AE9956743BA20 | Since: 1207
     */
    function setEntityGhostedToLocalPlayer(entity, toggle) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetEntityGhostedToLocalPlayer(_entity, toggle);
    }
    network.setEntityGhostedToLocalPlayer = setEntityGhostedToLocalPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xDFFC15AA63D04AAB | Since: 1207
     */
    function setLaunchParamString(params) {
        SetLaunchParamString(params);
    }
    network.setLaunchParamString = setLaunchParamString;
    /**
     * No comment provided
     *
     * Hash: 0x668AF6E4933AC13F | Since: 1207
     */
    function setLaunchParamValue(paramName, value) {
        SetLaunchParamValue(paramName, value);
    }
    network.setLaunchParamValue = setLaunchParamValue;
    /**
     * No comment provided
     *
     * Hash: 0xD041A32992A55F84 | Since: 1207
     */
    function setLocalPlayerDamageMultiplierForPlayer(player, damageMultiplier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetLocalPlayerDamageMultiplierForPlayer(_player, damageMultiplier);
    }
    network.setLocalPlayerDamageMultiplierForPlayer = setLocalPlayerDamageMultiplierForPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x442B4347B6EC36E8 | Since: 1207
     */
    function setRespotTimer(entity, timer) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetNetworkRespotTimer(_entity, timer, false);
    }
    network.setRespotTimer = setRespotTimer;
    /**
     * _SET_PLAYER_V* - _SET_S*
     *
     * Hash: 0xDCA6ABDB9288FBE4 | Since: 1207
     */
    function setPlayerVisibilityToLocalPlayerDisabled(player, disabled) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerVisibilityToLocalPlayerDisabled(_player, disabled);
    }
    network.setPlayerVisibilityToLocalPlayerDisabled = setPlayerVisibilityToLocalPlayerDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x777D0571A466B520 | Since: 1207
     */
    function setSocialMatchmakingAllowed(toggle) {
        SetSocialMatchmakingAllowed(toggle);
    }
    network.setSocialMatchmakingAllowed = setSocialMatchmakingAllowed;
    /**
     * No comment provided
     *
     * Hash: 0x7A17B7981560FFA5 | Since: 1207
     */
    function textureDownloadReleaseByName(name) {
        TextureDownloadReleaseByName(name);
    }
    network.textureDownloadReleaseByName = textureDownloadReleaseByName;
    /**
     * No comment provided
     *
     * Hash: 0xE2C3CEC3C0903A00 | Since: 1207
     */
    function textureDownloadTextureNameIsValid(name) {
        return TextureDownloadTextureNameIsValid(name);
    }
    network.textureDownloadTextureNameIsValid = textureDownloadTextureNameIsValid;
    /**
     * Checks if the user has ROS privilege 14.
     *
     * Hash: 0x6506BFA755FB209C | Since: 1207
     */
    function ugcHasPrivilege() {
        return UgcHasPrivilege();
    }
    network.ugcHasPrivilege = ugcHasPrivilege;
    /**
     * No comment provided
     *
     * Hash: 0xE42D1042F09865FE | Since: 1355
     */
    function ugcIsBookMarked(contentId) {
        return UgcIsBookMarked(contentId);
    }
    network.ugcIsBookMarked = ugcIsBookMarked;
    /**
     * Returns ugcRequestId
     *
     * Hash: 0x8C109958C9BB559D | Since: 1207
     */
    function ugcQueryByCategory(categoryType, maxGet, contentTypeName) {
        return UgcQueryByCategory(categoryType, 0, maxGet, contentTypeName, 0, false);
    }
    network.ugcQueryByCategory = ugcQueryByCategory;
    /**
     * Returns ugcRequestId
     *
     * Hash: 0x69D22E183580113F | Since: 1207
     */
    function ugcQueryByContentId(contentId, latestVersion, contentTypeName) {
        return UgcQueryByContentId(contentId, latestVersion, contentTypeName);
    }
    network.ugcQueryByContentId = ugcQueryByContentId;
    /**
     * Returns ugcRequestId
     *
     * Hash: 0xF40EF49B3099E98E | Since: 1207
     */
    function ugcQueryByContentType(maxGet, contentTypeName) {
        return UgcQueryByContentType(0, maxGet, contentTypeName, 0, 0, 0);
    }
    network.ugcQueryByContentType = ugcQueryByContentType;
    /**
     * No comment provided
     *
     * Hash: 0x98539FC453AEA639 | Since: 1207
     */
    function ugcQueryGetBookMarked(index) {
        return UgcQueryGetBookMarked(undefined, index);
    }
    network.ugcQueryGetBookMarked = ugcQueryGetBookMarked;
    /**
     * No comment provided
     *
     * Hash: 0xADB56322EEDFBDC9 | Since: 1207
     */
    function ugcQueryGetCreatorHandle(index) {
        return UgcQueryGetCreatorHandle(undefined, index);
    }
    network.ugcQueryGetCreatorHandle = ugcQueryGetCreatorHandle;
    /**
     * Returns string for GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO
     *
     * Hash: 0x409FE0CA6A4D1D49 | Since: 1207
     */
    function ugcQueryGetCreatorPhoto() {
        return UgcQueryGetCreatorPhoto(undefined, 0, undefined);
    }
    network.ugcQueryGetCreatorPhoto = ugcQueryGetCreatorPhoto;
    /**
     * No comment provided
     *
     * Hash: 0xE0CB4AB15CB32710 | Since: 1207
     */
    function ugcQueryGetDate(index) {
        return UgcQueryGetDate(undefined, index);
    }
    network.ugcQueryGetDate = ugcQueryGetDate;
    /**
     * No comment provided
     *
     * Hash: 0x97764E8AC6487A9A | Since: 1207
     */
    function ugcQueryGetLanguage(index) {
        return UgcQueryGetLanguage(undefined, index);
    }
    network.ugcQueryGetLanguage = ugcQueryGetLanguage;
    /**
     * No comment provided
     *
     * Hash: 0xA6BF569956C60A60 | Since: 1207
     */
    function ugcQueryGetMissionDescHash(index) {
        return UgcQueryGetMissionDescHash(undefined, index);
    }
    network.ugcQueryGetMissionDescHash = ugcQueryGetMissionDescHash;
    /**
     * No comment provided
     *
     * Hash: 0x2D053EA815702DD1 | Since: 1207
     */
    function ugcQueryGetName(index) {
        return UgcQueryGetName(undefined, index);
    }
    network.ugcQueryGetName = ugcQueryGetName;
    /**
     * No comment provided
     *
     * Hash: 0xF9F0B3028431967B | Since: 1207
     */
    function ugcQueryGetOwnerId(index) {
        return UgcQueryGetOwnerId(undefined, index);
    }
    network.ugcQueryGetOwnerId = ugcQueryGetOwnerId;
    /**
     * No comment provided
     *
     * Hash: 0xCAF50048C8D0FBA0 | Since: 1207
     */
    function ugcQueryGetPlaylistName(index) {
        return UgcQueryGetPlaylistName(undefined, index);
    }
    network.ugcQueryGetPlaylistName = ugcQueryGetPlaylistName;
    /**
     * No comment provided
     *
     * Hash: 0x104080CA9E519B00 | Since: 1207
     */
    function ugcQueryGetPosixPublishedDate() {
        return UgcQueryGetPosixPublishedDate(undefined, undefined);
    }
    network.ugcQueryGetPosixPublishedDate = ugcQueryGetPosixPublishedDate;
    /**
     * No comment provided
     *
     * Hash: 0x21A99A72B00D8002 | Since: 1207
     */
    function ugcQueryGetPosixUpdatedDate() {
        return UgcQueryGetPosixUpdatedDate(undefined, undefined);
    }
    network.ugcQueryGetPosixUpdatedDate = ugcQueryGetPosixUpdatedDate;
    /**
     * No comment provided
     *
     * Hash: 0x9993F1E11944A3DD | Since: 1207
     */
    function ugcQueryGetPublished() {
        return UgcQueryGetPublished(undefined, undefined);
    }
    network.ugcQueryGetPublished = ugcQueryGetPublished;
    /**
     * No comment provided
     *
     * Hash: 0x24CD8FAEA1368379 | Since: 1207
     */
    function ugcQueryGetRating(index) {
        return UgcQueryGetRating(undefined, index, 0);
    }
    network.ugcQueryGetRating = ugcQueryGetRating;
    /**
     * No comment provided
     *
     * Hash: 0x566CEB0542EF5ECF | Since: 1207
     */
    function ugcQueryGetRootContentId(index) {
        return UgcQueryGetRootContentId(undefined, index);
    }
    network.ugcQueryGetRootContentId = ugcQueryGetRootContentId;
    /**
     * No comment provided
     *
     * Hash: 0x63E9DCBC8B0931ED | Since: 1207
     */
    function ugcQueryGetVersion(index) {
        return UgcQueryGetVersion(undefined, index, 0);
    }
    network.ugcQueryGetVersion = ugcQueryGetVersion;
})(network || (network = {}));
export var object;
(function (object) {
    /**
     * No comment provided
     *
     * Hash: 0xE2B3B852B537C398 | Since: 1207
     */
    function allowDamageEventsForNonNetworkeds(enabled) {
        AllowDamageEventsForNonNetworkedObjects(enabled);
    }
    object.allowDamageEventsForNonNetworkeds = allowDamageEventsForNonNetworkeds;
    /**
     * No comment provided
     *
     * Hash: 0x8DC39368BDD57755 | Since: 1207
     */
    function attachPortablePickupToPed(pickupObject, ped) {
        const _pickupObject = pickupObject instanceof Object ? pickupObject.handle() : pickupObject;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AttachPortablePickupToPed(_pickupObject, _ped);
    }
    object.attachPortablePickupToPed = attachPortablePickupToPed;
    /**
     * No comment provided
     *
     * Hash: 0xB8F5062070BB6DBD | Since: 1207
     */
    function blockPickupFromPlayerCollection() {
        BlockPickupFromPlayerCollection(undefined, undefined);
    }
    object.blockPickupFromPlayerCollection = blockPickupFromPlayerCollection;
    /**
     * No comment provided
     *
     * Hash: 0x8462BE2341A55B6F | Since: 1207
     */
    function breakAllFragmentBones(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        BreakAllObjectFragmentBones(__object);
    }
    object.breakAllFragmentBones = breakAllFragmentBones;
    /**
     * No comment provided
     *
     * Hash: 0xE7E4C198B0185900 | Since: 1207
     */
    function breakFragmentChild(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        BreakObjectFragmentChild(__object, undefined, false);
    }
    object.breakFragmentChild = breakFragmentChild;
    /**
     * Old name: _GET_PICKUP_HASH
     *
     * Hash: 0x5EAAD83F8CFB4575 | Since: 1207
     */
    function convertOldPickupTypeToNew(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return ConvertOldPickupTypeToNew(pickupHash);
    }
    object.convertOldPickupTypeToNew = convertOldPickupTypeToNew;
    /**
     * flags: see CREATE_PICKUP
     *
     * Hash: 0x673966A0C0FD7171 | Since: 1207
     */
    function createAmbientPickup(pickupHash, pos, flags, value, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateAmbientPickup(pickupHash, pos.x, pos.y, pos.z, flags, value, modelHash, false, false, 0, 0);
    }
    object.createAmbientPickup = createAmbientPickup;
    /**
     * No comment provided
     *
     * Hash: 0x509D5878EB39E842 | Since: 1207
     */
    function create(modelHash, pos, isNetwork, bScriptHostObj, dynamic) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateObject(modelHash, pos.x, pos.y, pos.z, isNetwork, bScriptHostObj, dynamic, false, false);
    }
    object.create = create;
    /**
     * No comment provided
     *
     * Hash: 0x9A294B2138ABB884 | Since: 1207
     */
    function createNoOffset(modelHash, pos, isNetwork, bScriptHostObj, dynamic) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateObjectNoOffset(modelHash, pos.x, pos.y, pos.z, isNetwork, bScriptHostObj, dynamic, false);
    }
    object.createNoOffset = createNoOffset;
    /**
     * No comment provided
     *
     * Hash: 0xB6CBD40F8EA69E8A | Since: 1207
     */
    function createSkeleton(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return CreateObjectSkeleton(__object);
    }
    object.createSkeleton = createSkeleton;
    /**
     * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Placement%20Flags
     * https://github.com/femga/rdr3_discoveries/blob/master/objects/pickup_list.lua
     *
     * Hash: 0xFBA08C503DD5FA58 | Since: 1207
     */
    function createPickup(pickupHash, pos, flags, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePickup(pickupHash, pos.x, pos.y, pos.z, flags, 0, false, modelHash, 0, 0, undefined);
    }
    object.createPickup = createPickup;
    /**
     * flags: see CREATE_PICKUP
     *
     * Hash: 0x891804727E0A98B7 | Since: 1207
     */
    function createPickupRotate(pickupHash, pos, rot, flags, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePickupRotate(pickupHash, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, flags, 0, 0, false, modelHash, 0, 0, undefined);
    }
    object.createPickupRotate = createPickupRotate;
    /**
     * No comment provided
     *
     * Hash: 0x2EAF1FDB2FB55698 | Since: 1207
     */
    function createPortablePickup(pickupHash, pos, placeOnGround, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePortablePickup(pickupHash, pos.x, pos.y, pos.z, placeOnGround, modelHash);
    }
    object.createPortablePickup = createPortablePickup;
    /**
     * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0x931914268722C263 | Since: 1207
     */
    function deleteObject(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        DeleteObject(__object);
    }
    object.deleteObject = deleteObject;
    /**
     * No comment provided
     *
     * Hash: 0xCF463D1E9A0AECB1 | Since: 1207
     */
    function detachPortablePickupFromPed(pickupObject) {
        const _pickupObject = pickupObject instanceof Object ? pickupObject.handle() : pickupObject;
        DetachPortablePickupFromPed(_pickupObject);
    }
    object.detachPortablePickupFromPed = detachPortablePickupFromPed;
    /**
     * No comment provided
     *
     * Hash: 0xBFA48E2FF417213F | Since: 1207
     */
    function doesOfTypeExistAtCoords(pos, radius, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return DoesObjectOfTypeExistAtCoords(pos.x, pos.y, pos.z, radius, hash, false);
    }
    object.doesOfTypeExistAtCoords = doesOfTypeExistAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xAFC1CA75AD4074D1 | Since: 1207
     */
    function doesPickupExist(pickup) {
        return DoesPickupExist(pickup);
    }
    object.doesPickupExist = doesPickupExist;
    /**
     * No comment provided
     *
     * Hash: 0xD9EFB6DBF7DAAEA3 | Since: 1207
     */
    function doesPickupObjectExist(pickupObject) {
        const _pickupObject = pickupObject instanceof Object ? pickupObject.handle() : pickupObject;
        return DoesPickupObjectExist(_pickupObject);
    }
    object.doesPickupObjectExist = doesPickupObjectExist;
    /**
     * No comment provided
     *
     * Hash: 0xF9C36251F6E48E33 | Since: 1207
     */
    function doesPickupOfTypeExistInArea(pickupHash, pos, radius) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return DoesPickupOfTypeExistInArea(pickupHash, pos.x, pos.y, pos.z, radius);
    }
    object.doesPickupOfTypeExistInArea = doesPickupOfTypeExistInArea;
    /**
     * No comment provided
     *
     * Hash: 0x52AF537A0C5B8AAD | Since: 1207
     */
    function doesRayfireMapExist(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return DoesRayfireMapObjectExist(__object);
    }
    object.doesRayfireMapExist = doesRayfireMapExist;
    /**
     * No comment provided
     *
     * Hash: 0x160AA1B32F6139B8 | Since: 1207
     */
    function doorSystemGetDoorState(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return DoorSystemGetDoorState(doorHash);
    }
    object.doorSystemGetDoorState = doorSystemGetDoorState;
    /**
     * No comment provided
     *
     * Hash: 0x65499865FCA6E5EC | Since: 1207
     */
    function doorSystemGetOpenRatio(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return DoorSystemGetOpenRatio(doorHash);
    }
    object.doorSystemGetOpenRatio = doorSystemGetOpenRatio;
    /**
     * No comment provided
     *
     * Hash: 0x9BA001CB45CBF627 | Since: 1207
     */
    function doorSystemSetAutomaticDistance(doorHash, distance) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetAutomaticDistance(doorHash, distance);
    }
    object.doorSystemSetAutomaticDistance = doorSystemSetAutomaticDistance;
    /**
     * No comment provided
     *
     * Hash: 0x03C27E13B42A0E82 | Since: 1207
     */
    function doorSystemSetAutomaticRate(doorHash, rate) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetAutomaticRate(doorHash, rate);
    }
    object.doorSystemSetAutomaticRate = doorSystemSetAutomaticRate;
    /**
     * Door lock states:
     * enum eDoorState
     * {
     * DOORSTATE_INVALID = -1,
     * DOORSTATE_UNLOCKED,
     * DOORSTATE_LOCKED_UNBREAKABLE,
     * DOORSTATE_LOCKED_BREAKABLE,
     * DOORSTATE_HOLD_OPEN_POSITIVE,
     * DOORSTATE_HOLD_OPEN_NEGATIVE
     * };
     *
     * Hash: 0x6BAB9442830C7F53 | Since: 1207
     */
    function doorSystemSetDoorState(doorHash, state) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetDoorState(doorHash, state);
    }
    object.doorSystemSetDoorState = doorSystemSetDoorState;
    /**
     * Sets the ajar angle of a door.
     * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
     *
     * Hash: 0xB6E6FBA95C7324AC | Since: 1207
     */
    function doorSystemSetOpenRatio(doorHash, ajar, forceUpdate) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetOpenRatio(doorHash, ajar, forceUpdate);
    }
    object.doorSystemSetOpenRatio = doorSystemSetOpenRatio;
    /**
     * No comment provided
     *
     * Hash: 0xF9C1681347C8BD15 | Since: 1207
     */
    function fixFragment(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        FixObjectFragment(__object);
    }
    object.fixFragment = fixFragment;
    /**
     * No comment provided
     *
     * Hash: 0x758A5C1B3B1E1990 | Since: 1207
     */
    function forcePickupRegenerate() {
        ForcePickupRegenerate(undefined);
    }
    object.forcePickupRegenerate = forcePickupRegenerate;
    /**
     * Returns the closest object of a specified type within a given radius from a specified position
     *
     * Hash: 0xE143FA2249364369 | Since: 1207
     */
    function getClosestOfType(pos, radius, modelHash, missionScriptObject, scriptHostObject, networkObject) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetClosestObjectOfType(pos.x, pos.y, pos.z, radius, modelHash, missionScriptObject, scriptHostObject, networkObject);
    }
    object.getClosestOfType = getClosestOfType;
    /**
     * No comment provided
     *
     * Hash: 0xB6FBFD079B8D0596 | Since: 1207
     */
    function getFragmentDamageHealth() {
        return GetObjectFragmentDamageHealth(undefined, false);
    }
    object.getFragmentDamageHealth = getFragmentDamageHealth;
    /**
     * Old name: _GET_OBJECT_OFFSET_FROM_COORDS
     *
     * Hash: 0x163E252DE035A133 | Since: 1207
     */
    function getOffsetFromCoordAndHeadingInWorldCoords(pos, heading, xOffset, yOffset, zOffset) {
        return new Vector3(GetOffsetFromCoordAndHeadingInWorldCoords(pos.x, pos.y, pos.z, heading, xOffset, yOffset, zOffset));
    }
    object.getOffsetFromCoordAndHeadingInWorldCoords = getOffsetFromCoordAndHeadingInWorldCoords;
    /**
     * No comment provided
     *
     * Hash: 0x225B8B35C88029B3 | Since: 1207
     */
    function getPickupCoords(pickup) {
        return new Vector3(GetPickupCoords(pickup));
    }
    object.getPickupCoords = getPickupCoords;
    /**
     * No comment provided
     *
     * Hash: 0x5099BC55630B25AE | Since: 1207
     */
    function getPickup(pickup) {
        return GetPickupObject(pickup);
    }
    object.getPickup = getPickup;
    /**
     * No comment provided
     *
     * Hash: 0xB48FCED898292E52 | Since: 1207
     */
    function getRayfireMap(pos, radius, name) {
        return GetRayfireMapObject(pos.x, pos.y, pos.z, radius, name);
    }
    object.getRayfireMap = getRayfireMap;
    /**
     * No comment provided
     *
     * Hash: 0x260EE4FDBDF4DB01 | Since: 1207
     */
    function getRayfireMapAnimPhase(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return GetRayfireMapObjectAnimPhase(__object);
    }
    object.getRayfireMapAnimPhase = getRayfireMapAnimPhase;
    /**
     * No comment provided
     *
     * Hash: 0x6E16BC2503FF1FF0 | Since: 1207
     */
    function getSafePickupCoords() {
        return new Vector3(GetSafePickupCoords(undefined, undefined, undefined, undefined, undefined, undefined));
    }
    object.getSafePickupCoords = getSafePickupCoords;
    /**
     * No comment provided
     *
     * Hash: 0x899BA936634A322E | Since: 1207
     */
    function getStateOfRayfireMap(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return GetStateOfRayfireMapObject(__object);
    }
    object.getStateOfRayfireMap = getStateOfRayfireMap;
    /**
     * No comment provided
     *
     * Hash: 0x08F96CA6C551AD51 | Since: 1207
     */
    function getWeaponTypeFromPickupType(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return GetWeaponTypeFromPickupType(pickupHash);
    }
    object.getWeaponTypeFromPickupType = getWeaponTypeFromPickupType;
    /**
     * No comment provided
     *
     * Hash: 0x761B0E69AC4D007E | Since: 1207
     */
    function hasClosestOfTypeBeenBroken(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return HasClosestObjectOfTypeBeenBroken(0, 0, 0, 0, modelHash, undefined);
    }
    object.hasClosestOfTypeBeenBroken = hasClosestOfTypeBeenBroken;
    /**
     * No comment provided
     *
     * Hash: 0x8ABFB70C49CC43E2 | Since: 1207
     */
    function hasBeenBroken() {
        return HasObjectBeenBroken(undefined);
    }
    object.hasBeenBroken = hasBeenBroken;
    /**
     * No comment provided
     *
     * Hash: 0x80EC48E6679313F9 | Since: 1207
     */
    function hasPickupBeenCollected(pickup) {
        return HasPickupBeenCollected(pickup);
    }
    object.hasPickupBeenCollected = hasPickupBeenCollected;
    /**
     * No comment provided
     *
     * Hash: 0xC531EE8A1145A149 | Since: 1207
     */
    function isDoorClosed(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return IsDoorClosed(doorHash);
    }
    object.isDoorClosed = isDoorClosed;
    /**
     * No comment provided
     *
     * Hash: 0xC153C43EA202C8C1 | Since: 1207
     */
    function isDoorRegisteredWithSystem(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return IsDoorRegisteredWithSystem(doorHash);
    }
    object.isDoorRegisteredWithSystem = isDoorRegisteredWithSystem;
    /**
     * No comment provided
     *
     * Hash: 0x0378C08504160D0D | Since: 1207
     */
    function isAPortablePickup(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return IsObjectAPortablePickup(__object);
    }
    object.isAPortablePickup = isAPortablePickup;
    /**
     * No comment provided
     *
     * Hash: 0x8B32ACE6326A7546 | Since: 1207
     */
    function isVisible(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return IsObjectVisible(__object);
    }
    object.isVisible = isVisible;
    /**
     * No comment provided
     *
     * Hash: 0x2A70BAE8883E4C81 | Since: 1207
     */
    function isPointInAngledArea() {
        return IsPointInAngledArea(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false);
    }
    object.isPointInAngledArea = isPointInAngledArea;
    /**
     * Old name: _MARK_OBJECT_FOR_DELETION
     *
     * Hash: 0xADBE4809F19F927A | Since: 1207
     */
    function onlyCleanUpWhenOutOfRange(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        OnlyCleanUpObjectWhenOutOfRange(__object);
    }
    object.onlyCleanUpWhenOutOfRange = onlyCleanUpWhenOutOfRange;
    /**
     * No comment provided
     *
     * Hash: 0x58A850EAEE20FAA3 | Since: 1207
     */
    function placeOnGroundProperly(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return PlaceObjectOnGroundProperly(__object, false);
    }
    object.placeOnGroundProperly = placeOnGroundProperly;
    /**
     * No comment provided
     *
     * Hash: 0x92AEFB5F6E294023 | Since: 1207
     */
    function preventCollectionOfPortablePickup(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        PreventCollectionOfPortablePickup(__object, false, false);
    }
    object.preventCollectionOfPortablePickup = preventCollectionOfPortablePickup;
    /**
     * No comment provided
     *
     * Hash: 0x27F9D613092159CF | Since: 1207
     */
    function removeAllPickupsOfType(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        RemoveAllPickupsOfType(pickupHash);
    }
    object.removeAllPickupsOfType = removeAllPickupsOfType;
    /**
     * No comment provided
     *
     * Hash: 0x464D8E1427156FE4 | Since: 1207
     */
    function removeDoorFromSystem(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        RemoveDoorFromSystem(doorHash);
    }
    object.removeDoorFromSystem = removeDoorFromSystem;
    /**
     * No comment provided
     *
     * Hash: 0x3288D8ACAECD2AB2 | Since: 1207
     */
    function removePickup(pickup) {
        RemovePickup(pickup);
    }
    object.removePickup = removePickup;
    /**
     * No comment provided
     *
     * Hash: 0x406137F8EF90EAF5 | Since: 1207
     */
    function setActivatePhysicsAsSoonAsItIsUnfrozen(_object, toggle) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(__object, toggle);
    }
    object.setActivatePhysicsAsSoonAsItIsUnfrozen = setActivatePhysicsAsSoonAsItIsUnfrozen;
    /**
     * No comment provided
     *
     * Hash: 0xE124889AE0521FCF | Since: 1207
     */
    function setCustomTexturesOn(_object, txdHash) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        if (typeof txdHash === 'string')
            txdHash = misc.getHashKey(txdHash);
        SetCustomTexturesOnObject(__object, txdHash, undefined, undefined);
    }
    object.setCustomTexturesOn = setCustomTexturesOn;
    /**
     * No comment provided
     *
     * Hash: 0xF538081986E49E9D | Since: 1207
     */
    function setForceThisFrame(pos) {
        SetForceObjectThisFrame(pos.x, pos.y, pos.z, 0);
    }
    object.setForceThisFrame = setForceThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x78857FC65CADB909 | Since: 1207
     */
    function setLocalPlayerCanCollectPortablePickups(toggle) {
        SetLocalPlayerCanCollectPortablePickups(toggle);
    }
    object.setLocalPlayerCanCollectPortablePickups = setLocalPlayerCanCollectPortablePickups;
    /**
     * Maximum amount of pickup models that can be disallowed is 10.
     *
     * Old name: _SET_LOCAL_PLAYER_CAN_USE_PICKUPS_WITH_THIS_MODEL
     *
     * Hash: 0x88EAEC617CD26926 | Since: 1207
     */
    function setLocalPlayerPermittedToCollectPickupsWithModel(modelHash, toggle) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetLocalPlayerPermittedToCollectPickupsWithModel(modelHash, toggle);
    }
    object.setLocalPlayerPermittedToCollectPickupsWithModel = setLocalPlayerPermittedToCollectPickupsWithModel;
    /**
     * No comment provided
     *
     * Hash: 0x0BF3B3BD47D79C08 | Since: 1207
     */
    function setMaxNumPortablePickupsCarriedByPlayer(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetMaxNumPortablePickupsCarriedByPlayer(modelHash, 0);
    }
    object.setMaxNumPortablePickupsCarriedByPlayer = setMaxNumPortablePickupsCarriedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x4D89D607CB3DD1D2 | Since: 1207
     */
    function setAllowLowLodBuoyancy(_object, toggle) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectAllowLowLodBuoyancy(__object, toggle);
    }
    object.setAllowLowLodBuoyancy = setAllowLowLodBuoyancy;
    /**
     * Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
     *
     * Other parameters seem to be unknown.
     *
     * p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
     * p3: seems similar to p2
     * p4: makes obj fall slower the higher the value
     * p5: similar to p4
     *
     * Hash: 0xF6DF6E90DE7DF90F | Since: 1207
     */
    function setPhysicsParams(_object, weight, gravity, buoyancy) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectPhysicsParams(__object, weight, 0, 0, 0, 0, gravity, 0, 0, 0, 0, buoyancy);
    }
    object.setPhysicsParams = setPhysicsParams;
    /**
     * No comment provided
     *
     * Hash: 0xEB6F1A9B5510A5D2 | Since: 1207
     */
    function setTakesDamageFromCollidingWithBuildings(_object, enabled) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectTakesDamageFromCollidingWithBuildings(__object, enabled);
    }
    object.setTakesDamageFromCollidingWithBuildings = setTakesDamageFromCollidingWithBuildings;
    /**
     * No comment provided
     *
     * Hash: 0x8A7391690F5AFD81 | Since: 1207
     */
    function setTargettable(_object, targettable) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectTargettable(__object, targettable);
    }
    object.setTargettable = setTargettable;
    /**
     * Alt name: _SET_OBJECT_TINT
     *
     * Old name: _SET_OBJECT_TEXTURE_VARIATION
     *
     * Hash: 0x971DA0055324D033 | Since: 1207
     */
    function setTintIndex(_object, textureVariation) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectTintIndex(__object, textureVariation);
    }
    object.setTintIndex = setTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0x634C19521485AB25 | Since: 1207
     */
    function setPickupDoNotAutoPlaceOnGround(pickupObject) {
        const _pickupObject = pickupObject instanceof Object ? pickupObject.handle() : pickupObject;
        SetPickupDoNotAutoPlaceOnGround(_pickupObject);
    }
    object.setPickupDoNotAutoPlaceOnGround = setPickupDoNotAutoPlaceOnGround;
    /**
     * No comment provided
     *
     * Hash: 0x318516E02DE3ECE2 | Since: 1207
     */
    function setPickupGenerationRangeMultiplier(multiplier) {
        SetPickupGenerationRangeMultiplier(multiplier);
    }
    object.setPickupGenerationRangeMultiplier = setPickupGenerationRangeMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x81218CE01B672219 | Since: 1207
     */
    function setPickupHiddenWhenUncollectable() {
        SetPickupHiddenWhenUncollectable(undefined, undefined);
    }
    object.setPickupHiddenWhenUncollectable = setPickupHiddenWhenUncollectable;
    /**
     * No comment provided
     *
     * Hash: 0x92E87F60F21A0C3A | Since: 1207
     */
    function setPickupNotLootable() {
        SetPickupNotLootable(undefined, undefined);
    }
    object.setPickupNotLootable = setPickupNotLootable;
    /**
     * No comment provided
     *
     * Hash: 0x1607C7D9B3021DF5 | Since: 1207
     */
    function setPickupParticleFxHighlight() {
        SetPickupParticleFxHighlight(undefined, undefined);
    }
    object.setPickupParticleFxHighlight = setPickupParticleFxHighlight;
    /**
     * No comment provided
     *
     * Hash: 0xEB9740A38FD6D634 | Since: 1207
     */
    function setPickupParticleFxSpawn() {
        SetPickupParticleFxSpawn(undefined, undefined);
    }
    object.setPickupParticleFxSpawn = setPickupParticleFxSpawn;
    /**
     * No comment provided
     *
     * Hash: 0x78015C9B4B3ECC9D | Since: 1207
     */
    function setPickupRegenerationTime(pickup, duration) {
        SetPickupRegenerationTime(pickup, duration);
    }
    object.setPickupRegenerationTime = setPickupRegenerationTime;
    /**
     * No comment provided
     *
     * Hash: 0x4A8CB328CD6F1C9B | Since: 1207
     */
    function setPickupUncollectable() {
        SetPickupUncollectable(undefined, undefined);
    }
    object.setPickupUncollectable = setPickupUncollectable;
    /**
     * No comment provided
     *
     * Hash: 0x5C29F698D404C5E1 | Since: 1207
     */
    function setStateOfRayfireMap(_object, state) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetStateOfRayfireMapObject(__object, state);
    }
    object.setStateOfRayfireMap = setStateOfRayfireMap;
    /**
     * No comment provided
     *
     * Hash: 0x53E0DF1A2A3CF0CA | Since: 1207
     */
    function setTeamPickup(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetTeamPickupObject(__object, undefined, false);
    }
    object.setTeamPickup = setTeamPickup;
    /**
     * No comment provided
     *
     * Hash: 0x2FDFF4107B8C1147 | Since: 1207
     */
    function slide(_object, toX, toY, toZ, speedX, speedY, speedZ, collision) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return SlideObject(__object, toX, toY, toZ, speedX, speedY, speedZ, collision);
    }
    object.slide = slide;
    /**
     * No comment provided
     *
     * Hash: 0xF92099527DB8E2A7 | Since: 1207
     */
    function suppressPickupRewardType(rewardType, suppress) {
        SuppressPickupRewardType(rewardType, suppress);
    }
    object.suppressPickupRewardType = suppressPickupRewardType;
    /**
     * No comment provided
     *
     * Hash: 0xB252BC036B525623 | Since: 1207
     */
    function trackVisibility(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        TrackObjectVisibility(__object);
    }
    object.trackVisibility = trackVisibility;
    /**
     * No comment provided
     *
     * Hash: 0x08C5825A2932EA7B | Since: 1207
     */
    function _0x08C5825A2932EA7B() {
        return Citizen.invokeNative('0x08C5825A2932EA7B', undefined);
    }
    object._0x08C5825A2932EA7B = _0x08C5825A2932EA7B;
    /**
     * Params: p1 = 23 in R* Scripts
     *
     * Hash: 0x0943113E02322164 | Since: 1207
     */
    function _0x0943113E02322164(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return Citizen.invokeNative('0x0943113E02322164', __object, 0);
    }
    object._0x0943113E02322164 = _0x0943113E02322164;
    /**
     * something to do with doors lockdown when navmesh is swapping?UPDATE_WORLD_STATE  seems to be for unlocking something
     *
     * Hash: 0x0C0A373D181BF900 | Since: 1207
     */
    function _0x0C0A373D181BF900(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        Citizen.invokeNative('0x0C0A373D181BF900', doorHash);
    }
    object._0x0C0A373D181BF900 = _0x0C0A373D181BF900;
    /**
     * _SET_A(MBIENT_PICKUP_?)*
     *
     * Hash: 0x1F5E07E14A86FAFC | Since: 1207
     */
    function _0x1F5E07E14A86FAFC() {
        Citizen.invokeNative('0x1F5E07E14A86FAFC', false);
    }
    object._0x1F5E07E14A86FAFC = _0x1F5E07E14A86FAFC;
    /**
     * No comment provided
     *
     * Hash: 0x20135AF9C10D2A3D | Since: 1207
     */
    function _0x20135AF9C10D2A3D() {
        return Citizen.invokeNative('0x20135AF9C10D2A3D', undefined);
    }
    object._0x20135AF9C10D2A3D = _0x20135AF9C10D2A3D;
    /**
     * No comment provided
     *
     * Hash: 0x22031584496CFB70 | Since: 1207
     */
    function _0x22031584496CFB70() {
        Citizen.invokeNative('0x22031584496CFB70', undefined, undefined);
    }
    object._0x22031584496CFB70 = _0x22031584496CFB70;
    /**
     * No comment provided
     *
     * Hash: 0x235C863DA77BD88D | Since: 1207
     */
    function _0x235C863DA77BD88D() {
        return Citizen.invokeNative('0x235C863DA77BD88D', undefined, undefined, undefined);
    }
    object._0x235C863DA77BD88D = _0x235C863DA77BD88D;
    /**
     * No comment provided
     *
     * Hash: 0x250EBB11E81A10BE | Since: 1207
     */
    function _0x250EBB11E81A10BE() {
        return Citizen.invokeNative('0x250EBB11E81A10BE', undefined);
    }
    object._0x250EBB11E81A10BE = _0x250EBB11E81A10BE;
    /**
     * No comment provided
     *
     * Hash: 0x2BF1953C0C21AC88 | Since: 1207
     */
    function _0x2BF1953C0C21AC88() {
        return Citizen.invokeNative('0x2BF1953C0C21AC88', undefined);
    }
    object._0x2BF1953C0C21AC88 = _0x2BF1953C0C21AC88;
    /**
     * No comment provided
     *
     * Hash: 0x3A77DAE8B4FD7586 | Since: 1207
     */
    function _0x3A77DAE8B4FD7586() {
        Citizen.invokeNative('0x3A77DAE8B4FD7586', undefined, undefined);
    }
    object._0x3A77DAE8B4FD7586 = _0x3A77DAE8B4FD7586;
    /**
     * No comment provided
     *
     * Hash: 0x3DF1A0A58498E209 | Since: 1436
     */
    function _0x3DF1A0A58498E209(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        Citizen.invokeNative('0x3DF1A0A58498E209', __object, undefined);
    }
    object._0x3DF1A0A58498E209 = _0x3DF1A0A58498E209;
    /**
     * No comment provided
     *
     * Hash: 0x3E2616E7EA539480 | Since: 1207
     */
    function _0x3E2616E7EA539480() {
        return Citizen.invokeNative('0x3E2616E7EA539480', undefined);
    }
    object._0x3E2616E7EA539480 = _0x3E2616E7EA539480;
    /**
     * No comment provided
     *
     * Hash: 0x46CBCF0E98A4E156 | Since: 1207
     */
    function _0x46CBCF0E98A4E156() {
        Citizen.invokeNative('0x46CBCF0E98A4E156', undefined, undefined);
    }
    object._0x46CBCF0E98A4E156 = _0x46CBCF0E98A4E156;
    /**
     * No comment provided
     *
     * Hash: 0x491439AEF410A2FC | Since: 1207
     */
    function _0x491439AEF410A2FC() {
        Citizen.invokeNative('0x491439AEF410A2FC', undefined);
    }
    object._0x491439AEF410A2FC = _0x491439AEF410A2FC;
    /**
     * No comment provided
     *
     * Hash: 0x4AE07EBA3462C5D5 | Since: 1207
     */
    function _0x4AE07EBA3462C5D5() {
        Citizen.invokeNative('0x4AE07EBA3462C5D5', undefined, undefined);
    }
    object._0x4AE07EBA3462C5D5 = _0x4AE07EBA3462C5D5;
    /**
     * No comment provided
     *
     * Hash: 0x4D8611DFE1126478 | Since: 1207
     */
    function _0x4D8611DFE1126478() {
        return Citizen.invokeNative('0x4D8611DFE1126478', undefined);
    }
    object._0x4D8611DFE1126478 = _0x4D8611DFE1126478;
    /**
     * No comment provided
     *
     * Hash: 0x5230BF34EB0EC645 | Since: 1207
     */
    function _0x5230BF34EB0EC645() {
        Citizen.invokeNative('0x5230BF34EB0EC645', undefined);
    }
    object._0x5230BF34EB0EC645 = _0x5230BF34EB0EC645;
    /**
     * No comment provided
     *
     * Hash: 0x57C242543B7B8FB9 | Since: 1207
     */
    function _0x57C242543B7B8FB9() {
        Citizen.invokeNative('0x57C242543B7B8FB9', undefined, undefined);
    }
    object._0x57C242543B7B8FB9 = _0x57C242543B7B8FB9;
    /**
     * No comment provided
     *
     * Hash: 0x58DE624FA7FB0E7F | Since: 1207
     */
    function _0x58DE624FA7FB0E7F() {
        return Citizen.invokeNative('0x58DE624FA7FB0E7F', undefined);
    }
    object._0x58DE624FA7FB0E7F = _0x58DE624FA7FB0E7F;
    /**
     * No comment provided
     *
     * Hash: 0x614D0B4533F842D3 | Since: 1207
     */
    function _0x614D0B4533F842D3() {
        return Citizen.invokeNative('0x614D0B4533F842D3', undefined);
    }
    object._0x614D0B4533F842D3 = _0x614D0B4533F842D3;
    /**
     * No comment provided
     *
     * Hash: 0x6579860A5558524A | Since: 1207
     */
    function _0x6579860A5558524A() {
        Citizen.invokeNative('0x6579860A5558524A', undefined, undefined);
    }
    object._0x6579860A5558524A = _0x6579860A5558524A;
    /**
     * No comment provided
     *
     * Hash: 0x6E2AA80BB0C03728 | Since: 1207
     */
    function _0x6E2AA80BB0C03728() {
        return Citizen.invokeNative('0x6E2AA80BB0C03728', undefined, undefined);
    }
    object._0x6E2AA80BB0C03728 = _0x6E2AA80BB0C03728;
    /**
     * No comment provided
     *
     * Hash: 0x7D4411D6736CD295 | Since: 1207
     */
    function _0x7D4411D6736CD295() {
        return Citizen.invokeNative('0x7D4411D6736CD295', undefined, undefined);
    }
    object._0x7D4411D6736CD295 = _0x7D4411D6736CD295;
    /**
     * something to do with doors lockdown when navmesh is swapping? UPDATE_WORLD_STATE, seems to be for locking something
     *
     * Hash: 0x7F458B543006C8FE | Since: 1207
     */
    function _0x7F458B543006C8FE(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        Citizen.invokeNative('0x7F458B543006C8FE', doorHash, 0);
    }
    object._0x7F458B543006C8FE = _0x7F458B543006C8FE;
    /**
     * No comment provided
     *
     * Hash: 0x7FCD49388BC9B775 | Since: 1207
     */
    function _0x7FCD49388BC9B775() {
        Citizen.invokeNative('0x7FCD49388BC9B775', undefined, undefined);
    }
    object._0x7FCD49388BC9B775 = _0x7FCD49388BC9B775;
    /**
     * No comment provided
     *
     * Hash: 0x9A74A9CADFA8A598 | Since: 1207
     */
    function _0x9A74A9CADFA8A598() {
        Citizen.invokeNative('0x9A74A9CADFA8A598', undefined);
    }
    object._0x9A74A9CADFA8A598 = _0x9A74A9CADFA8A598;
    /**
     * No comment provided
     *
     * Hash: 0x9F52AD67D1A91BAD | Since: 1207
     */
    function _0x9F52AD67D1A91BAD() {
        return Citizen.invokeNative('0x9F52AD67D1A91BAD', undefined, undefined);
    }
    object._0x9F52AD67D1A91BAD = _0x9F52AD67D1A91BAD;
    /**
     * No comment provided
     *
     * Hash: 0xA93F925F1942E434 | Since: 1207
     */
    function _0xA93F925F1942E434() {
        Citizen.invokeNative('0xA93F925F1942E434', undefined, undefined);
    }
    object._0xA93F925F1942E434 = _0xA93F925F1942E434;
    /**
     * No comment provided
     *
     * Hash: 0xAAACF33CBF9B990A | Since: 1207
     */
    function _0xAAACF33CBF9B990A() {
        Citizen.invokeNative('0xAAACF33CBF9B990A', undefined, undefined);
    }
    object._0xAAACF33CBF9B990A = _0xAAACF33CBF9B990A;
    /**
     * No comment provided
     *
     * Hash: 0xACD4F9831DFAD7F5 | Since: 1207
     */
    function _0xACD4F9831DFAD7F5() {
        return Citizen.invokeNative('0xACD4F9831DFAD7F5', undefined);
    }
    object._0xACD4F9831DFAD7F5 = _0xACD4F9831DFAD7F5;
    /**
     * Not official native name
     *
     * Hash: 0xAEE6C800E124CFE1 | Since: 1207
     */
    function setPromptName(_object, name) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        Citizen.invokeNative('0xAEE6C800E124CFE1', __object, name);
    }
    object.setPromptName = setPromptName;
    /**
     * No comment provided
     *
     * Hash: 0xB3B1546D23DF8DE1 | Since: 1207
     */
    function _0xB3B1546D23DF8DE1() {
        Citizen.invokeNative('0xB3B1546D23DF8DE1', undefined, undefined, undefined, undefined, undefined);
    }
    object._0xB3B1546D23DF8DE1 = _0xB3B1546D23DF8DE1;
    /**
     * No comment provided
     *
     * Hash: 0xC07B91B996C1DE89 | Since: 1207
     */
    function _0xC07B91B996C1DE89() {
        Citizen.invokeNative('0xC07B91B996C1DE89', undefined, undefined);
    }
    object._0xC07B91B996C1DE89 = _0xC07B91B996C1DE89;
    /**
     * _SET_OBJECT_*
     *
     * Hash: 0xCAAF2BCCFEF37F77 | Since: 1207
     */
    function _0xCAAF2BCCFEF37F77(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        Citizen.invokeNative('0xCAAF2BCCFEF37F77', __object, undefined);
    }
    object._0xCAAF2BCCFEF37F77 = _0xCAAF2BCCFEF37F77;
    /**
     * No comment provided
     *
     * Hash: 0xCBFBD38F2E0A263B | Since: 1207
     */
    function _0xCBFBD38F2E0A263B() {
        Citizen.invokeNative('0xCBFBD38F2E0A263B', undefined, undefined);
    }
    object._0xCBFBD38F2E0A263B = _0xCBFBD38F2E0A263B;
    /**
     * No comment provided
     *
     * Hash: 0xCEAB54F4632C6EF6 | Since: 1207
     */
    function _0xCEAB54F4632C6EF6() {
        Citizen.invokeNative('0xCEAB54F4632C6EF6', undefined, undefined);
    }
    object._0xCEAB54F4632C6EF6 = _0xCEAB54F4632C6EF6;
    /**
     * Not official native name
     *
     * Hash: 0xD503D6F0986D58BC | Since: 1207
     */
    function setPromptNameFromGxtEntry(_object, gxtEntryHash) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        if (typeof gxtEntryHash === 'string')
            gxtEntryHash = misc.getHashKey(gxtEntryHash);
        Citizen.invokeNative('0xD503D6F0986D58BC', __object, gxtEntryHash);
    }
    object.setPromptNameFromGxtEntry = setPromptNameFromGxtEntry;
    /**
     * No comment provided
     *
     * Hash: 0xD91E55B6C005EB09 | Since: 1207
     */
    function _0xD91E55B6C005EB09() {
        return Citizen.invokeNative('0xD91E55B6C005EB09', undefined, undefined);
    }
    object._0xD91E55B6C005EB09 = _0xD91E55B6C005EB09;
    /**
     * No comment provided
     *
     * Hash: 0xDE116ECFFDD4B997 | Since: 1207
     */
    function _0xDE116ECFFDD4B997() {
        Citizen.invokeNative('0xDE116ECFFDD4B997', undefined, undefined);
    }
    object._0xDE116ECFFDD4B997 = _0xDE116ECFFDD4B997;
    /**
     * No comment provided
     *
     * Hash: 0xDFA1237F5228263F | Since: 1207
     */
    function _0xDFA1237F5228263F() {
        Citizen.invokeNative('0xDFA1237F5228263F', undefined, undefined);
    }
    object._0xDFA1237F5228263F = _0xDFA1237F5228263F;
    /**
     * No comment provided
     *
     * Hash: 0xE157A8A336C7F04A | Since: 1207
     */
    function _0xE157A8A336C7F04A() {
        Citizen.invokeNative('0xE157A8A336C7F04A', undefined, undefined);
    }
    object._0xE157A8A336C7F04A = _0xE157A8A336C7F04A;
    /**
     * No comment provided
     *
     * Hash: 0xEBA314768FB35D58 | Since: 1207
     */
    function _0xEBA314768FB35D58() {
        return Citizen.invokeNative('0xEBA314768FB35D58', undefined);
    }
    object._0xEBA314768FB35D58 = _0xEBA314768FB35D58;
    /**
     * No comment provided
     *
     * Hash: 0xF65EDE5D02A7A760 | Since: 1207
     */
    function _0xF65EDE5D02A7A760() {
        Citizen.invokeNative('0xF65EDE5D02A7A760', undefined, undefined);
    }
    object._0xF65EDE5D02A7A760 = _0xF65EDE5D02A7A760;
    /**
     * No comment provided
     *
     * Hash: 0xF6E88489B4E6EBE5 | Since: 1207
     */
    function _0xF6E88489B4E6EBE5() {
        Citizen.invokeNative('0xF6E88489B4E6EBE5', undefined, undefined);
    }
    object._0xF6E88489B4E6EBE5 = _0xF6E88489B4E6EBE5;
    /**
     * No comment provided
     *
     * Hash: 0xFA99E8E575F2FEF8 | Since: 1436
     */
    function _0xFA99E8E575F2FEF8() {
        return Citizen.invokeNative('0xFA99E8E575F2FEF8', undefined);
    }
    object._0xFA99E8E575F2FEF8 = _0xFA99E8E575F2FEF8;
    /**
     * Registers a door, hashes: https://github.com/femga/rdr3_discoveries/tree/master/doorHashes
     *
     * Hash: 0xD99229FE93B46286 | Since: 1207
     */
    function addDoorToSystemNew(doorHash, threadId) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        AddDoorToSystemNew(doorHash, false, false, false, threadId, 0, false);
    }
    object.addDoorToSystemNew = addDoorToSystemNew;
    /**
     * No comment provided
     *
     * Hash: 0xE4EFB315BCD2A838 | Since: 1207
     */
    function damageBoneOnProp(_object, bone) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        DamageBoneOnProp(__object, bone);
    }
    object.damageBoneOnProp = damageBoneOnProp;
    /**
     * No comment provided
     *
     * Hash: 0x985767F5FA45BC44 | Since: 1207
     */
    function doorSystemChangeScriptOwner(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemChangeScriptOwner(doorHash);
    }
    object.doorSystemChangeScriptOwner = doorSystemChangeScriptOwner;
    /**
     * No comment provided
     *
     * Hash: 0x276AAF0F1C7F2494 | Since: 1207
     */
    function doorSystemForceShut(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemForceShut(doorHash, false);
    }
    object.doorSystemForceShut = doorSystemForceShut;
    /**
     * No comment provided
     *
     * Hash: 0x8433E1954BE323FC | Since: 1207
     */
    function doorSystemGetAutomaticRate(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return DoorSystemGetAutomaticRate(doorHash);
    }
    object.doorSystemGetAutomaticRate = doorSystemGetAutomaticRate;
    /**
     * No comment provided
     *
     * Hash: 0x1F1FABFE9B2A1254 | Since: 1207
     */
    function doorSystemSetAbleToChangeOpenRatioWhileLocked(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetAbleToChangeOpenRatioWhileLocked(doorHash, false);
    }
    object.doorSystemSetAbleToChangeOpenRatioWhileLocked = doorSystemSetAbleToChangeOpenRatioWhileLocked;
    /**
     * _ALLOW_* - _ATTACH_*
     *
     * Hash: 0x1BC47A9DEDC8DF5D | Since: 1207
     */
    function doorSystemSetAutomaticState(doorHash, disable) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetAutomaticState(doorHash, disable);
    }
    object.doorSystemSetAutomaticState = doorSystemSetAutomaticState;
    /**
     * No comment provided
     *
     * Hash: 0x44B09A23D728045A | Since: 1207
     */
    function getAmmoTypeFromPickupType(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return GetAmmoTypeFromPickupType(pickupHash);
    }
    object.getAmmoTypeFromPickupType = getAmmoTypeFromPickupType;
    /**
     * No comment provided
     *
     * Hash: 0xFA3B61EC249B4674 | Since: 1207
     */
    function getLightIntensityFrom(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return GetLightIntensityFromObject(__object);
    }
    object.getLightIntensityFrom = getLightIntensityFrom;
    /**
     * Returns float value to be used with _SET_LIGHT_INTENSITY_FOR_OBJECT
     *
     * Hash: 0x3397CD4E0353DFBA | Since: 1207
     */
    function getLightIntensity(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        return GetObjectLightIntensity(__object);
    }
    object.getLightIntensity = getLightIntensity;
    /**
     * No comment provided
     *
     * Hash: 0x2777150CC7D9365E | Since: 1207
     */
    function hidePickup(pickupObject, toggle) {
        const _pickupObject = pickupObject instanceof Object ? pickupObject.handle() : pickupObject;
        HidePickupObject(_pickupObject, toggle);
    }
    object.hidePickup = hidePickup;
    /**
     * No comment provided
     *
     * Hash: 0xB5DED7B65C604FDF | Since: 1207
     */
    function isDoorRegisteredWithNetwork(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return IsDoorRegisteredWithNetwork(doorHash);
    }
    object.isDoorRegisteredWithNetwork = isDoorRegisteredWithNetwork;
    /**
     * Returns true if door is alredy registered with owner
     *
     * Hash: 0x4F89DAD4156BA145 | Since: 1207
     */
    function isDoorRegisteredWithOwner(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return IsDoorRegisteredWithOwner(doorHash);
    }
    object.isDoorRegisteredWithOwner = isDoorRegisteredWithOwner;
    /**
     * No comment provided
     *
     * Hash: 0x007BD043587F7C82 | Since: 1207
     */
    function isPickupTypeValid(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return IsPickupTypeValid(pickupHash);
    }
    object.isPickupTypeValid = isPickupTypeValid;
    /**
     * _PRE* or _Q* or _RE*
     *
     * Hash: 0x1461DF6DB886BE3F | Since: 1207
     */
    function makeItemCarriable(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        MakeItemCarriable(__object);
    }
    object.makeItemCarriable = makeItemCarriable;
    /**
     * No comment provided
     *
     * Hash: 0xF40AB58D83C35027 | Since: 1207
     */
    function resetVelocity(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        ResetObjectVelocity(__object);
    }
    object.resetVelocity = resetVelocity;
    /**
     * No comment provided
     *
     * Hash: 0xAC9AE68F0A463752 | Since: 1207
     */
    function setAmbientPickupLifetime(lifetime) {
        SetAmbientPickupLifetime(lifetime);
    }
    object.setAmbientPickupLifetime = setAmbientPickupLifetime;
    /**
     * Sets object as auto-jumpable by horse.
     *
     * Hash: 0x98D2D9C053A1F449 | Since: 1207
     */
    function setAutoJumpableByHorse(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetAutoJumpableByHorse(__object, false);
    }
    object.setAutoJumpableByHorse = setAutoJumpableByHorse;
    /**
     * No comment provided
     *
     * Hash: 0xF49574E2332A8F06 | Since: 1207
     */
    function setLightIntensityFor(_object, lightIntensity) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetLightIntensityForObject(__object, lightIntensity);
    }
    object.setLightIntensityFor = setLightIntensityFor;
    /**
     * No comment provided
     *
     * Hash: 0x04D1D4E411CE52D0 | Since: 1207
     */
    function setLightScatteringDisabledFor(_object, disable) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetLightScatteringDisabledForObject(__object, disable);
    }
    object.setLightScatteringDisabledFor = setLightScatteringDisabledFor;
    /**
     * Params: value = 0.0 - 586.67 (?)
     *
     * Hash: 0x63E39F09310F481F | Since: 1207
     */
    function setLightTranslucencyFor(_object, value) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetLightTranslucencyForObject(__object, value);
    }
    object.setLightTranslucencyFor = setLightTranslucencyFor;
    /**
     * Params: p2 controls whether to make pickups usable/collectable or not in networked games
     *
     * Hash: 0x94F3D956BFAEAE18 | Since: 1207
     */
    function setNetworkPickupUsableForPlayer(player, pickupHash, isUsable) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        SetNetworkPickupUsableForPlayer(_player, pickupHash, isUsable);
    }
    object.setNetworkPickupUsableForPlayer = setNetworkPickupUsableForPlayer;
    /**
     * Sets object as not jumpable by horse.
     *
     * Hash: 0xE1C708BA4885796B | Since: 1207
     */
    function setNotJumpableByHorse(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetNotJumpableByHorse(__object, false);
    }
    object.setNotJumpableByHorse = setNotJumpableByHorse;
    /**
     * No comment provided
     *
     * Hash: 0xFFB99FFD17F65889 | Since: 1207
     */
    function setBreakScale(_object, scale) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectBreakScale(__object, scale);
    }
    object.setBreakScale = setBreakScale;
    /**
     * No comment provided
     *
     * Hash: 0xC8E21C1677DC5E6F | Since: 1207
     */
    function setBurnIntensity(_object, intensity) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectBurnIntensity(__object, intensity);
    }
    object.setBurnIntensity = setBurnIntensity;
    /**
     * Seems to mostly have effect on wood-made objects https://imgur.com/a/32oQvOn
     *
     * Hash: 0x2797C633DCDBBAC5 | Since: 1207
     */
    function setBurnLevel(_object, burnLevel, affectAsh) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectBurnLevel(__object, burnLevel, affectAsh);
    }
    object.setBurnLevel = setBurnLevel;
    /**
     * No comment provided
     *
     * Hash: 0x7D7285EFEAB5AF15 | Since: 1207
     */
    function setBurnOpacity(_object, opacity) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectBurnOpacity(__object, opacity);
    }
    object.setBurnOpacity = setBurnOpacity;
    /**
     * p2 is usually the same as speed parameter
     *
     * Hash: 0x646564A3B7DF68F8 | Since: 1207
     */
    function setBurnSpeed(_object, speed) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectBurnSpeed(__object, speed, 0);
    }
    object.setBurnSpeed = setBurnSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xB7017DA4D498269F | Since: 1207
     */
    function setKickable(_object, kickable) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectKickable(__object, kickable);
    }
    object.setKickable = setKickable;
    /**
     * No comment provided
     *
     * Hash: 0x581EDBE56E8D62C9 | Since: 1207
     */
    function setTargettable2(_object, targettable) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectTargettable2(__object, targettable);
    }
    object.setTargettable2 = setTargettable2;
    /**
     * focus on objects like focus on peds, p1 is to enable/disable p2 is to enable/disable focus when you have a weapon out
     *
     * Hash: 0xA22712E8471AA08E | Since: 1207
     */
    function setTargettableFocus(_object, toggle, weaponLock) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetObjectTargettableFocus(__object, toggle, weaponLock);
    }
    object.setTargettableFocus = setTargettableFocus;
    /**
     * No comment provided
     *
     * Hash: 0x00EE08603EADEE92 | Since: 1207
     */
    function setPickupCollectableOnMount(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetPickupCollectableOnMount(__object);
    }
    object.setPickupCollectableOnMount = setPickupCollectableOnMount;
})(object || (object = {}));
export var pad;
(function (pad) {
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xCB0360EFEFB2580D | Since: 1207
     */
    function clearControlLightEffect(control) {
        ClearControlLightEffect(control);
    }
    pad.clearControlLightEffect = clearControlLightEffect;
    /**
     * Old name: _CLEAR_SUPPRESSED_PAD_RUMBLE
     *
     * Hash: 0xA0CEFCEA390AAB9B | Since: 1207
     */
    function clearControlShakeSuppressedId(control) {
        ClearControlShakeSuppressedId(control);
    }
    pad.clearControlShakeSuppressedId = clearControlShakeSuppressedId;
    /**
     * No comment provided
     *
     * Hash: 0x5F4B6931816E599B | Since: 1207
     */
    function disableAllControlActions(control) {
        DisableAllControlActions(control);
    }
    pad.disableAllControlActions = disableAllControlActions;
    /**
     * No comment provided
     *
     * Hash: 0xFE99B66D079CF6BC | Since: 1207
     */
    function disableControlAction(control, action, disableRelatedActions) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        DisableControlAction(control, action, disableRelatedActions);
    }
    pad.disableControlAction = disableControlAction;
    /**
     * No comment provided
     *
     * Hash: 0x351220255D64C155 | Since: 1207
     */
    function enableControlAction(control, action, enableRelatedActions) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        EnableControlAction(control, action, enableRelatedActions);
    }
    pad.enableControlAction = enableControlAction;
    /**
     * Returns time in ms since last input.
     *
     * Hash: 0xD7D22F5592AED8BA | Since: 1207
     */
    function getControlHowLongAgo(control) {
        return GetControlHowLongAgo(control);
    }
    pad.getControlHowLongAgo = getControlHowLongAgo;
    /**
     * No comment provided
     *
     * Hash: 0xEC3C9B8D5327B563 | Since: 1207
     */
    function getControlNormal(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return GetControlNormal(control, action);
    }
    pad.getControlNormal = getControlNormal;
    /**
     * No comment provided
     *
     * Hash: 0x5B84D09CEC5209C5 | Since: 1207
     */
    function getControlUnboundNormal(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return GetControlUnboundNormal(control, action);
    }
    pad.getControlUnboundNormal = getControlUnboundNormal;
    /**
     * No comment provided
     *
     * Hash: 0xD95E79E8686D2C27 | Since: 1207
     */
    function getControlValue(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return GetControlValue(control, action);
    }
    pad.getControlValue = getControlValue;
    /**
     * No comment provided
     *
     * Hash: 0x11E65974A982637C | Since: 1207
     */
    function getDisabledControlNormal(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return GetDisabledControlNormal(control, action);
    }
    pad.getDisabledControlNormal = getDisabledControlNormal;
    /**
     * No comment provided
     *
     * Hash: 0x4F8A26A890FD62FB | Since: 1207
     */
    function getDisabledControlUnboundNormal(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return GetDisabledControlUnboundNormal(control, action);
    }
    pad.getDisabledControlUnboundNormal = getDisabledControlUnboundNormal;
    /**
     * No comment provided
     *
     * Hash: 0x6CD79468A1E595C6 | Since: 1207
     */
    function haveControlsChanged(control) {
        return HaveControlsChanged(control);
    }
    pad.haveControlsChanged = haveControlsChanged;
    /**
     * No comment provided
     *
     * Hash: 0x1CEA6BFDF248E5D9 | Since: 1207
     */
    function isControlEnabled(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsControlEnabled(control, action);
    }
    pad.isControlEnabled = isControlEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x580417101DDB492F | Since: 1207
     */
    function isControlJustPressed(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsControlJustPressed(control, action);
    }
    pad.isControlJustPressed = isControlJustPressed;
    /**
     * No comment provided
     *
     * Hash: 0x50F940259D3841E6 | Since: 1207
     */
    function isControlJustReleased(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsControlJustReleased(control, action);
    }
    pad.isControlJustReleased = isControlJustReleased;
    /**
     * No comment provided
     *
     * Hash: 0xF3A21BCD95725A4A | Since: 1207
     */
    function isControlPressed(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsControlPressed(control, action);
    }
    pad.isControlPressed = isControlPressed;
    /**
     * No comment provided
     *
     * Hash: 0x648EE3E7F38877DD | Since: 1207
     */
    function isControlReleased(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsControlReleased(control, action);
    }
    pad.isControlReleased = isControlReleased;
    /**
     * No comment provided
     *
     * Hash: 0x91AEF906BCA88877 | Since: 1207
     */
    function isDisabledControlJustPressed(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsDisabledControlJustPressed(control, action);
    }
    pad.isDisabledControlJustPressed = isDisabledControlJustPressed;
    /**
     * No comment provided
     *
     * Hash: 0x305C8DCD79DA8B0F | Since: 1207
     */
    function isDisabledControlJustReleased(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsDisabledControlJustReleased(control, action);
    }
    pad.isDisabledControlJustReleased = isDisabledControlJustReleased;
    /**
     * No comment provided
     *
     * Hash: 0xE2587F8CBBD87B1D | Since: 1207
     */
    function isDisabledControlPressed(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsDisabledControlPressed(control, action);
    }
    pad.isDisabledControlPressed = isDisabledControlPressed;
    /**
     * No comment provided
     *
     * Hash: 0x77B612531280010D | Since: 1207
     */
    function isLookInverted() {
        return IsLookInverted();
    }
    pad.isLookInverted = isLookInverted;
    /**
     * padIndex is not used
     *
     * Old name: _IS_USING_KEYBOARD
     *
     * Hash: 0xA571D46727E2B718 | Since: 1207
     */
    function isUsingKeyboardAndMouse(control) {
        return IsUsingKeyboardAndMouse(control);
    }
    pad.isUsingKeyboardAndMouse = isUsingKeyboardAndMouse;
    /**
     * nullsub, doesn't do anything
     *
     * Old name: _SET_CONTROL_GROUP_COLOR
     *
     * Hash: 0x8290252FFF36ACB5 | Since: 1207
     */
    function setControlLightEffectColor(control, red, green, blue) {
        SetControlLightEffectColor(control, red, green, blue);
    }
    pad.setControlLightEffectColor = setControlLightEffectColor;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xA45884DB10EC7EE3 | Since: 1207
     */
    function setControlLightEffectFlashingColor(control, red, green, blue) {
        SetControlLightEffectFlashingColor(control, red, green, blue);
    }
    pad.setControlLightEffectFlashingColor = setControlLightEffectFlashingColor;
    /**
     * Old name: SET_PAD_SHAKE
     *
     * Hash: 0x48B3886C1358D0D5 | Since: 1207
     */
    function setControlShake(control, duration, frequency) {
        SetControlShake(control, duration, frequency);
    }
    pad.setControlShake = setControlShake;
    /**
     * Old name: SET_PAD_SHAKE_SUPPRESSED_ID
     *
     * Hash: 0xF239400E16C23E08 | Since: 1207
     */
    function setControlShakeSuppressedId(control, uniqueId) {
        SetControlShakeSuppressedId(control, uniqueId);
    }
    pad.setControlShakeSuppressedId = setControlShakeSuppressedId;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x14D29BB12D47F68C | Since: 1207
     */
    function setControlTriggerShake(control, leftDuration, leftFrequency, rightDuration, rightFrequency) {
        SetControlTriggerShake(control, leftDuration, leftFrequency, rightDuration, rightFrequency);
    }
    pad.setControlTriggerShake = setControlTriggerShake;
    /**
     * This is for simulating player input.
     * value is a float value from 0 - 1
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Old name: _SET_CONTROL_NORMAL
     *
     * Hash: 0xE8A25867FBA3B05E | Since: 1207
     */
    function setControlValueNextFrame(control, action, value) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return SetControlValueNextFrame(control, action, value);
    }
    pad.setControlValueNextFrame = setControlValueNextFrame;
    /**
     * No comment provided
     *
     * Hash: 0xEDE476E5EE29EDB1 | Since: 1207
     */
    function setInputExclusive(control, action) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        SetInputExclusive(control, action);
    }
    pad.setInputExclusive = setInputExclusive;
    /**
     * Old name: STOP_PAD_SHAKE
     *
     * Hash: 0x38C16A305E8CDC8D | Since: 1207
     */
    function stopControlShake(control) {
        StopControlShake(control);
    }
    pad.stopControlShake = stopControlShake;
    /**
     * _IS_R* - _IS_S*
     *
     * Hash: 0x1252C029FC8EBB4D | Since: 1207
     */
    function _0x1252C029FC8EBB4D() {
        return Citizen.invokeNative('0x1252C029FC8EBB4D');
    }
    pad._0x1252C029FC8EBB4D = _0x1252C029FC8EBB4D;
    /**
     * No comment provided
     *
     * Hash: 0x43F35DDB2905D945 | Since: 1207
     */
    function _0x43F35DDB2905D945() {
        return Citizen.invokeNative('0x43F35DDB2905D945', undefined, undefined);
    }
    pad._0x43F35DDB2905D945 = _0x43F35DDB2905D945;
    /**
     * No comment provided
     *
     * Hash: 0x52C68E92D6E23ADD | Since: 1311
     */
    function _0x52C68E92D6E23ADD() {
        Citizen.invokeNative('0x52C68E92D6E23ADD', undefined);
    }
    pad._0x52C68E92D6E23ADD = _0x52C68E92D6E23ADD;
    /**
     * rumbleCurve: common_0/data/rumblecurves.meta
     *
     * Hash: 0x5F217BC1190503D8 | Since: 1207
     */
    function _0x5F217BC1190503D8(rumbleCurve) {
        Citizen.invokeNative('0x5F217BC1190503D8', rumbleCurve, 0);
    }
    pad._0x5F217BC1190503D8 = _0x5F217BC1190503D8;
    /**
     * No comment provided
     *
     * Hash: 0x709BA8C08C5C008D | Since: 1207
     */
    function _0x709BA8C08C5C008D() {
        Citizen.invokeNative('0x709BA8C08C5C008D');
    }
    pad._0x709BA8C08C5C008D = _0x709BA8C08C5C008D;
    /**
     * No comment provided
     *
     * Hash: 0xBD629C1C4F501C80 | Since: 1207
     */
    function _0xBD629C1C4F501C80() {
        return Citizen.invokeNative('0xBD629C1C4F501C80', undefined);
    }
    pad._0xBD629C1C4F501C80 = _0xBD629C1C4F501C80;
    /**
     * Gets the current control context. See: _SET_CONTROL_CONTEXT
     *
     * Hash: 0xDDCEB0F26C89C00F | Since: 1207
     */
    function getCurrentControlContext(control) {
        return GetCurrentControlContext(control);
    }
    pad.getCurrentControlContext = getCurrentControlContext;
    /**
     * No comment provided
     *
     * Hash: 0x771DFCB24D19C2F6 | Since: 1207
     */
    function getDisabledControlHowLongAgo(control) {
        return GetDisabledControlHowLongAgo(control);
    }
    pad.getDisabledControlHowLongAgo = getDisabledControlHowLongAgo;
    /**
     * No comment provided
     *
     * Hash: 0xBC0884BC590951C7 | Since: 1207
     */
    function isControlActionValid(action, control) {
        if (typeof action === 'string')
            action = misc.getHashKey(action);
        return IsControlActionValid(action, control);
    }
    pad.isControlActionValid = isControlActionValid;
    /**
     * Sets the current control context. Must be called every frame.
     *
     * context: https://alloc8or.re/rdr3/doc/misc/input_contexts.txt
     * For more information, see common:/data/control/settings.meta
     * https://github.com/femga/rdr3_discoveries/tree/master/Controls
     *
     * Hash: 0x2804658EB7D8A50B | Since: 1207
     */
    function setControlContext(control, context) {
        if (typeof context === 'string')
            context = misc.getHashKey(context);
        SetControlContext(control, context);
    }
    pad.setControlContext = setControlContext;
})(pad || (pad = {}));
export var pathfind;
(function (pathfind) {
    /**
     * No comment provided
     *
     * Hash: 0xFCD5C8E06E502F5A | Since: 1207
     */
    function addNavmeshBlockingObject() {
        return AddNavmeshBlockingObject(0, 0, 0, 0, 0, 0, 0, false, undefined);
    }
    pathfind.addNavmeshBlockingObject = addNavmeshBlockingObject;
    /**
     * No comment provided
     *
     * Hash: 0x387EAD7EE42F6685 | Since: 1207
     */
    function addNavmeshRequiredRegion(x, y, radius) {
        AddNavmeshRequiredRegion(x, y, radius);
    }
    pathfind.addNavmeshRequiredRegion = addNavmeshRequiredRegion;
    /**
     * No comment provided
     *
     * Hash: 0xF7B79A50B905A30D | Since: 1207
     */
    function areNodesLoadedForArea(x1, y1, x2, y2) {
        return AreNodesLoadedForArea(x1, y1, x2, y2);
    }
    pathfind.areNodesLoadedForArea = areNodesLoadedForArea;
    /**
     * No comment provided
     *
     * Hash: 0x0EAEB0DB4B132399 | Since: 1207
     */
    function doesNavmeshBlockingObjectExist() {
        return DoesNavmeshBlockingObjectExist(undefined);
    }
    pathfind.doesNavmeshBlockingObjectExist = doesNavmeshBlockingObjectExist;
    /**
     * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
     *
     * Hash: 0x336511A34F2E5185 | Since: 1207
     */
    function getApproxFloorForPoint(x, y) {
        return GetApproxFloorForPoint(x, y);
    }
    pathfind.getApproxFloorForPoint = getApproxFloorForPoint;
    /**
     * No comment provided
     *
     * Hash: 0x132F52BBA570FE92 | Since: 1207
     */
    function getClosestRoad(pos) {
        return GetClosestRoad(pos.x, pos.y, pos.z, 0, 0, false);
    }
    pathfind.getClosestRoad = getClosestRoad;
    /**
     * No comment provided
     *
     * Hash: 0x240A18690AE96513 | Since: 1207
     */
    function getClosestVehicleNode(pos, nodeType) {
        return GetClosestVehicleNode(pos.x, pos.y, pos.z, nodeType, 0, 0);
    }
    pathfind.getClosestVehicleNode = getClosestVehicleNode;
    /**
     * No comment provided
     *
     * Hash: 0x23CFFD4CCB243354 | Since: 1207
     */
    function getClosestVehicleNodeWithHeading(pos, nodeType) {
        return GetClosestVehicleNodeWithHeading(pos.x, pos.y, pos.z, nodeType, 0, 0);
    }
    pathfind.getClosestVehicleNodeWithHeading = getClosestVehicleNodeWithHeading;
    /**
     * No comment provided
     *
     * Hash: 0x869DAACBBE9FA006 | Since: 1207
     */
    function getGpsBlipRouteFound() {
        return GetGpsBlipRouteFound();
    }
    pathfind.getGpsBlipRouteFound = getGpsBlipRouteFound;
    /**
     * No comment provided
     *
     * Hash: 0xBBB45C3CF5C8AA85 | Since: 1207
     */
    function getGpsBlipRouteLength() {
        return GetGpsBlipRouteLength();
    }
    pathfind.getGpsBlipRouteLength = getGpsBlipRouteLength;
    /**
     * No comment provided
     *
     * Hash: 0x5A6D8DF6FBC5D0C4 | Since: 1207
     */
    function getNthClosestVehicleNode(pos, nthClosest, unknown1, unknown2, unknown3) {
        return GetNthClosestVehicleNode(pos.x, pos.y, pos.z, nthClosest, unknown1, unknown2, unknown3);
    }
    pathfind.getNthClosestVehicleNode = getNthClosestVehicleNode;
    /**
     * No comment provided
     *
     * Hash: 0x2FAC235A6062F14A | Since: 1207
     */
    function getNthClosestVehicleNodeFavourDirection(pos, desiredX, desiredY, desiredZ, nthClosest, nodetype) {
        return GetNthClosestVehicleNodeFavourDirection(pos.x, pos.y, pos.z, desiredX, desiredY, desiredZ, nthClosest, nodetype, undefined, undefined);
    }
    pathfind.getNthClosestVehicleNodeFavourDirection = getNthClosestVehicleNodeFavourDirection;
    /**
     * No comment provided
     *
     * Hash: 0x116443008E5CEFC3 | Since: 1207
     */
    function getNthClosestVehicleNodeId(pos, nth, nodetype) {
        return GetNthClosestVehicleNodeId(pos.x, pos.y, pos.z, nth, nodetype, 0, 0);
    }
    pathfind.getNthClosestVehicleNodeId = getNthClosestVehicleNodeId;
    /**
     * Returns the nth closest vehicle node with a heading to a coord
     *
     * Hash: 0x4114EAA8A7F7766D | Since: 1207
     */
    function getNthClosestVehicleNodeIdWithHeading(pos, nthClosest, nodeFlags, zMeasureMult, zTolerance) {
        return GetNthClosestVehicleNodeIdWithHeading(pos.x, pos.y, pos.z, nthClosest, nodeFlags, zMeasureMult, zTolerance);
    }
    pathfind.getNthClosestVehicleNodeIdWithHeading = getNthClosestVehicleNodeIdWithHeading;
    /**
     * No comment provided
     *
     * Hash: 0x591B40D4390DB54A | Since: 1207
     */
    function getNthClosestVehicleNodeWithHeading(pos, nthClosest, unknown2, unknown3, unknown4) {
        return GetNthClosestVehicleNodeWithHeading(pos.x, pos.y, pos.z, nthClosest, unknown2, unknown3, unknown4);
    }
    pathfind.getNthClosestVehicleNodeWithHeading = getNthClosestVehicleNodeWithHeading;
    /**
     * No comment provided
     *
     * Hash: 0x01708E8DD3FF8C65 | Since: 1207
     */
    function getNumNavmeshesExistingInArea() {
        return GetNumNavmeshesExistingInArea(0, 0, 0, 0, 0, 0);
    }
    pathfind.getNumNavmeshesExistingInArea = getNumNavmeshesExistingInArea;
    /**
     * No comment provided
     *
     * Hash: 0x93E0DB8440B73A7D | Since: 1207
     */
    function getRandomVehicleNode(pos, radius, minLanes, avoidDeadEnds, avoidHighways) {
        return GetRandomVehicleNode(pos.x, pos.y, pos.z, radius, minLanes, avoidDeadEnds, avoidHighways);
    }
    pathfind.getRandomVehicleNode = getRandomVehicleNode;
    /**
     * No comment provided
     *
     * Hash: 0xB61C8E878A4199CA | Since: 1207
     */
    function getSafeCoordForPed(pos, onGround, flags) {
        return GetSafeCoordForPed(pos.x, pos.y, pos.z, onGround, flags);
    }
    pathfind.getSafeCoordForPed = getSafeCoordForPed;
    /**
     * No comment provided
     *
     * Hash: 0x28533DBDDF7C2C97 | Since: 1207
     */
    function getVehicleNodeIsSwitchedOff(nodeID) {
        return GetVehicleNodeIsSwitchedOff(nodeID);
    }
    pathfind.getVehicleNodeIsSwitchedOff = getVehicleNodeIsSwitchedOff;
    /**
     * No comment provided
     *
     * Hash: 0x8E8D72FF24DEE1FB | Since: 1207
     */
    function getVehicleNodePosition(nodeId) {
        return GetVehicleNodePosition(nodeId);
    }
    pathfind.getVehicleNodePosition = getVehicleNodePosition;
    /**
     * Returns whether navmesh for the region is loaded.
     *
     * Hash: 0xF813C7E63F9062A5 | Since: 1207
     */
    function isNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2) {
        return IsNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2);
    }
    pathfind.isNavmeshLoadedInArea = isNavmeshLoadedInArea;
    /**
     * Gets a value indicating whether the specified position is on a road.
     *
     * Hash: 0x125BF4ABFC536B09 | Since: 1207
     */
    function isPointOnRoad(pos, vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsPointOnRoad(pos.x, pos.y, pos.z, _vehicle);
    }
    pathfind.isPointOnRoad = isPointOnRoad;
    /**
     * Returns true if the id is non zero.
     *
     * Hash: 0x5829A02AF4F0B3CB | Since: 1207
     */
    function isVehicleNodeIdValid(vehicleNodeId) {
        return IsVehicleNodeIdValid(vehicleNodeId);
    }
    pathfind.isVehicleNodeIdValid = isVehicleNodeIdValid;
    /**
     * Starts a nav mesh query for a path between coordinates with a given ped and returns a handle to be validated by _NAVMESH_REQUESTED_QUERY_STATUS and then _NAVMESH_REQUESTED_PATH_WAYPOINTS_FOUND
     *
     * Only bit flag values used in scripts are 0, 23, and 29. 23 is used with dogs and horses. 29 with legendary animals.
     *
     * Hash: 0x348F211CA2404039 | Since: 1207
     */
    function navmeshRequestPath(ped, x1, y1, z1, x2, y2, z2, bitFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return NavmeshRequestPath(_ped, x1, y1, z1, x2, y2, z2, bitFlag);
    }
    pathfind.navmeshRequestPath = navmeshRequestPath;
    /**
     * No comment provided
     *
     * Hash: 0x46399A7895957C0E | Since: 1207
     */
    function removeNavmeshBlockingObject() {
        RemoveNavmeshBlockingObject(undefined);
    }
    pathfind.removeNavmeshBlockingObject = removeNavmeshBlockingObject;
    /**
     * Old name: REQUEST_PATHS_PREFER_ACCURATE_BOUNDINGSTRUCT
     *
     * Hash: 0x07FB139B592FA687 | Since: 1207
     */
    function requestPathNodesInAreaThisFrame(x1, y1, x2, y2) {
        return RequestPathNodesInAreaThisFrame(x1, y1, x2, y2);
    }
    pathfind.requestPathNodesInAreaThisFrame = requestPathNodesInAreaThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xD17672447692478E | Since: 1207
     */
    function resetRoadsInVolume(volume) {
        ResetRoadsInVolume(volume, false);
    }
    pathfind.resetRoadsInVolume = resetRoadsInVolume;
    /**
     * No comment provided
     *
     * Hash: 0x0B919E1FB47CC4E0 | Since: 1207
     */
    function setAmbientPedRangeMultiplierThisFrame(multiplier) {
        SetAmbientPedRangeMultiplierThisFrame(multiplier);
    }
    pathfind.setAmbientPedRangeMultiplierThisFrame = setAmbientPedRangeMultiplierThisFrame;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x72751156E7678833 | Since: 1207
     */
    function setIgnoreNoGpsFlag(toggle) {
        SetIgnoreNoGpsFlag(toggle);
    }
    pathfind.setIgnoreNoGpsFlag = setIgnoreNoGpsFlag;
    /**
     * No comment provided
     *
     * Hash: 0xE04B48F2CC926253 | Since: 1207
     */
    function setPedPathsBackToOriginal() {
        SetPedPathsBackToOriginal(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    pathfind.setPedPathsBackToOriginal = setPedPathsBackToOriginal;
    /**
     * No comment provided
     *
     * Hash: 0x34F060F4BF92E018 | Since: 1207
     */
    function setPedPathsInArea(x1, y1, z1, x2, y2, z2, _unknown) {
        SetPedPathsInArea(x1, y1, z1, x2, y2, z2, _unknown, undefined);
    }
    pathfind.setPedPathsInArea = setPedPathsInArea;
    /**
     * No comment provided
     *
     * Hash: 0x1EE7063B80FFC77C | Since: 1207
     */
    function setRoadsBackToOriginal(xMin, yMin, zMin, xMax, yMax, zMax) {
        SetRoadsBackToOriginal(xMin, yMin, zMin, xMax, yMax, zMax, undefined, undefined);
    }
    pathfind.setRoadsBackToOriginal = setRoadsBackToOriginal;
    /**
     * No comment provided
     *
     * Hash: 0x0027501B9F3B407E | Since: 1207
     */
    function setRoadsBackToOriginalInAngledArea() {
        SetRoadsBackToOriginalInAngledArea(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    pathfind.setRoadsBackToOriginalInAngledArea = setRoadsBackToOriginalInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x1A5AA1208AF5DB59 | Since: 1207
     */
    function setRoadsInAngledArea() {
        SetRoadsInAngledArea(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    pathfind.setRoadsInAngledArea = setRoadsInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0xBF1A602B5BA52FEE | Since: 1207
     */
    function setRoadsInArea(xMin, yMin, zMin, xMax, yMax, zMax) {
        SetRoadsInArea(xMin, yMin, zMin, xMax, yMax, zMax, undefined, undefined, undefined);
    }
    pathfind.setRoadsInArea = setRoadsInArea;
    /**
     * No comment provided
     *
     * Hash: 0xC1799FAFD2FDF52B | Since: 1207
     */
    function setRoadsInVolume(volume) {
        SetRoadsInVolume(volume, false, false, false);
    }
    pathfind.setRoadsInVolume = setRoadsInVolume;
    /**
     * No comment provided
     *
     * Hash: 0x2DD5F78D73B24172 | Since: 1207
     */
    function simulatedRouteGetEta() {
        return SimulatedRouteGetEta(undefined);
    }
    pathfind.simulatedRouteGetEta = simulatedRouteGetEta;
    /**
     * No comment provided
     *
     * Hash: 0x240915043CB799D7 | Since: 1207
     */
    function simulatedRouteIsLoaded() {
        return SimulatedRouteIsLoaded(undefined);
    }
    pathfind.simulatedRouteIsLoaded = simulatedRouteIsLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xA1A3DE1C215C7394 | Since: 1207
     */
    function simulatedRouteTravelToPoint() {
        SimulatedRouteTravelToPoint(undefined, 0, 0);
    }
    pathfind.simulatedRouteTravelToPoint = simulatedRouteTravelToPoint;
    /**
     * No comment provided
     *
     * Hash: 0x264E9A5CD78C338F | Since: 1207
     */
    function _0x264E9A5CD78C338F() {
        Citizen.invokeNative('0x264E9A5CD78C338F', undefined);
    }
    pathfind._0x264E9A5CD78C338F = _0x264E9A5CD78C338F;
    /**
     * No comment provided
     *
     * Hash: 0x34C9AF25649172D0 | Since: 1207
     */
    function _0x34C9AF25649172D0() {
        Citizen.invokeNative('0x34C9AF25649172D0', undefined);
    }
    pathfind._0x34C9AF25649172D0 = _0x34C9AF25649172D0;
    /**
     * No comment provided
     *
     * Hash: 0x4358BCF14C91761C | Since: 1207
     */
    function _0x4358BCF14C91761C() {
        Citizen.invokeNative('0x4358BCF14C91761C', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    pathfind._0x4358BCF14C91761C = _0x4358BCF14C91761C;
    /**
     * No comment provided
     *
     * Hash: 0x4BDEBEA5702B97A9 | Since: 1207
     */
    function _0x4BDEBEA5702B97A9() {
        Citizen.invokeNative('0x4BDEBEA5702B97A9', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    pathfind._0x4BDEBEA5702B97A9 = _0x4BDEBEA5702B97A9;
    /**
     * No comment provided
     *
     * Hash: 0x54F4D7B6670FBB5A | Since: 1207
     */
    function _0x54F4D7B6670FBB5A() {
        return Citizen.invokeNative('0x54F4D7B6670FBB5A', undefined, undefined, undefined, undefined, undefined);
    }
    pathfind._0x54F4D7B6670FBB5A = _0x54F4D7B6670FBB5A;
    /**
     * No comment provided
     *
     * Hash: 0x5A3B54ADDF5472A3 | Since: 1207
     */
    function _0x5A3B54ADDF5472A3() {
        return Citizen.invokeNative('0x5A3B54ADDF5472A3', undefined);
    }
    pathfind._0x5A3B54ADDF5472A3 = _0x5A3B54ADDF5472A3;
    /**
     * No comment provided
     *
     * Hash: 0x5A4E1A41E3A02AD0 | Since: 1207
     */
    function _0x5A4E1A41E3A02AD0() {
        Citizen.invokeNative('0x5A4E1A41E3A02AD0', undefined, undefined, undefined);
    }
    pathfind._0x5A4E1A41E3A02AD0 = _0x5A4E1A41E3A02AD0;
    /**
     * No comment provided
     *
     * Hash: 0x665B21666351CB37 | Since: 1207
     */
    function _0x665B21666351CB37() {
        return Citizen.invokeNative('0x665B21666351CB37', undefined, undefined, undefined);
    }
    pathfind._0x665B21666351CB37 = _0x665B21666351CB37;
    /**
     * No comment provided
     *
     * Hash: 0x6C3F12ECEB6D2E2A | Since: 1207
     */
    function _0x6C3F12ECEB6D2E2A(xMin, yMin, zMin, xMax, yMax, zMax) {
        Citizen.invokeNative('0x6C3F12ECEB6D2E2A', xMin, yMin, zMin, xMax, yMax, zMax, undefined, undefined);
    }
    pathfind._0x6C3F12ECEB6D2E2A = _0x6C3F12ECEB6D2E2A;
    /**
     * No comment provided
     *
     * Hash: 0x6DAD6630AE4A74CB | Since: 1207
     */
    function _0x6DAD6630AE4A74CB() {
        Citizen.invokeNative('0x6DAD6630AE4A74CB', undefined, undefined);
    }
    pathfind._0x6DAD6630AE4A74CB = _0x6DAD6630AE4A74CB;
    /**
     * No comment provided
     *
     * Hash: 0x869A7015BD4606E9 | Since: 1207
     */
    function _0x869A7015BD4606E9() {
        Citizen.invokeNative('0x869A7015BD4606E9', undefined);
    }
    pathfind._0x869A7015BD4606E9 = _0x869A7015BD4606E9;
    /**
     * No comment provided
     *
     * Hash: 0xA33914B00CA55756 | Since: 1207
     */
    function _0xA33914B00CA55756() {
        return Citizen.invokeNative('0xA33914B00CA55756', undefined, 0);
    }
    pathfind._0xA33914B00CA55756 = _0xA33914B00CA55756;
    /**
     * No comment provided
     *
     * Hash: 0xAFE2AE66F6251C66 | Since: 1207
     */
    function _0xAFE2AE66F6251C66(xMin, yMin, zMin, xMax, yMax, zMax) {
        Citizen.invokeNative('0xAFE2AE66F6251C66', xMin, yMin, zMin, xMax, yMax, zMax, 0, undefined);
    }
    pathfind._0xAFE2AE66F6251C66 = _0xAFE2AE66F6251C66;
    /**
     * No comment provided
     *
     * Hash: 0xB03944057FD735BA | Since: 1207
     */
    function _0xB03944057FD735BA() {
        Citizen.invokeNative('0xB03944057FD735BA', undefined, undefined, undefined);
    }
    pathfind._0xB03944057FD735BA = _0xB03944057FD735BA;
    /**
     * No comment provided
     *
     * Hash: 0xCA27A86CAA4E98ED | Since: 1207
     */
    function _0xCA27A86CAA4E98ED() {
        return Citizen.invokeNative('0xCA27A86CAA4E98ED', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    pathfind._0xCA27A86CAA4E98ED = _0xCA27A86CAA4E98ED;
    /**
     * No comment provided
     *
     * Hash: 0xCF213A5FC3ABFC08 | Since: 1207
     */
    function _0xCF213A5FC3ABFC08() {
        Citizen.invokeNative('0xCF213A5FC3ABFC08', undefined, undefined, undefined);
    }
    pathfind._0xCF213A5FC3ABFC08 = _0xCF213A5FC3ABFC08;
    /**
     * No comment provided
     *
     * Hash: 0xE5EF9DE716FF737E | Since: 1207
     */
    function _0xE5EF9DE716FF737E() {
        Citizen.invokeNative('0xE5EF9DE716FF737E', undefined, undefined, undefined);
    }
    pathfind._0xE5EF9DE716FF737E = _0xE5EF9DE716FF737E;
    /**
     * No comment provided
     *
     * Hash: 0xEFC535C9FAF563B3 | Since: 1207
     */
    function _0xEFC535C9FAF563B3() {
        return Citizen.invokeNative('0xEFC535C9FAF563B3', undefined);
    }
    pathfind._0xEFC535C9FAF563B3 = _0xEFC535C9FAF563B3;
    /**
     * GPS disabled zone: p1 = 0
     * Clearing GPS disabled zone: p1 = 1
     *
     * Hash: 0xF2A2177AC848B3A8 | Since: 1207
     */
    function _0xF2A2177AC848B3A8(volume) {
        Citizen.invokeNative('0xF2A2177AC848B3A8', volume, 0, 0);
    }
    pathfind._0xF2A2177AC848B3A8 = _0xF2A2177AC848B3A8;
    /**
     * No comment provided
     *
     * Hash: 0x19C7567D2F2287D6 | Since: 1207
     */
    function addNavmeshBlockingVolume(volume, flags) {
        return AddNavmeshBlockingVolume(volume, flags);
    }
    pathfind.addNavmeshBlockingVolume = addNavmeshBlockingVolume;
    /**
     * No comment provided
     *
     * Hash: 0xDE0EA444735C1368 | Since: 1207
     */
    function doesNavmeshBlockingVolumeExist(volume) {
        return DoesNavmeshBlockingVolumeExist(volume);
    }
    pathfind.doesNavmeshBlockingVolumeExist = doesNavmeshBlockingVolumeExist;
    /**
     * No comment provided
     *
     * Hash: 0xA3791B915B8B84C6 | Since: 1207
     */
    function getSpawnDataForRoadNode(nodeId, pos) {
        return GetSpawnDataForRoadNode(nodeId, pos.x, pos.y, pos.z);
    }
    pathfind.getSpawnDataForRoadNode = getSpawnDataForRoadNode;
    /**
     * No comment provided
     *
     * Hash: 0x7C334FF4D9215912 | Since: 1207
     */
    function navmeshActivateSwap(name) {
        return NavmeshActivateSwap(name);
    }
    pathfind.navmeshActivateSwap = navmeshActivateSwap;
    /**
     * No comment provided
     *
     * Hash: 0x44026E3DB3CED602 | Since: 1207
     */
    function navmeshAssignNavmeshToVehicle(vehicle, navMeshName) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return NavmeshAssignNavmeshToVehicle(_vehicle, navMeshName);
    }
    pathfind.navmeshAssignNavmeshToVehicle = navmeshAssignNavmeshToVehicle;
    /**
     * Called in scripts after finished with requested pathes. Immediately resets all values connected to the path handle except query status, which changes from 1 to 2 before eventually becoming fully invalidated to 0.
     *
     * Hash: 0x661BB1E1FF77742D | Since: 1207
     */
    function navmeshClearRequestedPath(path) {
        return NavmeshClearRequestedPath(path);
    }
    pathfind.navmeshClearRequestedPath = navmeshClearRequestedPath;
    /**
     * No comment provided
     *
     * Hash: 0x527B97C203BB8606 | Since: 1207
     */
    function navmeshDeactivateSwap() {
        return NavmeshDeactivateSwap();
    }
    pathfind.navmeshDeactivateSwap = navmeshDeactivateSwap;
    /**
     * No comment provided
     *
     * Hash: 0x495CFAB2924237C7 | Since: 1207
     */
    function navmeshDoesSwapExist() {
        return NavmeshDoesSwapExist();
    }
    pathfind.navmeshDoesSwapExist = navmeshDoesSwapExist;
    /**
     * No comment provided
     *
     * Hash: 0x5AC0944C156E5F44 | Since: 1207
     */
    function navmeshIsSwapActive() {
        return NavmeshIsSwapActive();
    }
    pathfind.navmeshIsSwapActive = navmeshIsSwapActive;
    /**
     * Returns the number of waypoints for a requested path (NAVMESH_REQUEST_PATH) if the query is completed (_NAVMESH_REQUESTED_QUERY_STATUS). For use with _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
     *
     * Hash: 0xD470725E0703D22F | Since: 1207
     */
    function navmeshRequestedPathNumWaypoints(path) {
        return NavmeshRequestedPathNumWaypoints(path);
    }
    pathfind.navmeshRequestedPathNumWaypoints = navmeshRequestedPathNumWaypoints;
    /**
     * Returns true if a path of waypoints was found. Waypoints can be retrieved with _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS and _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
     *
     * Hash: 0x8800776E410EB669 | Since: 1207
     */
    function navmeshRequestedPathWaypointsFound(path) {
        return NavmeshRequestedPathWaypointsFound(path);
    }
    pathfind.navmeshRequestedPathWaypointsFound = navmeshRequestedPathWaypointsFound;
    /**
     * Returns a bit flag for seemingly terrain within the waypoints in the path. Checked against bit value 2 to match water in the path, seems to always contain at least 1 though regardless of location/ped.
     *
     * Hash: 0xF61CFEDEAB627BFA | Since: 1207
     */
    function navmeshRequestedPathWaypointsTerrain(path) {
        return NavmeshRequestedPathWaypointsTerrain(path);
    }
    pathfind.navmeshRequestedPathWaypointsTerrain = navmeshRequestedPathWaypointsTerrain;
    /**
     * Returns a vector3 waypoint at the specified index for a path. Use _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS to get available indexes.
     *
     * Hash: 0x430F8319AE56C8A9 | Since: 1207
     */
    function navmeshRequestedPathWaypointByIndex(path, waypointIndex) {
        return new Vector3(NavmeshRequestedPathWaypointByIndex(path, waypointIndex));
    }
    pathfind.navmeshRequestedPathWaypointByIndex = navmeshRequestedPathWaypointByIndex;
    /**
     * Returns eNavMeshQueryStatus
     * enum eNavMeshQueryStatus
     * {
     * QS_NOT_FOUND,
     * QS_COMPLETE,
     * QS_PENDING
     * };
     *
     * It appears that the pending state of 2 is at least also used when cleaning up a request (_NAVMESH_CLEAR_REQUESTED_PATH) or if a request never completes. Eventually queries are invalidated and return 0.
     *
     * Old name: _NAVMESH_QUERY_STATUS
     *
     * Hash: 0x3A0F82F6EE2291C8 | Since: 1207
     */
    function navmeshRequestedQueryStatus(path) {
        return NavmeshRequestedQueryStatus(path);
    }
    pathfind.navmeshRequestedQueryStatus = navmeshRequestedQueryStatus;
    /**
     * No comment provided
     *
     * Hash: 0x2C87C3E1C7B96EE2 | Since: 1207
     */
    function removeNavmeshBlockingVolume(volume) {
        RemoveNavmeshBlockingVolume(volume);
    }
    pathfind.removeNavmeshBlockingVolume = removeNavmeshBlockingVolume;
    /**
     * No comment provided
     *
     * Hash: 0xFD5BB35AAB83FD48 | Since: 1207
     */
    function simulatedRouteCreate(x1, y1, z1, x2, y2, z2) {
        return SimulatedRouteCreate(x1, y1, z1, x2, y2, z2, 0);
    }
    pathfind.simulatedRouteCreate = simulatedRouteCreate;
    /**
     * No comment provided
     *
     * Hash: 0x4907D0E4FB26EE65 | Since: 1207
     */
    function simulatedRouteDelete() {
        SimulatedRouteDelete(undefined);
    }
    pathfind.simulatedRouteDelete = simulatedRouteDelete;
    /**
     * No comment provided
     *
     * Hash: 0x65A8196B8D7F5E0B | Since: 1207
     */
    function simulatedRouteExists() {
        return SimulatedRouteExists(undefined);
    }
    pathfind.simulatedRouteExists = simulatedRouteExists;
})(pathfind || (pathfind = {}));
export var ped;
(function (ped_1) {
    /**
     * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
     *
     * Hash: 0x5BA652A0CD14DF2F | Since: 1207
     */
    function addArmourTo(ped, amount) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddArmourToPed(_ped, amount);
    }
    ped_1.addArmourTo = addArmourTo;
    /**
     * No comment provided
     *
     * Hash: 0x4E23CD07BD161E06 | Since: 1207
     */
    function addCustomFormationLocation(groupId, pos, position) {
        AddCustomFormationLocation(groupId, pos.x, pos.y, pos.z, position);
    }
    ped_1.addCustomFormationLocation = addCustomFormationLocation;
    /**
     * No comment provided
     *
     * Hash: 0xB05945C1E9E60D91 | Since: 1207
     */
    function addFormationLocation(groupId) {
        return AddFormationLocation(groupId, 0, 0, 0);
    }
    ped_1.addFormationLocation = addFormationLocation;
    /**
     * The hash of the created relationship group is output in the second parameter.
     *
     * Hash: 0xF372BC22FCB88606 | Since: 1207
     */
    function addRelationshipGroup(groupHash) {
        if (typeof groupHash === 'string')
            groupHash = misc.getHashKey(groupHash);
        return AddRelationshipGroup(groupHash);
    }
    ped_1.addRelationshipGroup = addRelationshipGroup;
    /**
     * blockingFlags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScenarioBlockingFlags
     *
     * Hash: 0x1B5C85C612E5256E | Since: 1207
     */
    function addScenarioBlockingArea(x1, y1, z1, x2, y2, z2, blockingFlags) {
        return AddScenarioBlockingArea(x1, y1, z1, x2, y2, z2, false, blockingFlags);
    }
    ped_1.addScenarioBlockingArea = addScenarioBlockingArea;
    /**
     * damages a ped with the given amount
     *
     * Hash: 0x697157CED63F18D4 | Since: 1207
     */
    function applyDamageTo(ped, damageAmount, damageArmour, boneId, pedKiller) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _pedKiller = pedKiller instanceof Ped ? pedKiller.handle() : pedKiller;
        ApplyDamageToPed(_ped, damageAmount, damageArmour, boneId, _pedKiller);
    }
    ped_1.applyDamageTo = applyDamageTo;
    /**
     * No comment provided
     *
     * Hash: 0xEF0D582CBF2D9B0F | Since: 1207
     */
    function applyBloodSpecific(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return ApplyPedBloodSpecific(_ped, undefined, 0, 0, 0, 0, undefined, 0);
    }
    ped_1.applyBloodSpecific = applyBloodSpecific;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_decals.lua
     *
     * Hash: 0x46DF918788CB093F | Since: 1207
     */
    function applyDamagePack(ped, damage, mult) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return ApplyPedDamagePack(_ped, damage, mult);
    }
    ped_1.applyDamagePack = applyDamagePack;
    /**
     * No comment provided
     *
     * Hash: 0x51AC07A44D4F5B8A | Since: 1207
     */
    function canKnockOffVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CanKnockPedOffVehicle(_ped);
    }
    ped_1.canKnockOffVehicle = canKnockOffVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x2D64376CF437363E | Since: 1207
     */
    function canBeMounted(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CanPedBeMounted(_ped);
    }
    ped_1.canBeMounted = canBeMounted;
    /**
     * No comment provided
     *
     * Hash: 0xEAD42DE3610D0721 | Since: 1207
     */
    function canInCombatSeeTarget(ped, target) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _target = target instanceof Ped ? target.handle() : target;
        return CanPedInCombatSeeTarget(_ped, _target);
    }
    ped_1.canInCombatSeeTarget = canInCombatSeeTarget;
    /**
     * No comment provided
     *
     * Hash: 0x128F79EDCECE4FD5 | Since: 1207
     */
    function canRagdoll(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CanPedRagdoll(_ped);
    }
    ped_1.canRagdoll = canRagdoll;
    /**
     * Returns:
     * 0 - CTR_CANNOT_TARGET
     * 1 - CTR_CAN_TARGET
     * 2 - CTR_NOT_SURE_YET
     *
     * Hash: 0x7F9B9791D4CB71F6 | Since: 1207
     */
    function canSeeEntity(ped, targetEntity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        return CanPedSeeEntity(_ped, _targetEntity, false, false);
    }
    ped_1.canSeeEntity = canSeeEntity;
    /**
     * No comment provided
     *
     * Hash: 0x9D9473CB82D83A30 | Since: 1207
     */
    function canSeePedCached(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        return CanPedSeePedCached(_ped, _targetPed, false);
    }
    ped_1.canSeePedCached = canSeePedCached;
    /**
     * No comment provided
     *
     * Hash: 0x726256CC1EEB182F | Since: 1207
     */
    function clearFacialIdleAnimOverride(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearFacialIdleAnimOverride(_ped);
    }
    ped_1.clearFacialIdleAnimOverride = clearFacialIdleAnimOverride;
    /**
     * No comment provided
     *
     * Hash: 0x8FE22675A5A45817 | Since: 1207
     */
    function clearBloodDamage(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedBloodDamage(_ped);
    }
    ped_1.clearBloodDamage = clearBloodDamage;
    /**
     * No comment provided
     *
     * Hash: 0x56E3B78C5408D9F4 | Since: 1207
     */
    function clearBloodDamageByZone(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedBloodDamageByZone(_ped, 0);
    }
    ped_1.clearBloodDamageByZone = clearBloodDamageByZone;
    /**
     * No comment provided
     *
     * Hash: 0x523C79AEEFCC4A2A | Since: 1207
     */
    function clearDamageDecalByZone(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return ClearPedDamageDecalByZone(_ped, 0);
    }
    ped_1.clearDamageDecalByZone = clearDamageDecalByZone;
    /**
     * No comment provided
     *
     * Hash: 0x0E5173C163976E38 | Since: 1207
     */
    function clearDecorations(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedDecorations(_ped);
    }
    ped_1.clearDecorations = clearDecorations;
    /**
     * No comment provided
     *
     * Hash: 0x6585D955A68452A5 | Since: 1207
     */
    function clearEnvDirt(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedEnvDirt(_ped);
    }
    ped_1.clearEnvDirt = clearEnvDirt;
    /**
     * No comment provided
     *
     * Hash: 0x8EF6B7AC68E2F01B | Since: 1207
     */
    function clearLastDamageBone(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedLastDamageBone(_ped);
    }
    ped_1.clearLastDamageBone = clearLastDamageBone;
    /**
     * No comment provided
     *
     * Hash: 0x2E05208086BA0651 | Since: 1207
     */
    function clearNonCreationArea() {
        ClearPedNonCreationArea();
    }
    ped_1.clearNonCreationArea = clearNonCreationArea;
    /**
     * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
     *
     * Hash: 0x9C720776DAA43E7E | Since: 1207
     */
    function clearWetness(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedWetness(_ped);
    }
    ped_1.clearWetness = clearWetness;
    /**
     * flags: see SET_RAGDOLL_BLOCKING_FLAGS
     *
     * Hash: 0xD86D101FCFD00A4B | Since: 1207
     */
    function clearRagdollBlockingFlags(ped, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearRagdollBlockingFlags(_ped, flags);
    }
    ped_1.clearRagdollBlockingFlags = clearRagdollBlockingFlags;
    /**
     * No comment provided
     *
     * Hash: 0x5E29243FB56FC6D4 | Since: 1207
     */
    function clearRelationshipBetweenGroups(relationship, group1, group2) {
        if (typeof group1 === 'string')
            group1 = misc.getHashKey(group1);
        if (typeof group2 === 'string')
            group2 = misc.getHashKey(group2);
        ClearRelationshipBetweenGroups(relationship, group1, group2);
    }
    ped_1.clearRelationshipBetweenGroups = clearRelationshipBetweenGroups;
    /**
     * No comment provided
     *
     * Hash: 0xEF29A16337FACADB | Since: 1207
     */
    function clone(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return ClonePed(_ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
    }
    ped_1.clone = clone;
    /**
     * Copies ped's components and props to targetPed.
     * Can be used to clear anything from a ped by cloning it, including bullet holes.
     *
     * Hash: 0xE952D6431689AD9A | Since: 1207
     */
    function cloneToTarget(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        ClonePedToTarget(_ped, _targetPed);
    }
    ped_1.cloneToTarget = cloneToTarget;
    /**
     * No comment provided
     *
     * Hash: 0x9E7738B291706746 | Since: 1207
     */
    function computeSatchelItemForDamage(pedAttached, damageCleanliness) {
        const _pedAttached = pedAttached instanceof Ped ? pedAttached.handle() : pedAttached;
        return ComputeSatchelItemForPedDamage(undefined, _pedAttached, damageCleanliness);
    }
    ped_1.computeSatchelItemForDamage = computeSatchelItemForDamage;
    /**
     * No comment provided
     *
     * Hash: 0x5407B7288D0478B7 | Since: 1207
     */
    function countsInCombatWithTarget(ped, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CountPedsInCombatWithTarget(_ped, flag);
    }
    ped_1.countsInCombatWithTarget = countsInCombatWithTarget;
    /**
     * No comment provided
     *
     * Hash: 0x336B3D200AB007CB | Since: 1207
     */
    function countsInCombatWithTargetWithinRadius(ped, pos, radius, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CountPedsInCombatWithTargetWithinRadius(_ped, pos.x, pos.y, pos.z, radius, flag);
    }
    ped_1.countsInCombatWithTargetWithinRadius = countsInCombatWithTargetWithinRadius;
    /**
     * Creates a new ped group.
     * Groups can contain up to 8 peds.
     *
     * The parameter is unused.
     *
     * Returns a handle to the created group, or 0 if a group couldn't be created.
     *
     * Hash: 0x90370EBE0FEE1A3D | Since: 1207
     */
    function createGroup(taskAllocator) {
        return CreateGroup(taskAllocator);
    }
    ped_1.createGroup = createGroup;
    /**
     * No comment provided
     *
     * Hash: 0xD49F9B0955C367DE | Since: 1207
     */
    function create(modelHash, pos, heading, isNetwork, bScriptHostPed) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePed(modelHash, pos.x, pos.y, pos.z, heading, isNetwork, bScriptHostPed, false, false);
    }
    ped_1.create = create;
    /**
     * seatIndex:
     * enum eVehicleSeat
     * {
     * VS_ANY_PASSENGER = -2,
     * VS_DRIVER,
     * VS_FRONT_RIGHT,
     * VS_BACK_LEFT,
     * VS_BACK_RIGHT,
     * VS_EXTRA_LEFT_1,
     * VS_EXTRA_RIGHT_1,
     * VS_EXTRA_LEFT_2,
     * VS_EXTRA_RIGHT_2,
     * VS_EXTRA_LEFT_3,
     * VS_EXTRA_RIGHT_3,
     * VS_NUM_SEATS
     * };
     *
     * Hash: 0x7DD959874C1FD534 | Since: 1207
     */
    function createInsideVehicle(vehicle, modelHash, seatIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePedInsideVehicle(_vehicle, modelHash, seatIndex, false, false, false);
    }
    ped_1.createInsideVehicle = createInsideVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xF89AA2BD01FC06B7 | Since: 1207
     */
    function createOnMount(mount, modelHash, index) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePedOnMount(_mount, modelHash, index, false, false, false, false);
    }
    ped_1.createOnMount = createOnMount;
    /**
     * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0xCC0EF140F99365C5 | Since: 1207
     */
    function deletePed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        DeletePed(_ped);
    }
    ped_1.deletePed = deletePed;
    /**
     * No comment provided
     *
     * Hash: 0xED00D72F81CF7278 | Since: 1207
     */
    function detachCarriableEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DetachCarriableEntity(_entity, false, false);
    }
    ped_1.detachCarriableEntity = detachCarriableEntity;
    /**
     * No comment provided
     *
     * Hash: 0x733C87D4CE22BEA2 | Since: 1207
     */
    function disableInjuredOnGroundBehaviour(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        DisablePedInjuredOnGroundBehaviour(_ped);
    }
    ped_1.disableInjuredOnGroundBehaviour = disableInjuredOnGroundBehaviour;
    /**
     * No comment provided
     *
     * Hash: 0x7C6B0C22F9F40BBE | Since: 1207
     */
    function doesGroupExist(groupId) {
        return DoesGroupExist(groupId);
    }
    ped_1.doesGroupExist = doesGroupExist;
    /**
     * Forces the ped to fall back and kills it.
     *
     * It doesn't really explode the ped's head but it kills the ped
     *
     * Hash: 0x2D05CED3A38D0F3A | Since: 1207
     */
    function explodeHead(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        ExplodePedHead(_ped, weaponHash);
    }
    ped_1.explodeHead = explodeHead;
    /**
     * No comment provided
     *
     * Hash: 0x7043D0681285BA2D | Since: 1207
     */
    function fadeAndDestroy(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        FadeAndDestroyPed(_ped);
    }
    ped_1.fadeAndDestroy = fadeAndDestroy;
    /**
     * No comment provided
     *
     * Hash: 0xB5ACE8B23A438EC0 | Since: 1207
     */
    function findAllAttachedCarriableEntities(ped, itemset) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        FindAllAttachedCarriableEntities(_ped, itemset);
    }
    ped_1.findAllAttachedCarriableEntities = findAllAttachedCarriableEntities;
    /**
     * Old name: _FREEZE_PED_CAMERA_ROTATION
     *
     * Hash: 0xFF287323B0E2C69A | Since: 1207
     */
    function forceAllHeadingValuesToAlign(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ForceAllHeadingValuesToAlign(_ped);
    }
    ped_1.forceAllHeadingValuesToAlign = forceAllHeadingValuesToAlign;
    /**
     * No comment provided
     *
     * Hash: 0x2208438012482A1A | Since: 1207
     */
    function forceAiAndAnimationUpdate(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ForcePedAiAndAnimationUpdate(_ped, false, false);
    }
    ped_1.forceAiAndAnimationUpdate = forceAiAndAnimationUpdate;
    /**
     * motionStateHash: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CPedMotionStates__eMotionState
     *
     * Hash: 0xF28965D04F570DCA | Since: 1207
     */
    function forceMotionState(ped, motionStateHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof motionStateHash === 'string')
            motionStateHash = misc.getHashKey(motionStateHash);
        return ForcePedMotionState(_ped, motionStateHash, false, 0, false);
    }
    ped_1.forceMotionState = forceMotionState;
    /**
     * No comment provided
     *
     * Hash: 0xBE22B26DD764C040 | Since: 1207
     */
    function getAnimInitialOffsetPosition(pos, rot) {
        return new Vector3(GetAnimInitialOffsetPosition(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0));
    }
    ped_1.getAnimInitialOffsetPosition = getAnimInitialOffsetPosition;
    /**
     * No comment provided
     *
     * Hash: 0x4B805E6046EE9E47 | Since: 1207
     */
    function getAnimInitialOffsetRotation(pos, rot) {
        return new Vector3(GetAnimInitialOffsetRotation(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0));
    }
    ped_1.getAnimInitialOffsetRotation = getAnimInitialOffsetRotation;
    /**
     * No comment provided
     *
     * Hash: 0x608BC6A6AACD5036 | Since: 1207
     */
    function getCarriedAttachedInfoForSlot() {
        return GetCarriedAttachedInfoForSlot(undefined, undefined, undefined, undefined);
    }
    ped_1.getCarriedAttachedInfoForSlot = getCarriedAttachedInfoForSlot;
    /**
     * Gets the closest ped in a radius.
     *
     * Hash: 0xC33AB876A77F8164 | Since: 1207
     */
    function getClosest(pos, radius, pedType) {
        return GetClosestPed(pos.x, pos.y, pos.z, radius, false, false, false, false, false, pedType);
    }
    ped_1.getClosest = getClosest;
    /**
     * No comment provided
     *
     * Hash: 0x52DFF8A10508090A | Since: 1207
     */
    function getCombatFloat(ped, combatType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCombatFloat(_ped, combatType);
    }
    ped_1.getCombatFloat = getCombatFloat;
    /**
     * No comment provided
     *
     * Hash: 0xCD66FEA29400A0B5 | Since: 1207
     */
    function getCurrentTargetFor(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCurrentTargetForPed(_ped);
    }
    ped_1.getCurrentTargetFor = getCurrentTargetFor;
    /**
     * No comment provided
     *
     * Hash: 0xCD5003B097200F36 | Since: 1207
     */
    function getDeadPickupCoords(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return new Vector3(GetDeadPedPickupCoords(_ped, 0, 0));
    }
    ped_1.getDeadPickupCoords = getDeadPickupCoords;
    /**
     * No comment provided
     *
     * Hash: 0x8DE69FE35CA09A45 | Since: 1207
     */
    function getGroupSize(groupId) {
        return GetGroupSize(groupId);
    }
    ped_1.getGroupSize = getGroupSize;
    /**
     * No comment provided
     *
     * Hash: 0xA454D234E45BB6E5 | Since: 1207
     */
    function getIsRespondingToNegativeInteraction(ped, player) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        return GetIsPedRespondingToNegativeInteraction(_ped, _player);
    }
    ped_1.getIsRespondingToNegativeInteraction = getIsRespondingToNegativeInteraction;
    /**
     * No comment provided
     *
     * Hash: 0x9337183FDA2E9035 | Since: 1207
     */
    function getIsRespondingToPositiveInteraction(ped, player) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        return GetIsPedRespondingToPositiveInteraction(_ped, _player);
    }
    ped_1.getIsRespondingToPositiveInteraction = getIsRespondingToPositiveInteraction;
    /**
     * No comment provided
     *
     * Hash: 0x5486A79D9FBD342D | Since: 1207
     */
    function getJackTarget(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetJackTarget(_ped);
    }
    ped_1.getJackTarget = getJackTarget;
    /**
     * No comment provided
     *
     * Hash: 0x14169FA823679E41 | Since: 1207
     */
    function getLootingPickupTargetEntity(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLootingPickupTargetEntity(_ped);
    }
    ped_1.getLootingPickupTargetEntity = getLootingPickupTargetEntity;
    /**
     * No comment provided
     *
     * Hash: 0x18A3E9EE1297FD39 | Since: 1207
     */
    function getMeleeTargetFor(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetMeleeTargetForPed(_ped);
    }
    ped_1.getMeleeTargetFor = getMeleeTargetFor;
    /**
     * This is a way to get what drawables a ped has equipped
     * Example: you are able to tell if the ped has the drawable PLAYER_ZERO_HAT_017 attached
     * Note: this works with non shop components, direct .ydd files.
     *
     * Hash: 0xA9C28516A6DC9D56 | Since: 1207
     */
    function getMetaAssetGuids(ped, index) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetMetaPedAssetGuids(_ped, index);
    }
    ped_1.getMetaAssetGuids = getMetaAssetGuids;
    /**
     * No comment provided
     *
     * Hash: 0xE7998FEC53A33BBE | Since: 1207
     */
    function getMetaAssetTint(ped, index) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetMetaPedAssetTint(_ped, index);
    }
    ped_1.getMetaAssetTint = getMetaAssetTint;
    /**
     * No comment provided
     *
     * Hash: 0xE7E11B8DCBED1058 | Since: 1207
     */
    function getMount(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetMount(_ped);
    }
    ped_1.getMount = getMount;
    /**
     * No comment provided
     *
     * Hash: 0x10C70A515BC03707 | Since: 1207
     */
    function getNumMetaOutfits(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetNumMetaPedOutfits(_ped);
    }
    ped_1.getNumMetaOutfits = getNumMetaOutfits;
    /**
     * No comment provided
     *
     * Hash: 0x9B128DC36C1E04CF | Since: 1207
     */
    function getsJacker(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedsJacker(_ped);
    }
    ped_1.getsJacker = getsJacker;
    /**
     * No comment provided
     *
     * Hash: 0x37F4AD56ECBC0CD6 | Since: 1207
     */
    function getAccuracy(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedAccuracy(_ped);
    }
    ped_1.getAccuracy = getAccuracy;
    /**
     * No comment provided
     *
     * Hash: 0x5CCE68DBD5FE93EC | Since: 1207
     */
    function getAsGroupLeader(groupID) {
        return GetPedAsGroupLeader(groupID);
    }
    ped_1.getAsGroupLeader = getAsGroupLeader;
    /**
     * No comment provided
     *
     * Hash: 0x51455483CF23ED97 | Since: 1207
     */
    function getAsGroupMember(groupID, memberNumber) {
        return GetPedAsGroupMember(groupID, memberNumber);
    }
    ped_1.getAsGroupMember = getAsGroupMember;
    /**
     * No comment provided
     *
     * Hash: 0x4912DFE492DB98CD | Since: 1207
     */
    function getBlackboardScriptBool(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBlackboardScriptBool(_ped);
    }
    ped_1.getBlackboardScriptBool = getBlackboardScriptBool;
    /**
     * No comment provided
     *
     * Hash: 0xA29FD00D45311EB7 | Since: 1207
     */
    function getBlackboardScriptFloat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBlackboardScriptFloat(_ped);
    }
    ped_1.getBlackboardScriptFloat = getBlackboardScriptFloat;
    /**
     * No comment provided
     *
     * Hash: 0xB71B91B398F8F067 | Since: 1207
     */
    function getBlackboardScriptInt(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBlackboardScriptInt(_ped);
    }
    ped_1.getBlackboardScriptInt = getBlackboardScriptInt;
    /**
     * Gets the position of the specified bone of the specified ped.
     *
     * ped: The ped to get the position of a bone from.
     * boneId: The ID of the bone to get the position from. This is NOT the index.
     * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
     * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
     * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
     *
     * Hash: 0x17C07FC640E86B4E | Since: 1207
     */
    function getBoneCoords(ped, boneId, offsetX, offsetY, offsetZ) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return new Vector3(GetPedBoneCoords(_ped, boneId, offsetX, offsetY, offsetZ));
    }
    ped_1.getBoneCoords = getBoneCoords;
    /**
     * no bone = -1
     *
     * Hash: 0x3F428D08BE5AAE31 | Since: 1207
     */
    function getBoneIndex(ped, boneId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBoneIndex(_ped, boneId);
    }
    ped_1.getBoneIndex = getBoneIndex;
    /**
     * Returns the hash of the weapon/model/object that killed the ped.
     *
     * Hash: 0x16FFE42AB2D2DC59 | Since: 1207
     */
    function getCauseOfDeath(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedCauseOfDeath(_ped);
    }
    ped_1.getCauseOfDeath = getCauseOfDeath;
    /**
     * No comment provided
     *
     * Hash: 0xDEA92412FCAEB3F5 | Since: 1207
     */
    function getCombatMovement(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedCombatMovement(_ped);
    }
    ped_1.getCombatMovement = getCombatMovement;
    /**
     * flagId: see SET_PED_CONFIG_FLAG
     *
     * Hash: 0x7EE53118C892B513 | Since: 1207
     */
    function getConfigFlag(ped, flagId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedConfigFlag(_ped, flagId, false);
    }
    ped_1.getConfigFlag = getConfigFlag;
    /**
     * No comment provided
     *
     * Hash: 0xD5FE956C70FF370B | Since: 1207
     */
    function getCrouchMovement(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedCrouchMovement(_ped);
    }
    ped_1.getCrouchMovement = getCrouchMovement;
    /**
     * Old name: _GET_PED_CURRENT_MOVEMENT_SPEED
     *
     * Hash: 0xF60165E1D2C5370B | Since: 1207
     */
    function getCurrentMoveBlendRatio(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedCurrentMoveBlendRatio(_ped);
    }
    ped_1.getCurrentMoveBlendRatio = getCurrentMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0x3C06B8786DD94CD1 | Since: 1207
     */
    function getDefensiveAreaPosition(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return new Vector3(GetPedDefensiveAreaPosition(_ped, false));
    }
    ped_1.getDefensiveAreaPosition = getDefensiveAreaPosition;
    /**
     * No comment provided
     *
     * Hash: 0x2311F15D971AA680 | Since: 1207
     */
    function getGrappleState(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedGrappleState(_ped);
    }
    ped_1.getGrappleState = getGrappleState;
    /**
     * Returns the groupId of which the specified ped is a member of.
     *
     * Hash: 0xF162E133B4E7A675 | Since: 1207
     */
    function getGroupIndex(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedGroupIndex(_ped);
    }
    ped_1.getGroupIndex = getGroupIndex;
    /**
     * No comment provided
     *
     * Hash: 0x3BDFCF25B58B0415 | Since: 1207
     */
    function getIsBeingGrappled(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedIsBeingGrappled(_ped);
    }
    ped_1.getIsBeingGrappled = getIsBeingGrappled;
    /**
     * No comment provided
     *
     * Hash: 0xC48A9EB0D499B3E5 | Since: 1207
     */
    function getIsDoingCombatRoll(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedIsDoingCombatRoll(_ped);
    }
    ped_1.getIsDoingCombatRoll = getIsDoingCombatRoll;
    /**
     * No comment provided
     *
     * Hash: 0x0E99E3BF11BB6367 | Since: 1207
     */
    function getIsGrappling(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedIsGrappling(_ped);
    }
    ped_1.getIsGrappling = getIsGrappling;
    /**
     * No comment provided
     *
     * Hash: 0xD75960F6BD9EA49C | Since: 1207
     */
    function getLastDamageBone(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedLastDamageBone(_ped);
    }
    ped_1.getLastDamageBone = getLastDamageBone;
    /**
     * enum ePedLootStatus
     * {
     * PLS_NONE,
     * PLS_PRE_LOOT,
     * PLS_SAMPLING,
     * PLS_SKINNING
     * };
     *
     * Hash: 0xC737697C41628340 | Since: 1311
     */
    function getLootStatusMp(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedLootStatusMp(_ped);
    }
    ped_1.getLootStatusMp = getLootStatusMp;
    /**
     * No comment provided
     *
     * Hash: 0x4700A416E8324EF3 | Since: 1207
     */
    function getMaxHealth(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedMaxHealth(_ped);
    }
    ped_1.getMaxHealth = getMaxHealth;
    /**
     * No comment provided
     *
     * Hash: 0x3F69145BBA87BAE7 | Since: 1207
     */
    function getMoney(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedMoney(_ped);
    }
    ped_1.getMoney = getMoney;
    /**
     * No comment provided
     *
     * Hash: 0x243E1B4607040057 | Since: 1207
     */
    function getMotionFocusEntity(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedMotionFocusEntity(_ped);
    }
    ped_1.getMotionFocusEntity = getMotionFocusEntity;
    /**
     * No comment provided
     *
     * Hash: 0x23F8F5FC7E8C4A6B | Since: 1207
     */
    function getNearbyPeds(ped, ignoredPedType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedNearbyPeds(_ped, ignoredPedType, 0);
    }
    ped_1.getNearbyPeds = getNearbyPeds;
    /**
     * No comment provided
     *
     * Hash: 0xCFF869CBFA210D82 | Since: 1207
     */
    function getNearbyVehicles(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedNearbyVehicles(_ped);
    }
    ped_1.getNearbyVehicles = getNearbyVehicles;
    /**
     * No comment provided
     *
     * Hash: 0x42FDD0F017B1E38E | Since: 1207
     */
    function getRelationshipGroupDefaultHash(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedRelationshipGroupDefaultHash(_ped);
    }
    ped_1.getRelationshipGroupDefaultHash = getRelationshipGroupDefaultHash;
    /**
     * No comment provided
     *
     * Hash: 0x7DBDD04862D95F04 | Since: 1207
     */
    function getRelationshipGroupHash(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedRelationshipGroupHash(_ped);
    }
    ped_1.getRelationshipGroupHash = getRelationshipGroupHash;
    /**
     * No comment provided
     *
     * Hash: 0xAF9E59B1B1FBF2A0 | Since: 1207
     */
    function getResetFlag(ped, flagId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedResetFlag(_ped, flagId);
    }
    ped_1.getResetFlag = getResetFlag;
    /**
     * Returns the entity that killed the ped
     *
     * It is best to check if the Ped is dead before asking for its killer.
     *
     * Hash: 0x93C8B64DEB84728C | Since: 1207
     */
    function getSourceOfDeath(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedSourceOfDeath(_ped);
    }
    ped_1.getSourceOfDeath = getSourceOfDeath;
    /**
     * Returns whether the entity is in stealth mode
     *
     * Hash: 0x7C2AC9CA66575FBF | Since: 1207
     */
    function getStealthMovement(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedStealthMovement(_ped);
    }
    ped_1.getStealthMovement = getStealthMovement;
    /**
     * No comment provided
     *
     * Hash: 0x1E98817B311AE98A | Since: 1207
     */
    function getTimeOfDeath(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedTimeOfDeath(_ped);
    }
    ped_1.getTimeOfDeath = getTimeOfDeath;
    /**
     * No comment provided
     *
     * Hash: 0x936E7CAD0AE2EE14 | Since: 1207
     */
    function getToPlayerWeaponDamageModifier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedToPlayerWeaponDamageModifier(_ped);
    }
    ped_1.getToPlayerWeaponDamageModifier = getToPlayerWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0xFF059E1E4C01E63C | Since: 1207
     */
    function getType(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedType(_ped);
    }
    ped_1.getType = getType;
    /**
     * No comment provided
     *
     * Hash: 0x6A3975DEA89F9A17 | Since: 1207
     */
    function getPlayerIsFollowing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPlayerPedIsFollowing(_ped);
    }
    ped_1.getPlayerIsFollowing = getPlayerIsFollowing;
    /**
     * No comment provided
     *
     * Hash: 0x9E6B70061662AE5C | Since: 1207
     */
    function getRelationshipBetweenGroups(group1, group2) {
        if (typeof group1 === 'string')
            group1 = misc.getHashKey(group1);
        if (typeof group2 === 'string')
            group2 = misc.getHashKey(group2);
        return GetRelationshipBetweenGroups(group1, group2);
    }
    ped_1.getRelationshipBetweenGroups = getRelationshipBetweenGroups;
    /**
     * No comment provided
     *
     * Hash: 0xEBA5AD3A0EAF7121 | Since: 1207
     */
    function getRelationshipBetweens(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        return GetRelationshipBetweenPeds(_ped1, _ped2);
    }
    ped_1.getRelationshipBetweens = getRelationshipBetweens;
    /**
     * No comment provided
     *
     * Hash: 0x6F4C85ACD641BCD2 | Since: 1207
     */
    function getSeatIsTryingToEnter(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetSeatPedIsTryingToEnter(_ped);
    }
    ped_1.getSeatIsTryingToEnter = getSeatIsTryingToEnter;
    /**
     * No comment provided
     *
     * Hash: 0x4E76CB57222A00E5 | Since: 1207
     */
    function getSeatIsUsing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetSeatPedIsUsing(_ped);
    }
    ped_1.getSeatIsUsing = getSeatIsUsing;
    /**
     * No comment provided
     *
     * Hash: 0x511F1A683387C7E2 | Since: 1207
     */
    function getTrackedPixelcount(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTrackedPedPixelcount(_ped);
    }
    ped_1.getTrackedPixelcount = getTrackedPixelcount;
    /**
     * No comment provided
     *
     * Hash: 0xF92691AED837A5FC | Since: 1207
     */
    function getVehicleIsEntering(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetVehiclePedIsEntering(_ped);
    }
    ped_1.getVehicleIsEntering = getVehicleIsEntering;
    /**
     * Gets the vehicle the specified Ped is in.
     *
     * If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned.
     *
     * Hash: 0x9A9112A0FE9A4713 | Since: 1207
     */
    function getVehicleIsIn(ped, lastVehicle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetVehiclePedIsIn(_ped, lastVehicle);
    }
    ped_1.getVehicleIsIn = getVehicleIsIn;
    /**
     * No comment provided
     *
     * Hash: 0x6094AD011A2EA87D | Since: 1207
     */
    function getVehicleIsUsing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetVehiclePedIsUsing(_ped);
    }
    ped_1.getVehicleIsUsing = getVehicleIsUsing;
    /**
     * No comment provided
     *
     * Hash: 0x2B02DB082258625F | Since: 1207
     */
    function giveHashScenarioProp(ped, _object, scenarioType, p4) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const __object = _object instanceof Object ? _object.handle() : _object;
        if (typeof scenarioType === 'string')
            scenarioType = misc.getHashKey(scenarioType);
        if (typeof p4 === 'string')
            p4 = misc.getHashKey(p4);
        return GivePedHashScenarioProp(_ped, __object, scenarioType, p4, false);
    }
    ped_1.giveHashScenarioProp = giveHashScenarioProp;
    /**
     * No comment provided
     *
     * Hash: 0x854BC9B1A1CCD034 | Since: 1207
     */
    function hasMotionTypeAssetLoaded(nameHash, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof nameHash === 'string')
            nameHash = misc.getHashKey(nameHash);
        return HasMotionTypeAssetLoaded(nameHash, _ped);
    }
    ped_1.hasMotionTypeAssetLoaded = hasMotionTypeAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x7DD7FB3480D8083E | Since: 1207
     */
    function initDefaultHealth(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        InitPedDefaultHealth(_ped);
    }
    ped_1.initDefaultHealth = initDefaultHealth;
    /**
     * No comment provided
     *
     * Hash: 0x4759CC730F947C81 | Since: 1207
     */
    function instantlyFillPopulation() {
        InstantlyFillPedPopulation();
    }
    ped_1.instantlyFillPopulation = instantlyFillPopulation;
    /**
     * No comment provided
     *
     * Hash: 0xD543D3A8FDE4F185 | Since: 1207
     */
    function isAnimalInteractionPossible(ped, animal) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        return IsAnimalInteractionPossible(_ped, _animal);
    }
    ped_1.isAnimalInteractionPossible = isAnimalInteractionPossible;
    /**
     * No comment provided
     *
     * Hash: 0x68772DB2B2526F9F | Since: 1311
     */
    function isAnyHostileNearPoint(ped, pos, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsAnyHostilePedNearPoint(_ped, pos.x, pos.y, pos.z, radius);
    }
    ped_1.isAnyHostileNearPoint = isAnyHostileNearPoint;
    /**
     * No comment provided
     *
     * Hash: 0x083961498679DC9F | Since: 1207
     */
    function isAnyNearPoint(pos, radius) {
        return IsAnyPedNearPoint(pos.x, pos.y, pos.z, radius);
    }
    ped_1.isAnyNearPoint = isAnyNearPoint;
    /**
     * No comment provided
     *
     * Hash: 0xA0D3D71EA1086C55 | Since: 1207
     */
    function isAnyShootingInArea(x1, y1, z1, x2, y2, z2) {
        return IsAnyPedShootingInArea(x1, y1, z1, x2, y2, z2, false, false);
    }
    ped_1.isAnyShootingInArea = isAnyShootingInArea;
    /**
     * No comment provided
     *
     * Hash: 0xC8D523BF5BBD3808 | Since: 1207
     */
    function isEventInQueue(ped, eventType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return IsEventInQueue(_ped, eventType);
    }
    ped_1.isEventInQueue = isEventInQueue;
    /**
     * No comment provided
     *
     * Hash: 0x909AD9E9A92A10DF | Since: 1207
     */
    function isGroupLocallyControlled(groupId) {
        return IsGroupLocallyControlled(groupId);
    }
    ped_1.isGroupLocallyControlled = isGroupLocallyControlled;
    /**
     * No comment provided
     *
     * Hash: 0x0EE3F0D7FECCC54F | Since: 1207
     */
    function isInstantlyFillPopulationFinished() {
        return IsInstantlyFillPedPopulationFinished();
    }
    ped_1.isInstantlyFillPopulationFinished = isInstantlyFillPopulationFinished;
    /**
     * No comment provided
     *
     * Hash: 0xFB1E7998B8595825 | Since: 1207
     */
    function isLocationSpawnSafe(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsLocationSpawnSafe(_ped, 0);
    }
    ped_1.isLocationSpawnSafe = isLocationSpawnSafe;
    /**
     * No comment provided
     *
     * Hash: 0x3998B1276A3300E5 | Since: 1207
     */
    function isAimingFromCover(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedAimingFromCover(_ped);
    }
    ped_1.isAimingFromCover = isAimingFromCover;
    /**
     * No comment provided
     *
     * Hash: 0x12534C348C6CB68B | Since: 1207
     */
    function isAPlayer(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedAPlayer(_ped);
    }
    ped_1.isAPlayer = isAPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xEF3A8772F085B4AA | Since: 1207
     */
    function isBeingDragged(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedBeingDragged(_ped);
    }
    ped_1.isBeingDragged = isBeingDragged;
    /**
     * No comment provided
     *
     * Hash: 0xD453BB601D4A606E | Since: 1207
     */
    function isBeingHogtied(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedBeingHogtied(_ped);
    }
    ped_1.isBeingHogtied = isBeingHogtied;
    /**
     * No comment provided
     *
     * Hash: 0x9A497FE2DF198913 | Since: 1207
     */
    function isBeingJacked(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedBeingJacked(_ped);
    }
    ped_1.isBeingJacked = isBeingJacked;
    /**
     * No comment provided
     *
     * Hash: 0x863B23EFDE9C5DF2 | Since: 1207
     */
    function isBeingStealthKilled(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedBeingStealthKilled(_ped);
    }
    ped_1.isBeingStealthKilled = isBeingStealthKilled;
    /**
     * No comment provided
     *
     * Hash: 0x4FBACCE3B4138EE8 | Since: 1207
     */
    function isBeingStunned(ped, weaponType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponType === 'string')
            weaponType = misc.getHashKey(weaponType);
        return IsPedBeingStunned(_ped, weaponType);
    }
    ped_1.isBeingStunned = isBeingStunned;
    /**
     * No comment provided
     *
     * Hash: 0xA911EE21EDF69DAF | Since: 1207
     */
    function isCarryingSomething(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedCarryingSomething(_ped);
    }
    ped_1.isCarryingSomething = isCarryingSomething;
    /**
     * No comment provided
     *
     * Hash: 0x53E8CB4F48BFE623 | Since: 1207
     */
    function isClimbing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedClimbing(_ped);
    }
    ped_1.isClimbing = isClimbing;
    /**
     * No comment provided
     *
     * Hash: 0x3317DEDB88C95038 | Since: 1207
     */
    function isDeadOrDying(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedDeadOrDying(_ped, false);
    }
    ped_1.isDeadOrDying = isDeadOrDying;
    /**
     * No comment provided
     *
     * Hash: 0xBA63D9FE45412247 | Since: 1207
     */
    function isDefensiveAreaActive(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedDefensiveAreaActive(_ped, false);
    }
    ped_1.isDefensiveAreaActive = isDefensiveAreaActive;
    /**
     * No comment provided
     *
     * Hash: 0x5527B8246FEF9B11 | Since: 1207
     */
    function isDiving(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedDiving(_ped);
    }
    ped_1.isDiving = isDiving;
    /**
     * No comment provided
     *
     * Hash: 0x1D46B417F926D34D | Since: 1207
     */
    function isEnteringAnyTransport(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedEnteringAnyTransport(_ped);
    }
    ped_1.isEnteringAnyTransport = isEnteringAnyTransport;
    /**
     * Presumably returns the Entity that the Ped is currently diving out of the way of.
     *
     * Hash: 0x414641C26E105898 | Since: 1207
     */
    function isEvasiveDiving(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedEvasiveDiving(_ped);
    }
    ped_1.isEvasiveDiving = isEvasiveDiving;
    /**
     * angle is ped's view cone
     *
     * Hash: 0xD71649DB0A545AA3 | Since: 1207
     */
    function isFacingPed(ped, otherPed, angle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _otherPed = otherPed instanceof Ped ? otherPed.handle() : otherPed;
        return IsPedFacingPed(_ped, _otherPed, angle);
    }
    ped_1.isFacingPed = isFacingPed;
    /**
     * No comment provided
     *
     * Hash: 0xFB92A102F1C4DFA3 | Since: 1207
     */
    function isFalling(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedFalling(_ped);
    }
    ped_1.isFalling = isFalling;
    /**
     * No comment provided
     *
     * Hash: 0x3E592D0486DEC0F6 | Since: 1207
     */
    function isFallingOver(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedFallingOver(_ped);
    }
    ped_1.isFallingOver = isFallingOver;
    /**
     * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
     * If the handle is invalid, the function returns true.
     *
     * Hash: 0xD839450756ED5A80 | Since: 1207
     */
    function isFatallyInjured(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedFatallyInjured(_ped);
    }
    ped_1.isFatallyInjured = isFatallyInjured;
    /**
     * No comment provided
     *
     * Hash: 0xBBCCE00B381F8482 | Since: 1207
     */
    function isFleeing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedFleeing(_ped);
    }
    ped_1.isFleeing = isFleeing;
    /**
     * No comment provided
     *
     * Hash: 0x95CBC65780DE7EB1 | Since: 1207
     */
    function isFullyOnMount(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedFullyOnMount(_ped, false);
    }
    ped_1.isFullyOnMount = isFullyOnMount;
    /**
     * No comment provided
     *
     * Hash: 0xBB062B2B5722478E | Since: 1207
     */
    function isGettingIntoAVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedGettingIntoAVehicle(_ped);
    }
    ped_1.isGettingIntoAVehicle = isGettingIntoAVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x9F65DBC537E59AD5 | Since: 1207
     */
    function isGoingIntoCover(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedGoingIntoCover(_ped);
    }
    ped_1.isGoingIntoCover = isGoingIntoCover;
    /**
     * No comment provided
     *
     * Hash: 0x9BB01E3834671191 | Since: 1207
     */
    function isGroupMember(ped, groupId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedGroupMember(_ped, groupId, false);
    }
    ped_1.isGroupMember = isGroupMember;
    /**
     * No comment provided
     *
     * Hash: 0x1C86D8AEF8254B78 | Since: 1207
     */
    function isHangingOnToVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedHangingOnToVehicle(_ped);
    }
    ped_1.isHangingOnToVehicle = isHangingOnToVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xFCF37A457CB96DC0 | Since: 1207
     */
    function isHeadingTowardsPosition(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedHeadingTowardsPosition(_ped, pos.x, pos.y, pos.z, 0);
    }
    ped_1.isHeadingTowardsPosition = isHeadingTowardsPosition;
    /**
     * No comment provided
     *
     * Hash: 0x813A0A7C9D2E831F | Since: 1207
     */
    function isHeadtrackingEntity(ped, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsPedHeadtrackingEntity(_ped, _entity);
    }
    ped_1.isHeadtrackingEntity = isHeadtrackingEntity;
    /**
     * No comment provided
     *
     * Hash: 0x5CD3CB88A7F8850D | Since: 1207
     */
    function isHeadtrackingPed(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        return IsPedHeadtrackingPed(_ped1, _ped2);
    }
    ped_1.isHeadtrackingPed = isHeadtrackingPed;
    /**
     * No comment provided
     *
     * Hash: 0x3AA24CCC0D451379 | Since: 1207
     */
    function isHogtied(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedHogtied(_ped);
    }
    ped_1.isHogtied = isHogtied;
    /**
     * No comment provided
     *
     * Hash: 0x42429C674B61238B | Since: 1207
     */
    function isHogtying(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedHogtying(_ped);
    }
    ped_1.isHogtying = isHogtying;
    /**
     * Returns true/false if the ped is/isn't humanoid.
     *
     * Hash: 0xB980061DA992779D | Since: 1207
     */
    function isHuman(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedHuman(_ped);
    }
    ped_1.isHuman = isHuman;
    /**
     * No comment provided
     *
     * Hash: 0xB655DB7582AEC805 | Since: 1207
     */
    function isIncapacitated(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedIncapacitated(_ped);
    }
    ped_1.isIncapacitated = isIncapacitated;
    /**
     * Gets a value indicating whether this ped's health is below its injured threshold.
     *
     * The default threshold is 100.
     *
     * Hash: 0x84A2DD9AC37C35C1 | Since: 1207
     */
    function isInjured(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInjured(_ped);
    }
    ped_1.isInjured = isInjured;
    /**
     * No comment provided
     *
     * Hash: 0x2E0E1C2B4F6CB339 | Since: 1207
     */
    function isInAnyBoat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInAnyBoat(_ped);
    }
    ped_1.isInAnyBoat = isInAnyBoat;
    /**
     * No comment provided
     *
     * Hash: 0x298B91AE825E5705 | Since: 1207
     */
    function isInAnyHeli(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInAnyHeli(_ped);
    }
    ped_1.isInAnyHeli = isInAnyHeli;
    /**
     * No comment provided
     *
     * Hash: 0x5FFF4CFC74D8FB80 | Since: 1207
     */
    function isInAnyPlane(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInAnyPlane(_ped);
    }
    ped_1.isInAnyPlane = isInAnyPlane;
    /**
     * No comment provided
     *
     * Hash: 0x6E575D6A898AB852 | Since: 1207
     */
    function isInAnyTaxi(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInAnyTaxi(_ped);
    }
    ped_1.isInAnyTaxi = isInAnyTaxi;
    /**
     * No comment provided
     *
     * Hash: 0x6F972C1AB75A1ED0 | Since: 1207
     */
    function isInAnyTrain(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInAnyTrain(_ped);
    }
    ped_1.isInAnyTrain = isInAnyTrain;
    /**
     * Gets a value indicating whether the specified ped is in any vehicle.
     *
     * Hash: 0x997ABD671D25CA0B | Since: 1207
     */
    function isInAnyVehicle(ped, atGetIn) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInAnyVehicle(_ped, atGetIn);
    }
    ped_1.isInAnyVehicle = isInAnyVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x4859F1FC66A6278E | Since: 1207
     */
    function isInCombat(ped, target) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _target = target instanceof Ped ? target.handle() : target;
        return IsPedInCombat(_ped, _target);
    }
    ped_1.isInCombat = isInCombat;
    /**
     * No comment provided
     *
     * Hash: 0x60DFD0691A170B88 | Since: 1207
     */
    function isInCover(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInCover(_ped, false, false);
    }
    ped_1.isInCover = isInCover;
    /**
     * No comment provided
     *
     * Hash: 0x845333B3150583AB | Since: 1207
     */
    function isInCoverFacingLeft(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInCoverFacingLeft(_ped);
    }
    ped_1.isInCoverFacingLeft = isInCoverFacingLeft;
    /**
     * No comment provided
     *
     * Hash: 0x9134873537FA419C | Since: 1207
     */
    function isInFlyingVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInFlyingVehicle(_ped);
    }
    ped_1.isInFlyingVehicle = isInFlyingVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x5891CAC5D4ACFF74 | Since: 1207
     */
    function isInGroup(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInGroup(_ped);
    }
    ped_1.isInGroup = isInGroup;
    /**
     * Notes: The function only returns true while the ped is:
     * A.) Swinging a random melee attack (including pistol-whipping)
     *
     * B.) Reacting to being hit by a melee attack (including pistol-whipping)
     *
     * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
     *
     * You don't have to be holding the melee-targeting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
     *
     * Hash: 0x4E209B2C1EAD5159 | Since: 1207
     */
    function isInMeleeCombat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInMeleeCombat(_ped);
    }
    ped_1.isInMeleeCombat = isInMeleeCombat;
    /**
     * No comment provided
     *
     * Hash: 0x796D90EFB19AA332 | Since: 1207
     */
    function isInModel(ped, modelHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return IsPedInModel(_ped, modelHash);
    }
    ped_1.isInModel = isInModel;
    /**
     * Gets a value indicating whether the specified ped is in the specified vehicle.
     *
     * Hash: 0xA3EE4A07279BB9DB | Since: 1207
     */
    function isInVehicle(ped, vehicle, atGetIn) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsPedInVehicle(_ped, _vehicle, atGetIn);
    }
    ped_1.isInVehicle = isInVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x4AE4FF911DFB61DA | Since: 1207
     */
    function isJacking(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedJacking(_ped);
    }
    ped_1.isJacking = isJacking;
    /**
     * No comment provided
     *
     * Hash: 0xCEDABC5900A0BF97 | Since: 1207
     */
    function isJumping(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedJumping(_ped);
    }
    ped_1.isJumping = isJumping;
    /**
     * No comment provided
     *
     * Hash: 0x9682F850056C9ADE | Since: 1207
     */
    function isLassoed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedLassoed(_ped);
    }
    ped_1.isLassoed = isLassoed;
    /**
     * Returns true/false if the ped is/isn't male.
     *
     * Hash: 0x6D9F5FAA7488BA46 | Since: 1207
     */
    function isMale(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedMale(_ped);
    }
    ped_1.isMale = isMale;
    /**
     * No comment provided
     *
     * Hash: 0xC9D55B1A358A5BF7 | Since: 1207
     */
    function isModel(ped, modelHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return IsPedModel(_ped, modelHash);
    }
    ped_1.isModel = isModel;
    /**
     * No comment provided
     *
     * Hash: 0x01FEE67DB37F59B2 | Since: 1207
     */
    function isOnFoot(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedOnFoot(_ped);
    }
    ped_1.isOnFoot = isOnFoot;
    /**
     * No comment provided
     *
     * Hash: 0x460BC76A0E10655E | Since: 1207
     */
    function isOnMount(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedOnMount(_ped);
    }
    ped_1.isOnMount = isOnMount;
    /**
     * No comment provided
     *
     * Hash: 0xEC5F66E459AF3BB2 | Since: 1207
     */
    function isOnSpecificVehicle(ped, vehicle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsPedOnSpecificVehicle(_ped, _vehicle);
    }
    ped_1.isOnSpecificVehicle = isOnSpecificVehicle;
    /**
     * Gets a value indicating whether the specified ped is on top of any vehicle.
     *
     * Return 1 when ped is on vehicle.
     * Return 0 when ped is not on a vehicle.
     *
     * Hash: 0x67722AEB798E5FAB | Since: 1207
     */
    function isOnVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedOnVehicle(_ped, false);
    }
    ped_1.isOnVehicle = isOnVehicle;
    /**
     * Returns true if the ped is currently opening a door (CTaskOpenDoor).
     *
     * Old name: _IS_PED_OPENING_A_DOOR
     *
     * Hash: 0x26AF0E8E30BD2A2C | Since: 1207
     */
    function isOpeningDoor(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedOpeningDoor(_ped);
    }
    ped_1.isOpeningDoor = isOpeningDoor;
    /**
     * No comment provided
     *
     * Hash: 0xDCCA191DF9980FD7 | Since: 1207
     */
    function isPerformingMeleeAction(ped, p2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return IsPedPerformingMeleeAction(_ped, 0, p2);
    }
    ped_1.isPerformingMeleeAction = isPerformingMeleeAction;
    /**
     * No comment provided
     *
     * Hash: 0xC70B5FAE151982D8 | Since: 1207
     */
    function isPlantingBomb(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedPlantingBomb(_ped);
    }
    ped_1.isPlantingBomb = isPlantingBomb;
    /**
     * No comment provided
     *
     * Hash: 0xD6A86331A537A7B9 | Since: 1207
     */
    function isProne(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedProne(_ped);
    }
    ped_1.isProne = isProne;
    /**
     * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
     *
     * Hash: 0x47E4E977581C5B55 | Since: 1207
     */
    function isRagdoll(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedRagdoll(_ped);
    }
    ped_1.isRagdoll = isRagdoll;
    /**
     * No comment provided
     *
     * Hash: 0xA0BC8FAED8CFEB3C | Since: 1207
     */
    function isReadyToRender(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedReadyToRender(_ped);
    }
    ped_1.isReadyToRender = isReadyToRender;
    /**
     * Returns whether the specified ped is reloading.
     *
     * Hash: 0x24B100C68C645951 | Since: 1207
     */
    function isReloading(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedReloading(_ped);
    }
    ped_1.isReloading = isReloading;
    /**
     * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
     *
     * Hash: 0x625B774D75C87068 | Since: 1207
     */
    function isRespondingToEvent(ped, eventType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return IsPedRespondingToEvent(_ped, eventType);
    }
    ped_1.isRespondingToEvent = isRespondingToEvent;
    /**
     * No comment provided
     *
     * Hash: 0x77525BBF433F2CD6 | Since: 1207
     */
    function isRespondingToThreat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedRespondingToThreat(_ped);
    }
    ped_1.isRespondingToThreat = isRespondingToThreat;
    /**
     * No comment provided
     *
     * Hash: 0x2AFE52F782F25775 | Since: 1207
     */
    function isRunningMobilePhoneTask(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedRunningMobilePhoneTask(_ped);
    }
    ped_1.isRunningMobilePhoneTask = isRunningMobilePhoneTask;
    /**
     * No comment provided
     *
     * Hash: 0xE3B6097CC25AA69E | Since: 1207
     */
    function isRunningRagdollTask(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedRunningRagdollTask(_ped);
    }
    ped_1.isRunningRagdollTask = isRunningRagdollTask;
    /**
     * Returns whether the specified ped is shooting.
     *
     * Hash: 0x34616828CD07F1A1 | Since: 1207
     */
    function isShooting(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedShooting(_ped);
    }
    ped_1.isShooting = isShooting;
    /**
     * No comment provided
     *
     * Hash: 0x84D0BF2B21862059 | Since: 1207
     */
    function isSitting(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedSitting(_ped);
    }
    ped_1.isSitting = isSitting;
    /**
     * Detect if ped is in any vehicle
     * [True/False]
     *
     * Hash: 0x826AA586EDB9FEF8 | Since: 1207
     */
    function isSittingInAnyVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedSittingInAnyVehicle(_ped);
    }
    ped_1.isSittingInAnyVehicle = isSittingInAnyVehicle;
    /**
     * Detect if ped is sitting in the specified vehicle
     * [True/False]
     *
     * Hash: 0xA808AA1D79230FC2 | Since: 1207
     */
    function isSittingInVehicle(ped, vehicle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsPedSittingInVehicle(_ped, _vehicle);
    }
    ped_1.isSittingInVehicle = isSittingInVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x530944F6F4B8A214 | Since: 1207
     */
    function isStopped(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedStopped(_ped);
    }
    ped_1.isStopped = isStopped;
    /**
     * No comment provided
     *
     * Hash: 0x9DE327631295B4C2 | Since: 1207
     */
    function isSwimming(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedSwimming(_ped);
    }
    ped_1.isSwimming = isSwimming;
    /**
     * No comment provided
     *
     * Hash: 0xC024869A53992F34 | Since: 1207
     */
    function isSwimmingUnderWater(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedSwimmingUnderWater(_ped);
    }
    ped_1.isSwimmingUnderWater = isSwimmingUnderWater;
    /**
     * No comment provided
     *
     * Hash: 0x00E73468D085F745 | Since: 1207
     */
    function isUsingActionMode(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedUsingActionMode(_ped);
    }
    ped_1.isUsingActionMode = isUsingActionMode;
    /**
     * No comment provided
     *
     * Hash: 0x57AB4A3080F85143 | Since: 1207
     */
    function isUsingAnyScenario(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedUsingAnyScenario(_ped);
    }
    ped_1.isUsingAnyScenario = isUsingAnyScenario;
    /**
     * Equivalent to IS_PED_USING_SCENARIO from V but takes a hash instead of a string.
     *
     * Hash: 0x34D6AC1157C8226C | Since: 1207
     */
    function isUsingScenarioHash(ped, scenarioHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof scenarioHash === 'string')
            scenarioHash = misc.getHashKey(scenarioHash);
        return IsPedUsingScenarioHash(_ped, scenarioHash);
    }
    ped_1.isUsingScenarioHash = isUsingScenarioHash;
    /**
     * No comment provided
     *
     * Hash: 0x9C54041BB66BCF9E | Since: 1207
     */
    function isUsingThisScenario(ped, scenario) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedUsingThisScenario(_ped, scenario);
    }
    ped_1.isUsingThisScenario = isUsingThisScenario;
    /**
     * No comment provided
     *
     * Hash: 0x117C70D1F5730B5E | Since: 1207
     */
    function isVaulting(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedVaulting(_ped);
    }
    ped_1.isVaulting = isVaulting;
    /**
     * Returns true if ped is in perception (focused and looking at target ped)
     * Most float params are -1.f in R* Scripts
     *
     * Hash: 0x06087579E7AA85A9 | Since: 1207
     */
    function isTargetInPerceptionArea(ped, targetPed, customDistance) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        return IsTargetPedInPerceptionArea(_ped, _targetPed, 0, customDistance, 0, 0);
    }
    ped_1.isTargetInPerceptionArea = isTargetInPerceptionArea;
    /**
     * Returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
     * Target needs to be tracked first, won't work otherwise.
     *
     * Hash: 0x91C8E617F64188AC | Since: 1207
     */
    function isTrackedVisible(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsTrackedPedVisible(_ped);
    }
    ped_1.isTrackedVisible = isTrackedVisible;
    /**
     * No comment provided
     *
     * Hash: 0x6FD7816A36615F48 | Since: 1207
     */
    function knockOffProp(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        KnockOffPedProp(_ped, false, false, false, false);
    }
    ped_1.knockOffProp = knockOffProp;
    /**
     * No comment provided
     *
     * Hash: 0x45BBCBA77C29A841 | Since: 1207
     */
    function knockOffVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        KnockPedOffVehicle(_ped);
    }
    ped_1.knockOffVehicle = knockOffVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xF6E1E9F47A7686F8 | Since: 1207
     */
    function cowerInPlace(ped, ped2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        PedCowerInPlace(_ped, _ped2);
    }
    ped_1.cowerInPlace = cowerInPlace;
    /**
     * No comment provided
     *
     * Hash: 0x1E4C940233FC0C6F | Since: 1207
     */
    function cowerMoveToPoint(ped, ped2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        PedCowerMoveToPoint(_ped, 0, 0, 0, _ped2, 0);
    }
    ped_1.cowerMoveToPoint = cowerMoveToPoint;
    /**
     * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
     *
     * Hash: 0x9222F300BF8354FE | Since: 1207
     */
    function registerHatedTargetsAround(ped, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RegisterHatedTargetsAroundPed(_ped, radius);
    }
    ped_1.registerHatedTargetsAround = registerHatedTargetsAround;
    /**
     * No comment provided
     *
     * Hash: 0x2F25D9AEFA34FBA2 | Since: 1207
     */
    function registerTarget(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        RegisterTarget(_ped, _targetPed, false);
    }
    ped_1.registerTarget = registerTarget;
    /**
     * No comment provided
     *
     * Hash: 0x3088634CF8C819CF | Since: 1207
     */
    function releaseVisibilityTracking(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ReleasePedVisibilityTracking(_ped);
    }
    ped_1.releaseVisibilityTracking = releaseVisibilityTracking;
    /**
     * No comment provided
     *
     * Hash: 0x8EB2F69076AF7053 | Since: 1207
     */
    function removeGroup(groupId) {
        RemoveGroup(groupId);
    }
    ped_1.removeGroup = removeGroup;
    /**
     * Ped will no longer get angry when you stay near him.
     *
     * Hash: 0x74D4E028107450A9 | Since: 1207
     */
    function removeDefensiveArea(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedDefensiveArea(_ped, toggle);
    }
    ped_1.removeDefensiveArea = removeDefensiveArea;
    /**
     * No comment provided
     *
     * Hash: 0xED74007FFB146BC2 | Since: 1207
     */
    function removeFromGroup(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedFromGroup(_ped);
    }
    ped_1.removeFromGroup = removeFromGroup;
    /**
     * No comment provided
     *
     * Hash: 0xB6BA2444AB393DA2 | Since: 1207
     */
    function removeRelationshipGroup(groupHash) {
        if (typeof groupHash === 'string')
            groupHash = misc.getHashKey(groupHash);
        RemoveRelationshipGroup(groupHash);
    }
    ped_1.removeRelationshipGroup = removeRelationshipGroup;
    /**
     * No comment provided
     *
     * Hash: 0x31D16B74C6E29D66 | Since: 1207
     */
    function removeScenarioBlockingArea() {
        RemoveScenarioBlockingArea(undefined, false);
    }
    ped_1.removeScenarioBlockingArea = removeScenarioBlockingArea;
    /**
     * No comment provided
     *
     * Hash: 0xD37401D78A929A49 | Since: 1207
     */
    function removeScenarioBlockingAreas() {
        RemoveScenarioBlockingAreas();
    }
    ped_1.removeScenarioBlockingAreas = removeScenarioBlockingAreas;
    /**
     * Params: p2, p3 usually 0 in R* Scripts
     *
     * Hash: 0xDF631E4BCE1B1FC4 | Since: 1207
     */
    function removeShopItemFromByCategory(ped, componentCategory) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentCategory === 'string')
            componentCategory = misc.getHashKey(componentCategory);
        RemoveShopItemFromPedByCategory(_ped, componentCategory, 0, false);
    }
    ped_1.removeShopItemFromByCategory = removeShopItemFromByCategory;
    /**
     * No comment provided
     *
     * Hash: 0xD710A5007C2AC539 | Since: 1207
     */
    function removeTagFromMeta(ped, component) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof component === 'string')
            component = misc.getHashKey(component);
        RemoveTagFromMetaPed(_ped, component, 0);
    }
    ped_1.removeTagFromMeta = removeTagFromMeta;
    /**
     * No comment provided
     *
     * Hash: 0x75BA1CB3B7D40CAF | Since: 1207
     */
    function requestUseSmallBboxVisibilityTracking(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RequestPedUseSmallBboxVisibilityTracking(_ped, false);
    }
    ped_1.requestUseSmallBboxVisibilityTracking = requestUseSmallBboxVisibilityTracking;
    /**
     * No comment provided
     *
     * Hash: 0x2BC338A7B21F4608 | Since: 1207
     */
    function requestVehicleVisibilityTracking(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RequestPedVehicleVisibilityTracking(_ped, false);
    }
    ped_1.requestVehicleVisibilityTracking = requestVehicleVisibilityTracking;
    /**
     * No comment provided
     *
     * Hash: 0x7D7A2E43E74E2EB8 | Since: 1207
     */
    function requestVisibilityTracking(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RequestPedVisibilityTracking(_ped);
    }
    ped_1.requestVisibilityTracking = requestVisibilityTracking;
    /**
     * No comment provided
     *
     * Hash: 0xEA16670E7BA4743C | Since: 1207
     */
    function resetAiWeaponDamageModifier() {
        ResetAiWeaponDamageModifier();
    }
    ped_1.resetAiWeaponDamageModifier = resetAiWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x63DAB4CCB3273205 | Since: 1207
     */
    function resetGroupFormationDefaultSpacing(groupId) {
        ResetGroupFormationDefaultSpacing(groupId);
    }
    ped_1.resetGroupFormationDefaultSpacing = resetGroupFormationDefaultSpacing;
    /**
     * No comment provided
     *
     * Hash: 0x2A5AFD2B8381A6E1 | Since: 1207
     */
    function resetHorseAvoidanceLevelToDefault(horse) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        ResetHorseAvoidanceLevelToDefault(_horse);
    }
    ped_1.resetHorseAvoidanceLevelToDefault = resetHorseAvoidanceLevelToDefault;
    /**
     * No comment provided
     *
     * Hash: 0x22EF8FF8778030EB | Since: 1207
     */
    function resetInVehicleContext(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ResetPedInVehicleContext(_ped);
    }
    ped_1.resetInVehicleContext = resetInVehicleContext;
    /**
     * Resets the value for the last vehicle driven by the Ped.
     *
     * Hash: 0xBB8DE8CF6A8DD8BB | Since: 1207
     */
    function resetLastVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ResetPedLastVehicle(_ped);
    }
    ped_1.resetLastVehicle = resetLastVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x9FA4664CF62E47E8 | Since: 1207
     */
    function resetRagdollTimer(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ResetPedRagdollTimer(_ped);
    }
    ped_1.resetRagdollTimer = resetRagdollTimer;
    /**
     * No comment provided
     *
     * Hash: 0x97B0DB5B4AA74E77 | Since: 1207
     */
    function resetWeaponMovementClipset(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ResetPedWeaponMovementClipset(_ped);
    }
    ped_1.resetWeaponMovementClipset = resetWeaponMovementClipset;
    /**
     * This function will simply bring the dead ped back to life.
     *
     * Before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at because theres a chance the ped will fall through the map
     *
     * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
     *
     * Hash: 0x71BC8E838B9C6035 | Since: 1207
     */
    function resurrect(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ResurrectPed(_ped);
    }
    ped_1.resurrect = resurrect;
    /**
     * No comment provided
     *
     * Hash: 0x8D8ACD8388CD99CE | Since: 1207
     */
    function reviveInjured(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ReviveInjuredPed(_ped);
    }
    ped_1.reviveInjured = reviveInjured;
    /**
     * No comment provided
     *
     * Hash: 0x66460DEDDD417254 | Since: 1207
     */
    function setAiMeleeWeaponDamageModifier(modifier) {
        SetAiMeleeWeaponDamageModifier(modifier);
    }
    ped_1.setAiMeleeWeaponDamageModifier = setAiMeleeWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x1B1E2A40A65B8521 | Since: 1207
     */
    function setAiWeaponDamageModifier(value) {
        SetAiWeaponDamageModifier(value);
    }
    ped_1.setAiWeaponDamageModifier = setAiWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x9F8AA94D6D97DBF4 | Since: 1207
     */
    function setBlockingOfNonTemporaryEvents(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetBlockingOfNonTemporaryEvents(_ped, toggle);
    }
    ped_1.setBlockingOfNonTemporaryEvents = setBlockingOfNonTemporaryEvents;
    /**
     * No comment provided
     *
     * Hash: 0x9911F4A24485F653 | Since: 1207
     */
    function setBlockingOfNonTemporaryEventsForAmbientsThisFrame() {
        SetBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(false);
    }
    ped_1.setBlockingOfNonTemporaryEventsForAmbientsThisFrame = setBlockingOfNonTemporaryEventsForAmbientsThisFrame;
    /**
     * combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_FLOATS
     * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eCombatAttributeFloats
     *
     * Hash: 0xFF41B4B141ED981C | Since: 1207
     */
    function setCombatFloat(ped, combatType, newValue) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetCombatFloat(_ped, combatType, newValue);
    }
    ped_1.setCombatFloat = setCombatFloat;
    /**
     * No comment provided
     *
     * Hash: 0x102E68B2024D536D | Since: 1207
     */
    function setCreateRandomCops(toggle) {
        SetCreateRandomCops(toggle);
    }
    ped_1.setCreateRandomCops = setCreateRandomCops;
    /**
     * No comment provided
     *
     * Hash: 0xC52E0F855C58FC2E | Since: 1207
     */
    function setEnableBoundAnkles(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetEnableBoundAnkles(_ped, toggle);
    }
    ped_1.setEnableBoundAnkles = setEnableBoundAnkles;
    /**
     * Ped can not pull out a weapon when true
     *
     * Hash: 0xDF1AF8B5D56542FA | Since: 1207
     */
    function setEnableHandcuffs(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetEnableHandcuffs(_ped, false, false);
    }
    ped_1.setEnableHandcuffs = setEnableHandcuffs;
    /**
     * No comment provided
     *
     * Hash: 0xFFC24B988B938B38 | Since: 1207
     */
    function setFacialIdleAnimOverride(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetFacialIdleAnimOverride(_ped);
    }
    ped_1.setFacialIdleAnimOverride = setFacialIdleAnimOverride;
    /**
     * No comment provided
     *
     * Hash: 0x7CC7D3B7AF7FB71F | Since: 1207
     */
    function setFormationPositionsTargetRadius(groupId, radius) {
        return SetFormationPositionsTargetRadius(groupId, radius);
    }
    ped_1.setFormationPositionsTargetRadius = setFormationPositionsTargetRadius;
    /**
     * eFormationType
     *
     * 0: Default
     * 1: Circle Around Leader
     * 2: Alternative Circle Around Leader
     * 3: Line, with Leader at center
     *
     * Hash: 0xCE2F5FC3AF7E8C1E | Since: 1207
     */
    function setGroupFormation(groupId, formationType) {
        SetGroupFormation(groupId, formationType);
    }
    ped_1.setGroupFormation = setGroupFormation;
    /**
     * No comment provided
     *
     * Hash: 0x1D9D45004C28C916 | Since: 1207
     */
    function setGroupFormationSpacing(groupId) {
        SetGroupFormationSpacing(groupId, 0, 0, 0);
    }
    ped_1.setGroupFormationSpacing = setGroupFormationSpacing;
    /**
     * Sets the range at which members will automatically leave the group.
     *
     * Hash: 0x4102C7858CFEE4E4 | Since: 1207
     */
    function setGroupSeparationRange(groupId, separationRange) {
        SetGroupSeparationRange(groupId, separationRange);
    }
    ped_1.setGroupSeparationRange = setGroupSeparationRange;
    /**
     * -1 - HORSE_ASSIST__NO_CHANGE
     * 0 - HORSE_ASSIST__MANUAL
     * 1 - HORSE_ASSIST__SEMIASSIST
     * 2 - HORSE_ASSIST__FULLASSIST
     *
     * Hash: 0xDDCF6FEA5D7ACC17 | Since: 1207
     */
    function setHorseAvoidanceLevel(horse, avoidanceLevel) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        SetHorseAvoidanceLevel(_horse, avoidanceLevel);
    }
    ped_1.setHorseAvoidanceLevel = setHorseAvoidanceLevel;
    /**
     * No comment provided
     *
     * Hash: 0xC32779C16FCEECD9 | Since: 1207
     */
    function setIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, blendInDuration, blendOutDuration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entityLookAt = entityLookAt instanceof Entity ? entityLookAt.handle() : entityLookAt;
        SetIkTarget(_ped, ikIndex, _entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, undefined, blendInDuration, blendOutDuration);
    }
    ped_1.setIkTarget = setIkTarget;
    /**
     * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLootingFlags__Flags
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/LOOTING_FLAGS
     *
     * lootFlag:
     * enum eLootFlag
     * {
     * LOOT_FLAG_IS_CRITICAL_LOOT_TARGET = 7,
     * LOOT_FLAG_IGNORE_WATER_CHECKS = 8,
     * LOOT_FLAG_ANIMAL_FLAGGED_FOR_TAGGING = 23,
     * };
     *
     * Hash: 0x6569F31A01B4C097 | Since: 1207
     */
    function setLootingFlag(ped, lootFlag, enabled) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetLootingFlag(_ped, lootFlag, enabled);
    }
    ped_1.setLootingFlag = setLootingFlag;
    /**
     * No comment provided
     *
     * Hash: 0x925A160133003AC6 | Since: 1207
     */
    function setPauseWritheBleedout(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPausePedWritheBleedout(_ped, toggle);
    }
    ped_1.setPauseWritheBleedout = setPauseWritheBleedout;
    /**
     * accuracy = 0-100, 100 being perfectly accurate
     *
     * Hash: 0x7AEFB85C1D49DEB6 | Since: 1207
     */
    function setAccuracy(ped, accuracy) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedAccuracy(_ped, accuracy);
    }
    ped_1.setAccuracy = setAccuracy;
    /**
     * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
     * toggle = bSetRelGroup
     *
     * Hash: 0xBB03C38DD3FB7FFD | Since: 1207
     */
    function setAsCop(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedAsCop(_ped, toggle);
    }
    ped_1.setAsCop = setAsCop;
    /**
     * No comment provided
     *
     * Hash: 0x2A7819605465FBCE | Since: 1207
     */
    function setAsGroupLeader(ped, groupId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedAsGroupLeader(_ped, groupId, false);
    }
    ped_1.setAsGroupLeader = setAsGroupLeader;
    /**
     * No comment provided
     *
     * Hash: 0x9F3480FE65DB31B5 | Since: 1207
     */
    function setAsGroupMember(ped, groupId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedAsGroupMember(_ped, groupId);
    }
    ped_1.setAsGroupMember = setAsGroupMember;
    /**
     * No comment provided
     *
     * Hash: 0x6C3B4D6D13B4C841 | Since: 1207
     */
    function setCanArmIk(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanArmIk(_ped, toggle);
    }
    ped_1.setCanArmIk = setCanArmIk;
    /**
     * When set on a player ped, its just like when you die in RDO
     *
     * Hash: 0x5240864E847C691C | Since: 1207
     */
    function setCanBeIncapacitated(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanBeIncapacitated(_ped, toggle);
    }
    ped_1.setCanBeIncapacitated = setCanBeIncapacitated;
    /**
     * state:
     * enum eKnockOffVehicle
     * {
     * KNOCKOFFVEHICLE_DEFAULT,
     * KNOCKOFFVEHICLE_NEVER,
     * KNOCKOFFVEHICLE_EASY,
     * KNOCKOFFVEHICLE_HARD
     * };
     *
     * Hash: 0x7A6535691B477C48 | Since: 1207
     */
    function setCanBeKnockedOffVehicle(ped, state) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanBeKnockedOffVehicle(_ped, state);
    }
    ped_1.setCanBeKnockedOffVehicle = setCanBeKnockedOffVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x63F58F7C80513AAD | Since: 1207
     */
    function setCanBeTargetted(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanBeTargetted(_ped, toggle);
    }
    ped_1.setCanBeTargetted = setCanBeTargetted;
    /**
     * No comment provided
     *
     * Hash: 0x66B57B72E0836A76 | Since: 1207
     */
    function setCanBeTargettedByPlayer(ped, player, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        SetPedCanBeTargettedByPlayer(_ped, _player, toggle);
    }
    ped_1.setCanBeTargettedByPlayer = setCanBeTargettedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xBF1CA77833E58F2C | Since: 1207
     */
    function setCanBeTargettedByTeam(ped, team, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanBeTargettedByTeam(_ped, team, toggle);
    }
    ped_1.setCanBeTargettedByTeam = setCanBeTargettedByTeam;
    /**
     * No comment provided
     *
     * Hash: 0xC11C18092C5530DC | Since: 1207
     */
    function setCanHeadIk(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanHeadIk(_ped, toggle);
    }
    ped_1.setCanHeadIk = setCanHeadIk;
    /**
     * No comment provided
     *
     * Hash: 0x73518ECE2485412B | Since: 1207
     */
    function setCanLegIk(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanLegIk(_ped, toggle);
    }
    ped_1.setCanLegIk = setCanLegIk;
    /**
     * No comment provided
     *
     * Hash: 0x6373D1349925A70E | Since: 1207
     */
    function setCanPlayAmbientAnims(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanPlayAmbientAnims(_ped, toggle);
    }
    ped_1.setCanPlayAmbientAnims = setCanPlayAmbientAnims;
    /**
     * No comment provided
     *
     * Hash: 0x0EB0585D15254740 | Since: 1207
     */
    function setCanPlayAmbientBaseAnims(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanPlayAmbientBaseAnims(_ped, toggle);
    }
    ped_1.setCanPlayAmbientBaseAnims = setCanPlayAmbientBaseAnims;
    /**
     * No comment provided
     *
     * Hash: 0xBAF20C5432058024 | Since: 1207
     */
    function setCanPlayGestureAnims(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanPlayGestureAnims(_ped, undefined, undefined);
    }
    ped_1.setCanPlayGestureAnims = setCanPlayGestureAnims;
    /**
     * No comment provided
     *
     * Hash: 0xB128377056A54E2A | Since: 1207
     */
    function setCanRagdoll(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanRagdoll(_ped, toggle);
    }
    ped_1.setCanRagdoll = setCanRagdoll;
    /**
     * No comment provided
     *
     * Hash: 0xDF993EE5E90ABA25 | Since: 1207
     */
    function setCanRagdollFromPlayerImpact(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanRagdollFromPlayerImpact(_ped, toggle);
    }
    ped_1.setCanRagdollFromPlayerImpact = setCanRagdollFromPlayerImpact;
    /**
     * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
     *
     * Only works in singleplayer
     *
     * Hash: 0x2E2F4240B3F24647 | Since: 1207
     */
    function setCanTeleportToGroupLeader(pedHandle, groupId, toggle) {
        const _pedHandle = pedHandle instanceof Ped ? pedHandle.handle() : pedHandle;
        SetPedCanTeleportToGroupLeader(_pedHandle, groupId, toggle);
    }
    ped_1.setCanTeleportToGroupLeader = setCanTeleportToGroupLeader;
    /**
     * No comment provided
     *
     * Hash: 0xF2B7106D37947CE0 | Since: 1207
     */
    function setCanTorsoIk(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanTorsoIk(_ped, toggle);
    }
    ped_1.setCanTorsoIk = setCanTorsoIk;
    /**
     * No comment provided
     *
     * Hash: 0xF5846EDB26A98A24 | Since: 1207
     */
    function setCanTorsoReactIk(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanTorsoReactIk(_ped, toggle);
    }
    ped_1.setCanTorsoReactIk = setCanTorsoReactIk;
    /**
     * No comment provided
     *
     * Hash: 0x6647C5F6F5792496 | Since: 1207
     */
    function setCanTorsoVehicleIk(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanTorsoVehicleIk(_ped, toggle);
    }
    ped_1.setCanTorsoVehicleIk = setCanTorsoVehicleIk;
    /**
     * No comment provided
     *
     * Hash: 0xEC4686EC06434678 | Since: 1207
     */
    function setCanUseAutoConversationLookat(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanUseAutoConversationLookat(_ped, toggle);
    }
    ped_1.setCanUseAutoConversationLookat = setCanUseAutoConversationLookat;
    /**
     * Overrides the ped's collision capsule radius for the current tick.
     * Must be called every tick to be effective.
     *
     * Setting this to 0.001 will allow warping through some objects.
     *
     * Hash: 0x364DF566EC833DE2 | Since: 1207
     */
    function setCapsule(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCapsule(_ped, value);
    }
    ped_1.setCapsule = setCapsule;
    /**
     * Old name: SET_PED_CLOTH_PACKAGE_INDEX
     *
     * Hash: 0x78C4E9961DB3EB5B | Since: 1207
     */
    function setClothPinFrames(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedClothPinFrames(_ped, false);
    }
    ped_1.setClothPinFrames = setClothPinFrames;
    /**
     * abilityLevel:
     * enum eCombatAbilityLevel
     * {
     * CAL_POOR,
     * CAL_AVERAGE,
     * CAL_PROFESSIONAL
     * };
     *
     * Hash: 0xC7622C0D36B2FDA8 | Since: 1207
     */
    function setCombatAbility(ped, abilityLevel) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCombatAbility(_ped, abilityLevel);
    }
    ped_1.setCombatAbility = setCombatAbility;
    /**
     * attributeIndex: https://alloc8or.re/rdr3/doc/enums/eCombatAttribute.txt
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ATTRIBUTES
     *
     * Hash: 0x9F7794730795E019 | Since: 1207
     */
    function setCombatAttributes(ped, attributeIndex, enabled) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCombatAttributes(_ped, attributeIndex, enabled);
    }
    ped_1.setCombatAttributes = setCombatAttributes;
    /**
     * 0 - Stationary (Will just stand in place)
     * 1 - Defensive (Will try to find cover and very likely to blind fire)
     * 2 - Offensive (Will attempt to charge at enemy but take cover as well)
     * 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
     *
     * Hash: 0x4D9CA1009AFBD057 | Since: 1207
     */
    function setCombatMovement(ped, combatMovement) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCombatMovement(_ped, combatMovement);
    }
    ped_1.setCombatMovement = setCombatMovement;
    /**
     * range:
     * enum eCombatRange
     * {
     * CR_NEAR,
     * CR_MEDIUM,
     * CR_FAR,
     * CR_VERY_FAR
     * };
     *
     * Hash: 0x3C606747B23E497B | Since: 1207
     */
    function setCombatRange(ped, range) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCombatRange(_ped, range);
    }
    ped_1.setCombatRange = setCombatRange;
    /**
     * flagId: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedScriptConfigFlags
     * https://alloc8or.re/rdr3/doc/enums/ePedScriptConfigFlags.txt
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/CPED_CONFIG_FLAGS
     *
     * Hash: 0x1913FE4CBF41C463 | Since: 1207
     */
    function setConfigFlag(ped, flagId, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedConfigFlag(_ped, flagId, value);
    }
    ped_1.setConfigFlag = setConfigFlag;
    /**
     * No comment provided
     *
     * Hash: 0x413C6C763A4AFFAD | Since: 1207
     */
    function setDefensiveAreaDirection(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDefensiveAreaDirection(_ped, 0, 0, 0, false);
    }
    ped_1.setDefensiveAreaDirection = setDefensiveAreaDirection;
    /**
     * No comment provided
     *
     * Hash: 0xFC3DB99C8144CD81 | Since: 1207
     */
    function setDefensiveAreaVolume(ped, volume) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDefensiveAreaVolume(_ped, volume, false, false, false);
    }
    ped_1.setDefensiveAreaVolume = setDefensiveAreaVolume;
    /**
     * No comment provided
     *
     * Hash: 0xAA5A7ECE2AA8FE70 | Since: 1207
     */
    function setDesiredHeading(ped, heading) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDesiredHeading(_ped, heading);
    }
    ped_1.setDesiredHeading = setDesiredHeading;
    /**
     * Used in various R* MP & SP Scripts
     *
     * Hash: 0x9AC577F5A12AD8A9 | Since: 1207
     */
    function setFiringPattern(ped, patternHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof patternHash === 'string')
            patternHash = misc.getHashKey(patternHash);
        SetPedFiringPattern(_ped, patternHash);
    }
    ped_1.setFiringPattern = setFiringPattern;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/FLEE_ATTRIBUTES
     *
     * attributeFlags:
     * enum eFleeAttribute
     * {
     * FA_FORCE_EXIT_VEHICLE = (1 << 16),
     * FA_DISABLE_MOUNT_USAGE = (1 << 20),
     * FA_DISABLE_ENTER_VEHICLES = (1 << 22),
     * };
     *
     * Hash: 0x70A2D1137C8ED7C9 | Since: 1207
     */
    function setFleeAttributes(ped, attributeFlags, enable) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedFleeAttributes(_ped, attributeFlags, enable);
    }
    ped_1.setFleeAttributes = setFleeAttributes;
    /**
     * No comment provided
     *
     * Hash: 0xDDF803377F94AAA8 | Since: 1207
     */
    function setGestureGroup(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedGestureGroup(_ped, 0);
    }
    ped_1.setGestureGroup = setGestureGroup;
    /**
     * No comment provided
     *
     * Hash: 0x9FF447B6B6AD960A | Since: 1207
     */
    function setGravity(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedGravity(_ped, toggle);
    }
    ped_1.setGravity = setGravity;
    /**
     * No comment provided
     *
     * Hash: 0x0BDDB8D9EC6BCF3C | Since: 1207
     */
    function setGroupMemberPassengerIndex(ped, index) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedGroupMemberPassengerIndex(_ped, index);
    }
    ped_1.setGroupMemberPassengerIndex = setGroupMemberPassengerIndex;
    /**
     * No comment provided
     *
     * Hash: 0x33A8F7F7D5F7F33C | Since: 1207
     */
    function setHearingRange(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedHearingRange(_ped, value);
    }
    ped_1.setHearingRange = setHearingRange;
    /**
     * No comment provided
     *
     * Hash: 0x52D59AB61DDC05DD | Since: 1207
     */
    function setHighlyPerceptive(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedHighlyPerceptive(_ped, toggle);
    }
    ped_1.setHighlyPerceptive = setHighlyPerceptive;
    /**
     * No comment provided
     *
     * Hash: 0xF107E836A70DCE05 | Since: 1207
     */
    function setIdRange(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedIdRange(_ped, value);
    }
    ped_1.setIdRange = setIdRange;
    /**
     * No comment provided
     *
     * Hash: 0xEC4B4B3B9908052A | Since: 1311
     */
    function setInjuredOnGroundBehaviour(ped, unk) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedInjuredOnGroundBehaviour(_ped, unk);
    }
    ped_1.setInjuredOnGroundBehaviour = setInjuredOnGroundBehaviour;
    /**
     * Ped: The ped to warp.
     * vehicle: The vehicle to warp the ped into.
     * seatIndex: see CREATE_PED_INSIDE_VEHICLE
     *
     * Hash: 0xF75B0D629E1C063D | Since: 1207
     */
    function setIntoVehicle(ped, vehicle, seatIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetPedIntoVehicle(_ped, _vehicle, seatIndex);
    }
    ped_1.setIntoVehicle = setIntoVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x971D38760FBC02EF | Since: 1207
     */
    function setKeepTask(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedKeepTask(_ped, toggle);
    }
    ped_1.setKeepTask = setKeepTask;
    /**
     * No comment provided
     *
     * Hash: 0xAE6004120C18DF97 | Since: 1207
     */
    function setLassoHogtieFlag(ped, flagId, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedLassoHogtieFlag(_ped, flagId, value);
    }
    ped_1.setLassoHogtieFlag = setLassoHogtieFlag;
    /**
     * No comment provided
     *
     * Hash: 0xC396F5B86FF9FEBD | Since: 1207
     */
    function setLegIkMode(ped, mode) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedLegIkMode(_ped, mode);
    }
    ped_1.setLegIkMode = setLegIkMode;
    /**
     * No comment provided
     *
     * Hash: 0xDC2C5C242AAC342B | Since: 1207
     */
    function setLodMultiplier(ped, multiplier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedLodMultiplier(_ped, multiplier);
    }
    ped_1.setLodMultiplier = setLodMultiplier;
    /**
     * Sets the maximum health of a ped.
     *
     * Hash: 0xF5F6378C4F3419D3 | Since: 1207
     */
    function setMaxHealth(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMaxHealth(_ped, value);
    }
    ped_1.setMaxHealth = setMaxHealth;
    /**
     * No comment provided
     *
     * Hash: 0x433083750C5E064A | Since: 1207
     */
    function setMaxMoveBlendRatio(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMaxMoveBlendRatio(_ped, value);
    }
    ped_1.setMaxMoveBlendRatio = setMaxMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0x43C851690662113D | Since: 1207
     */
    function setMaxTimeInWater(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMaxTimeInWater(_ped, value);
    }
    ped_1.setMaxTimeInWater = setMaxTimeInWater;
    /**
     * No comment provided
     *
     * Hash: 0x6BA428C528D9E522 | Since: 1207
     */
    function setMaxTimeUnderwater(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMaxTimeUnderwater(_ped, value);
    }
    ped_1.setMaxTimeUnderwater = setMaxTimeUnderwater;
    /**
     * No comment provided
     *
     * Hash: 0x01A898D26E2333DD | Since: 1207
     */
    function setMinMoveBlendRatio(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMinMoveBlendRatio(_ped, value);
    }
    ped_1.setMinMoveBlendRatio = setMinMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0xE163A4BCE4DE6F11 | Since: 1207
     */
    function setModelIsSuppressed(model, toggle) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        SetPedModelIsSuppressed(model, toggle);
    }
    ped_1.setModelIsSuppressed = setModelIsSuppressed;
    /**
     * No comment provided
     *
     * Hash: 0xA9C8960E8684C1B5 | Since: 1207
     */
    function setMoney(ped, amount) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMoney(_ped, amount);
    }
    ped_1.setMoney = setMoney;
    /**
     * No comment provided
     *
     * Hash: 0x9E8C908F41584ECD | Since: 1207
     */
    function setMoveAnimsBlendOut(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMoveAnimsBlendOut(_ped);
    }
    ped_1.setMoveAnimsBlendOut = setMoveAnimsBlendOut;
    /**
     * Min: 0.0f
     * Max: 1.15f
     *
     * Hash: 0x085BF80FA50A39D1 | Since: 1207
     */
    function setMoveRateOverride(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMoveRateOverride(_ped, value);
    }
    ped_1.setMoveRateOverride = setMoveRateOverride;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x98EFA132A4117BE1 | Since: 1207
     */
    function setNameDebug(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedNameDebug(_ped);
    }
    ped_1.setNameDebug = setNameDebug;
    /**
     * The distance between these points, is the diagonal of a box (remember it's 3D).
     *
     * Hash: 0xEE01041D559983EA | Since: 1207
     */
    function setNonCreationArea(x1, y1, z1, x2, y2, z2) {
        SetPedNonCreationArea(x1, y1, z1, x2, y2, z2);
    }
    ped_1.setNonCreationArea = setNonCreationArea;
    /**
     * No comment provided
     *
     * Hash: 0x028F76B6E78246EB | Since: 1207
     */
    function setOntoMount(ped, mount, seatIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        SetPedOntoMount(_ped, _mount, seatIndex, false);
    }
    ped_1.setOntoMount = setOntoMount;
    /**
     * No comment provided
     *
     * Hash: 0x931B241409216C1F | Since: 1207
     */
    function setOwnsAnimal(ped, animal) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        SetPedOwnsAnimal(_ped, _animal, false);
    }
    ped_1.setOwnsAnimal = setOwnsAnimal;
    /**
     * No comment provided
     *
     * Hash: 0xFE07FF6495D52E2A | Since: 1207
     */
    function setPanicExitScenario(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedPanicExitScenario(_ped, pos.x, pos.y, pos.z);
    }
    ped_1.setPanicExitScenario = setPanicExitScenario;
    /**
     * No comment provided
     *
     * Hash: 0x01F6594B923B9251 | Since: 1207
     */
    function setRagdollForceFall(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedRagdollForceFall(_ped);
    }
    ped_1.setRagdollForceFall = setRagdollForceFall;
    /**
     * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
     *
     * Hash: 0xF0A4F1BBF4FA7497 | Since: 1207
     */
    function setRagdollOnCollision(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedRagdollOnCollision(_ped, toggle, false);
    }
    ped_1.setRagdollOnCollision = setRagdollOnCollision;
    /**
     * No comment provided
     *
     * Hash: 0xC8A9481A01E63C28 | Since: 1207
     */
    function setRandomComponentVariation(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedRandomComponentVariation(_ped, 0);
    }
    ped_1.setRandomComponentVariation = setRandomComponentVariation;
    /**
     * No comment provided
     *
     * Hash: 0xADB3F206518799E8 | Since: 1207
     */
    function setRelationshipGroupDefaultHash(ped, hash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        SetPedRelationshipGroupDefaultHash(_ped, hash);
    }
    ped_1.setRelationshipGroupDefaultHash = setRelationshipGroupDefaultHash;
    /**
     * No comment provided
     *
     * Hash: 0xC80A74AC829DDD92 | Since: 1207
     */
    function setRelationshipGroupHash(ped, relationshipGroup) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof relationshipGroup === 'string')
            relationshipGroup = misc.getHashKey(relationshipGroup);
        SetPedRelationshipGroupHash(_ped, relationshipGroup);
    }
    ped_1.setRelationshipGroupHash = setRelationshipGroupHash;
    /**
     * Needs to be called every frame
     *
     * flagid:https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedScriptResetFlags
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/CPED_RESET_FLAGS
     *
     * Hash: 0xC1E8A365BF3B29F2 | Since: 1207
     */
    function setResetFlag(ped, flagId, doReset) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedResetFlag(_ped, flagId, doReset);
    }
    ped_1.setResetFlag = setResetFlag;
    /**
     * No comment provided
     *
     * Hash: 0xF29CF591C4BF6CEE | Since: 1207
     */
    function setSeeingRange(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedSeeingRange(_ped, value);
    }
    ped_1.setSeeingRange = setSeeingRange;
    /**
     * Params: shootRate = 0 - 1000
     *
     * Hash: 0x614DA022990752DC | Since: 1207
     */
    function setShootRate(ped, shootRate) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedShootRate(_ped, shootRate);
    }
    ped_1.setShootRate = setShootRate;
    /**
     * lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
     *
     * Hash: 0x802092B07E3B1EEA | Since: 1207
     */
    function setShouldPlayCombatScenarioExit(ped, pos, lookIntensity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedShouldPlayCombatScenarioExit(_ped, pos.x, pos.y, pos.z, lookIntensity);
    }
    ped_1.setShouldPlayCombatScenarioExit = setShouldPlayCombatScenarioExit;
    /**
     * Old name: _SET_PED_SHOULD_PLAY_DIRECTED_SCENARIO_EXIT
     *
     * Hash: 0xEC6935EBE0847B90 | Since: 1207
     */
    function setShouldPlayDirectedNormalScenarioExit(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedShouldPlayDirectedNormalScenarioExit(_ped, pos.x, pos.y, pos.z);
    }
    ped_1.setShouldPlayDirectedNormalScenarioExit = setShouldPlayDirectedNormalScenarioExit;
    /**
     * lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
     *
     * Hash: 0x62FDAD5E01D2DD47 | Since: 1207
     */
    function setShouldPlayEmotionalScenarioExit(ped, pos, lookIntensity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedShouldPlayEmotionalScenarioExit(_ped, pos.x, pos.y, pos.z, lookIntensity, false);
    }
    ped_1.setShouldPlayEmotionalScenarioExit = setShouldPlayEmotionalScenarioExit;
    /**
     * lookIntensity:
     * 0 - REACT_LOOK_NONE
     * 1 - REACT_LOOK_LOW
     * 2 - REACT_LOOK_MEDIUM
     * 3 - REACT_LOOK_HIGH
     *
     * Hash: 0xEEED8FAFEC331A70 | Since: 1207
     */
    function setShouldPlayFleeScenarioExit(ped, pos, lookIntensity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedShouldPlayFleeScenarioExit(_ped, pos.x, pos.y, pos.z, lookIntensity);
    }
    ped_1.setShouldPlayFleeScenarioExit = setShouldPlayFleeScenarioExit;
    /**
     * No comment provided
     *
     * Hash: 0xF1C03A5352243A30 | Since: 1207
     */
    function setShouldPlayImmediateScenarioExit(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedShouldPlayImmediateScenarioExit(_ped);
    }
    ped_1.setShouldPlayImmediateScenarioExit = setShouldPlayImmediateScenarioExit;
    /**
     * No comment provided
     *
     * Hash: 0xA3A9299C4F2ADB98 | Since: 1207
     */
    function setShouldPlayNormalScenarioExit(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedShouldPlayNormalScenarioExit(_ped);
    }
    ped_1.setShouldPlayNormalScenarioExit = setShouldPlayNormalScenarioExit;
    /**
     * lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
     *
     * Hash: 0x463803429297117C | Since: 1207
     */
    function setShouldPlayQuickScenarioExit(ped, pos, lookIntensity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedShouldPlayQuickScenarioExit(_ped, pos.x, pos.y, pos.z, lookIntensity, false);
    }
    ped_1.setShouldPlayQuickScenarioExit = setShouldPlayQuickScenarioExit;
    /**
     * No comment provided
     *
     * Hash: 0x9D3151A373974804 | Since: 1207
     */
    function setSphereDefensiveArea(ped, pos, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedSphereDefensiveArea(_ped, pos.x, pos.y, pos.z, radius, false, false, false);
    }
    ped_1.setSphereDefensiveArea = setSphereDefensiveArea;
    /**
     * Not implemented.
     *
     * Hash: 0x88CBB5CEB96B7BD2 | Since: 1207
     */
    function setStealthMovement(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedStealthMovement(_ped, toggle, undefined, undefined);
    }
    ped_1.setStealthMovement = setStealthMovement;
    /**
     * No comment provided
     *
     * Hash: 0x27B0405F59637D1F | Since: 1207
     */
    function setSweat(ped, sweat) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedSweat(_ped, sweat);
    }
    ped_1.setSweat = setSweat;
    /**
     * TLR_ExitTask = 0,
     * TLR_NeverLoseTarget,
     * TLR_SearchForTarget
     *
     * Hash: 0x0703B9079823DA4A | Since: 1207
     */
    function setTargetLossResponse(ped, responseType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedTargetLossResponse(_ped, responseType);
    }
    ped_1.setTargetLossResponse = setTargetLossResponse;
    /**
     * No comment provided
     *
     * Hash: 0x112942C6E708F70B | Since: 1207
     */
    function setToInformRespectedFriends(ped, radius, maxFriends) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedToInformRespectedFriends(_ped, radius, maxFriends);
    }
    ped_1.setToInformRespectedFriends = setToInformRespectedFriends;
    /**
     * Old name: _SET_PED_DAMAGE_MODIFIER
     *
     * Hash: 0xD77AE48611B7B10A | Since: 1207
     */
    function setToPlayerWeaponDamageModifier(ped, damageModifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedToPlayerWeaponDamageModifier(_ped, damageModifier);
    }
    ped_1.setToPlayerWeaponDamageModifier = setToPlayerWeaponDamageModifier;
    /**
     * nmTaskMessageParameterName: See physicstasks.ymt. Search for DraggedByCart or 0xD00820D7 (Used in R* SP Script marston8)
     *
     * Hash: 0xAE99FB955581844A | Since: 1207
     */
    function setToRagdoll(ped, timeMin, timeMax, ragdollType, abortIfInjured, abortIfDead) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedToRagdoll(_ped, timeMin, timeMax, ragdollType, abortIfInjured, abortIfDead);
    }
    ped_1.setToRagdoll = setToRagdoll;
    /**
     * No comment provided
     *
     * Hash: 0xD76632D99E4966C8 | Since: 1207
     */
    function setToRagdollWithFall(ped, timeMin, timeMax, ragdollType, falldirX, falldirY, falldirZ) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedToRagdollWithFall(_ped, timeMin, timeMax, ragdollType, falldirX, falldirY, falldirZ, 0, 0, 0, 0, 0, 0, 0);
    }
    ped_1.setToRagdollWithFall = setToRagdollWithFall;
    /**
     * No comment provided
     *
     * Hash: 0xD75ACCF5E0FB5367 | Since: 1207
     */
    function setUsingActionMode(ped, bActionModeEnabled) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedUsingActionMode(_ped, bActionModeEnabled, 0);
    }
    ped_1.setUsingActionMode = setUsingActionMode;
    /**
     * No comment provided
     *
     * Hash: 0x3B6405E8AB34A907 | Since: 1207
     */
    function setVisualFieldCenterAngle(ped, angle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedVisualFieldCenterAngle(_ped, angle);
    }
    ped_1.setVisualFieldCenterAngle = setVisualFieldCenterAngle;
    /**
     * No comment provided
     *
     * Hash: 0x70793BDCA1E854D4 | Since: 1207
     */
    function setVisualFieldMaxAngle(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedVisualFieldMaxAngle(_ped, value);
    }
    ped_1.setVisualFieldMaxAngle = setVisualFieldMaxAngle;
    /**
     * No comment provided
     *
     * Hash: 0x2DB492222FB21E26 | Since: 1207
     */
    function setVisualFieldMinAngle(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedVisualFieldMinAngle(_ped, value);
    }
    ped_1.setVisualFieldMinAngle = setVisualFieldMinAngle;
    /**
     * No comment provided
     *
     * Hash: 0x9C74B0BC831B753A | Since: 1207
     */
    function setVisualFieldPeripheralRange(ped, range) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedVisualFieldPeripheralRange(_ped, range);
    }
    ped_1.setVisualFieldPeripheralRange = setVisualFieldPeripheralRange;
    /**
     * `combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function`
     *
     * Hash: 0xB5485E4907B53019 | Since: 1207
     */
    function setWetnessEnabledThisFrame(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedWetnessEnabledThisFrame(_ped);
    }
    ped_1.setWetnessEnabledThisFrame = setWetnessEnabledThisFrame;
    /**
     * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
     *
     * Hash: 0x44CB6447D2571AA0 | Since: 1207
     */
    function setWetnessHeight(ped, height) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedWetnessHeight(_ped, height);
    }
    ped_1.setWetnessHeight = setWetnessHeight;
    /**
     * No comment provided
     *
     * Hash: 0xD8C3BE3EE94CAF2D | Since: 1207
     */
    function setPopControlSphereThisFrame() {
        SetPopControlSphereThisFrame(undefined, undefined, undefined, undefined, undefined);
    }
    ped_1.setPopControlSphereThisFrame = setPopControlSphereThisFrame;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/RAGDOLL_BLOCKING_FLAGS
     *
     * flags:
     * enum eRagdollBlockingFlags
     * {
     * RBF_BULLET_IMPACT = (1 << 0),
     * RBF_VEHICLE_IMPACT = (1 << 1),
     * RBF_FIRE = (1 << 2),
     * RBF_ELECTROCUTION = (1 << 3),
     * RBF_PLAYER_IMPACT = (1 << 4),
     * RBF_EXPLOSION = (1 << 5),
     * RBF_IMPACT_OBJECT = (1 << 6),
     * RBF_MELEE = (1 << 7),
     * RBF_RUBBER_BULLET = (1 << 8),
     * RBF_FALLING = (1 << 9),
     * RBF_WATER_JET = (1 << 10),
     * RBF_DROWNING = (1 << 11),
     * RBF_0x9F52E2C4 = (1 << 12),
     * RBF_PLAYER_BUMP = (1 << 13),
     * RBF_PLAYER_RAGDOLL_BUMP = (1 << 14),
     * RBF_PED_RAGDOLL_BUMP = (1 << 15),
     * RBF_VEHICLE_GRAB = (1 << 16),
     * RBF_SMOKE_GRENADE = (1 << 17),
     * RBF_HORSE_BUMP = (1 << 18),
     * RBF_ACTIVATE_ON_COLLISION = (1 << 19)
     * };
     *
     * Hash: 0x26695EC767728D84 | Since: 1207
     */
    function setRagdollBlockingFlags(ped, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetRagdollBlockingFlags(_ped, flags);
    }
    ped_1.setRagdollBlockingFlags = setRagdollBlockingFlags;
    /**
     * No comment provided
     *
     * Hash: 0xBF25EB89375A37AD | Since: 1207
     */
    function setRelationshipBetweenGroups(relationship, group1, group2) {
        if (typeof group1 === 'string')
            group1 = misc.getHashKey(group1);
        if (typeof group2 === 'string')
            group2 = misc.getHashKey(group2);
        SetRelationshipBetweenGroups(relationship, group1, group2);
    }
    ped_1.setRelationshipBetweenGroups = setRelationshipBetweenGroups;
    /**
     * No comment provided
     *
     * Hash: 0x7A556143A1C03898 | Since: 1207
     */
    function setScenarioDensityMultiplierThisFrame(multiplier) {
        SetScenarioPedDensityMultiplierThisFrame(multiplier);
    }
    ped_1.setScenarioDensityMultiplierThisFrame = setScenarioDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xFEE4A5459472A9F8 | Since: 1207
     */
    function spawnpointsCancelSearch() {
        SpawnpointsCancelSearch();
    }
    ped_1.spawnpointsCancelSearch = spawnpointsCancelSearch;
    /**
     * No comment provided
     *
     * Hash: 0xA635C11B8C44AFC2 | Since: 1207
     */
    function spawnpointsGetNumSearchResults() {
        return SpawnpointsGetNumSearchResults();
    }
    ped_1.spawnpointsGetNumSearchResults = spawnpointsGetNumSearchResults;
    /**
     * No comment provided
     *
     * Hash: 0x280C7E3AC7F56E90 | Since: 1207
     */
    function spawnpointsGetSearchResult(randomInt) {
        return SpawnpointsGetSearchResult(randomInt);
    }
    ped_1.spawnpointsGetSearchResult = spawnpointsGetSearchResult;
    /**
     * No comment provided
     *
     * Hash: 0xB782F8238512BAD5 | Since: 1207
     */
    function spawnpointsGetSearchResultFlags() {
        return SpawnpointsGetSearchResultFlags(undefined);
    }
    ped_1.spawnpointsGetSearchResultFlags = spawnpointsGetSearchResultFlags;
    /**
     * No comment provided
     *
     * Hash: 0x3C67506996001F5E | Since: 1207
     */
    function spawnpointsIsSearchActive() {
        return SpawnpointsIsSearchActive();
    }
    ped_1.spawnpointsIsSearchActive = spawnpointsIsSearchActive;
    /**
     * No comment provided
     *
     * Hash: 0xA586FBEB32A53DBB | Since: 1207
     */
    function spawnpointsIsSearchComplete() {
        return SpawnpointsIsSearchComplete();
    }
    ped_1.spawnpointsIsSearchComplete = spawnpointsIsSearchComplete;
    /**
     * No comment provided
     *
     * Hash: 0xF445DE8DA80A1792 | Since: 1207
     */
    function spawnpointsIsSearchFailed() {
        return SpawnpointsIsSearchFailed();
    }
    ped_1.spawnpointsIsSearchFailed = spawnpointsIsSearchFailed;
    /**
     * Params: p4 = 35.f, duration = 5000 in R* Scripts
     *
     * Hash: 0x2DF9038C90AD5264 | Since: 1207
     */
    function spawnpointsStartSearch(pos, width, spawnpointsFlag, duration) {
        SpawnpointsStartSearch(pos.x, pos.y, pos.z, width, 0, spawnpointsFlag, 0, duration, 0);
    }
    ped_1.spawnpointsStartSearch = spawnpointsStartSearch;
    /**
     * Searching area between coords 1 and 2
     *
     * Hash: 0xB2AFF10216DEFA2F | Since: 1207
     */
    function spawnpointsStartSearchInAngledArea(x1, y1, z1, x2, y2, z2, width, spawnpointsFlag, duration) {
        SpawnpointsStartSearchInAngledArea(x1, y1, z1, x2, y2, z2, width, spawnpointsFlag, 0, duration, 0);
    }
    ped_1.spawnpointsStartSearchInAngledArea = spawnpointsStartSearchInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0xF9ACF4A08098EA25 | Since: 1207
     */
    function specialFunctionDoNotUse(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SpecialFunctionDoNotUse(_ped, false);
    }
    ped_1.specialFunctionDoNotUse = specialFunctionDoNotUse;
    /**
     * Returns time since the specified ped last shot, in seconds. (fPlayerJustShotTime)
     *
     * Hash: 0x285D36C5C72B0569 | Since: 1207
     */
    function timeSinceLastShot(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TimeSincePedLastShot(_ped);
    }
    ped_1.timeSinceLastShot = timeSinceLastShot;
    /**
     * If toggle is true, when the ped is using a scenario he will stop it and become scared
     * If toggle is false, the ped will not be scared anymore and continue his scenario
     *
     * Old name: _SET_PED_SCARED_WHEN_USING_SCENARIO
     *
     * Hash: 0x9A77DFD295E29B09 | Since: 1207
     */
    function toggleScenarioCowerInPlace(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ToggleScenarioPedCowerInPlace(_ped, toggle);
    }
    ped_1.toggleScenarioCowerInPlace = toggleScenarioCowerInPlace;
    /**
     * Despite this function's name, it simply returns whether the specified handle is a Ped.
     *
     * Hash: 0x11B499C1E0FF8559 | Since: 1207
     */
    function wasSkeletonUpdated(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return WasPedSkeletonUpdated(_ped);
    }
    ped_1.wasSkeletonUpdated = wasSkeletonUpdated;
    /**
     * No comment provided
     *
     * Hash: 0x00B380FF2DF6AB7A | Since: 1207
     */
    function _0x00B380FF2DF6AB7A() {
        Citizen.invokeNative('0x00B380FF2DF6AB7A', undefined, undefined);
    }
    ped_1._0x00B380FF2DF6AB7A = _0x00B380FF2DF6AB7A;
    /**
     * No comment provided
     *
     * Hash: 0x0105FEE8F9091255 | Since: 1207
     */
    function _0x0105FEE8F9091255() {
        return Citizen.invokeNative('0x0105FEE8F9091255', undefined, undefined);
    }
    ped_1._0x0105FEE8F9091255 = _0x0105FEE8F9091255;
    /**
     * No comment provided
     *
     * Hash: 0x024EC9B649111915 | Since: 1207
     */
    function _0x024EC9B649111915(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x024EC9B649111915', _ped, false);
    }
    ped_1._0x024EC9B649111915 = _0x024EC9B649111915;
    /**
     * _SET_ST* - _SET_SW*
     *
     * Hash: 0x028E7B3BBA0BD2FC | Since: 1207
     */
    function _0x028E7B3BBA0BD2FC(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x028E7B3BBA0BD2FC', _ped);
    }
    ped_1._0x028E7B3BBA0BD2FC = _0x028E7B3BBA0BD2FC;
    /**
     * _SET_PLAYER_SN* - _SET_PLAYER_STAMINA*
     *
     * Hash: 0x02E741E19E39628C | Since: 1207
     */
    function _0x02E741E19E39628C(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x02E741E19E39628C', _ped, 0);
    }
    ped_1._0x02E741E19E39628C = _0x02E741E19E39628C;
    /**
     * _DOES_GROUP_* - _DOES_N*
     *
     * Hash: 0x0455546F23FF08E4 | Since: 1207
     */
    function _0x0455546F23FF08E4(groupId) {
        return Citizen.invokeNative('0x0455546F23FF08E4', groupId);
    }
    ped_1._0x0455546F23FF08E4 = _0x0455546F23FF08E4;
    /**
     * _GET_PED_D*
     *
     * Hash: 0x06A10B4D7F50B0C3 | Since: 1207
     */
    function _0x06A10B4D7F50B0C3(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x06A10B4D7F50B0C3', _ped);
    }
    ped_1._0x06A10B4D7F50B0C3 = _0x06A10B4D7F50B0C3;
    /**
     * No comment provided
     *
     * Hash: 0x070A3841406C43D5 | Since: 1207
     */
    function _0x070A3841406C43D5() {
        Citizen.invokeNative('0x070A3841406C43D5', undefined, undefined);
    }
    ped_1._0x070A3841406C43D5 = _0x070A3841406C43D5;
    /**
     * No comment provided
     *
     * Hash: 0x07EA5B053FA60AC7 | Since: 1207
     */
    function _0x07EA5B053FA60AC7(groupId) {
        Citizen.invokeNative('0x07EA5B053FA60AC7', groupId, false);
    }
    ped_1._0x07EA5B053FA60AC7 = _0x07EA5B053FA60AC7;
    /**
     * No comment provided
     *
     * Hash: 0x09171A6F8FDE5DC1 | Since: 1207
     */
    function _0x09171A6F8FDE5DC1() {
        Citizen.invokeNative('0x09171A6F8FDE5DC1', undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0x09171A6F8FDE5DC1 = _0x09171A6F8FDE5DC1;
    /**
     * No comment provided
     *
     * Hash: 0x095C2277FED731DB | Since: 1207
     */
    function _0x095C2277FED731DB() {
        return Citizen.invokeNative('0x095C2277FED731DB', undefined);
    }
    ped_1._0x095C2277FED731DB = _0x095C2277FED731DB;
    /**
     * No comment provided
     *
     * Hash: 0x09D7AFD3716DA8E1 | Since: 1207
     */
    function _0x09D7AFD3716DA8E1(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x09D7AFD3716DA8E1', _ped, 0);
    }
    ped_1._0x09D7AFD3716DA8E1 = _0x09D7AFD3716DA8E1;
    /**
     * _TOGGLE_S* - _UPDATE_*
     *
     * Hash: 0x09E378C52B1433B5 | Since: 1207
     */
    function togglePlayerFlinch(ped, pos, scale) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x09E378C52B1433B5', _ped, pos.x, pos.y, pos.z, scale);
    }
    ped_1.togglePlayerFlinch = togglePlayerFlinch;
    /**
     * No comment provided
     *
     * Hash: 0x0A4618FFD517E24D | Since: 1207
     */
    function _0x0A4618FFD517E24D() {
        Citizen.invokeNative('0x0A4618FFD517E24D', undefined, undefined);
    }
    ped_1._0x0A4618FFD517E24D = _0x0A4618FFD517E24D;
    /**
     * No comment provided
     *
     * Hash: 0x0ADA3EC589E1736E | Since: 1207
     */
    function _0x0ADA3EC589E1736E() {
        Citizen.invokeNative('0x0ADA3EC589E1736E');
    }
    ped_1._0x0ADA3EC589E1736E = _0x0ADA3EC589E1736E;
    /**
     * No comment provided
     *
     * Hash: 0x0B787A37EEDD226F | Since: 1311
     */
    function _0x0B787A37EEDD226F() {
        Citizen.invokeNative('0x0B787A37EEDD226F', undefined, undefined);
    }
    ped_1._0x0B787A37EEDD226F = _0x0B787A37EEDD226F;
    /**
     * _IS_PED_M*
     *
     * Hash: 0x0D3B1568917EBDA0 | Since: 1207
     */
    function _0x0D3B1568917EBDA0(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x0D3B1568917EBDA0', _ped, 0);
    }
    ped_1._0x0D3B1568917EBDA0 = _0x0D3B1568917EBDA0;
    /**
     * No comment provided
     *
     * Hash: 0x0D497AA69059FE40 | Since: 1207
     */
    function _0x0D497AA69059FE40() {
        Citizen.invokeNative('0x0D497AA69059FE40', undefined, undefined);
    }
    ped_1._0x0D497AA69059FE40 = _0x0D497AA69059FE40;
    /**
     * _CAN_PED_B* - _CAN_PED_I*
     *
     * Hash: 0x0EA9EACBA3B01601 | Since: 1207
     */
    function _0x0EA9EACBA3B01601(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        return Citizen.invokeNative('0x0EA9EACBA3B01601', _ped1, _ped2, false);
    }
    ped_1._0x0EA9EACBA3B01601 = _0x0EA9EACBA3B01601;
    /**
     * _IS_PED_L* - _IS_PED_M*
     *
     * Hash: 0x0EEF7A81C17679DB | Since: 1207
     */
    function _0x0EEF7A81C17679DB(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x0EEF7A81C17679DB', _ped);
    }
    ped_1._0x0EEF7A81C17679DB = _0x0EEF7A81C17679DB;
    /**
     * No comment provided
     *
     * Hash: 0x0F967019CC853BCC | Since: 1207
     */
    function _0x0F967019CC853BCC() {
        Citizen.invokeNative('0x0F967019CC853BCC', undefined, undefined);
    }
    ped_1._0x0F967019CC853BCC = _0x0F967019CC853BCC;
    /**
     * No comment provided
     *
     * Hash: 0x0FB1BA7FF73B41E1 | Since: 1207
     */
    function _0x0FB1BA7FF73B41E1() {
        Citizen.invokeNative('0x0FB1BA7FF73B41E1', undefined, undefined, undefined);
    }
    ped_1._0x0FB1BA7FF73B41E1 = _0x0FB1BA7FF73B41E1;
    /**
     * No comment provided
     *
     * Hash: 0x0FFDF937E5C11382 | Since: 1207
     */
    function _0x0FFDF937E5C11382() {
        Citizen.invokeNative('0x0FFDF937E5C11382', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0x0FFDF937E5C11382 = _0x0FFDF937E5C11382;
    /**
     * No comment provided
     *
     * Hash: 0x101B45C5F56D970F | Since: 1207
     */
    function _0x101B45C5F56D970F(ped, damageCleanliness) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x101B45C5F56D970F', _ped, damageCleanliness, 0);
    }
    ped_1._0x101B45C5F56D970F = _0x101B45C5F56D970F;
    /**
     * NB_CUSTOM_CLIENT_ON_CREATE_COMPLETE - set legendary to not avoid prey
     *
     * Hash: 0x10F96086123B939F | Since: 1207
     */
    function _0x10F96086123B939F(legendaryPed, preyPed) {
        const _legendaryPed = legendaryPed instanceof Ped ? legendaryPed.handle() : legendaryPed;
        const _preyPed = preyPed instanceof Ped ? preyPed.handle() : preyPed;
        Citizen.invokeNative('0x10F96086123B939F', _legendaryPed, _preyPed, 0);
    }
    ped_1._0x10F96086123B939F = _0x10F96086123B939F;
    /**
     * _CAN_PED_SEE* - _CAN_PED_USE_(SCENARIO_HASH?)*
     *
     * Hash: 0x1148F706CF4EBDDA | Since: 1207
     */
    function _0x1148F706CF4EBDDA(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0x1148F706CF4EBDDA', _ped, p1, 0);
    }
    ped_1._0x1148F706CF4EBDDA = _0x1148F706CF4EBDDA;
    /**
     * No comment provided
     *
     * Hash: 0x1298B3D8E4C2409F | Since: 1207
     */
    function _0x1298B3D8E4C2409F() {
        Citizen.invokeNative('0x1298B3D8E4C2409F', undefined);
    }
    ped_1._0x1298B3D8E4C2409F = _0x1298B3D8E4C2409F;
    /**
     * _GET_IS_PED_(BLEEDING_OUT?)*
     *
     * Hash: 0x12EB4E31F092C9B3 | Since: 1207
     */
    function _0x12EB4E31F092C9B3(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x12EB4E31F092C9B3', _ped);
    }
    ped_1._0x12EB4E31F092C9B3 = _0x12EB4E31F092C9B3;
    /**
     * _SET_A* - _SET_B*
     *
     * Hash: 0x12F2D161BF4031FC | Since: 1207
     */
    function _0x12F2D161BF4031FC(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x12F2D161BF4031FC', _ped, 0);
    }
    ped_1._0x12F2D161BF4031FC = _0x12F2D161BF4031FC;
    /**
     * _GET_PED_M*
     *
     * Hash: 0x134775B093AD5C38 | Since: 1207
     */
    function _0x134775B093AD5C38(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x134775B093AD5C38', _ped);
    }
    ped_1._0x134775B093AD5C38 = _0x134775B093AD5C38;
    /**
     * _SET_SCENARIO_PED_* - _SET_SPAWNER_*
     *
     * Hash: 0x154B7E841AC7412F | Since: 1207
     */
    function _0x154B7E841AC7412F(groupId) {
        Citizen.invokeNative('0x154B7E841AC7412F', groupId, false);
    }
    ped_1._0x154B7E841AC7412F = _0x154B7E841AC7412F;
    /**
     * No comment provided
     *
     * Hash: 0x15F4732C357B1D6D | Since: 1207
     */
    function _0x15F4732C357B1D6D() {
        Citizen.invokeNative('0x15F4732C357B1D6D', undefined, undefined, undefined);
    }
    ped_1._0x15F4732C357B1D6D = _0x15F4732C357B1D6D;
    /**
     * No comment provided
     *
     * Hash: 0x16802C32B2FCA06B | Since: 1207
     */
    function _0x16802C32B2FCA06B() {
        Citizen.invokeNative('0x16802C32B2FCA06B', undefined, undefined, undefined, undefined);
    }
    ped_1._0x16802C32B2FCA06B = _0x16802C32B2FCA06B;
    /**
     * _PED_COWER_M*
     *
     * Hash: 0x16F798A05BB9E3B5 | Since: 1207
     */
    function _0x16F798A05BB9E3B5(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x16F798A05BB9E3B5', _ped);
    }
    ped_1._0x16F798A05BB9E3B5 = _0x16F798A05BB9E3B5;
    /**
     * No comment provided
     *
     * Hash: 0x1D23D3F70606D788 | Since: 1207
     */
    function _0x1D23D3F70606D788() {
        Citizen.invokeNative('0x1D23D3F70606D788', undefined, undefined);
    }
    ped_1._0x1D23D3F70606D788 = _0x1D23D3F70606D788;
    /**
     * _SET_PED_CA* - _SET_PED_CO*
     *
     * Hash: 0x1D4636C90BBEFACB | Since: 1207
     */
    function _0x1D4636C90BBEFACB(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x1D4636C90BBEFACB', _ped, 0);
    }
    ped_1._0x1D4636C90BBEFACB = _0x1D4636C90BBEFACB;
    /**
     * something to do with speech lines?
     * some hashs MAR2_RIDE1, MAR2_RIDE1, RBCH1_RIDE1, SAD5_RIDE1
     *
     * Hash: 0x1E017404784AA6A3 | Since: 1207
     */
    function _0x1E017404784AA6A3(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0x1E017404784AA6A3', _ped, p1);
    }
    ped_1._0x1E017404784AA6A3 = _0x1E017404784AA6A3;
    /**
     * Only used in SP R* Scripts
     * Params: p2 = same as p2 of 0x3C529A827998F9B3
     * _SET_PED_TA* - _SET_PED_TO_*
     *
     * Hash: 0x1F44B7E283C09EDE | Since: 1207
     */
    function _0x1F44B7E283C09EDE(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x1F44B7E283C09EDE', _ped, 0, 0);
    }
    ped_1._0x1F44B7E283C09EDE = _0x1F44B7E283C09EDE;
    /**
     * Apply cold intensity to ped from 0.0 to 1.0
     *
     * Hash: 0x1F8215D0E446F593 | Since: 1207
     */
    function applyColdTo(ped, intensity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x1F8215D0E446F593', _ped, intensity, 0);
    }
    ped_1.applyColdTo = applyColdTo;
    /**
     * No comment provided
     *
     * Hash: 0x2371C39D4F91C288 | Since: 1207
     */
    function _0x2371C39D4F91C288(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x2371C39D4F91C288', _ped);
    }
    ped_1._0x2371C39D4F91C288 = _0x2371C39D4F91C288;
    /**
     * No comment provided
     *
     * Hash: 0x23BDE06596A22CEC | Since: 1207
     */
    function _0x23BDE06596A22CEC(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x23BDE06596A22CEC', _ped, 0, 0, undefined);
    }
    ped_1._0x23BDE06596A22CEC = _0x23BDE06596A22CEC;
    /**
     * No comment provided
     *
     * Hash: 0x242EDF85D4E87B65 | Since: 1207
     */
    function _0x242EDF85D4E87B65() {
        return Citizen.invokeNative('0x242EDF85D4E87B65', undefined);
    }
    ped_1._0x242EDF85D4E87B65 = _0x242EDF85D4E87B65;
    /**
     * _IS_PED_FL* - _IS_PED_FU*
     *
     * Hash: 0x256EDD55C6BE1482 | Since: 1207
     */
    function _0x256EDD55C6BE1482(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x256EDD55C6BE1482', _ped);
    }
    ped_1._0x256EDD55C6BE1482 = _0x256EDD55C6BE1482;
    /**
     * No comment provided
     *
     * Hash: 0x273915CE30780986 | Since: 1207
     */
    function _0x273915CE30780986() {
        return Citizen.invokeNative('0x273915CE30780986', undefined, undefined);
    }
    ped_1._0x273915CE30780986 = _0x273915CE30780986;
    /**
     * No comment provided
     *
     * Hash: 0x27E8A84C12B0B7D1 | Since: 1207
     */
    function _0x27E8A84C12B0B7D1() {
        return Citizen.invokeNative('0x27E8A84C12B0B7D1', undefined, undefined, undefined);
    }
    ped_1._0x27E8A84C12B0B7D1 = _0x27E8A84C12B0B7D1;
    /**
     * No comment provided
     *
     * Hash: 0x28508173C6A7CC18 | Since: 1311
     */
    function _0x28508173C6A7CC18() {
        Citizen.invokeNative('0x28508173C6A7CC18', undefined);
    }
    ped_1._0x28508173C6A7CC18 = _0x28508173C6A7CC18;
    /**
     * _IS_PED_L* - _IS_PED_M*
     *
     * Hash: 0x290B2E6CCDE532E1 | Since: 1207
     */
    function _0x290B2E6CCDE532E1(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x290B2E6CCDE532E1', _ped);
    }
    ped_1._0x290B2E6CCDE532E1 = _0x290B2E6CCDE532E1;
    /**
     * _SET_PED_K* or _SET_PED_L*
     *
     * Hash: 0x29924EB8EE9DB926 | Since: 1207
     */
    function _0x29924EB8EE9DB926(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x29924EB8EE9DB926', _ped, 0);
    }
    ped_1._0x29924EB8EE9DB926 = _0x29924EB8EE9DB926;
    /**
     * No comment provided
     *
     * Hash: 0x29F3539189D3E277 | Since: 1207
     */
    function _0x29F3539189D3E277() {
        Citizen.invokeNative('0x29F3539189D3E277', undefined, undefined);
    }
    ped_1._0x29F3539189D3E277 = _0x29F3539189D3E277;
    /**
     * No comment provided
     *
     * Hash: 0x2B4CE170DE09F346 | Since: 1207
     */
    function _0x2B4CE170DE09F346(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x2B4CE170DE09F346', _ped, p1);
    }
    ped_1._0x2B4CE170DE09F346 = _0x2B4CE170DE09F346;
    /**
     * Used in Script Function CHECK_IS_PLAYER_SEEN
     * _GET_PED_*
     *
     * Hash: 0x2BA9D7BF629F920C | Since: 1207
     */
    function _0x2BA9D7BF629F920C(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x2BA9D7BF629F920C', _ped);
    }
    ped_1._0x2BA9D7BF629F920C = _0x2BA9D7BF629F920C;
    /**
     * No comment provided
     *
     * Hash: 0x2D976DBDC731DF80 | Since: 1207
     */
    function _0x2D976DBDC731DF80(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x2D976DBDC731DF80', _ped);
    }
    ped_1._0x2D976DBDC731DF80 = _0x2D976DBDC731DF80;
    /**
     * _IS_PED_D*
     *
     * Hash: 0x2DC0E8DCBD3546E9 | Since: 1207
     */
    function _0x2DC0E8DCBD3546E9(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x2DC0E8DCBD3546E9', _ped);
    }
    ped_1._0x2DC0E8DCBD3546E9 = _0x2DC0E8DCBD3546E9;
    /**
     * _IS_PED_M* - _IS_PED_O*
     *
     * Hash: 0x2DD4E0E26DFAD97D | Since: 1207
     */
    function _0x2DD4E0E26DFAD97D(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        return Citizen.invokeNative('0x2DD4E0E26DFAD97D', _ped1, _ped2, 0);
    }
    ped_1._0x2DD4E0E26DFAD97D = _0x2DD4E0E26DFAD97D;
    /**
     * No comment provided
     *
     * Hash: 0x2E5B5D1F1453E08E | Since: 1207
     */
    function _0x2E5B5D1F1453E08E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x2E5B5D1F1453E08E', _ped, 0);
    }
    ped_1._0x2E5B5D1F1453E08E = _0x2E5B5D1F1453E08E;
    /**
     * No comment provided
     *
     * Hash: 0x2FA568BFA725F8D6 | Since: 1207
     */
    function _0x2FA568BFA725F8D6() {
        Citizen.invokeNative('0x2FA568BFA725F8D6', undefined, undefined, undefined, undefined);
    }
    ped_1._0x2FA568BFA725F8D6 = _0x2FA568BFA725F8D6;
    /**
     * _GET_SHOP_ITEM_NUM_*? returns a number of ? p1 seems to be always joaat("base")
     *
     * Hash: 0x31B2E7F2E3C58B89 | Since: 1207
     */
    function _0x31B2E7F2E3C58B89(componentHash, p1, metapedType, isMP) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0x31B2E7F2E3C58B89', componentHash, p1, metapedType, isMP);
    }
    ped_1._0x31B2E7F2E3C58B89 = _0x31B2E7F2E3C58B89;
    /**
     * No comment provided
     *
     * Hash: 0x32417CB860A3BDC4 | Since: 1207
     */
    function _0x32417CB860A3BDC4() {
        return Citizen.invokeNative('0x32417CB860A3BDC4', undefined, undefined);
    }
    ped_1._0x32417CB860A3BDC4 = _0x32417CB860A3BDC4;
    /**
     * Only used in R* SP Script short_update
     * _GET_TARGET_* - _GET_TRACKED*
     *
     * Hash: 0x326F7951EF0D7F75 | Since: 1207
     */
    function _0x326F7951EF0D7F75(ped, eventType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return Citizen.invokeNative('0x326F7951EF0D7F75', _ped, eventType);
    }
    ped_1._0x326F7951EF0D7F75 = _0x326F7951EF0D7F75;
    /**
     * _SET_PED_P* - _SET_PED_R*
     *
     * Hash: 0x329772C47DBB2FBC | Since: 1207
     */
    function _0x329772C47DBB2FBC(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x329772C47DBB2FBC', _ped);
    }
    ped_1._0x329772C47DBB2FBC = _0x329772C47DBB2FBC;
    /**
     * _STOP_(?)*
     *
     * Hash: 0x32CCAD8A981B53D3 | Since: 1207
     */
    function _0x32CCAD8A981B53D3(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x32CCAD8A981B53D3', _ped);
    }
    ped_1._0x32CCAD8A981B53D3 = _0x32CCAD8A981B53D3;
    /**
     * No comment provided
     *
     * Hash: 0x32CEDA9A0AB4CEF7 | Since: 1207
     */
    function _0x32CEDA9A0AB4CEF7(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x32CEDA9A0AB4CEF7', _ped, p1, false);
    }
    ped_1._0x32CEDA9A0AB4CEF7 = _0x32CEDA9A0AB4CEF7;
    /**
     * No comment provided
     *
     * Hash: 0x34B5CEAC180A5D6E | Since: 1207
     */
    function _0x34B5CEAC180A5D6E(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x34B5CEAC180A5D6E', _ped, p1, false);
    }
    ped_1._0x34B5CEAC180A5D6E = _0x34B5CEAC180A5D6E;
    /**
     * No comment provided
     *
     * Hash: 0x34C11114887150FD | Since: 1207
     */
    function _0x34C11114887150FD() {
        Citizen.invokeNative('0x34C11114887150FD', undefined, undefined);
    }
    ped_1._0x34C11114887150FD = _0x34C11114887150FD;
    /**
     * No comment provided
     *
     * Hash: 0x34EDDD59364AD74A | Since: 1207
     */
    function _0x34EDDD59364AD74A(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x34EDDD59364AD74A', _ped);
    }
    ped_1._0x34EDDD59364AD74A = _0x34EDDD59364AD74A;
    /**
     * No comment provided
     *
     * Hash: 0x354CA4DDDEEC397A | Since: 1207
     */
    function _0x354CA4DDDEEC397A(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x354CA4DDDEEC397A', _ped);
    }
    ped_1._0x354CA4DDDEEC397A = _0x354CA4DDDEEC397A;
    /**
     * Seems to set the peds stamina to 30%
     *
     * Hash: 0x36513AFFC703C60D | Since: 1207
     */
    function resetStamina(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x36513AFFC703C60D', _ped);
    }
    ped_1.resetStamina = resetStamina;
    /**
     * _RESET_PED_*
     *
     * Hash: 0x370A973252741AC4 | Since: 1207
     */
    function _0x370A973252741AC4(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x370A973252741AC4', _ped, false);
    }
    ped_1._0x370A973252741AC4 = _0x370A973252741AC4;
    /**
     * _SET_PED_MO*
     *
     * Hash: 0x3A5697B80FED5EBE | Since: 1207
     */
    function _0x3A5697B80FED5EBE(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x3A5697B80FED5EBE', _ped, 0, 0, 0, 0);
    }
    ped_1._0x3A5697B80FED5EBE = _0x3A5697B80FED5EBE;
    /**
     * Used in R* Script net_fetch (NET_FETCH_UPDATE_RECIPIENT_PROP_ILO_IN_COMBAT) and various SP Scripts
     * Params: p1 = 4/5/6, p5 = 40.f/100.f, coords = Player ped
     * Perhaps returns some distance (Clearing that the local player is able to use ILO while in combat because they are near the recipient but also near hated peds)
     * _GET_NUM_M* - _GET_PEDS_J*
     *
     * Hash: 0x3ACCE14DFA6BA8C2 | Since: 1207
     */
    function _0x3ACCE14DFA6BA8C2(ped, pos, itemset) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x3ACCE14DFA6BA8C2', _ped, 0, pos.x, pos.y, pos.z, 0, itemset);
    }
    ped_1._0x3ACCE14DFA6BA8C2 = _0x3ACCE14DFA6BA8C2;
    /**
     * _IS_PED_R*
     *
     * Hash: 0x3AEC4A410ECAF30D | Since: 1207
     */
    function _0x3AEC4A410ECAF30D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x3AEC4A410ECAF30D', _ped);
    }
    ped_1._0x3AEC4A410ECAF30D = _0x3AEC4A410ECAF30D;
    /**
     * _SET_PED_TA* - _SET_PED_TO_*
     *
     * Hash: 0x3C529A827998F9B3 | Since: 1207
     */
    function _0x3C529A827998F9B3(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x3C529A827998F9B3', _ped, 0, 0);
    }
    ped_1._0x3C529A827998F9B3 = _0x3C529A827998F9B3;
    /**
     * No comment provided
     *
     * Hash: 0x3D9F958834AB9C30 | Since: 1207
     */
    function _0x3D9F958834AB9C30(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x3D9F958834AB9C30', _ped);
    }
    ped_1._0x3D9F958834AB9C30 = _0x3D9F958834AB9C30;
    /**
     * No comment provided
     *
     * Hash: 0x3EFED081B4834BA1 | Since: 1232
     */
    function _0x3EFED081B4834BA1() {
        Citizen.invokeNative('0x3EFED081B4834BA1', undefined);
    }
    ped_1._0x3EFED081B4834BA1 = _0x3EFED081B4834BA1;
    /**
     * Used for script function PROCESS_PLAYER_HAT_EVENT
     * Returns requestId to be used with 0x13E7320C762F0477
     *
     * Hash: 0x3FCBB5FCFD968698 | Since: 1207
     */
    function _0x3FCBB5FCFD968698(drawable, albedo, normal, material) {
        if (typeof drawable === 'string')
            drawable = misc.getHashKey(drawable);
        if (typeof albedo === 'string')
            albedo = misc.getHashKey(albedo);
        if (typeof normal === 'string')
            normal = misc.getHashKey(normal);
        if (typeof material === 'string')
            material = misc.getHashKey(material);
        return Citizen.invokeNative('0x3FCBB5FCFD968698', drawable, albedo, normal, material, undefined);
    }
    ped_1._0x3FCBB5FCFD968698 = _0x3FCBB5FCFD968698;
    /**
     * No comment provided
     *
     * Hash: 0x3FDBB99EFD8CE4AF | Since: 1207
     */
    function _0x3FDBB99EFD8CE4AF() {
        Citizen.invokeNative('0x3FDBB99EFD8CE4AF', undefined, undefined, undefined);
    }
    ped_1._0x3FDBB99EFD8CE4AF = _0x3FDBB99EFD8CE4AF;
    /**
     * Changes health bar around heart core icon
     * INITIALISE_NEW_ROLE - Applying Super Jump buffs: p1 = 10, p2 = 0.0f
     * INITIALISE_NEW_ROLE - Clearing up Super Jump buffs: p1 = 10, p2 = 1.0f
     * _SET_D*
     *
     * Hash: 0x3FDCC1F8C17E303E | Since: 1207
     */
    function _0x3FDCC1F8C17E303E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x3FDCC1F8C17E303E', _ped, 0, 0);
    }
    ped_1._0x3FDCC1F8C17E303E = _0x3FDCC1F8C17E303E;
    /**
     * _SET_PED_A*
     *
     * Hash: 0x405180B14DA5A935 | Since: 1207
     */
    function _0x405180B14DA5A935(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x405180B14DA5A935', _ped, false);
    }
    ped_1._0x405180B14DA5A935 = _0x405180B14DA5A935;
    /**
     * _SET_SCENARIO_PED_* - _SET_SPAWNER_*
     *
     * Hash: 0x40C3524D4ED83554 | Since: 1207
     */
    function _0x40C3524D4ED83554(groupId) {
        Citizen.invokeNative('0x40C3524D4ED83554', groupId, false);
    }
    ped_1._0x40C3524D4ED83554 = _0x40C3524D4ED83554;
    /**
     * _IS_PED_RE*
     *
     * Hash: 0x40C9155AF8BC13F3 | Since: 1207
     */
    function _0x40C9155AF8BC13F3(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x40C9155AF8BC13F3', _ped);
    }
    ped_1._0x40C9155AF8BC13F3 = _0x40C9155AF8BC13F3;
    /**
     * No comment provided
     *
     * Hash: 0x413697EC260AABBF | Since: 1207
     */
    function _0x413697EC260AABBF() {
        Citizen.invokeNative('0x413697EC260AABBF', undefined, undefined, undefined);
    }
    ped_1._0x413697EC260AABBF = _0x413697EC260AABBF;
    /**
     * _SET_PED_IN*
     *
     * Hash: 0x41C23A8E6B344867 | Since: 1207
     */
    function _0x41C23A8E6B344867(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x41C23A8E6B344867', _ped, undefined);
    }
    ped_1._0x41C23A8E6B344867 = _0x41C23A8E6B344867;
    /**
     * _SET_PED_IN*
     *
     * Hash: 0x45FEA6D5539BD474 | Since: 1207
     */
    function _0x45FEA6D5539BD474(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x45FEA6D5539BD474', _ped, undefined);
    }
    ped_1._0x45FEA6D5539BD474 = _0x45FEA6D5539BD474;
    /**
     * No comment provided
     *
     * Hash: 0x4642182A298187D0 | Since: 1207
     */
    function _0x4642182A298187D0(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x4642182A298187D0', _ped, 0, 0, 0);
    }
    ped_1._0x4642182A298187D0 = _0x4642182A298187D0;
    /**
     * Returns vehicle (desired) speed
     * _COMPUTE_(VEHICLE_SPEED_USING_BLEND_RATIO?)*
     *
     * Hash: 0x46BF2A810679D6E6 | Since: 1207
     */
    function _0x46BF2A810679D6E6(ped, maxMoveBlendRatio) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x46BF2A810679D6E6', _ped, maxMoveBlendRatio);
    }
    ped_1._0x46BF2A810679D6E6 = _0x46BF2A810679D6E6;
    /**
     * No comment provided
     *
     * Hash: 0x49DADFC4CD808B0A | Since: 1207
     */
    function _0x49DADFC4CD808B0A() {
        Citizen.invokeNative('0x49DADFC4CD808B0A', undefined, undefined, undefined);
    }
    ped_1._0x49DADFC4CD808B0A = _0x49DADFC4CD808B0A;
    /**
     * No comment provided
     *
     * Hash: 0x4B19F171450E0D4F | Since: 1207
     */
    function _0x4B19F171450E0D4F(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x4B19F171450E0D4F', _ped);
    }
    ped_1._0x4B19F171450E0D4F = _0x4B19F171450E0D4F;
    /**
     * No comment provided
     *
     * Hash: 0x4E68C7EF706DF35D | Since: 1207
     */
    function _0x4E68C7EF706DF35D(ped, pos, relationshipGroup) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof relationshipGroup === 'string')
            relationshipGroup = misc.getHashKey(relationshipGroup);
        Citizen.invokeNative('0x4E68C7EF706DF35D', _ped, pos.x, pos.y, pos.z, 0, relationshipGroup);
    }
    ped_1._0x4E68C7EF706DF35D = _0x4E68C7EF706DF35D;
    /**
     * _SET_PED_A*
     *
     * Hash: 0x4EC4EA2F72B36358 | Since: 1207
     */
    function _0x4EC4EA2F72B36358(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x4EC4EA2F72B36358', _ped, false);
    }
    ped_1._0x4EC4EA2F72B36358 = _0x4EC4EA2F72B36358;
    /**
     * No comment provided
     *
     * Hash: 0x4F27603E44A8E4C0 | Since: 1207
     */
    function _0x4F27603E44A8E4C0(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x4F27603E44A8E4C0', _ped, 0, false);
    }
    ped_1._0x4F27603E44A8E4C0 = _0x4F27603E44A8E4C0;
    /**
     * Only used in R* Script shop_harriet
     * _SET_PED_F*
     *
     * Hash: 0x4F63433CE3C08230 | Since: 1311
     */
    function _0x4F63433CE3C08230(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x4F63433CE3C08230', _ped, false);
    }
    ped_1._0x4F63433CE3C08230 = _0x4F63433CE3C08230;
    /**
     * No comment provided
     *
     * Hash: 0x5203038FF8BAE577 | Since: 1207
     */
    function _0x5203038FF8BAE577(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x5203038FF8BAE577', _ped, 0, 0);
    }
    ped_1._0x5203038FF8BAE577 = _0x5203038FF8BAE577;
    /**
     * No comment provided
     *
     * Hash: 0x52250B92EA70BE3D | Since: 1207
     */
    function _0x52250B92EA70BE3D() {
        return Citizen.invokeNative('0x52250B92EA70BE3D', undefined);
    }
    ped_1._0x52250B92EA70BE3D = _0x52250B92EA70BE3D;
    /**
     * No comment provided
     *
     * Hash: 0x52A24D8A1DA89658 | Since: 1207
     */
    function _0x52A24D8A1DA89658(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x52A24D8A1DA89658', _ped, 0, false);
    }
    ped_1._0x52A24D8A1DA89658 = _0x52A24D8A1DA89658;
    /**
     * No comment provided
     *
     * Hash: 0x53BA7D96B9A421D9 | Since: 1207
     */
    function _0x53BA7D96B9A421D9() {
        Citizen.invokeNative('0x53BA7D96B9A421D9', undefined, undefined);
    }
    ped_1._0x53BA7D96B9A421D9 = _0x53BA7D96B9A421D9;
    /**
     * No comment provided
     *
     * Hash: 0x54D3CD482742C482 | Since: 1355
     */
    function _0x54D3CD482742C482(animal) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        Citizen.invokeNative('0x54D3CD482742C482', _animal, 0);
    }
    ped_1._0x54D3CD482742C482 = _0x54D3CD482742C482;
    /**
     * _HAS_PED_*
     *
     * Hash: 0x550CB89DD7F4FA3D | Since: 1207
     */
    function _0x550CB89DD7F4FA3D(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        return Citizen.invokeNative('0x550CB89DD7F4FA3D', _ped1, _ped2);
    }
    ped_1._0x550CB89DD7F4FA3D = _0x550CB89DD7F4FA3D;
    /**
     * No comment provided
     *
     * Hash: 0x55546004A244302A | Since: 1207
     */
    function _0x55546004A244302A() {
        Citizen.invokeNative('0x55546004A244302A', undefined, undefined);
    }
    ped_1._0x55546004A244302A = _0x55546004A244302A;
    /**
     * No comment provided
     *
     * Hash: 0x56076667E7C2DCD6 | Since: 1311
     */
    function _0x56076667E7C2DCD6() {
        Citizen.invokeNative('0x56076667E7C2DCD6', undefined, undefined);
    }
    ped_1._0x56076667E7C2DCD6 = _0x56076667E7C2DCD6;
    /**
     * No comment provided
     *
     * Hash: 0x56E4BAD93D33453C | Since: 1207
     */
    function _0x56E4BAD93D33453C() {
        return Citizen.invokeNative('0x56E4BAD93D33453C', undefined, undefined);
    }
    ped_1._0x56E4BAD93D33453C = _0x56E4BAD93D33453C;
    /**
     * _IS_PED_C* - _IS_PED_D*
     *
     * Hash: 0x577C60BA06D0EA64 | Since: 1207
     */
    function _0x577C60BA06D0EA64(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x577C60BA06D0EA64', _ped);
    }
    ped_1._0x577C60BA06D0EA64 = _0x577C60BA06D0EA64;
    /**
     * _SET_PED_M*
     *
     * Hash: 0x57F35552E771BE9D | Since: 1207
     */
    function _0x57F35552E771BE9D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x57F35552E771BE9D', _ped, 0);
    }
    ped_1._0x57F35552E771BE9D = _0x57F35552E771BE9D;
    /**
     * seems to only work with PD_Vomit ?
     *
     * Hash: 0x58D32261AE0F0843 | Since: 1207
     */
    function applyDamagePackToBone(ped, boneId, xOffset, yOffset, zOffset, rot, damagePack) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x58D32261AE0F0843', _ped, boneId, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, damagePack);
    }
    ped_1.applyDamagePackToBone = applyDamagePackToBone;
    /**
     * _C*
     *
     * Hash: 0x5A1A929C8B729B4A | Since: 1207
     */
    function _0x5A1A929C8B729B4A(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x5A1A929C8B729B4A', _ped);
    }
    ped_1._0x5A1A929C8B729B4A = _0x5A1A929C8B729B4A;
    /**
     * _SET_C*
     *
     * Hash: 0x5AF24CA9C974E51A | Since: 1207
     */
    function _0x5AF24CA9C974E51A(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        Citizen.invokeNative('0x5AF24CA9C974E51A', _ped1, _ped2);
    }
    ped_1._0x5AF24CA9C974E51A = _0x5AF24CA9C974E51A;
    /**
     * No comment provided
     *
     * Hash: 0x5B73975B4F12F7F3 | Since: 1207
     */
    function _0x5B73975B4F12F7F3() {
        Citizen.invokeNative('0x5B73975B4F12F7F3', undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0x5B73975B4F12F7F3 = _0x5B73975B4F12F7F3;
    /**
     * No comment provided
     *
     * Hash: 0x5BB04BC74A474B47 | Since: 1207
     */
    function _0x5BB04BC74A474B47() {
        Citizen.invokeNative('0x5BB04BC74A474B47', undefined, undefined);
    }
    ped_1._0x5BB04BC74A474B47 = _0x5BB04BC74A474B47;
    /**
     * _IS_PED_B* - _IS_PED_C*
     *
     * Hash: 0x5BF0B9D9A8E227A0 | Since: 1207
     */
    function _0x5BF0B9D9A8E227A0(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x5BF0B9D9A8E227A0', _ped);
    }
    ped_1._0x5BF0B9D9A8E227A0 = _0x5BF0B9D9A8E227A0;
    /**
     * _IS_PED_IN*
     *
     * Hash: 0x5C6C7C70CA302801 | Since: 1207
     */
    function _0x5C6C7C70CA302801(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x5C6C7C70CA302801', _ped);
    }
    ped_1._0x5C6C7C70CA302801 = _0x5C6C7C70CA302801;
    /**
     * No comment provided
     *
     * Hash: 0x5C90E20C25E6D83C | Since: 1207
     */
    function _0x5C90E20C25E6D83C() {
        Citizen.invokeNative('0x5C90E20C25E6D83C', undefined);
    }
    ped_1._0x5C90E20C25E6D83C = _0x5C90E20C25E6D83C;
    /**
     * Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_FLOW & PROCESS_GENERIC_PLAYER_INITIALIZATION
     *
     * Hash: 0x5CA20FBE49891BBD | Since: 1207
     */
    function _0x5CA20FBE49891BBD(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x5CA20FBE49891BBD', _ped, 0);
    }
    ped_1._0x5CA20FBE49891BBD = _0x5CA20FBE49891BBD;
    /**
     * No comment provided
     *
     * Hash: 0x5CB2EBB467BE3ED6 | Since: 1355
     */
    function _0x5CB2EBB467BE3ED6(animal) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        Citizen.invokeNative('0x5CB2EBB467BE3ED6', _animal, 0);
    }
    ped_1._0x5CB2EBB467BE3ED6 = _0x5CB2EBB467BE3ED6;
    /**
     * Related to ped hat
     * _SET_PED_LA* - _SET_PED_LE*
     *
     * Hash: 0x5D4CD22A8C82A81A | Since: 1207
     */
    function _0x5D4CD22A8C82A81A(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x5D4CD22A8C82A81A', _ped, false);
    }
    ped_1._0x5D4CD22A8C82A81A = _0x5D4CD22A8C82A81A;
    /**
     * No comment provided
     *
     * Hash: 0x5DA36CCCB63C0895 | Since: 1207
     */
    function _0x5DA36CCCB63C0895() {
        return Citizen.invokeNative('0x5DA36CCCB63C0895', undefined, undefined, undefined);
    }
    ped_1._0x5DA36CCCB63C0895 = _0x5DA36CCCB63C0895;
    /**
     * Only used in R* SP Scripts
     * _GET_PED_IN*
     *
     * Hash: 0x5E9FAF6C513347B4 | Since: 1207
     */
    function _0x5E9FAF6C513347B4(ped, eventType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return Citizen.invokeNative('0x5E9FAF6C513347B4', _ped, eventType);
    }
    ped_1._0x5E9FAF6C513347B4 = _0x5E9FAF6C513347B4;
    /**
     * No comment provided
     *
     * Hash: 0x5EFA8A3D8A60D662 | Since: 1207
     */
    function _0x5EFA8A3D8A60D662() {
        return Citizen.invokeNative('0x5EFA8A3D8A60D662', undefined, undefined);
    }
    ped_1._0x5EFA8A3D8A60D662 = _0x5EFA8A3D8A60D662;
    /**
     * No comment provided
     *
     * Hash: 0x5FCF25D584065BFD | Since: 1207
     */
    function _0x5FCF25D584065BFD() {
        Citizen.invokeNative('0x5FCF25D584065BFD', undefined, undefined, undefined, undefined);
    }
    ped_1._0x5FCF25D584065BFD = _0x5FCF25D584065BFD;
    /**
     * Not implemented.
     *
     * Hash: 0x600BBDD29820370C | Since: 1207
     */
    function _0x600BBDD29820370C(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x600BBDD29820370C', _ped);
    }
    ped_1._0x600BBDD29820370C = _0x600BBDD29820370C;
    /**
     * No comment provided
     *
     * Hash: 0x604E1010E3162E86 | Since: 1207
     */
    function _0x604E1010E3162E86() {
        Citizen.invokeNative('0x604E1010E3162E86', undefined, undefined, undefined);
    }
    ped_1._0x604E1010E3162E86 = _0x604E1010E3162E86;
    /**
     * Not implemented.
     *
     * Hash: 0x606D529DADA3C940 | Since: 1207
     */
    function _0x606D529DADA3C940(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x606D529DADA3C940', _ped, undefined);
    }
    ped_1._0x606D529DADA3C940 = _0x606D529DADA3C940;
    /**
     * Returns p1 value for 0x8E84119A23C16623,  get index outfit using GET_NUM_META_PED_OUTFITS
     *
     * Hash: 0x62FDF4E678E40CC6 | Since: 1207
     */
    function getMetaOutfitByIndex(entity, index) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x62FDF4E678E40CC6', _entity, index);
    }
    ped_1.getMetaOutfitByIndex = getMetaOutfitByIndex;
    /**
     * No comment provided
     *
     * Hash: 0x633F83B301C87994 | Since: 1207
     */
    function _0x633F83B301C87994() {
        Citizen.invokeNative('0x633F83B301C87994', undefined, undefined);
    }
    ped_1._0x633F83B301C87994 = _0x633F83B301C87994;
    /**
     * _SET_PED_M*
     *
     * Hash: 0x642720D8D69328B6 | Since: 1207
     */
    function _0x642720D8D69328B6(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x642720D8D69328B6', _ped, p1);
    }
    ped_1._0x642720D8D69328B6 = _0x642720D8D69328B6;
    /**
     * _IS_N* - _IS_P*
     *
     * Hash: 0x6507AC3BD7C99009 | Since: 1207
     */
    function _0x6507AC3BD7C99009(pos) {
        return Citizen.invokeNative('0x6507AC3BD7C99009', pos.x, pos.y, pos.z, 0);
    }
    ped_1._0x6507AC3BD7C99009 = _0x6507AC3BD7C99009;
    /**
     * No comment provided
     *
     * Hash: 0x6734F0A6A52C371C | Since: 1207
     */
    function _0x6734F0A6A52C371C(player, horseSlot) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x6734F0A6A52C371C', _player, horseSlot);
    }
    ped_1._0x6734F0A6A52C371C = _0x6734F0A6A52C371C;
    /**
     * No comment provided
     *
     * Hash: 0x6A190B94C2541A99 | Since: 1207
     */
    function _0x6A190B94C2541A99() {
        Citizen.invokeNative('0x6A190B94C2541A99', undefined);
    }
    ped_1._0x6A190B94C2541A99 = _0x6A190B94C2541A99;
    /**
     * No comment provided
     *
     * Hash: 0x6A489892E813951A | Since: 1207
     */
    function _0x6A489892E813951A() {
        Citizen.invokeNative('0x6A489892E813951A', undefined);
    }
    ped_1._0x6A489892E813951A = _0x6A489892E813951A;
    /**
     * No comment provided
     *
     * Hash: 0x6B67320E0D57856A | Since: 1207
     */
    function _0x6B67320E0D57856A(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x6B67320E0D57856A', _ped, 0, false);
    }
    ped_1._0x6B67320E0D57856A = _0x6B67320E0D57856A;
    /**
     * Only used in R* SP Script winter1: p1 = 5000
     * _SET_PED_M*
     *
     * Hash: 0x6DB875AFC584FA32 | Since: 1207
     */
    function _0x6DB875AFC584FA32(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x6DB875AFC584FA32', _ped, 0);
    }
    ped_1._0x6DB875AFC584FA32 = _0x6DB875AFC584FA32;
    /**
     * Only used in SP R* Script train_robbery3: p1 = CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC & CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC_JOHN
     *
     * Hash: 0x6E8B87139854022D | Since: 1207
     */
    function _0x6E8B87139854022D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x6E8B87139854022D', _ped);
    }
    ped_1._0x6E8B87139854022D = _0x6E8B87139854022D;
    /**
     * No comment provided
     *
     * Hash: 0x6F43C351A5D51E2F | Since: 1207
     */
    function getCarriedPeltSkins(mount) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        return Citizen.invokeNative('0x6F43C351A5D51E2F', _mount);
    }
    ped_1.getCarriedPeltSkins = getCarriedPeltSkins;
    /**
     * No comment provided
     *
     * Hash: 0x6F46F8ACB44C4FC1 | Since: 1207
     */
    function _0x6F46F8ACB44C4FC1() {
        return Citizen.invokeNative('0x6F46F8ACB44C4FC1', undefined);
    }
    ped_1._0x6F46F8ACB44C4FC1 = _0x6F46F8ACB44C4FC1;
    /**
     * _HAS_*
     *
     * Hash: 0x7020839C7302D8AC | Since: 1207
     */
    function _0x7020839C7302D8AC(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x7020839C7302D8AC', _ped);
    }
    ped_1._0x7020839C7302D8AC = _0x7020839C7302D8AC;
    /**
     * _CLEAR*
     *
     * Hash: 0x704C908E9C405136 | Since: 1207
     */
    function _0x704C908E9C405136(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x704C908E9C405136', _ped);
    }
    ped_1._0x704C908E9C405136 = _0x704C908E9C405136;
    /**
     * _SET_PED_MO*
     *
     * Hash: 0x712B2C2B2471B493 | Since: 1207
     */
    function _0x712B2C2B2471B493(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x712B2C2B2471B493', _ped, p1);
    }
    ped_1._0x712B2C2B2471B493 = _0x712B2C2B2471B493;
    /**
     * _SET_PED_F*
     *
     * Hash: 0x735662994E60A710 | Since: 1207
     */
    function _0x735662994E60A710(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x735662994E60A710', _ped, false);
    }
    ped_1._0x735662994E60A710 = _0x735662994E60A710;
    /**
     * No comment provided
     *
     * Hash: 0x7406C71F4AC2FFCC | Since: 1207
     */
    function _0x7406C71F4AC2FFCC() {
        Citizen.invokeNative('0x7406C71F4AC2FFCC', undefined);
    }
    ped_1._0x7406C71F4AC2FFCC = _0x7406C71F4AC2FFCC;
    /**
     * No comment provided
     *
     * Hash: 0x758F081DB204DDDE | Since: 1207
     */
    function _0x758F081DB204DDDE(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x758F081DB204DDDE', _ped);
    }
    ped_1._0x758F081DB204DDDE = _0x758F081DB204DDDE;
    /**
     * No comment provided
     *
     * Hash: 0x75A082563B4452E5 | Since: 1207
     */
    function _0x75A082563B4452E5() {
        Citizen.invokeNative('0x75A082563B4452E5', undefined, undefined, undefined, undefined);
    }
    ped_1._0x75A082563B4452E5 = _0x75A082563B4452E5;
    /**
     * No comment provided
     *
     * Hash: 0x75D3333409CD33CE | Since: 1207
     */
    function _0x75D3333409CD33CE() {
        Citizen.invokeNative('0x75D3333409CD33CE', undefined, undefined, undefined);
    }
    ped_1._0x75D3333409CD33CE = _0x75D3333409CD33CE;
    /**
     * Used in Script Function NB_EVENT_OVERRIDE__HANDLE__EVENT_DAMAGE_ENTITY
     *
     * Hash: 0x763FA8A9D76EE3A7 | Since: 1311
     */
    function _0x763FA8A9D76EE3A7(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x763FA8A9D76EE3A7', _ped);
    }
    ped_1._0x763FA8A9D76EE3A7 = _0x763FA8A9D76EE3A7;
    /**
     * _IS_I* - _IS_L*
     *
     * Hash: 0x77243ED4F7CAAA55 | Since: 1207
     */
    function _0x77243ED4F7CAAA55(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x77243ED4F7CAAA55', _ped);
    }
    ped_1._0x77243ED4F7CAAA55 = _0x77243ED4F7CAAA55;
    /**
     * No comment provided
     *
     * Hash: 0x7ABBD9E449E0DB00 | Since: 1207
     */
    function _0x7ABBD9E449E0DB00(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x7ABBD9E449E0DB00', _ped, false);
    }
    ped_1._0x7ABBD9E449E0DB00 = _0x7ABBD9E449E0DB00;
    /**
     * No comment provided
     *
     * Hash: 0x7B5C293238EE4F20 | Since: 1207
     */
    function _0x7B5C293238EE4F20() {
        return Citizen.invokeNative('0x7B5C293238EE4F20', undefined);
    }
    ped_1._0x7B5C293238EE4F20 = _0x7B5C293238EE4F20;
    /**
     * No comment provided
     *
     * Hash: 0x7BB810E8B343AC7B | Since: 1207
     */
    function _0x7BB810E8B343AC7B() {
        return Citizen.invokeNative('0x7BB810E8B343AC7B', undefined);
    }
    ped_1._0x7BB810E8B343AC7B = _0x7BB810E8B343AC7B;
    /**
     * Only used in SP
     * _SET_REMOVE_PED*
     *
     * Hash: 0x7C08E7CB8D951B70 | Since: 1207
     */
    function _0x7C08E7CB8D951B70(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x7C08E7CB8D951B70', _ped, 0);
    }
    ped_1._0x7C08E7CB8D951B70 = _0x7C08E7CB8D951B70;
    /**
     * _CLEAR_PED_M*
     *
     * Hash: 0x7C10221CE718AA72 | Since: 1207
     */
    function _0x7C10221CE718AA72(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x7C10221CE718AA72', _ped, 0);
    }
    ped_1._0x7C10221CE718AA72 = _0x7C10221CE718AA72;
    /**
     * Returns wether `0x1E017404784AA6A3` was applied on the ped.
     * some hashs MAR2_RIDE1, MAR2_RIDE1, RBCH1_RIDE1, SAD5_RIDE1
     *
     * Hash: 0x7C8AA850617651D9 | Since: 1207
     */
    function _0x7C8AA850617651D9(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0x7C8AA850617651D9', _ped, p1);
    }
    ped_1._0x7C8AA850617651D9 = _0x7C8AA850617651D9;
    /**
     * _SET_FORMATION_P*
     *
     * Hash: 0x7E5185B979706210 | Since: 1207
     */
    function _0x7E5185B979706210(groupId) {
        Citizen.invokeNative('0x7E5185B979706210', groupId, 0);
    }
    ped_1._0x7E5185B979706210 = _0x7E5185B979706210;
    /**
     * No comment provided
     *
     * Hash: 0x7E8F9949B7AABBF0 | Since: 1207
     */
    function _0x7E8F9949B7AABBF0() {
        Citizen.invokeNative('0x7E8F9949B7AABBF0', undefined, undefined, undefined);
    }
    ped_1._0x7E8F9949B7AABBF0 = _0x7E8F9949B7AABBF0;
    /**
     * Only used in R* Script net_moonshine_property
     * _A* - _B*
     *
     * Hash: 0x7EDB3C766B0D073F | Since: 1232
     */
    function _0x7EDB3C766B0D073F(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x7EDB3C766B0D073F', _ped);
    }
    ped_1._0x7EDB3C766B0D073F = _0x7EDB3C766B0D073F;
    /**
     * _IS_PED_H* - _IS_PED_I*
     *
     * Hash: 0x7EE3A8660F38797E | Since: 1207
     */
    function _0x7EE3A8660F38797E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x7EE3A8660F38797E', _ped);
    }
    ped_1._0x7EE3A8660F38797E = _0x7EE3A8660F38797E;
    /**
     * No comment provided
     *
     * Hash: 0x7F090958AE95B61B | Since: 1207
     */
    function _0x7F090958AE95B61B(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x7F090958AE95B61B', _ped, 0);
    }
    ped_1._0x7F090958AE95B61B = _0x7F090958AE95B61B;
    /**
     * _ATTACH_*
     *
     * Hash: 0x8101BA1C0B462412 | Since: 1207
     */
    function _0x8101BA1C0B462412(ped, ropeId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8101BA1C0B462412', _ped, ropeId);
    }
    ped_1._0x8101BA1C0B462412 = _0x8101BA1C0B462412;
    /**
     * _SET_PED_COMBAT_R - _SET_PED_C*
     *
     * Hash: 0x815C0074A1BC0D93 | Since: 1207
     */
    function _0x815C0074A1BC0D93(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x815C0074A1BC0D93', _ped, 0);
    }
    ped_1._0x815C0074A1BC0D93 = _0x815C0074A1BC0D93;
    /**
     * No comment provided
     *
     * Hash: 0x82CB0F3F0C7785E5 | Since: 1207
     */
    function _0x82CB0F3F0C7785E5() {
        return Citizen.invokeNative('0x82CB0F3F0C7785E5', undefined);
    }
    ped_1._0x82CB0F3F0C7785E5 = _0x82CB0F3F0C7785E5;
    /**
     * No comment provided
     *
     * Hash: 0x851966E1E35AF491 | Since: 1207
     */
    function _0x851966E1E35AF491() {
        Citizen.invokeNative('0x851966E1E35AF491', undefined, undefined);
    }
    ped_1._0x851966E1E35AF491 = _0x851966E1E35AF491;
    /**
     * Used in Script Function SKCS_PLAYER_ROBBING
     * _SET_PED_A*
     *
     * Hash: 0x85F500F4E24CA43E | Since: 1207
     */
    function _0x85F500F4E24CA43E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x85F500F4E24CA43E', _ped, 0);
    }
    ped_1._0x85F500F4E24CA43E = _0x85F500F4E24CA43E;
    /**
     * _SET_PED_*
     *
     * Hash: 0x86F0B6730C32AC14 | Since: 1207
     */
    function _0x86F0B6730C32AC14(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x86F0B6730C32AC14', _ped, false);
    }
    ped_1._0x86F0B6730C32AC14 = _0x86F0B6730C32AC14;
    /**
     * No comment provided
     *
     * Hash: 0x86FAFC18E3D4380C | Since: 1207
     */
    function _0x86FAFC18E3D4380C(groupId) {
        Citizen.invokeNative('0x86FAFC18E3D4380C', groupId, false);
    }
    ped_1._0x86FAFC18E3D4380C = _0x86FAFC18E3D4380C;
    /**
     * No comment provided
     *
     * Hash: 0x878E8104FA27CDAE | Since: 1207
     */
    function _0x878E8104FA27CDAE(vehicle, p1) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x878E8104FA27CDAE', _vehicle, p1);
    }
    ped_1._0x878E8104FA27CDAE = _0x878E8104FA27CDAE;
    /**
     * _CLEAR_PED_E* - _CLEAR_PED_L*
     *
     * Hash: 0x87C2724A56F66020 | Since: 1207
     */
    function _0x87C2724A56F66020(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x87C2724A56F66020', _ped);
    }
    ped_1._0x87C2724A56F66020 = _0x87C2724A56F66020;
    /**
     * Only used in R* Script train_robbery4
     * _SET_PED_D*
     *
     * Hash: 0x8822F124788B8D0A | Since: 1207
     */
    function _0x8822F124788B8D0A(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8822F124788B8D0A', _ped, false);
    }
    ped_1._0x8822F124788B8D0A = _0x8822F124788B8D0A;
    /**
     * If returned true, SET_ENABLE_BOUND_ANKLES is called in R* Script guama2
     * _GET_D* - _GET_E*
     *
     * Hash: 0x8822F139408B8D0A | Since: 1207
     */
    function _0x8822F139408B8D0A(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x8822F139408B8D0A', _ped);
    }
    ped_1._0x8822F139408B8D0A = _0x8822F139408B8D0A;
    /**
     * No comment provided
     *
     * Hash: 0x88A5564B19C15391 | Since: 1207
     */
    function _0x88A5564B19C15391(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x88A5564B19C15391', _ped);
    }
    ped_1._0x88A5564B19C15391 = _0x88A5564B19C15391;
    /**
     * Used in R* Script generic_weight_control_item
     * _CLEAR_PED_E* - CLEAR_PED_(G?)L*
     *
     * Hash: 0x88A95BB640FC186F | Since: 1207
     */
    function _0x88A95BB640FC186F(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x88A95BB640FC186F', _ped);
    }
    ped_1._0x88A95BB640FC186F = _0x88A95BB640FC186F;
    /**
     * No comment provided
     *
     * Hash: 0x88B2026A3B0BE33D | Since: 1207
     */
    function _0x88B2026A3B0BE33D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x88B2026A3B0BE33D', _ped, 0);
    }
    ped_1._0x88B2026A3B0BE33D = _0x88B2026A3B0BE33D;
    /**
     * No comment provided
     *
     * Hash: 0x897934E868EDDD6C | Since: 1207
     */
    function _0x897934E868EDDD6C(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x897934E868EDDD6C', _ped, 0, 0, 0, 0);
    }
    ped_1._0x897934E868EDDD6C = _0x897934E868EDDD6C;
    /**
     * _GET_PED_B* - _GET_PED_C*
     *
     * Hash: 0x89816B58C3466262 | Since: 1207
     */
    function _0x89816B58C3466262(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x89816B58C3466262', _ped);
    }
    ped_1._0x89816B58C3466262 = _0x89816B58C3466262;
    /**
     * _SET_PED_O*
     *
     * Hash: 0x899DFA0009AC93DE | Since: 1207
     */
    function _0x899DFA0009AC93DE(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x899DFA0009AC93DE', _ped, 0);
    }
    ped_1._0x899DFA0009AC93DE = _0x899DFA0009AC93DE;
    /**
     * _SET_C*
     *
     * Hash: 0x89E59DBD15E21177 | Since: 1207
     */
    function _0x89E59DBD15E21177(groupId) {
        Citizen.invokeNative('0x89E59DBD15E21177', groupId, 0);
    }
    ped_1._0x89E59DBD15E21177 = _0x89E59DBD15E21177;
    /**
     * _SET_PED_IN*
     *
     * Hash: 0x8AF46E5159A5B620 | Since: 1207
     */
    function _0x8AF46E5159A5B620(ped, speechParams) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof speechParams === 'string')
            speechParams = misc.getHashKey(speechParams);
        Citizen.invokeNative('0x8AF46E5159A5B620', _ped, speechParams);
    }
    ped_1._0x8AF46E5159A5B620 = _0x8AF46E5159A5B620;
    /**
     * `Returns offset (0 < 32) to be used with MISC::SET_BIT`
     * _GET_PED_CR*
     *
     * Hash: 0x8AF8E647D6B2A649 | Since: 1207
     */
    function _0x8AF8E647D6B2A649(groupId, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x8AF8E647D6B2A649', groupId, _ped);
    }
    ped_1._0x8AF8E647D6B2A649 = _0x8AF8E647D6B2A649;
    /**
     * _SET_FORMATION_*
     *
     * Hash: 0x8AFCCC0F18D70018 | Since: 1207
     */
    function _0x8AFCCC0F18D70018(groupId) {
        Citizen.invokeNative('0x8AFCCC0F18D70018', groupId, false);
    }
    ped_1._0x8AFCCC0F18D70018 = _0x8AFCCC0F18D70018;
    /**
     * No comment provided
     *
     * Hash: 0x8B74032DDD2156FE | Since: unknown
     */
    function _0x8B74032DDD2156FE() {
        Citizen.invokeNative('0x8B74032DDD2156FE', undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0x8B74032DDD2156FE = _0x8B74032DDD2156FE;
    /**
     * No comment provided
     *
     * Hash: 0x8BA0C65AC15A7D33 | Since: 1207
     */
    function _0x8BA0C65AC15A7D33() {
        Citizen.invokeNative('0x8BA0C65AC15A7D33', undefined, undefined, undefined, undefined);
    }
    ped_1._0x8BA0C65AC15A7D33 = _0x8BA0C65AC15A7D33;
    /**
     * Used in Script Function NET_CAMP_DOG_CLIENT_HANDLE_ANIMAL_INTERACTION
     *
     * Hash: 0x8BE24D74D74C6E9B | Since: 1207
     */
    function _0x8BE24D74D74C6E9B(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x8BE24D74D74C6E9B', _ped);
    }
    ped_1._0x8BE24D74D74C6E9B = _0x8BE24D74D74C6E9B;
    /**
     * _SET_PED_T* - SET_PED_U*
     *
     * Hash: 0x8CB2553C559102C1 | Since: 1207
     */
    function _0x8CB2553C559102C1(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8CB2553C559102C1', _ped, 0, false);
    }
    ped_1._0x8CB2553C559102C1 = _0x8CB2553C559102C1;
    /**
     * No comment provided
     *
     * Hash: 0x8D9DB115FBA8E23D | Since: 1207
     */
    function _0x8D9DB115FBA8E23D() {
        Citizen.invokeNative('0x8D9DB115FBA8E23D', undefined);
    }
    ped_1._0x8D9DB115FBA8E23D = _0x8D9DB115FBA8E23D;
    /**
     * Used in Script Function AGGRO_SHOULD_PED_HEAR_DEATH
     * _GET_PED_*
     *
     * Hash: 0x900CA00CE703E1E2 | Since: 1207
     */
    function _0x900CA00CE703E1E2(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x900CA00CE703E1E2', _ped);
    }
    ped_1._0x900CA00CE703E1E2 = _0x900CA00CE703E1E2;
    /**
     * No comment provided
     *
     * Hash: 0x9078FB0557364099 | Since: 1207
     */
    function _0x9078FB0557364099() {
        Citizen.invokeNative('0x9078FB0557364099', undefined);
    }
    ped_1._0x9078FB0557364099 = _0x9078FB0557364099;
    /**
     * _IS_PED_S* - _IS_PED_U*
     *
     * Hash: 0x913D04A5176F84C9 | Since: 1207
     */
    function _0x913D04A5176F84C9(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x913D04A5176F84C9', _ped);
    }
    ped_1._0x913D04A5176F84C9 = _0x913D04A5176F84C9;
    /**
     * No comment provided
     *
     * Hash: 0x9184788BFF1EDAD7 | Since: 1207
     */
    function _0x9184788BFF1EDAD7() {
        Citizen.invokeNative('0x9184788BFF1EDAD7', undefined, undefined);
    }
    ped_1._0x9184788BFF1EDAD7 = _0x9184788BFF1EDAD7;
    /**
     * No comment provided
     *
     * Hash: 0x91BAB9E064F036CD | Since: 1207
     */
    function _0x91BAB9E064F036CD() {
        Citizen.invokeNative('0x91BAB9E064F036CD', undefined, undefined);
    }
    ped_1._0x91BAB9E064F036CD = _0x91BAB9E064F036CD;
    /**
     * No comment provided
     *
     * Hash: 0x92A1B55A59720395 | Since: 1207
     */
    function _0x92A1B55A59720395() {
        Citizen.invokeNative('0x92A1B55A59720395', undefined, undefined);
    }
    ped_1._0x92A1B55A59720395 = _0x92A1B55A59720395;
    /**
     * _GET_IS_PED_*
     *
     * Hash: 0x94132D7C8D3575C4 | Since: 1207
     */
    function _0x94132D7C8D3575C4(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x94132D7C8D3575C4', _ped);
    }
    ped_1._0x94132D7C8D3575C4 = _0x94132D7C8D3575C4;
    /**
     * Returns whether a ped has interacted with a player recently.
     * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/0x947E43F544B6AB34
     *
     * Hash: 0x947E43F544B6AB34 | Since: 1207
     */
    function hasInteractedWithPlayerRecently(ped, player, flag, ms) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x947E43F544B6AB34', _ped, _player, flag, ms);
    }
    ped_1.hasInteractedWithPlayerRecently = hasInteractedWithPlayerRecently;
    /**
     * No comment provided
     *
     * Hash: 0x9629FAF6460D35CB | Since: 1207
     */
    function _0x9629FAF6460D35CB(group) {
        if (typeof group === 'string')
            group = misc.getHashKey(group);
        Citizen.invokeNative('0x9629FAF6460D35CB', group, false);
    }
    ped_1._0x9629FAF6460D35CB = _0x9629FAF6460D35CB;
    /**
     * Only used in R* Script mob4 combined with SET_ANIMAL_TUNING_BOOL_PARAM
     * _SET_PED_S* - _SET_PED_TARGET_*
     *
     * Hash: 0x96595B36D6A2279B | Since: 1207
     */
    function _0x96595B36D6A2279B(animal, toggle) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        Citizen.invokeNative('0x96595B36D6A2279B', _animal, toggle);
    }
    ped_1._0x96595B36D6A2279B = _0x96595B36D6A2279B;
    /**
     * _SET_FORMATION_P*
     *
     * Hash: 0x966DE09688A1DE39 | Since: 1207
     */
    function _0x966DE09688A1DE39(groupId) {
        Citizen.invokeNative('0x966DE09688A1DE39', groupId, 0, 0, 0, 0);
    }
    ped_1._0x966DE09688A1DE39 = _0x966DE09688A1DE39;
    /**
     * No comment provided
     *
     * Hash: 0x96C7B659854DE629 | Since: 1207
     */
    function _0x96C7B659854DE629() {
        Citizen.invokeNative('0x96C7B659854DE629', undefined, undefined);
    }
    ped_1._0x96C7B659854DE629 = _0x96C7B659854DE629;
    /**
     * _SET_PED_D*
     *
     * Hash: 0x97A38B65EBDA3D50 | Since: 1207
     */
    function _0x97A38B65EBDA3D50(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x97A38B65EBDA3D50', _ped, false);
    }
    ped_1._0x97A38B65EBDA3D50 = _0x97A38B65EBDA3D50;
    /**
     * _CLEAR*
     *
     * Hash: 0x97B06669AC569003 | Since: 1207
     */
    function _0x97B06669AC569003(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        Citizen.invokeNative('0x97B06669AC569003', _ped1, _ped2);
    }
    ped_1._0x97B06669AC569003 = _0x97B06669AC569003;
    /**
     * _SET_SCENARIO_PED_* - _SET_SPAWNER_*
     *
     * Hash: 0x97C475212B327666 | Since: 1207
     */
    function _0x97C475212B327666(groupId) {
        Citizen.invokeNative('0x97C475212B327666', groupId, false);
    }
    ped_1._0x97C475212B327666 = _0x97C475212B327666;
    /**
     * No comment provided
     *
     * Hash: 0x9851DE7AEC10B4E1 | Since: 1207
     */
    function _0x9851DE7AEC10B4E1(pos) {
        Citizen.invokeNative('0x9851DE7AEC10B4E1', pos.x, pos.y, pos.z, 0, 0, undefined);
    }
    ped_1._0x9851DE7AEC10B4E1 = _0x9851DE7AEC10B4E1;
    /**
     * No comment provided
     *
     * Hash: 0x992187D975635DF5 | Since: 1311
     */
    function _0x992187D975635DF5() {
        Citizen.invokeNative('0x992187D975635DF5', undefined, undefined);
    }
    ped_1._0x992187D975635DF5 = _0x992187D975635DF5;
    /**
     * _CAN_PED_*
     *
     * Hash: 0x99DF2639DA76C1DC | Since: 1232
     */
    function _0x99DF2639DA76C1DC(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        return Citizen.invokeNative('0x99DF2639DA76C1DC', _ped1, _ped2, 0);
    }
    ped_1._0x99DF2639DA76C1DC = _0x99DF2639DA76C1DC;
    /**
     * No comment provided
     *
     * Hash: 0x9A4AC116CC1EEE14 | Since: 1207
     */
    function _0x9A4AC116CC1EEE14() {
        Citizen.invokeNative('0x9A4AC116CC1EEE14', undefined);
    }
    ped_1._0x9A4AC116CC1EEE14 = _0x9A4AC116CC1EEE14;
    /**
     * _SET_PED_M*
     *
     * Hash: 0x9AB33CB5834885B3 | Since: 1207
     */
    function _0x9AB33CB5834885B3(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9AB33CB5834885B3', _ped, 0, 0, 0, 0);
    }
    ped_1._0x9AB33CB5834885B3 = _0x9AB33CB5834885B3;
    /**
     * Only used in SP R* Script winter1: p1 = Winter1Mount
     *
     * Hash: 0x9B65444C07B782BF | Since: 1207
     */
    function _0x9B65444C07B782BF(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9B65444C07B782BF', _ped, undefined);
    }
    ped_1._0x9B65444C07B782BF = _0x9B65444C07B782BF;
    /**
     * No comment provided
     *
     * Hash: 0x9B90842304C938A7 | Since: 1207
     */
    function getCategoryOfComponentAtIndex(ped, componentIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x9B90842304C938A7', _ped, componentIndex, undefined);
    }
    ped_1.getCategoryOfComponentAtIndex = getCategoryOfComponentAtIndex;
    /**
     * Used in Script Function SKCS_PLAYER_ROBBING
     * _SET_PED_SHOULD_PLAY_* - _SET_PED_SW*
     *
     * Hash: 0x9B9B9FA0EA283E3D | Since: 1207
     */
    function _0x9B9B9FA0EA283E3D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9B9B9FA0EA283E3D', _ped, 0);
    }
    ped_1._0x9B9B9FA0EA283E3D = _0x9B9B9FA0EA283E3D;
    /**
     * _SET_PLAYER_CAN_B* - _SET_PLAYER_CAN_U*
     *
     * Hash: 0x9BBEAF8B0C007F1E | Since: 1207
     */
    function _0x9BBEAF8B0C007F1E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9BBEAF8B0C007F1E', _ped, false);
    }
    ped_1._0x9BBEAF8B0C007F1E = _0x9BBEAF8B0C007F1E;
    /**
     * this native checks if player has shot a specific ped for the duration passed p2 is in milliseconds
     *
     * Hash: 0x9C81338B2E62CE0A | Since: 1207
     */
    function hasBeenShotByPlayerRecently(player, ped, duration) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x9C81338B2E62CE0A', _player, _ped, duration);
    }
    ped_1.hasBeenShotByPlayerRecently = hasBeenShotByPlayerRecently;
    /**
     * _RESET_PED_*
     *
     * Hash: 0x9D8DFE2DE9CB4DFC | Since: 1207
     */
    function _0x9D8DFE2DE9CB4DFC(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9D8DFE2DE9CB4DFC', _ped);
    }
    ped_1._0x9D8DFE2DE9CB4DFC = _0x9D8DFE2DE9CB4DFC;
    /**
     * Only used in SP R* Script loanshark_hunter
     *
     * Hash: 0x9E3842E5DAD69F80 | Since: 1207
     */
    function _0x9E3842E5DAD69F80(volume) {
        Citizen.invokeNative('0x9E3842E5DAD69F80', volume);
    }
    ped_1._0x9E3842E5DAD69F80 = _0x9E3842E5DAD69F80;
    /**
     * No comment provided
     *
     * Hash: 0x9E66708B2B41F14A | Since: 1207
     */
    function _0x9E66708B2B41F14A() {
        Citizen.invokeNative('0x9E66708B2B41F14A', undefined, undefined);
    }
    ped_1._0x9E66708B2B41F14A = _0x9E66708B2B41F14A;
    /**
     * No comment provided
     *
     * Hash: 0x9F0F28B42C4EE80A | Since: 1355
     */
    function _0x9F0F28B42C4EE80A(animal) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        Citizen.invokeNative('0x9F0F28B42C4EE80A', _animal, 0);
    }
    ped_1._0x9F0F28B42C4EE80A = _0x9F0F28B42C4EE80A;
    /**
     * No comment provided
     *
     * Hash: 0x9F933E0985E12C51 | Since: 1207
     */
    function _0x9F933E0985E12C51(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9F933E0985E12C51', _ped, 0, 0, 0);
    }
    ped_1._0x9F933E0985E12C51 = _0x9F933E0985E12C51;
    /**
     * No comment provided
     *
     * Hash: 0xA064BBABB064446F | Since: 1207
     */
    function _0xA064BBABB064446F() {
        Citizen.invokeNative('0xA064BBABB064446F', undefined);
    }
    ped_1._0xA064BBABB064446F = _0xA064BBABB064446F;
    /**
     * No comment provided
     *
     * Hash: 0xA180FBD502A03125 | Since: 1207
     */
    function _0xA180FBD502A03125() {
        return Citizen.invokeNative('0xA180FBD502A03125', undefined, undefined, undefined);
    }
    ped_1._0xA180FBD502A03125 = _0xA180FBD502A03125;
    /**
     * No comment provided
     *
     * Hash: 0xA1FBAC56D38563E2 | Since: 1207
     */
    function _0xA1FBAC56D38563E2(volume) {
        return Citizen.invokeNative('0xA1FBAC56D38563E2', volume);
    }
    ped_1._0xA1FBAC56D38563E2 = _0xA1FBAC56D38563E2;
    /**
     * _SET_PED_*
     *
     * Hash: 0xA2116C1E4ED85C24 | Since: 1207
     */
    function _0xA2116C1E4ED85C24(ped, inverted) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xA2116C1E4ED85C24', _ped, inverted);
    }
    ped_1._0xA2116C1E4ED85C24 = _0xA2116C1E4ED85C24;
    /**
     * No comment provided
     *
     * Hash: 0xA218D2BBCAA7388C | Since: 1207
     */
    function _0xA218D2BBCAA7388C() {
        return Citizen.invokeNative('0xA218D2BBCAA7388C', undefined, undefined);
    }
    ped_1._0xA218D2BBCAA7388C = _0xA218D2BBCAA7388C;
    /**
     * No comment provided
     *
     * Hash: 0xA274F51EF7E34B95 | Since: 1207
     */
    function _0xA274F51EF7E34B95() {
        return Citizen.invokeNative('0xA274F51EF7E34B95', undefined, undefined);
    }
    ped_1._0xA274F51EF7E34B95 = _0xA274F51EF7E34B95;
    /**
     * No comment provided
     *
     * Hash: 0xA2B8E47442C76CEC | Since: 1207
     */
    function _0xA2B8E47442C76CEC() {
        Citizen.invokeNative('0xA2B8E47442C76CEC', undefined, undefined);
    }
    ped_1._0xA2B8E47442C76CEC = _0xA2B8E47442C76CEC;
    /**
     * No comment provided
     *
     * Hash: 0xA2F8B3B5FEDFC100 | Since: 1207
     */
    function _0xA2F8B3B5FEDFC100() {
        Citizen.invokeNative('0xA2F8B3B5FEDFC100', undefined, undefined);
    }
    ped_1._0xA2F8B3B5FEDFC100 = _0xA2F8B3B5FEDFC100;
    /**
     * No comment provided
     *
     * Hash: 0xA31D350D66FA1855 | Since: 1207
     */
    function _0xA31D350D66FA1855() {
        return Citizen.invokeNative('0xA31D350D66FA1855', undefined);
    }
    ped_1._0xA31D350D66FA1855 = _0xA31D350D66FA1855;
    /**
     * No comment provided
     *
     * Hash: 0xA405BF9F01960C16 | Since: 1207
     */
    function _0xA405BF9F01960C16() {
        Citizen.invokeNative('0xA405BF9F01960C16', undefined);
    }
    ped_1._0xA405BF9F01960C16 = _0xA405BF9F01960C16;
    /**
     * No comment provided
     *
     * Hash: 0xA4AC05B1A364EBC5 | Since: 1207
     */
    function _0xA4AC05B1A364EBC5() {
        return Citizen.invokeNative('0xA4AC05B1A364EBC5', undefined, undefined, undefined);
    }
    ped_1._0xA4AC05B1A364EBC5 = _0xA4AC05B1A364EBC5;
    /**
     * No comment provided
     *
     * Hash: 0xA4B6432E3880F2F9 | Since: 1311
     */
    function _0xA4B6432E3880F2F9(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xA4B6432E3880F2F9', _ped);
    }
    ped_1._0xA4B6432E3880F2F9 = _0xA4B6432E3880F2F9;
    /**
     * No comment provided
     *
     * Hash: 0xA691C10054275290 | Since: 1207
     */
    function _0xA691C10054275290(mount, player, dismountedTimestamp) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xA691C10054275290', _mount, _player, dismountedTimestamp);
    }
    ped_1._0xA691C10054275290 = _0xA691C10054275290;
    /**
     * _DELETE_*
     *
     * Hash: 0xA6D6F03095C88F59 | Since: 1207
     */
    function _0xA6D6F03095C88F59(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xA6D6F03095C88F59', _ped);
    }
    ped_1._0xA6D6F03095C88F59 = _0xA6D6F03095C88F59;
    /**
     * Washing player's face/hands now
     * _CLEAR_PED_E* - _CLEAR_PED_L*
     *
     * Hash: 0xA7A806677F8DE138 | Since: 1207
     */
    function _0xA7A806677F8DE138(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xA7A806677F8DE138', _ped);
    }
    ped_1._0xA7A806677F8DE138 = _0xA7A806677F8DE138;
    /**
     * _CLEAR_PED_B* - _CLEAR_PED_C*
     *
     * Hash: 0xA7DC9266ED6A4E51 | Since: 1207
     */
    function _0xA7DC9266ED6A4E51(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xA7DC9266ED6A4E51', _ped);
    }
    ped_1._0xA7DC9266ED6A4E51 = _0xA7DC9266ED6A4E51;
    /**
     * _SET_ENABLE_B* - _SET_ENABLE_H*
     *
     * Hash: 0xA8A95CECB1906EA2 | Since: 1207
     */
    function _0xA8A95CECB1906EA2(groupId) {
        Citizen.invokeNative('0xA8A95CECB1906EA2', groupId, false);
    }
    ped_1._0xA8A95CECB1906EA2 = _0xA8A95CECB1906EA2;
    /**
     * Only used in R* Script mob4 and rcm_mason4
     * _SET_PED_DEFENSIVE_* - _SET_PED_DESIRED_*
     *
     * Hash: 0xA90684ED185CCB4B | Since: 1207
     */
    function _0xA90684ED185CCB4B(animal) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        Citizen.invokeNative('0xA90684ED185CCB4B', _animal, false, 0, 0);
    }
    ped_1._0xA90684ED185CCB4B = _0xA90684ED185CCB4B;
    /**
     * _SET_PED_P* - _SET_PED_R*
     *
     * Hash: 0xA967D6A8ED2D713B | Since: 1207
     */
    function _0xA967D6A8ED2D713B(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xA967D6A8ED2D713B', _ped, false);
    }
    ped_1._0xA967D6A8ED2D713B = _0xA967D6A8ED2D713B;
    /**
     * No comment provided
     *
     * Hash: 0xAA6C49AE90A32299 | Since: 1207
     */
    function _0xAA6C49AE90A32299(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xAA6C49AE90A32299', _ped, p1);
    }
    ped_1._0xAA6C49AE90A32299 = _0xAA6C49AE90A32299;
    /**
     * Related to _0x704C908E9C405136 for component loading
     * Can be used to fix missing outfit changes, always paired with _UPDATE_PED_VARIATION
     * _S*
     * Doesn't actually return anything.
     *
     * Hash: 0xAAB86462966168CE | Since: 1207
     */
    function setActiveMetaComponentsUpdated(ped, isMP) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xAAB86462966168CE', _ped, isMP);
    }
    ped_1.setActiveMetaComponentsUpdated = setActiveMetaComponentsUpdated;
    /**
     * No comment provided
     *
     * Hash: 0xAAC0EE3B4999ABB5 | Since: 1207
     */
    function _0xAAC0EE3B4999ABB5(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        Citizen.invokeNative('0xAAC0EE3B4999ABB5', _ped, _targetPed);
    }
    ped_1._0xAAC0EE3B4999ABB5 = _0xAAC0EE3B4999ABB5;
    /**
     * No comment provided
     *
     * Hash: 0xAD3330E3C3E98007 | Since: 1207
     */
    function _0xAD3330E3C3E98007() {
        Citizen.invokeNative('0xAD3330E3C3E98007', undefined, undefined);
    }
    ped_1._0xAD3330E3C3E98007 = _0xAD3330E3C3E98007;
    /**
     * No comment provided
     *
     * Hash: 0xAE6B68A83ABBE7C0 | Since: 1207
     */
    function _0xAE6B68A83ABBE7C0() {
        Citizen.invokeNative('0xAE6B68A83ABBE7C0', undefined);
    }
    ped_1._0xAE6B68A83ABBE7C0 = _0xAE6B68A83ABBE7C0;
    /**
     * _CLEAR_PED_D*
     *
     * Hash: 0xAF041C10756C30FB | Since: 1207
     */
    function _0xAF041C10756C30FB(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xAF041C10756C30FB', _ped, false, false, false);
    }
    ped_1._0xAF041C10756C30FB = _0xAF041C10756C30FB;
    /**
     * Used to set up bad guy groups in nb_kidnapped R* Script (MP_RE_KIDNAPPED): p1 = 4.f
     * _SET_FORMATION_*
     *
     * Hash: 0xB05CC690CDE8A4A9 | Since: 1207
     */
    function _0xB05CC690CDE8A4A9(groupId) {
        return Citizen.invokeNative('0xB05CC690CDE8A4A9', groupId, 0);
    }
    ped_1._0xB05CC690CDE8A4A9 = _0xB05CC690CDE8A4A9;
    /**
     * No comment provided
     *
     * Hash: 0xB06F5F1DEF417216 | Since: 1207
     */
    function _0xB06F5F1DEF417216() {
        Citizen.invokeNative('0xB06F5F1DEF417216', undefined, undefined, undefined, undefined);
    }
    ped_1._0xB06F5F1DEF417216 = _0xB06F5F1DEF417216;
    /**
     * No comment provided
     *
     * Hash: 0xB292203008EBBAAC | Since: 1207
     */
    function getMetaRace(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xB292203008EBBAAC', _ped);
    }
    ped_1.getMetaRace = getMetaRace;
    /**
     * Used in Script Function SATCHEL_COUNT_BREAKDOWN_COMPONENTS
     *
     * Hash: 0xB29C553BA582D09E | Since: 1207
     */
    function _0xB29C553BA582D09E(model, damageCleanliness) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return Citizen.invokeNative('0xB29C553BA582D09E', model, damageCleanliness, 0);
    }
    ped_1._0xB29C553BA582D09E = _0xB29C553BA582D09E;
    /**
     * _RESET_PED_C*
     *
     * Hash: 0xB4B7C92FCE7347B7 | Since: 1207
     */
    function _0xB4B7C92FCE7347B7(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xB4B7C92FCE7347B7', _ped);
    }
    ped_1._0xB4B7C92FCE7347B7 = _0xB4B7C92FCE7347B7;
    /**
     * No comment provided
     *
     * Hash: 0xB65927F861E7AE39 | Since: 1207
     */
    function _0xB65927F861E7AE39(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xB65927F861E7AE39', _ped, 0);
    }
    ped_1._0xB65927F861E7AE39 = _0xB65927F861E7AE39;
    /**
     * No comment provided
     *
     * Hash: 0xB7DBB2986B87E230 | Since: 1207
     */
    function _0xB7DBB2986B87E230(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xB7DBB2986B87E230', _ped, 0);
    }
    ped_1._0xB7DBB2986B87E230 = _0xB7DBB2986B87E230;
    /**
     * _SET_HO*
     *
     * Hash: 0xB8AB265426CFE6DD | Since: 1207
     */
    function _0xB8AB265426CFE6DD(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xB8AB265426CFE6DD', _ped, false);
    }
    ped_1._0xB8AB265426CFE6DD = _0xB8AB265426CFE6DD;
    /**
     * No comment provided
     *
     * Hash: 0xB8E2D655E1D5BD39 | Since: 1207
     */
    function _0xB8E2D655E1D5BD39() {
        return Citizen.invokeNative('0xB8E2D655E1D5BD39', undefined);
    }
    ped_1._0xB8E2D655E1D5BD39 = _0xB8E2D655E1D5BD39;
    /**
     * _IS_PED_J* - _IS_PED_L*
     *
     * Hash: 0xB91AB3BE7F655D49 | Since: 1207
     */
    function _0xB91AB3BE7F655D49(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xB91AB3BE7F655D49', _ped);
    }
    ped_1._0xB91AB3BE7F655D49 = _0xB91AB3BE7F655D49;
    /**
     * No comment provided
     *
     * Hash: 0xB9BDFAE609DFB7C5 | Since: 1207
     */
    function _0xB9BDFAE609DFB7C5() {
        Citizen.invokeNative('0xB9BDFAE609DFB7C5', undefined, undefined, undefined);
    }
    ped_1._0xB9BDFAE609DFB7C5 = _0xB9BDFAE609DFB7C5;
    /**
     * No comment provided
     *
     * Hash: 0xBAD2A311667A50D7 | Since: 1207
     */
    function setDesiresGroup(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xBAD2A311667A50D7', _ped, toggle);
    }
    ped_1.setDesiresGroup = setDesiresGroup;
    /**
     * No comment provided
     *
     * Hash: 0xBB3E5370EBB6BE28 | Since: 1207
     */
    function _0xBB3E5370EBB6BE28() {
        return Citizen.invokeNative('0xBB3E5370EBB6BE28', undefined, undefined);
    }
    ped_1._0xBB3E5370EBB6BE28 = _0xBB3E5370EBB6BE28;
    /**
     * No comment provided
     *
     * Hash: 0xBC1DC48270468444 | Since: 1207
     */
    function _0xBC1DC48270468444() {
        Citizen.invokeNative('0xBC1DC48270468444', undefined);
    }
    ped_1._0xBC1DC48270468444 = _0xBC1DC48270468444;
    /**
     * _IS_PED_M* - _IS_PED_O*
     *
     * Hash: 0xBD0E4F52F6D95242 | Since: 1207
     */
    function _0xBD0E4F52F6D95242(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xBD0E4F52F6D95242', _ped);
    }
    ped_1._0xBD0E4F52F6D95242 = _0xBD0E4F52F6D95242;
    /**
     * No comment provided
     *
     * Hash: 0xBF567DF2BEF211A6 | Since: 1207
     */
    function _0xBF567DF2BEF211A6() {
        Citizen.invokeNative('0xBF567DF2BEF211A6', undefined, undefined);
    }
    ped_1._0xBF567DF2BEF211A6 = _0xBF567DF2BEF211A6;
    /**
     * Only used in R* Script tg_p (CLIENT__AMBIENT_POPULATION - Player starts the populate in region)
     *
     * Hash: 0xBFA6B7731C3BAF02 | Since: 1207
     */
    function _0xBFA6B7731C3BAF02() {
        Citizen.invokeNative('0xBFA6B7731C3BAF02');
    }
    ped_1._0xBFA6B7731C3BAF02 = _0xBFA6B7731C3BAF02;
    /**
     * _SET_PED_P* - _SET_PED_R*
     *
     * Hash: 0xC17A94CC8FC3C61A | Since: 1207
     */
    function _0xC17A94CC8FC3C61A(entity, boneId) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xC17A94CC8FC3C61A', _entity, boneId, 0, 0, 0);
    }
    ped_1._0xC17A94CC8FC3C61A = _0xC17A94CC8FC3C61A;
    /**
     * _FORCE_PED_*
     *
     * Hash: 0xC2722B252C79E641 | Since: 1232
     */
    function _0xC2722B252C79E641(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC2722B252C79E641', _ped, undefined, undefined, false);
    }
    ped_1._0xC2722B252C79E641 = _0xC2722B252C79E641;
    /**
     * No comment provided
     *
     * Hash: 0xC2EF407645BEECDC | Since: 1207
     */
    function _0xC2EF407645BEECDC() {
        return Citizen.invokeNative('0xC2EF407645BEECDC', undefined);
    }
    ped_1._0xC2EF407645BEECDC = _0xC2EF407645BEECDC;
    /**
     * _GET_PED_G* - _GET_PED_I*
     *
     * Hash: 0xC3995D396F1D97B6 | Since: 1207
     */
    function _0xC3995D396F1D97B6(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xC3995D396F1D97B6', _ped, 0, 0);
    }
    ped_1._0xC3995D396F1D97B6 = _0xC3995D396F1D97B6;
    /**
     * Set the pelt of the animal to the back of the horse
     * EXAMPLE:
     * local mount = GetMountOwnedByPlayer(PlayerId())
     * Citizen.InvokeNative(0xC412AA1C73111FE0,mount,GetHashKey('PROVISION_DEER_HIDE_POOR'),GetHashKey('a_c_deer_01_uppr_000_c0_001_ab'),0,0)
     *
     * Hash: 0xC412AA1C73111FE0 | Since: 1207
     */
    function setPeltForHorseByInventoryItem(horse, itemHash, albedo, normal) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        if (typeof itemHash === 'string')
            itemHash = misc.getHashKey(itemHash);
        if (typeof albedo === 'string')
            albedo = misc.getHashKey(albedo);
        if (typeof normal === 'string')
            normal = misc.getHashKey(normal);
        Citizen.invokeNative('0xC412AA1C73111FE0', _horse, itemHash, albedo, normal, false);
    }
    ped_1.setPeltForHorseByInventoryItem = setPeltForHorseByInventoryItem;
    /**
     * _SET_PED_M*
     *
     * Hash: 0xC48AF420371C7407 | Since: 1207
     */
    function _0xC48AF420371C7407(ped, grapple) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof grapple === 'string')
            grapple = misc.getHashKey(grapple);
        return Citizen.invokeNative('0xC48AF420371C7407', _ped, grapple);
    }
    ped_1._0xC48AF420371C7407 = _0xC48AF420371C7407;
    /**
     * memoryType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/_PED_SET_SIMPLE_PLAYER_MEMORY
     *
     * Hash: 0xC494C76A34266E82 | Since: 1207
     */
    function setSimplePlayerMemory(ped, memoryType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC494C76A34266E82', _ped, memoryType);
    }
    ped_1.setSimplePlayerMemory = setSimplePlayerMemory;
    /**
     * Returns boneIndex
     *
     * Hash: 0xC5303F460A40D21D | Since: 1207
     */
    function getRagdollBoneIndex(ped, boneId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xC5303F460A40D21D', _ped, boneId);
    }
    ped_1.getRagdollBoneIndex = getRagdollBoneIndex;
    /**
     * _SET_H* - _SET_I*
     *
     * Hash: 0xC5B78E41DCF8227C | Since: 1207
     */
    function _0xC5B78E41DCF8227C(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC5B78E41DCF8227C', _ped, false);
    }
    ped_1._0xC5B78E41DCF8227C = _0xC5B78E41DCF8227C;
    /**
     * No comment provided
     *
     * Hash: 0xC6136B40FFFB778B | Since: 1207
     */
    function _0xC6136B40FFFB778B() {
        Citizen.invokeNative('0xC6136B40FFFB778B', false);
    }
    ped_1._0xC6136B40FFFB778B = _0xC6136B40FFFB778B;
    /**
     * No comment provided
     *
     * Hash: 0xC6981AFF6D2A71C2 | Since: 1207
     */
    function _0xC6981AFF6D2A71C2() {
        Citizen.invokeNative('0xC6981AFF6D2A71C2', undefined);
    }
    ped_1._0xC6981AFF6D2A71C2 = _0xC6981AFF6D2A71C2;
    /**
     * No comment provided
     *
     * Hash: 0xC6C4E15CF7D52FEA | Since: 1207
     */
    function _0xC6C4E15CF7D52FEA() {
        Citizen.invokeNative('0xC6C4E15CF7D52FEA', undefined, undefined);
    }
    ped_1._0xC6C4E15CF7D52FEA = _0xC6C4E15CF7D52FEA;
    /**
     * No comment provided
     *
     * Hash: 0xC9151483CC06A414 | Since: 1207
     */
    function _0xC9151483CC06A414(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC9151483CC06A414', _ped);
    }
    ped_1._0xC9151483CC06A414 = _0xC9151483CC06A414;
    /**
     * Not implemented.
     *
     * Hash: 0xC991EF46FE323867 | Since: 1207
     */
    function _0xC991EF46FE323867(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC991EF46FE323867', _ped, undefined);
    }
    ped_1._0xC991EF46FE323867 = _0xC991EF46FE323867;
    /**
     * _SET_PLAYER_N* - _SET_PLAYER_S*
     *
     * Hash: 0xC99F104BDF8C7F5A | Since: 1207
     */
    function _0xC99F104BDF8C7F5A(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC99F104BDF8C7F5A', _ped, false);
    }
    ped_1._0xC99F104BDF8C7F5A = _0xC99F104BDF8C7F5A;
    /**
     * Returns vehicle speed
     * _COMPUTE_*
     *
     * Hash: 0xCA95924C893A0C91 | Since: 1207
     */
    function _0xCA95924C893A0C91(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xCA95924C893A0C91', _ped, 0);
    }
    ped_1._0xCA95924C893A0C91 = _0xCA95924C893A0C91;
    /**
     * No comment provided
     *
     * Hash: 0xCA95C156C14B2054 | Since: 1207
     */
    function _0xCA95C156C14B2054() {
        Citizen.invokeNative('0xCA95C156C14B2054', undefined, undefined);
    }
    ped_1._0xCA95C156C14B2054 = _0xCA95C156C14B2054;
    /**
     * No comment provided
     *
     * Hash: 0xCAC43D060099EA72 | Since: 1207
     */
    function _0xCAC43D060099EA72(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xCAC43D060099EA72', _ped);
    }
    ped_1._0xCAC43D060099EA72 = _0xCAC43D060099EA72;
    /**
     * No comment provided
     *
     * Hash: 0xCB1A3864C524F784 | Since: 1207
     */
    function _0xCB1A3864C524F784() {
        Citizen.invokeNative('0xCB1A3864C524F784', undefined, undefined);
    }
    ped_1._0xCB1A3864C524F784 = _0xCB1A3864C524F784;
    /**
     * No comment provided
     *
     * Hash: 0xCB86D3E3E3708901 | Since: 1207
     */
    function _0xCB86D3E3E3708901() {
        return Citizen.invokeNative('0xCB86D3E3E3708901', undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0xCB86D3E3E3708901 = _0xCB86D3E3E3708901;
    /**
     * Only used in R* SP Scripts
     * _GET_PLAYER_W* - _GET_RANDOM_*
     *
     * Hash: 0xCB8F4C9343EBE240 | Since: 1207
     */
    function _0xCB8F4C9343EBE240(ped, eventType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return Citizen.invokeNative('0xCB8F4C9343EBE240', _ped, eventType);
    }
    ped_1._0xCB8F4C9343EBE240 = _0xCB8F4C9343EBE240;
    /**
     * No comment provided
     *
     * Hash: 0xCBDE59C48F2B06F5 | Since: 1207
     */
    function _0xCBDE59C48F2B06F5() {
        Citizen.invokeNative('0xCBDE59C48F2B06F5', undefined, undefined, undefined);
    }
    ped_1._0xCBDE59C48F2B06F5 = _0xCBDE59C48F2B06F5;
    /**
     * _SET_PED_R* - _SET_PED_S*
     *
     * Hash: 0xCD9E5F94A2F38683 | Since: 1207
     */
    function _0xCD9E5F94A2F38683(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xCD9E5F94A2F38683', _ped, false);
    }
    ped_1._0xCD9E5F94A2F38683 = _0xCD9E5F94A2F38683;
    /**
     * No comment provided
     *
     * Hash: 0xCDFB8C04D4C95D9B | Since: 1207
     */
    function _0xCDFB8C04D4C95D9B() {
        Citizen.invokeNative('0xCDFB8C04D4C95D9B', undefined, undefined, undefined, undefined);
    }
    ped_1._0xCDFB8C04D4C95D9B = _0xCDFB8C04D4C95D9B;
    /**
     * No comment provided
     *
     * Hash: 0xCE7A6C1D5CDE1F9D | Since: 1207
     */
    function _0xCE7A6C1D5CDE1F9D(ped, _object, propName, animName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const __object = _object instanceof Object ? _object.handle() : _object;
        Citizen.invokeNative('0xCE7A6C1D5CDE1F9D', _ped, __object, propName, animName);
    }
    ped_1._0xCE7A6C1D5CDE1F9D = _0xCE7A6C1D5CDE1F9D;
    /**
     * _SET_PED_COMBAT_*
     *
     * Hash: 0xCF0B19806473D324 | Since: 1207
     */
    function _0xCF0B19806473D324(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xCF0B19806473D324', _ped, pos.x, pos.y, pos.z);
    }
    ped_1._0xCF0B19806473D324 = _0xCF0B19806473D324;
    /**
     * No comment provided
     *
     * Hash: 0xD049920CD29F6CC8 | Since: 1207
     */
    function _0xD049920CD29F6CC8() {
        Citizen.invokeNative('0xD049920CD29F6CC8', undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0xD049920CD29F6CC8 = _0xD049920CD29F6CC8;
    /**
     * No comment provided
     *
     * Hash: 0xD049FDAF089FDDB0 | Since: 1207
     */
    function _0xD049FDAF089FDDB0(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xD049FDAF089FDDB0', _ped, p1, 0);
    }
    ped_1._0xD049FDAF089FDDB0 = _0xD049FDAF089FDDB0;
    /**
     * Params: p1 either a 1 or 0, so perhaps BOOL
     * _SET_PED_A*
     *
     * Hash: 0xD103F6DBB5442BE8 | Since: 1207
     */
    function _0xD103F6DBB5442BE8(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xD103F6DBB5442BE8', _ped, 0);
    }
    ped_1._0xD103F6DBB5442BE8 = _0xD103F6DBB5442BE8;
    /**
     * No comment provided
     *
     * Hash: 0xD2F0FE8805D91647 | Since: 1207
     */
    function _0xD2F0FE8805D91647() {
        Citizen.invokeNative('0xD2F0FE8805D91647', undefined, undefined);
    }
    ped_1._0xD2F0FE8805D91647 = _0xD2F0FE8805D91647;
    /**
     * No comment provided
     *
     * Hash: 0xD355E2F1BB41087E | Since: 1207
     */
    function _0xD355E2F1BB41087E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xD355E2F1BB41087E', _ped, 0);
    }
    ped_1._0xD355E2F1BB41087E = _0xD355E2F1BB41087E;
    /**
     * No comment provided
     *
     * Hash: 0xD4D403EA031F351C | Since: 1207
     */
    function _0xD4D403EA031F351C(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xD4D403EA031F351C', _ped);
    }
    ped_1._0xD4D403EA031F351C = _0xD4D403EA031F351C;
    /**
     * Used in Script Function LA_CHECK_ALERTED
     * _GET_IS_PED_*
     *
     * Hash: 0xD55DB4466D00A258 | Since: 1207
     */
    function _0xD55DB4466D00A258(legendaryAnimal) {
        const _legendaryAnimal = legendaryAnimal instanceof Ped ? legendaryAnimal.handle() : legendaryAnimal;
        return Citizen.invokeNative('0xD55DB4466D00A258', _legendaryAnimal);
    }
    ped_1._0xD55DB4466D00A258 = _0xD55DB4466D00A258;
    /**
     * _SET_FORMATION_*
     *
     * Hash: 0xD5BD1B5318A81994 | Since: 1207
     */
    function _0xD5BD1B5318A81994(groupId) {
        Citizen.invokeNative('0xD5BD1B5318A81994', groupId, false);
    }
    ped_1._0xD5BD1B5318A81994 = _0xD5BD1B5318A81994;
    /**
     * No comment provided
     *
     * Hash: 0xD61FCF9FCFD515B7 | Since: 1207
     */
    function _0xD61FCF9FCFD515B7() {
        Citizen.invokeNative('0xD61FCF9FCFD515B7', undefined, undefined, undefined);
    }
    ped_1._0xD61FCF9FCFD515B7 = _0xD61FCF9FCFD515B7;
    /**
     * No comment provided
     *
     * Hash: 0xD7D2F45C56A4F4DF | Since: 1207
     */
    function _0xD7D2F45C56A4F4DF() {
        Citizen.invokeNative('0xD7D2F45C56A4F4DF', undefined, undefined, undefined);
    }
    ped_1._0xD7D2F45C56A4F4DF = _0xD7D2F45C56A4F4DF;
    /**
     * METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
     * p1 is mostly 10
     * _CLEAR_PED_N* - _CLEAR_PED_W*
     *
     * Hash: 0xD8544F6260F5F01E | Since: 1232
     */
    function _0xD8544F6260F5F01E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xD8544F6260F5F01E', _ped, 0);
    }
    ped_1._0xD8544F6260F5F01E = _0xD8544F6260F5F01E;
    /**
     * No comment provided
     *
     * Hash: 0xD8CEEED54C672B5D | Since: 1207
     */
    function _0xD8CEEED54C672B5D() {
        Citizen.invokeNative('0xD8CEEED54C672B5D', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0xD8CEEED54C672B5D = _0xD8CEEED54C672B5D;
    /**
     * No comment provided
     *
     * Hash: 0xD97BC27AC039F681 | Since: 1311
     */
    function _0xD97BC27AC039F681() {
        return Citizen.invokeNative('0xD97BC27AC039F681', undefined, undefined, undefined, undefined);
    }
    ped_1._0xD97BC27AC039F681 = _0xD97BC27AC039F681;
    /**
     * detects if ped is afloat in water like swimming or in a boat (driving or standing on it)
     *
     * Hash: 0xDC88D06719070C39 | Since: 1207
     */
    function isAfloat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xDC88D06719070C39', _ped);
    }
    ped_1.isAfloat = isAfloat;
    /**
     * Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_GAME
     * _SET_RELATIONSHIP_*
     *
     * Hash: 0xDC91F22F09BC6C2F | Since: 1207
     */
    function _0xDC91F22F09BC6C2F(group) {
        if (typeof group === 'string')
            group = misc.getHashKey(group);
        Citizen.invokeNative('0xDC91F22F09BC6C2F', group, false);
    }
    ped_1._0xDC91F22F09BC6C2F = _0xDC91F22F09BC6C2F;
    /**
     * No comment provided
     *
     * Hash: 0xDD9540E7B1C9714F | Since: 1207
     */
    function _0xDD9540E7B1C9714F(ped, p1, r, g, b) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xDD9540E7B1C9714F', _ped, p1, r, g, b);
    }
    ped_1._0xDD9540E7B1C9714F = _0xDD9540E7B1C9714F;
    /**
     * _SET_FORMATION_P*
     *
     * Hash: 0xDDFAD4DEAA7FA362 | Since: 1207
     */
    function _0xDDFAD4DEAA7FA362(groupId) {
        Citizen.invokeNative('0xDDFAD4DEAA7FA362', groupId, 0, 0, 0, 0);
    }
    ped_1._0xDDFAD4DEAA7FA362 = _0xDDFAD4DEAA7FA362;
    /**
     * No comment provided
     *
     * Hash: 0xDEDBED3020DA49DC | Since: 1207
     */
    function _0xDEDBED3020DA49DC() {
        Citizen.invokeNative('0xDEDBED3020DA49DC', undefined);
    }
    ped_1._0xDEDBED3020DA49DC = _0xDEDBED3020DA49DC;
    /**
     * No comment provided
     *
     * Hash: 0xDEE8D30AA5C2E28D | Since: 1207
     */
    function _0xDEE8D30AA5C2E28D(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xDEE8D30AA5C2E28D', _ped, p1, false);
    }
    ped_1._0xDEE8D30AA5C2E28D = _0xDEE8D30AA5C2E28D;
    /**
     * No comment provided
     *
     * Hash: 0xE0FE107AB174D64A | Since: 1207
     */
    function _0xE0FE107AB174D64A() {
        Citizen.invokeNative('0xE0FE107AB174D64A', undefined, undefined);
    }
    ped_1._0xE0FE107AB174D64A = _0xE0FE107AB174D64A;
    /**
     * _SET_FORMATION_P*
     *
     * Hash: 0xE1103300F3456DE7 | Since: 1207
     */
    function _0xE1103300F3456DE7(groupId) {
        Citizen.invokeNative('0xE1103300F3456DE7', groupId, 0, 0);
    }
    ped_1._0xE1103300F3456DE7 = _0xE1103300F3456DE7;
    /**
     * _C*
     *
     * Hash: 0xE1AADD0055D76603 | Since: 1207
     */
    function _0xE1AADD0055D76603(ped, entity, boneIndex1, boneIndex2, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xE1AADD0055D76603', _ped, _entity, boneIndex1, boneIndex2, pos.x, pos.y, pos.z, 0, false, false, 0);
    }
    ped_1._0xE1AADD0055D76603 = _0xE1AADD0055D76603;
    /**
     * No comment provided
     *
     * Hash: 0xE1B3BE07D3AADDED | Since: 1207
     */
    function _0xE1B3BE07D3AADDED(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xE1B3BE07D3AADDED', _ped, 0, false);
    }
    ped_1._0xE1B3BE07D3AADDED = _0xE1B3BE07D3AADDED;
    /**
     * No comment provided
     *
     * Hash: 0xE20027B414BFE6C7 | Since: 1207
     */
    function _0xE20027B414BFE6C7() {
        Citizen.invokeNative('0xE20027B414BFE6C7', undefined, undefined);
    }
    ped_1._0xE20027B414BFE6C7 = _0xE20027B414BFE6C7;
    /**
     * _SET_PED_R* -_SET_PED_S*
     *
     * Hash: 0xE29D8CD66553DBAA | Since: 1207
     */
    function _0xE29D8CD66553DBAA(horse) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        Citizen.invokeNative('0xE29D8CD66553DBAA', _horse);
    }
    ped_1._0xE29D8CD66553DBAA = _0xE29D8CD66553DBAA;
    /**
     * _SET_PED_IN*
     *
     * Hash: 0xE37ACEE15AC50C7E | Since: 1207
     */
    function _0xE37ACEE15AC50C7E(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xE37ACEE15AC50C7E', _ped, undefined);
    }
    ped_1._0xE37ACEE15AC50C7E = _0xE37ACEE15AC50C7E;
    /**
     * No comment provided
     *
     * Hash: 0xE4C95E0AE31C6512 | Since: 1207
     */
    function _0xE4C95E0AE31C6512(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xE4C95E0AE31C6512', _ped, undefined);
    }
    ped_1._0xE4C95E0AE31C6512 = _0xE4C95E0AE31C6512;
    /**
     * No comment provided
     *
     * Hash: 0xE4EF4382E22C780C | Since: 1207
     */
    function _0xE4EF4382E22C780C() {
        Citizen.invokeNative('0xE4EF4382E22C780C', undefined);
    }
    ped_1._0xE4EF4382E22C780C = _0xE4EF4382E22C780C;
    /**
     * _SET_D*
     *
     * Hash: 0xE50C9816B3F22D8B | Since: 1311
     */
    function _0xE50C9816B3F22D8B(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0xE50C9816B3F22D8B', _ped, p1, 0);
    }
    ped_1._0xE50C9816B3F22D8B = _0xE50C9816B3F22D8B;
    /**
     * No comment provided
     *
     * Hash: 0xE6CB36F43A95D75F | Since: 1207
     */
    function _0xE6CB36F43A95D75F() {
        Citizen.invokeNative('0xE6CB36F43A95D75F', undefined);
    }
    ped_1._0xE6CB36F43A95D75F = _0xE6CB36F43A95D75F;
    /**
     * No comment provided
     *
     * Hash: 0xE735A7DA22E88359 | Since: 1207
     */
    function _0xE735A7DA22E88359() {
        Citizen.invokeNative('0xE735A7DA22E88359', undefined);
    }
    ped_1._0xE735A7DA22E88359 = _0xE735A7DA22E88359;
    /**
     * Only used in R* Script nb_animal_attack: p2 = 120000
     * _SET_PED_SH* - _SET_PED_SP*
     *
     * Hash: 0xE737D5F14304A2EC | Since: 1207
     */
    function _0xE737D5F14304A2EC(ped, player) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xE737D5F14304A2EC', _ped, _player, 0);
    }
    ped_1._0xE737D5F14304A2EC = _0xE737D5F14304A2EC;
    /**
     * Used for AUDIO / ANIMSCENE (REFERENCE_REGIONAL_CHARACTER)
     * Params: p1 = 0
     * _GET_PED_IN*
     *
     * Hash: 0xE76687023D8C8505 | Since: 1207
     */
    function _0xE76687023D8C8505(perscharModel) {
        if (typeof perscharModel === 'string')
            perscharModel = misc.getHashKey(perscharModel);
        return Citizen.invokeNative('0xE76687023D8C8505', perscharModel, 0);
    }
    ped_1._0xE76687023D8C8505 = _0xE76687023D8C8505;
    /**
     * No comment provided
     *
     * Hash: 0xE8ABE3B73FC7FE17 | Since: 1207
     */
    function _0xE8ABE3B73FC7FE17() {
        Citizen.invokeNative('0xE8ABE3B73FC7FE17', undefined, undefined, undefined, undefined);
    }
    ped_1._0xE8ABE3B73FC7FE17 = _0xE8ABE3B73FC7FE17;
    /**
     * Returns dismounted timestamp
     *
     * Hash: 0xE8D1CCB9375C101B | Since: 1207
     */
    function getPlayerDismountTimestamp(mount, player) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xE8D1CCB9375C101B', _mount, _player);
    }
    ped_1.getPlayerDismountTimestamp = getPlayerDismountTimestamp;
    /**
     * No comment provided
     *
     * Hash: 0xE9E06EA514A69061 | Since: 1207
     */
    function _0xE9E06EA514A69061() {
        Citizen.invokeNative('0xE9E06EA514A69061', undefined, undefined);
    }
    ped_1._0xE9E06EA514A69061 = _0xE9E06EA514A69061;
    /**
     * No comment provided
     *
     * Hash: 0xEA8763E505AFD49A | Since: 1207
     */
    function _0xEA8763E505AFD49A() {
        Citizen.invokeNative('0xEA8763E505AFD49A', undefined, undefined, undefined);
    }
    ped_1._0xEA8763E505AFD49A = _0xEA8763E505AFD49A;
    /**
     * Washing player's face/hands now
     * _FA* - _FI*
     *
     * Hash: 0xEB8886E1065654CD | Since: 1207
     */
    function _0xEB8886E1065654CD(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xEB8886E1065654CD', _ped, 0, undefined, 0);
    }
    ped_1._0xEB8886E1065654CD = _0xEB8886E1065654CD;
    /**
     * If returned true: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling UP the bounds due to tracking
     * If returned false: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling DOWN the bounds due to tracking
     * _IS_PED_T* - _IS_PED_U*
     *
     * Hash: 0xEBAAC9A750E7563B | Since: 1207
     */
    function _0xEBAAC9A750E7563B(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xEBAAC9A750E7563B', _ped);
    }
    ped_1._0xEBAAC9A750E7563B = _0xEBAAC9A750E7563B;
    /**
     * No comment provided
     *
     * Hash: 0xEBD49472BCCF7642 | Since: 1207
     */
    function _0xEBD49472BCCF7642() {
        Citizen.invokeNative('0xEBD49472BCCF7642', undefined, undefined);
    }
    ped_1._0xEBD49472BCCF7642 = _0xEBD49472BCCF7642;
    /**
     * _SET_C*
     *
     * Hash: 0xEC60D1D225BC50AA | Since: 1207
     */
    function _0xEC60D1D225BC50AA(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xEC60D1D225BC50AA', _ped, 0);
    }
    ped_1._0xEC60D1D225BC50AA = _0xEC60D1D225BC50AA;
    /**
     * Only used in R* Script nb_stalking_hunter
     *
     * Hash: 0xED1C764997A86D5A | Since: 1207
     */
    function _0xED1C764997A86D5A(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        Citizen.invokeNative('0xED1C764997A86D5A', _ped1, _ped2);
    }
    ped_1._0xED1C764997A86D5A = _0xED1C764997A86D5A;
    /**
     * No comment provided
     *
     * Hash: 0xEEDC9B29314B2733 | Since: 1207
     */
    function _0xEEDC9B29314B2733() {
        Citizen.invokeNative('0xEEDC9B29314B2733', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0xEEDC9B29314B2733 = _0xEEDC9B29314B2733;
    /**
     * _ADD_*
     *
     * Hash: 0xEF371232BC6053E1 | Since: 1207
     */
    function _0xEF371232BC6053E1(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xEF371232BC6053E1', _ped);
    }
    ped_1._0xEF371232BC6053E1 = _0xEF371232BC6053E1;
    /**
     * Used in Script Function MOONSHINE_BAND_CLIENT_PATRON_UPDATE
     *
     * Hash: 0xF47D54B986F0A346 | Since: 1232
     */
    function _0xF47D54B986F0A346(ped, danceIntensity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xF47D54B986F0A346', _ped, danceIntensity);
    }
    ped_1._0xF47D54B986F0A346 = _0xF47D54B986F0A346;
    /**
     * Only used in SP Scripts
     * Returns count / index
     * _C*
     *
     * Hash: 0xF4860514AD354226 | Since: 1207
     */
    function _0xF4860514AD354226(shockingEvent, pos) {
        return Citizen.invokeNative('0xF4860514AD354226', shockingEvent, pos.x, pos.y, pos.z, 0);
    }
    ped_1._0xF4860514AD354226 = _0xF4860514AD354226;
    /**
     * No comment provided
     *
     * Hash: 0xF634E2892220EF34 | Since: 1207
     */
    function _0xF634E2892220EF34(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xF634E2892220EF34', _ped, undefined);
    }
    ped_1._0xF634E2892220EF34 = _0xF634E2892220EF34;
    /**
     * No comment provided
     *
     * Hash: 0xF6A8C4B4A11AE89C | Since: 1207
     */
    function _0xF6A8C4B4A11AE89C() {
        return Citizen.invokeNative('0xF6A8C4B4A11AE89C', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0xF6A8C4B4A11AE89C = _0xF6A8C4B4A11AE89C;
    /**
     * No comment provided
     *
     * Hash: 0xF7327ACC7A89AEF1 | Since: 1207
     */
    function _0xF7327ACC7A89AEF1() {
        return Citizen.invokeNative('0xF7327ACC7A89AEF1', undefined, undefined, undefined);
    }
    ped_1._0xF7327ACC7A89AEF1 = _0xF7327ACC7A89AEF1;
    /**
     * No comment provided
     *
     * Hash: 0xF917F92BF22ECBAB | Since: 1207
     */
    function _0xF917F92BF22ECBAB() {
        Citizen.invokeNative('0xF917F92BF22ECBAB', undefined);
    }
    ped_1._0xF917F92BF22ECBAB = _0xF917F92BF22ECBAB;
    /**
     * No comment provided
     *
     * Hash: 0xF9331B3A314EB49D | Since: 1207
     */
    function _0xF9331B3A314EB49D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xF9331B3A314EB49D', _ped);
    }
    ped_1._0xF9331B3A314EB49D = _0xF9331B3A314EB49D;
    /**
     * Used in Script Function PLAYER_HEAD_TRACKING_MAINTAIN
     *
     * Hash: 0xF9CBD46433E36713 | Since: 1207
     */
    function _0xF9CBD46433E36713(ped, targetEntity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        Citizen.invokeNative('0xF9CBD46433E36713', _ped, _targetEntity, 0, 0, 0, 0, 0, 0, 0, undefined);
    }
    ped_1._0xF9CBD46433E36713 = _0xF9CBD46433E36713;
    /**
     * only works when you use SET_PED_WETNESS_HEIGHT first , if you do 0.0 (it resets) you need to apply again with SET_PED_WETNESS_HEIGHT to see the wetness effects again
     *
     * Hash: 0xF9CFF5BB70E8A2CB | Since: 1207
     */
    function setWetness(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xF9CFF5BB70E8A2CB', _ped, 0);
    }
    ped_1.setWetness = setWetness;
    /**
     * No comment provided
     *
     * Hash: 0xFA0D206B489A6846 | Since: 1207
     */
    function _0xFA0D206B489A6846() {
        Citizen.invokeNative('0xFA0D206B489A6846', undefined, undefined, undefined, undefined, undefined);
    }
    ped_1._0xFA0D206B489A6846 = _0xFA0D206B489A6846;
    /**
     * No comment provided
     *
     * Hash: 0xFA742B82D093D848 | Since: 1207
     */
    function _0xFA742B82D093D848() {
        Citizen.invokeNative('0xFA742B82D093D848', undefined, undefined, undefined);
    }
    ped_1._0xFA742B82D093D848 = _0xFA742B82D093D848;
    /**
     * _HAS_PED_*
     *
     * Hash: 0xFA8C10DCE0706D43 | Since: 1207
     */
    function _0xFA8C10DCE0706D43(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xFA8C10DCE0706D43', _ped);
    }
    ped_1._0xFA8C10DCE0706D43 = _0xFA8C10DCE0706D43;
    /**
     * No comment provided
     *
     * Hash: 0xFC23348F0F4E245F | Since: 1207
     */
    function _0xFC23348F0F4E245F() {
        Citizen.invokeNative('0xFC23348F0F4E245F', undefined, undefined, undefined, undefined);
    }
    ped_1._0xFC23348F0F4E245F = _0xFC23348F0F4E245F;
    /**
     * returns the number of reserved stamina similar to _GET_NUM_RESERVED_HEALTH
     *
     * Hash: 0xFC3B580C4380B5B7 | Since: 1207
     */
    function getNumReservedStamina(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xFC3B580C4380B5B7', _ped);
    }
    ped_1.getNumReservedStamina = getNumReservedStamina;
    /**
     * _DISABLE_A* - _DISABLE_C*
     *
     * Hash: 0xFD3C31A2E45671E7 | Since: 1207
     */
    function _0xFD3C31A2E45671E7(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xFD3C31A2E45671E7', _ped, 0);
    }
    ped_1._0xFD3C31A2E45671E7 = _0xFD3C31A2E45671E7;
    /**
     * No comment provided
     *
     * Hash: 0xFD8E853F0BC2E942 | Since: 1207
     */
    function _0xFD8E853F0BC2E942() {
        Citizen.invokeNative('0xFD8E853F0BC2E942', undefined, undefined);
    }
    ped_1._0xFD8E853F0BC2E942 = _0xFD8E853F0BC2E942;
    /**
     * METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
     * _SET_M* - _SET_P*
     *
     * Hash: 0xFEA6126C34DF2532 | Since: 1207
     */
    function _0xFEA6126C34DF2532(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xFEA6126C34DF2532', _ped, false);
    }
    ped_1._0xFEA6126C34DF2532 = _0xFEA6126C34DF2532;
    /**
     * No comment provided
     *
     * Hash: 0xFEAB3DB4EDB236EB | Since: unknown
     */
    function _0xFEAB3DB4EDB236EB() {
        return Citizen.invokeNative('0xFEAB3DB4EDB236EB', undefined);
    }
    ped_1._0xFEAB3DB4EDB236EB = _0xFEAB3DB4EDB236EB;
    /**
     * No comment provided
     *
     * Hash: 0xFFA1594703ED27CA | Since: 1207
     */
    function _0xFFA1594703ED27CA(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xFFA1594703ED27CA', _ped, 0);
    }
    ped_1._0xFFA1594703ED27CA = _0xFFA1594703ED27CA;
    /**
     * _GET_PED_COMBAT_M* - _GET_PED_C*
     *
     * Hash: 0xFFDE295662405B25 | Since: 1207
     */
    function _0xFFDE295662405B25(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xFFDE295662405B25', _ped);
    }
    ped_1._0xFFDE295662405B25 = _0xFFDE295662405B25;
    /**
     * No comment provided
     *
     * Hash: 0xE9B168527B337BF0 | Since: 1207
     */
    function addStayOutVolume(ped, volume) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return AddPedStayOutVolume(_ped, volume);
    }
    ped_1.addStayOutVolume = addStayOutVolume;
    /**
     * No comment provided
     *
     * Hash: 0xE37287EE358939C3 | Since: 1311
     */
    function addSubscribeToLegendaryBlips(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return AddPedSubscribeToLegendaryBlips(_ped);
    }
    ped_1.addSubscribeToLegendaryBlips = addSubscribeToLegendaryBlips;
    /**
     * flag: see ADD_SCENARIO_BLOCKING_AREA
     *
     * Hash: 0x4C39C95AE5DB1329 | Since: 1207
     */
    function addScenarioBlockingVolume(volume, flag) {
        return AddScenarioBlockingVolume(volume, false, flag);
    }
    ped_1.addScenarioBlockingVolume = addScenarioBlockingVolume;
    /**
     * Forces transition now, called together with 0xD65FDC686A031C83
     *
     * Hash: 0x6D07B371E9439019 | Since: 1207
     */
    function addScenarioTransition(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddScenarioTransition(_ped);
    }
    ped_1.addScenarioTransition = addScenarioTransition;
    /**
     * Creates ped overlay in texture override data and returns it's index.
     * This index are used for further overlay editing.
     *
     * albedoHash: a hash of overlay's albedo texture
     * colorType: a color type(from 0 to 2). 0 is used for overlays with RGB colors usually.
     *
     * Hash: 0x86BB5FF45F193A02 | Since: 1207
     */
    function addTextureLayer(textureId, albedoHash, normalHash, materialHash, blendType, texAlpha, sheetGridIndex) {
        if (typeof albedoHash === 'string')
            albedoHash = misc.getHashKey(albedoHash);
        if (typeof normalHash === 'string')
            normalHash = misc.getHashKey(normalHash);
        if (typeof materialHash === 'string')
            materialHash = misc.getHashKey(materialHash);
        return AddTextureLayer(textureId, albedoHash, normalHash, materialHash, blendType, texAlpha, sheetGridIndex);
    }
    ped_1.addTextureLayer = addTextureLayer;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
     *
     * Hash: 0x74F512E29CB717E2 | Since: 1207
     */
    function applyMetaPedOutfit(requestId, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return ApplyPedMetaPedOutfit(requestId, _ped, false, false);
    }
    ped_1.applyMetaPedOutfit = applyMetaPedOutfit;
    /**
     * No comment provided
     *
     * Hash: 0xD3A7B003ED343FD9 | Since: 1207
     */
    function applyShopItemTo(ped, componentHash, immediately, isMp) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        ApplyShopItemToPed(_ped, componentHash, immediately, isMp, false);
    }
    ped_1.applyShopItemTo = applyShopItemTo;
    /**
     * No comment provided
     *
     * Hash: 0x0B46E25761519058 | Since: 1207
     */
    function applyTextureOn(ped, componentHash, textureId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        ApplyTextureOnPed(_ped, componentHash, textureId);
    }
    ped_1.applyTextureOn = applyTextureOn;
    /**
     * No comment provided
     *
     * Hash: 0x5E420FF293EE5472 | Since: 1207
     */
    function areAllAmbientReservationsReady() {
        return AreAllAmbientPedReservationsReady();
    }
    ped_1.areAllAmbientReservationsReady = areAllAmbientReservationsReady;
    /**
     * No comment provided
     *
     * Hash: 0x7C00CFC48A782DC0 | Since: 1207
     */
    function attachVolumeToEntity(volume, entity, offsetX, offsetY, offsetZ, rot) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        AttachVolumeToEntity(volume, _entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, 0, false);
    }
    ped_1.attachVolumeToEntity = attachVolumeToEntity;
    /**
     * p2 is always 0, p3 is always 0, p4 is always 1
     *
     * Hash: 0xAB643407D0B26F07 | Since: 1207
     */
    function canUseScenarioPoint(ped, scenario) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return CanPedUseScenarioPoint(_ped, scenario, undefined, undefined, undefined);
    }
    ped_1.canUseScenarioPoint = canUseScenarioPoint;
    /**
     * Alters entity's stamina by 'amount'. Can be negative (to drain stamina). float amount: -1000.0 - 1000.0
     *
     * Hash: 0xC3D4B754C0E86B9E | Since: 1207
     */
    function changeStamina(ped, amount) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return ChangePedStamina(_ped, amount);
    }
    ped_1.changeStamina = changeStamina;
    /**
     * Used in Script Functions PLAYER_HORSE_RELEASE_HORSE_TO_AMBIENT_WORLD (p1 = true), HORSE_SETUP_PLAYER_HORSE_ATTRIBUTES (p1 = false)
     * Set to false for player horse in scripts and seems it's only true when releasing/changing a player horse? Cannot determine what effect it has, but it doesn't seem to affect _GET_HORSE_TAMING_STATE
     *
     * Hash: 0xBCC76708E5677E1D | Since: 1207
     */
    function clearActiveAnimalOwner(horse, clear) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        ClearActiveAnimalOwner(_horse, clear);
    }
    ped_1.clearActiveAnimalOwner = clearActiveAnimalOwner;
    /**
     * No comment provided
     *
     * Hash: 0x949B2F9ED2917F5D | Since: 1207
     */
    function clearActionDisableFlag(ped, actionDisableFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedActionDisableFlag(_ped, actionDisableFlag);
    }
    ped_1.clearActionDisableFlag = clearActionDisableFlag;
    /**
     * No comment provided
     *
     * Hash: 0x7F5D88333EE8A86F | Since: 1207
     */
    function clearBloodDamageFacial(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedBloodDamageFacial(_ped, 0);
    }
    ped_1.clearBloodDamageFacial = clearBloodDamageFacial;
    /**
     * Params: p1 = 1 in R* Scripts
     *
     * Hash: 0x78815FC52832B690 | Since: 1207
     */
    function clearCombatStyle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedCombatStyle(_ped, 0);
    }
    ped_1.clearCombatStyle = clearCombatStyle;
    /**
     * _CLEAR_PED_COMBAT_*
     *
     * Hash: 0x1FA132CBCD7CB239 | Since: 1207
     */
    function clearCombatStyleMod(ped, combatStyleModHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof combatStyleModHash === 'string')
            combatStyleModHash = misc.getHashKey(combatStyleModHash);
        ClearPedCombatStyleMod(_ped, combatStyleModHash);
    }
    ped_1.clearCombatStyleMod = clearCombatStyleMod;
    /**
     * Clears locomotion archetype
     *
     * Hash: 0x4FD80C3DD84B817B | Since: 1207
     */
    function clearDesiredLocoForModel(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedDesiredLocoForModel(_ped);
    }
    ped_1.clearDesiredLocoForModel = clearDesiredLocoForModel;
    /**
     * No comment provided
     *
     * Hash: 0x58F7DB5BD8FA2288 | Since: 1207
     */
    function clearDesiredLocoMotionType(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedDesiredLocoMotionType(_ped);
    }
    ped_1.clearDesiredLocoMotionType = clearDesiredLocoMotionType;
    /**
     * No comment provided
     *
     * Hash: 0xEAE3B5B019C8D23F | Since: 1207
     */
    function clearGrappleFlag(ped, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedGrappleFlag(_ped, flag);
    }
    ped_1.clearGrappleFlag = clearGrappleFlag;
    /**
     * No comment provided
     *
     * Hash: 0xBBF6D1D07C02D00A | Since: 1207
     */
    function clearTargetActionDisableFlag(ped, actionDisableFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedTargetActionDisableFlag(_ped, actionDisableFlag);
    }
    ped_1.clearTargetActionDisableFlag = clearTargetActionDisableFlag;
    /**
     * Removes every texture layer
     * Old Name: _RESET_PED_TEXTURE_2
     *
     * Hash: 0xB63B9178D0F58D82 | Since: 1207
     */
    function clearTexture(textureId) {
        ClearPedTexture(textureId);
    }
    ped_1.clearTexture = clearTexture;
    /**
     * No comment provided
     *
     * Hash: 0x627F7F3A0C4C51FF | Since: 1207
     */
    function clearPeltFromHorse(horse, peltId) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        ClearPeltFromHorse(_horse, peltId);
    }
    ped_1.clearPeltFromHorse = clearPeltFromHorse;
    /**
     * Related to dead animals items/loots
     * Notice: skinningQuality is partially calculated using pedQuality
     *
     * Hash: 0x6B89FAA36FC909A3 | Since: 1207
     */
    function computeSatchelItemForCarcass(ped, damageCleanliness, skinningQuality) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return ComputeSatchelItemForPedCarcass(_ped, damageCleanliness, skinningQuality);
    }
    ped_1.computeSatchelItemForCarcass = computeSatchelItemForCarcass;
    /**
     * Creates a handle to an instance of "CScriptResource_GravityWell", this system forces local ped to target specified position when moving, however player still can interrupt this.
     * Can be useful to "point" player at some specific position.
     * Only works while on-foot.
     *
     * _CREATE_[P-Z]
     *
     * Hash: 0x4F5EBE70081E5A20 | Since: 1207
     */
    function createGravityWell(pos, heading, radius, stopAtDestination) {
        return CreateGravityWell(pos.x, pos.y, pos.z, heading, radius, 0, 0, 0, stopAtDestination);
    }
    ped_1.createGravityWell = createGravityWell;
    /**
     * Only used in SP scripts, for example odriscolls1: BOOLS: true, true, true, false, false
     *
     * Hash: 0x0BCD4091C8EABA42 | Since: 1207
     */
    function createMeta(requestId, pos, heading) {
        return CreateMetaPed(requestId, pos.x, pos.y, pos.z, heading, false, false, false, false, false);
    }
    ped_1.createMeta = createMeta;
    /**
     * Creates prop from metaped asset bundle
     * https://github.com/femga/rdr3_discoveries/blob/master/objects/metaped_asset_bundles_list.lua
     * Creates a pickup-able metaped component. asset doesn't seems to be related to component hashes. Hash example : 0xD20354AB (https ://i.imgur.com/dzHkcDb.png)
     *
     * Hash: 0x9641A9A20310F6B8 | Since: 1207
     */
    function createMetaAsset(asset, pos, rot) {
        if (typeof asset === 'string')
            asset = misc.getHashKey(asset);
        return CreateMetaPedAsset(asset, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, false, false, false);
    }
    ped_1.createMetaAsset = createMetaAsset;
    /**
     * Creates metaped from ped outfit requestId. See _REQUEST_METAPED_OUTFIT
     *
     * Hash: 0xEAF682A14F8E5F53 | Since: 1207
     */
    function createMetaOutfitPed(requestId, pos, heading) {
        return CreateMetaPedOutfitPed(requestId, pos.x, pos.y, pos.z, heading, false, false, false, false);
    }
    ped_1.createMetaOutfitPed = createMetaOutfitPed;
    /**
     * No comment provided
     *
     * Hash: 0x19C975B81BE53C28 | Since: 1207
     */
    function detachVolumeFromEntity(volume, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DetachVolumeFromEntity(volume, _entity);
    }
    ped_1.detachVolumeFromEntity = detachVolumeFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xE1965A380342BE1F | Since: 1355
     */
    function disableAllLookAtRequests(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        DisableAllLookAtRequests(_ped, 0);
    }
    ped_1.disableAllLookAtRequests = disableAllLookAtRequests;
    /**
     * No comment provided
     *
     * Hash: 0x80038740C96AD17F | Since: 1207
     */
    function disableAmbientLookAtRequests() {
        DisableAmbientLookAtRequests(undefined, undefined);
    }
    ped_1.disableAmbientLookAtRequests = disableAmbientLookAtRequests;
    /**
     * No comment provided
     *
     * Hash: 0xC0E880B7A441164D | Since: 1207
     */
    function doesMetaOutfitExistForPedModel(outfit, model) {
        if (typeof outfit === 'string')
            outfit = misc.getHashKey(outfit);
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return DoesMetaPedOutfitExistForPedModel(outfit, model);
    }
    ped_1.doesMetaOutfitExistForPedModel = doesMetaOutfitExistForPedModel;
    /**
     * No comment provided
     *
     * Hash: 0x4FF3C2B4E6A196C1 | Since: 1207
     */
    function doesMetaSuboutfitExistForPedModel(outfit, suboutfit, model) {
        if (typeof outfit === 'string')
            outfit = misc.getHashKey(outfit);
        if (typeof suboutfit === 'string')
            suboutfit = misc.getHashKey(suboutfit);
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return DoesMetaPedSuboutfitExistForPedModel(outfit, suboutfit, model);
    }
    ped_1.doesMetaSuboutfitExistForPedModel = doesMetaSuboutfitExistForPedModel;
    /**
     * Note: you have to update your ped's variation after calling (using 0xCC8CA3E88256E58F)
     *
     * Body Types:
     * MPCREATOR_NEUTRAL
     * MPCREATOR_SKINNY
     * MPCREATOR_SKINNY_MUSCULAR
     * MPCREATOR_HEAVY
     * MPCREATOR_HEAVY_MUSCULAR
     *
     * eBodyWeightOutfit (pedattributes.ymt):
     * -2045421226 (smallest)
     * -1745814259
     * -325933489
     * -1065791927
     * -844699484
     * -1273449080
     * 927185840
     * 149872391
     * 399015098
     * -644349862
     * 1745919061 (default)
     * 1004225511
     * 1278600348
     * 502499352
     * -2093198664
     * -1837436619
     * 1736416063
     * 2040610690
     * -1173634986
     * -867801909
     * 1960266524 (biggest)
     *
     * https://github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_outfits.lua
     *
     * Alt name: _EQUIP_META_PED_OUTFIT_COMPONENT
     *
     * Hash: 0x1902C4CFCC5BE57C | Since: 1207
     */
    function equipMetaOutfit(ped, hash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        EquipMetaPedOutfit(_ped, hash);
    }
    ped_1.equipMetaOutfit = equipMetaOutfit;
    /**
     * Changes Multiplayer ped face and body type components, they can be stacked
     * Params: p3 = 1
     * Body shape for mp_male from 124 - 128, 110 - 115 for mp_female
     * Face shape for mp_male from 110 - 123, 96 - 109 for mp_female
     * Cloth type for mp_male from 0 - 109, 0 - 95 for mp_female
     *
     * Hash: 0xA5BAE410B03E7371 | Since: 1207
     */
    function equipMetaOutfitExtra(ped, component) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        EquipMetaPedOutfitExtra(_ped, component, undefined, undefined);
    }
    ped_1.equipMetaOutfitExtra = equipMetaOutfitExtra;
    /**
     * Sets the outfit preset for the ped. The presetId is an index which determines its preset outfit. p2 is always false in the scripts.
     * If p2 is true as player, then certain components like facial hair and hair will not be removed.
     * Old name: _SET_PED_OUTFIT_PRESET
     *
     * Hash: 0x77FF8D35EEC6BBC4 | Since: 1207
     */
    function equipMetaOutfitPreset(ped, presetId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        EquipMetaPedOutfitPreset(_ped, presetId, false);
    }
    ped_1.equipMetaOutfitPreset = equipMetaOutfitPreset;
    /**
     * No comment provided
     *
     * Hash: 0x66FF395445A88A6E | Since: 1207
     */
    function equipMetaSuboutfit(ped, suboutfit) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof suboutfit === 'string')
            suboutfit = misc.getHashKey(suboutfit);
        EquipMetaPedSuboutfit(_ped, suboutfit, 0);
    }
    ped_1.equipMetaSuboutfit = equipMetaSuboutfit;
    /**
     * No comment provided
     *
     * Hash: 0x8B3CB08158E98481 | Since: 1207
     */
    function fakeSetLocoInjured(ped, enabled) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        FakeSetPedLocoInjured(_ped, enabled);
    }
    ped_1.fakeSetLocoInjured = fakeSetLocoInjured;
    /**
     * No comment provided
     *
     * Hash: 0x1CE875505D45338A | Since: 1207
     */
    function forceDeath(ped, pedKiller, weapon) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _pedKiller = pedKiller instanceof Ped ? pedKiller.handle() : pedKiller;
        if (typeof weapon === 'string')
            weapon = misc.getHashKey(weapon);
        ForcePedDeath(_ped, _pedKiller, weapon);
    }
    ped_1.forceDeath = forceDeath;
    /**
     * No comment provided
     *
     * Hash: 0xDC9273D95976BA22 | Since: 1207
     */
    function getAccuracyAgainstLocalPlayerModifier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAccuracyAgainstLocalPlayerModifier(_ped);
    }
    ped_1.getAccuracyAgainstLocalPlayerModifier = getAccuracyAgainstLocalPlayerModifier;
    /**
     * No comment provided
     *
     * Hash: 0xF103823FFE72BB49 | Since: 1207
     */
    function getActiveAnimalOwner(animal) {
        const _animal = animal instanceof Ped ? animal.handle() : animal;
        return GetActiveAnimalOwner(_animal);
    }
    ped_1.getActiveAnimalOwner = getActiveAnimalOwner;
    /**
     * Returns kneeling, sitting, squating, and sleeping scenario hashes
     *
     * Hash: 0x569F1E1237508DEB | Since: 1207
     */
    function getActiveDynamicScenario(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetActiveDynamicScenario(_ped);
    }
    ped_1.getActiveDynamicScenario = getActiveDynamicScenario;
    /**
     * Returns kneeling, sitting, squating, and sleeping scenario hashes
     *
     * Hash: 0xC22AA08A8ADB87D4 | Since: 1207
     */
    function getActiveDynamicScenario2(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetActiveDynamicScenario2(_ped);
    }
    ped_1.getActiveDynamicScenario2 = getActiveDynamicScenario2;
    /**
     * No comment provided
     *
     * Hash: 0x268B3AEBF032A88D | Since: 1207
     */
    function getBlockingOfNonTemporaryEvents(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetBlockingOfNonTemporaryEvents(_ped);
    }
    ped_1.getBlockingOfNonTemporaryEvents = getBlockingOfNonTemporaryEvents;
    /**
     * No comment provided
     *
     * Hash: 0x79443D56C8DF45EE | Since: 1207
     */
    function getCarrierAsHuman(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetCarrierAsHuman(_entity);
    }
    ped_1.getCarrierAsHuman = getCarrierAsHuman;
    /**
     * No comment provided
     *
     * Hash: 0xA033D7E4BBF9844D | Since: 1207
     */
    function getCarrierAsMount(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetCarrierAsMount(_entity);
    }
    ped_1.getCarrierAsMount = getCarrierAsMount;
    /**
     * No comment provided
     *
     * Hash: 0x09B83E68DE004CD4 | Since: 1207
     */
    function getCarrierAs(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetCarrierAsPed(_entity);
    }
    ped_1.getCarrierAs = getCarrierAs;
    /**
     * Gets MetaPedExpression at index specified
     *
     * For index, see: _SET_CHAR_EXPRESSION
     *
     * Old name: _GET_PED_FACE_FEATURE
     *
     * Hash: 0xFD1BA1EEF7985BB8 | Since: 1207
     */
    function getCharExpression(ped, index) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCharExpression(_ped, index);
    }
    ped_1.getCharExpression = getCharExpression;
    /**
     * No comment provided
     *
     * Hash: 0x3CC4A718C258BDD0 | Since: 1207
     */
    function getDefaultRelationshipGroupHash(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetDefaultRelationshipGroupHash(modelHash);
    }
    ped_1.getDefaultRelationshipGroupHash = getDefaultRelationshipGroupHash;
    /**
     * No comment provided
     *
     * Hash: 0xD806CD2A4F2C2996 | Since: 1207
     */
    function getFirstEntityIsCarrying(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetFirstEntityPedIsCarrying(_ped);
    }
    ped_1.getFirstEntityIsCarrying = getFirstEntityIsCarrying;
    /**
     * No comment provided
     *
     * Hash: 0x13A1B061007C906B | Since: 1207
     */
    function getGroupFormation(groupId) {
        return GetGroupFormation(groupId);
    }
    ped_1.getGroupFormation = getGroupFormation;
    /**
     * No comment provided
     *
     * Hash: 0x95B8E397B8F4360F | Since: 1207
     */
    function getHealthRechargeMultiplier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetHealthRechargeMultiplier(_ped);
    }
    ped_1.getHealthRechargeMultiplier = getHealthRechargeMultiplier;
    /**
     * Returns an int based on enum eTamingState
     *
     * enum eTamingState
     * {
     * ATS_INVALID = 0,
     * ATS_INACTIVE,
     * ATS_TARGET_DETECTED,
     * ATS_CALLED_OUT,
     * ATS_MOUNTABLE,
     * ATS_BEING_PATTED,
     * ATS_BREAKING_ACTIVE,
     * ATS_SPOOKED,
     * ATS_RETREATING,
     * ATS_FLEEING
     * };
     *
     * Hash: 0x454AD4DA6C41B5BD | Since: 1207
     */
    function getHorseTamingState(horse) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        return GetHorseTamingState(_horse);
    }
    ped_1.getHorseTamingState = getHorseTamingState;
    /**
     * No comment provided
     *
     * Hash: 0x88D9D76D78065487 | Since: 1207
     */
    function getIncapacitationTimeRemaining(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetIncapacitationTimeRemaining(_ped);
    }
    ped_1.getIncapacitationTimeRemaining = getIncapacitationTimeRemaining;
    /**
     * If p2 is false, then this native will return true until the interaction is complete. If true, the native will return true until player pockets robbery item.
     * _GET_IS_PED_[M-R]*
     *
     * Hash: 0xE33F98BD76490ABC | Since: 1207
     */
    function getIsBeingRobbed(ped, player, trueUntilPlayerPocketsItem) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        return GetIsPedBeingRobbed(_ped, _player, trueUntilPlayerPocketsItem);
    }
    ped_1.getIsBeingRobbed = getIsBeingRobbed;
    /**
     * No comment provided
     *
     * Hash: 0x68821369A2CEADD5 | Since: 1207
     */
    function getIsCommandHashPresent(ped, commandHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof commandHash === 'string')
            commandHash = misc.getHashKey(commandHash);
        return GetIsPedCommandHashPresent(_ped, commandHash);
    }
    ped_1.getIsCommandHashPresent = getIsCommandHashPresent;
    /**
     * Returns true if ped is in a dispute another ped (pedInDisputeWith can also be 0)
     *
     * Hash: 0x331550B212014B92 | Since: 1207
     */
    function getIsInDisputeWithPed(ped, pedInDisputeWith) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _pedInDisputeWith = pedInDisputeWith instanceof Ped ? pedInDisputeWith.handle() : pedInDisputeWith;
        return GetIsPedInDisputeWithPed(_ped, _pedInDisputeWith);
    }
    ped_1.getIsInDisputeWithPed = getIsInDisputeWithPed;
    /**
     * motivationState: see _SET_PED_MOTIVATION
     *
     * Hash: 0x33FA048675821DA7 | Since: 1207
     */
    function getIsMotivationStateEnabled(ped, motivationState) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetIsPedMotivationStateEnabled(_ped, motivationState);
    }
    ped_1.getIsMotivationStateEnabled = getIsMotivationStateEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x0C31C51168E80365 | Since: 1207
     */
    function getLassoedLassoer(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLassoedLassoer(_ped);
    }
    ped_1.getLassoedLassoer = getLassoedLassoer;
    /**
     * _IS_PED_S* - _IS_PED_U*
     *
     * Hash: 0x833F0053340EF413 | Since: 1207
     */
    function getLassoerOf(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLassoerOfPed(_ped);
    }
    ped_1.getLassoerOf = getLassoerOf;
    /**
     * No comment provided
     *
     * Hash: 0xB65A4DAB460A19BD | Since: 1207
     */
    function getLassoTarget(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLassoTarget(_ped);
    }
    ped_1.getLassoTarget = getLassoTarget;
    /**
     * Returns last horse the ped was leading
     *
     * Hash: 0x693126B5D0457D0D | Since: 1232
     */
    function getLastLedMount(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLastLedMount(_ped);
    }
    ped_1.getLastLedMount = getLastLedMount;
    /**
     * No comment provided
     *
     * Hash: 0x4C8B59171957BCF7 | Since: 1207
     */
    function getLastMount(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLastMount(_ped);
    }
    ped_1.getLastMount = getLastMount;
    /**
     * No comment provided
     *
     * Hash: 0x5064DB5083C29921 | Since: 1207
     */
    function getLastVehicleDraftHorseWasAttachedTo(horse) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        return GetLastVehicleDraftHorseWasAttachedTo(_horse);
    }
    ped_1.getLastVehicleDraftHorseWasAttachedTo = getLastVehicleDraftHorseWasAttachedTo;
    /**
     * lootFlag: see SET_LOOTING_FLAG
     *
     * Hash: 0xE4C11F104620DDCE | Since: 1207
     */
    function getLootingFlag(ped, lootFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLootingFlag(_ped, lootFlag);
    }
    ped_1.getLootingFlag = getLootingFlag;
    /**
     * enum eMetaPedType
     * {
     * MPT_MALE,
     * MPT_FEMALE,
     * MPT_TEEN,
     * MPT_ANIMAL,
     * MPT_NONE
     * };
     *
     * Hash: 0xEC9A1261BF0CE510 | Since: 1207
     */
    function getMetaType(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetMetaPedType(_ped);
    }
    ped_1.getMetaType = getMetaType;
    /**
     * No comment provided
     *
     * Hash: 0x90403E8107B60E81 | Since: 1207
     */
    function getNumComponentsIn(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetNumComponentsInPed(_ped);
    }
    ped_1.getNumComponentsIn = getNumComponentsIn;
    /**
     * Works similar to 0x90403E8107B60E81 (_GET_NUM_COMPONENTS_IN_PED) but is used to get category hashes instead
     *
     * Hash: 0xA622E66EEE92A08D | Since: 1207
     */
    function getNumComponentCategoriesIn(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetNumComponentCategoriesInPed(_ped);
    }
    ped_1.getNumComponentCategoriesIn = getNumComponentCategoriesIn;
    /**
     * No comment provided
     *
     * Hash: 0x313778EDCA9158E2 | Since: 1207
     */
    function getNumFreeSlotsInPool() {
        return GetNumFreeSlotsInPedPool();
    }
    ped_1.getNumFreeSlotsInPool = getNumFreeSlotsInPool;
    /**
     * No comment provided
     *
     * Hash: 0x62DE46F061CAA468 | Since: 1207
     */
    function getNumReservedAmbientsDesired() {
        return GetNumReservedAmbientPedsDesired();
    }
    ped_1.getNumReservedAmbientsDesired = getNumReservedAmbientsDesired;
    /**
     * No comment provided
     *
     * Hash: 0x5C16855277819BBF | Since: 1207
     */
    function getNumReservedAmbientsReady() {
        return GetNumReservedAmbientPedsReady();
    }
    ped_1.getNumReservedAmbientsReady = getNumReservedAmbientsReady;
    /**
     * No comment provided
     *
     * Hash: 0x16F2C8C084AB2092 | Since: 1207
     */
    function getNumReservedHealth(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetNumReservedHealth(_ped);
    }
    ped_1.getNumReservedHealth = getNumReservedHealth;
    /**
     * No comment provided
     *
     * Hash: 0x7BE607DAFF382FD2 | Since: 1207
     */
    function getsInCombatWithTarget(ped, itemset, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedsInCombatWithTarget(_ped, itemset, flag);
    }
    ped_1.getsInCombatWithTarget = getsInCombatWithTarget;
    /**
     * AI_ATTITUDE_NEUTRAL = 0,
     * AI_ATTITUDE_FRIENDLY,
     * AI_ATTITUDE_WARY,
     * AI_ATTITUDE_COMBATIVE,
     * AI_ATTITUDE_NEVER_MET
     *
     * Hash: 0x7CC2186C32D3540A | Since: 1207
     */
    function getAttitude(ped, player) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        return GetPedAttitude(_ped, _player);
    }
    ped_1.getAttitude = getAttitude;
    /**
     * Can be used to get a peds foliage active status: variableName = FoliageActive
     *
     * Hash: 0x498F2E77982D6945 | Since: 1207
     */
    function getBlackboardBool(ped, variableName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBlackboardBool(_ped, variableName);
    }
    ped_1.getBlackboardBool = getBlackboardBool;
    /**
     * Can be used to get a peds foliage raw height: variableName = FoliageHeight
     *
     * Hash: 0x56E58D4D118FB45E | Since: 1207
     */
    function getBlackboardFloat(ped, variableName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBlackboardFloat(_ped, variableName);
    }
    ped_1.getBlackboardFloat = getBlackboardFloat;
    /**
     * No comment provided
     *
     * Hash: 0xBF5E791BBBF90A3C | Since: 1207
     */
    function getBlackboardHash(ped, variableName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBlackboardHash(_ped, variableName);
    }
    ped_1.getBlackboardHash = getBlackboardHash;
    /**
     * No comment provided
     *
     * Hash: 0xEC6B59BE445FEC51 | Since: 1207
     */
    function getBrawlingStyle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBrawlingStyle(_ped);
    }
    ped_1.getBrawlingStyle = getBrawlingStyle;
    /**
     * No comment provided
     *
     * Hash: 0x7A4E00364B5D727B | Since: 1207
     */
    function getCanBeIncapacitatedThisFrame(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedCanBeIncapacitatedThisFrame(_ped);
    }
    ped_1.getCanBeIncapacitatedThisFrame = getCanBeIncapacitatedThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xCC2B20596E29E4E3 | Since: 1207
     */
    function getCombatAttribute(ped, attributeIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedCombatAttribute(_ped, attributeIndex);
    }
    ped_1.getCombatAttribute = getCombatAttribute;
    /**
     * Returns category hash that each ped component has. Hash examples: MASKS, HATS, HEADS, HORSE_MANES
     *
     * Hash: 0xCCB97B51893C662F | Since: 1207
     */
    function getComponentCategoryByIndex(ped, index) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedComponentCategoryByIndex(_ped, index);
    }
    ped_1.getComponentCategoryByIndex = getComponentCategoryByIndex;
    /**
     * Returns true if _GET_PED_DAMAGE_CLEANLINESS was ever lower than 2
     *
     * Hash: 0x6CFC373008A1EDAF | Since: 1207
     */
    function getDamaged(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedDamaged(_ped);
    }
    ped_1.getDamaged = getDamaged;
    /**
     * enum ePedDamageCleanliness
     * {
     * PED_DAMAGE_CLEANLINESS_POOR,
     * PED_DAMAGE_CLEANLINESS_GOOD,
     * PED_DAMAGE_CLEANLINESS_PERFECT
     * };
     *
     * Hash: 0x88EFFED5FE8B0B4A | Since: 1207
     */
    function getDamageCleanliness(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedDamageCleanliness(_ped);
    }
    ped_1.getDamageCleanliness = getDamageCleanliness;
    /**
     * No comment provided
     *
     * Hash: 0xEF2E6F870783369B | Since: 1207
     */
    function getDefensiveVolume(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedDefensiveVolume(_ped, undefined);
    }
    ped_1.getDefensiveVolume = getDefensiveVolume;
    /**
     * Returns ped drunk level
     * _H* or _I*
     *
     * Hash: 0x6FB76442469ABD68 | Since: 1207
     */
    function getDrunkness(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedDrunkness(_ped);
    }
    ped_1.getDrunkness = getDrunkness;
    /**
     * No comment provided
     *
     * Hash: 0xD0B7AEB56229D317 | Since: 1207
     */
    function getGrappler(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedGrappler(_ped);
    }
    ped_1.getGrappler = getGrappler;
    /**
     * No comment provided
     *
     * Hash: 0xF3C873ED0C595109 | Since: 1207
     */
    function getGrappleFlag(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedGrappleFlag(_ped);
    }
    ped_1.getGrappleFlag = getGrappleFlag;
    /**
     * No comment provided
     *
     * Hash: 0x753B15AD0FD6F3E3 | Since: 1207
     */
    function getGrappleStyle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedGrappleStyle(_ped);
    }
    ped_1.getGrappleStyle = getGrappleStyle;
    /**
     * No comment provided
     *
     * Hash: 0x1D491CCF7211FB74 | Since: 1207
     */
    function getHeight(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedHeight(_ped);
    }
    ped_1.getHeight = getHeight;
    /**
     * No comment provided
     *
     * Hash: 0x31167ED4324B758D | Since: 1207
     */
    function getIdRange(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedIdRange(_ped);
    }
    ped_1.getIdRange = getIdRange;
    /**
     * No comment provided
     *
     * Hash: 0x89BFDF6D53145545 | Since: 1207
     */
    function getIncapacitationHealth(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedIncapacitationHealth(_ped);
    }
    ped_1.getIncapacitationHealth = getIncapacitationHealth;
    /**
     * No comment provided
     *
     * Hash: 0xD7AD3C7EBAF88C92 | Since: 1207
     */
    function getInteractionPersonality(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedInteractionPersonality(_ped);
    }
    ped_1.getInteractionPersonality = getInteractionPersonality;
    /**
     * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Lasso%20Hogtie%20Flags
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/LASSO_HOGTIE_FLAG
     *
     * Hash: 0x2C76FA0E01681F8D | Since: 1207
     */
    function getLassoHogtieFlag(ped, flagId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedLassoHogtieFlag(_ped, flagId);
    }
    ped_1.getLassoHogtieFlag = getLassoHogtieFlag;
    /**
     * No comment provided
     *
     * Hash: 0x1F714E7A9DADFC42 | Since: 1207
     */
    function getLastDroppedHat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedLastDroppedHat(_ped);
    }
    ped_1.getLastDroppedHat = getLastDroppedHat;
    /**
     * No comment provided
     *
     * Hash: 0x1B710E6F4AB69341 | Since: 1355
     */
    function getLodMultiplier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedLodMultiplier(_ped);
    }
    ped_1.getLodMultiplier = getLodMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xCB42AFE2B613EE55 | Since: 1207
     */
    function getMaxStamina(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedMaxStamina(_ped);
    }
    ped_1.getMaxStamina = getMaxStamina;
    /**
     * No comment provided
     *
     * Hash: 0x6127F25ED21C533C | Since: 1207
     */
    function getMeleeActionPhase(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedMeleeActionPhase(_ped);
    }
    ped_1.getMeleeActionPhase = getMeleeActionPhase;
    /**
     * No comment provided
     *
     * Hash: 0x30569F348D126A5A | Since: 1207
     */
    function getMetaOutfitHash(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedMetaOutfitHash(_ped);
    }
    ped_1.getMetaOutfitHash = getMetaOutfitHash;
    /**
     * PS_SMALL = 0,
     * PS_MEDIUM,
     * PS_MEDIUM_LARGE,
     * PS_LARGE,
     * PS_EXTRA_LARGE
     *
     * Hash: 0xA65AA1ACE81E5A77 | Since: 1311
     */
    function getModelSizeFromHash(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetPedModelSizeFromHash(modelHash);
    }
    ped_1.getModelSizeFromHash = getModelSizeFromHash;
    /**
     * If targetPed is set to 0 the ped motivationState affects everyone
     *
     * Hash: 0x42688E94E96FD9B4 | Since: 1207
     */
    function getMotivation(ped, motivationState, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        return GetPedMotivation(_ped, motivationState, _targetPed);
    }
    ped_1.getMotivation = getMotivation;
    /**
     * Returns Ped Quality to be used to calculate Skinning Quality
     *
     * enum ePedQuality
     * {
     * PQ_INVALID = -1,
     * PQ_LOW,
     * PQ_MEDIUM,
     * PQ_HIGH,
     * PQ_MAX
     * };
     *
     * Hash: 0x7BCC6087D130312A | Since: 1207
     */
    function getQuality(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedQuality(_ped);
    }
    ped_1.getQuality = getQuality;
    /**
     * Gets a registered/attached prop entity for a particular ped. Second parameter will detach the prop entity from the ped if true. Props primarily appear to come from scenarios, such as a broom or hay bale.
     *
     * Known props: https://pastebin.com/ap2NEJqB
     *
     * Hash: 0x4D0D2E3D8BC000EB | Since: 1207
     */
    function getRegisterProp(ped, propName, detachProp) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedRegisterProp(_ped, propName, detachProp);
    }
    ped_1.getRegisterProp = getRegisterProp;
    /**
     * normalized / non normalized
     * 0.0        / 1000.0         STARTED IN WRITHE STAGE
     * 1.0        / 0.0            END OF WRITHE, DEAD
     * -1.0                        DEAD
     *
     * Returns some value from AI task 562 (unknown).
     *
     * Hash: 0xEBE89623EB861271 | Since: 1207
     */
    function getRemainingRevivalTime(ped, normalized) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedRemainingRevivalTime(_ped, normalized);
    }
    ped_1.getRemainingRevivalTime = getRemainingRevivalTime;
    /**
     * No comment provided
     *
     * Hash: 0x775A1CA7893AA8B5 | Since: 1207
     */
    function getStamina(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedStamina(_ped);
    }
    ped_1.getStamina = getStamina;
    /**
     * Returns stamina normalizedValue / normalizedUnlockedMax
     *
     * Hash: 0x22F2A386D43048A9 | Since: 1207
     */
    function getStaminaNormalized(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedStaminaNormalized(_ped);
    }
    ped_1.getStaminaNormalized = getStaminaNormalized;
    /**
     * No comment provided
     *
     * Hash: 0x65C75FDCCAC86464 | Since: 1355
     */
    function getTranquilizer(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedTranquilizer(_ped);
    }
    ped_1.getTranquilizer = getTranquilizer;
    /**
     * Returns peltId
     *
     * Hash: 0x0CEEB6F4780B1F2F | Since: 1207
     */
    function getPeltFromHorse(horse, index) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        return GetPeltFromHorse(_horse, index);
    }
    ped_1.getPeltFromHorse = getPeltFromHorse;
    /**
     * Returns animal skin quality modifier
     *
     * Hash: 0xEE2D5C819A65BF26 | Since: 1311
     */
    function getPlayerCurrentAnimalDamageModifier(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerCurrentAnimalDamageModifier(_player);
    }
    ped_1.getPlayerCurrentAnimalDamageModifier = getPlayerCurrentAnimalDamageModifier;
    /**
     * Returns how deep the water is below the ped (if in water)
     * -1.0f = Not in water
     * 10.0f = Max water depth
     *
     * Hash: 0x2942457417A5FD24 | Since: 1207
     */
    function getPlayerWaterDepth(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPlayerPedWaterDepth(_ped);
    }
    ped_1.getPlayerWaterDepth = getPlayerWaterDepth;
    /**
     * No comment provided
     *
     * Hash: 0xB676EFDA03DADA52 | Since: 1207
     */
    function getRiderOfMount(mount) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        return GetRiderOfMount(_mount, false);
    }
    ped_1.getRiderOfMount = getRiderOfMount;
    /**
     * No comment provided
     *
     * Hash: 0x63342C50EC115CE8 | Since: 1207
     */
    function getShopItemBaseLayers(shopItem, ped, metapedType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof shopItem === 'string')
            shopItem = misc.getHashKey(shopItem);
        return GetShopItemBaseLayers(shopItem, undefined, _ped, metapedType, false);
    }
    ped_1.getShopItemBaseLayers = getShopItemBaseLayers;
    /**
     * Returns the current shop item component at index and it's wearable state
     *
     * Hash: 0x77BA37622E22023B | Since: 1207
     */
    function getShopItemComponentAtIndex(ped, index) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetShopItemComponentAtIndex(_ped, index, false);
    }
    ped_1.getShopItemComponentAtIndex = getShopItemComponentAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x5FF9A878C3D115B8 | Since: 1207
     */
    function getShopItemComponentCategory(componentHash, metapedType, isMP) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetShopItemComponentCategory(componentHash, metapedType, isMP);
    }
    ped_1.getShopItemComponentCategory = getShopItemComponentCategory;
    /**
     * No comment provided
     *
     * Hash: 0x7E02E4218D916B94 | Since: 1207
     */
    function getShopItemHatComponent(ped, metapedType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetShopItemHatComponent(_ped, metapedType, false);
    }
    ped_1.getShopItemHatComponent = getShopItemHatComponent;
    /**
     * Returns the number of wearable states available for a shop item / component. p2 seems to be true in scripts.
     *
     * For use with 0x6243635AF2F1B826 (_GET_SHOP_ITEM_AVAILABLE_WEARABLE_STATE_BY_INDEX)
     *
     * Hash: 0xFFCC2DB2D9953401 | Since: 1207
     */
    function getShopItemNumWearableStates(componentHash, isMpFemale) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetShopItemNumWearableStates(componentHash, isMpFemale, false);
    }
    ped_1.getShopItemNumWearableStates = getShopItemNumWearableStates;
    /**
     * Gets an available wearable state by index for a shop item / component - it does not retreive what the current state is. p3 seems to be true in scripts.
     *
     * Use 0xFFCC2DB2D9953401 (_GET_SHOP_ITEM_NUM_WEARABLE_STATES) to get the number of available wearable states
     *
     * Hash: 0x6243635AF2F1B826 | Since: 1207
     */
    function getShopItemWearableStateByIndex(componentHash, wearableStateIndex, isMpFemale) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetShopItemWearableStateByIndex(componentHash, wearableStateIndex, isMpFemale, false);
    }
    ped_1.getShopItemWearableStateByIndex = getShopItemWearableStateByIndex;
    /**
     * No comment provided
     *
     * Hash: 0x825F6DD559A0895B | Since: 1207
     */
    function getStaminaDepletionMultiplier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetStaminaDepletionMultiplier(_ped);
    }
    ped_1.getStaminaDepletionMultiplier = getStaminaDepletionMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xE7687EB2F634ABF0 | Since: 1207
     */
    function getStaminaRechargeMultiplier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetStaminaRechargeMultiplier(_ped);
    }
    ped_1.getStaminaRechargeMultiplier = getStaminaRechargeMultiplier;
    /**
     * _GET_WA*
     *
     * Hash: 0x92C8EACA29F6BED6 | Since: 1207
     */
    function getTotalDamageFromAi(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTotalPedDamageFromAi(_ped);
    }
    ped_1.getTotalDamageFromAi = getTotalDamageFromAi;
    /**
     * No comment provided
     *
     * Hash: 0x849BD6C6314793D0 | Since: 1207
     */
    function getTransportIsSeatedOn(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTransportPedIsSeatedOn(_ped);
    }
    ped_1.getTransportIsSeatedOn = getTransportIsSeatedOn;
    /**
     * No comment provided
     *
     * Hash: 0xE4770DA1B8FF4FD1 | Since: 1207
     */
    function getVehicleDraftHorseIsAttachedTo(horse) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        return GetVehicleDraftHorseIsAttachedTo(_horse);
    }
    ped_1.getVehicleDraftHorseIsAttachedTo = getVehicleDraftHorseIsAttachedTo;
    /**
     * Ped Command Hash are special commands, that can be activated to change conditional anim variations or trigger transitions between conditional anims.
     * https://github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
     *
     * Hash: 0xD65FDC686A031C83 | Since: 1207
     */
    function giveHashCommand(ped, commandHash, activationDuration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof commandHash === 'string')
            commandHash = misc.getHashKey(commandHash);
        GivePedHashCommand(_ped, commandHash, activationDuration);
    }
    ped_1.giveHashCommand = giveHashCommand;
    /**
     * No comment provided
     *
     * Hash: 0x3BBDD6143FF16F98 | Since: 1207
     */
    function giveScenarioProp(ped, _object, conditionalAnim) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const __object = _object instanceof Object ? _object.handle() : _object;
        return GivePedScenarioProp(_ped, __object, conditionalAnim, undefined, undefined, false);
    }
    ped_1.giveScenarioProp = giveScenarioProp;
    /**
     * Only used in SP R* Script rcm_jack2
     *
     * Hash: 0xA0774E388CE4A679 | Since: 1207
     */
    function giveScenarioPropDynamic(ped, _object) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const __object = _object instanceof Object ? _object.handle() : _object;
        return GivePedScenarioPropDynamic(_ped, __object, undefined, undefined, false);
    }
    ped_1.giveScenarioPropDynamic = giveScenarioPropDynamic;
    /**
     * No comment provided
     *
     * Hash: 0xB0B2C6D170B0E8E5 | Since: 1207
     */
    function hasMetaAssetLoaded(requestId) {
        return HasMetaPedAssetLoaded(requestId);
    }
    ped_1.hasMetaAssetLoaded = hasMetaAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x610438375E5D1801 | Since: 1207
     */
    function hasMetaOutfitLoaded(requestId) {
        return HasMetaPedOutfitLoaded(requestId);
    }
    ped_1.hasMetaOutfitLoaded = hasMetaOutfitLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xC0940AC858C1E126 | Since: 1207
     */
    function hasMetaRequestLoaded(requestId) {
        return HasMetaPedRequestLoaded(requestId);
    }
    ped_1.hasMetaRequestLoaded = hasMetaRequestLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x29FCE825613FEFCA | Since: 1207
     */
    function hasBeenShovedRecently(ped, ms) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return HasPedBeenShovedRecently(_ped, ms);
    }
    ped_1.hasBeenShovedRecently = hasBeenShovedRecently;
    /**
     * See _REQUEST_PED_EMOTIONAL_PRESET
     *
     * Hash: 0xDE3904B22695D9F9 | Since: 1207
     */
    function hasEmotionalPresetLoaded(ped, name) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return HasPedEmotionalPresetLoaded(_ped, name);
    }
    ped_1.hasEmotionalPresetLoaded = hasEmotionalPresetLoaded;
    /**
     * limb: 3 = Left Hand, 4 = Left Arm, 6 = Right Hand, 7 = Right Arm, 9 = Left Foot, 10 = Left Leg, 12 = Right Foot, 13 = Right Leg, 37 = Head
     *
     * Hash: 0xBA208A8D6399A3AC | Since: 1207
     */
    function hasTakenGoreDamage(ped, limb) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return HasPedTakenGoreDamage(_ped, limb);
    }
    ped_1.hasTakenGoreDamage = hasTakenGoreDamage;
    /**
     * _H* - _I*
     *
     * Hash: 0xBAE08F00021BFFB2 | Since: 1207
     */
    function horseAgitate(mount, kickOffRider) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        HorseAgitate(_mount, kickOffRider);
    }
    ped_1.horseAgitate = horseAgitate;
    /**
     * No comment provided
     *
     * Hash: 0xF6262491C7704A63 | Since: 1207
     */
    function incapacitatedRevive(ped, ped2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        IncapacitatedRevive(_ped, _ped2);
    }
    ped_1.incapacitatedRevive = incapacitatedRevive;
    /**
     * Returns true only if it's a player ped and an animal as well.
     * _IS_ANY_* - _IS_CONTROL_*
     *
     * Hash: 0x0E2F43516F998269 | Since: 1311
     */
    function isAnimalControlledByAPlayer(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsAnimalControlledByAPlayer(_ped);
    }
    ped_1.isAnimalControlledByAPlayer = isAnimalControlledByAPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x7FC84E85D98F063D | Since: 1207
     */
    function isAnimalInteractionRunning(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsAnimalInteractionRunning(_ped);
    }
    ped_1.isAnimalInteractionRunning = isAnimalInteractionRunning;
    /**
     * No comment provided
     *
     * Hash: 0x93FFD92F05EC32FD | Since: 1207
     */
    function isMetaAssetValid(requestId) {
        return IsMetaPedAssetValid(requestId);
    }
    ped_1.isMetaAssetValid = isMetaAssetValid;
    /**
     * Returns true if given ped is a fish.
     * _IS_ME* - _IS_MO*
     *
     * Hash: 0x118D476A6F1A13F1 | Since: 1207
     */
    function isMetaFish(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsMetaPedFish(_ped);
    }
    ped_1.isMetaFish = isMetaFish;
    /**
     * Used in script function HORSE_IS_META_PED_OUTFIT_SADDLE_EQUIPPED
     *
     * Hash: 0x98082246107A6ACF | Since: 1207
     */
    function isMetaOutfitEquipped(ped, outfit) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof outfit === 'string')
            outfit = misc.getHashKey(outfit);
        return IsMetaPedOutfitEquipped(_ped, outfit);
    }
    ped_1.isMetaOutfitEquipped = isMetaOutfitEquipped;
    /**
     * No comment provided
     *
     * Hash: 0xB25E57FC8E37114D | Since: 1207
     */
    function isMetaOutfitRequestValid(requestId) {
        return IsMetaPedOutfitRequestValid(requestId);
    }
    ped_1.isMetaOutfitRequestValid = isMetaOutfitRequestValid;
    /**
     * No comment provided
     *
     * Hash: 0x43E4DA469541A9C9 | Since: 1207
     */
    function isMetaRequestValid(requestId) {
        return IsMetaPedRequestValid(requestId);
    }
    ped_1.isMetaRequestValid = isMetaRequestValid;
    /**
     * checks if a ped is using a component category
     * see component category hashes here https://raw.githubusercontent.com/femga/rdr3_discoveries/refs/heads/master/clothes/cloth_hash_names.lua
     * Old name: _IS_META_PED_USING_COMPONENT
     *
     * Hash: 0xFB4891BD7578CDC1 | Since: 1207
     */
    function isMetaUsingComponentCategory(ped, componentCategory) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentCategory === 'string')
            componentCategory = misc.getHashKey(componentCategory);
        return IsMetaPedUsingComponent(_ped, componentCategory);
    }
    ped_1.isMetaUsingComponentCategory = isMetaUsingComponentCategory;
    /**
     * No comment provided
     *
     * Hash: 0xAAB0FE202E9FC9F0 | Since: 1207
     */
    function isMountSeatFree(mount, seat) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        return IsMountSeatFree(_mount, seat);
    }
    ped_1.isMountSeatFree = isMountSeatFree;
    /**
     * No comment provided
     *
     * Hash: 0xB346C85D49CC998E | Since: 1207
     */
    function isActionDisableFlagEnabled(ped, actionDisableFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedActionDisableFlagEnabled(_ped, actionDisableFlag);
    }
    ped_1.isActionDisableFlagEnabled = isActionDisableFlagEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x137772000DAF42C5 | Since: 1207
     */
    function isChild(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedChild(_ped);
    }
    ped_1.isChild = isChild;
    /**
     * No comment provided
     *
     * Hash: 0x59643424B68D52B5 | Since: 1207
     */
    function isClimbingLadder(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedClimbingLadder(_ped);
    }
    ped_1.isClimbingLadder = isClimbingLadder;
    /**
     * No comment provided
     *
     * Hash: 0xB086C8C0F5701D14 | Since: 1207
     */
    function isCowering(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedCowering(_ped);
    }
    ped_1.isCowering = isCowering;
    /**
     * No comment provided
     *
     * Hash: 0xC488B8C0E52560D8 | Since: 1207
     */
    function isDoingScenarioTransition(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedDoingScenarioTransition(_ped);
    }
    ped_1.isDoingScenarioTransition = isDoingScenarioTransition;
    /**
     * No comment provided
     *
     * Hash: 0x226CF9B159E38F42 | Since: 1207
     */
    function isDragging(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedDragging(_ped);
    }
    ped_1.isDragging = isDragging;
    /**
     * No comment provided
     *
     * Hash: 0x50F124E6EF188B22 | Since: 1207
     */
    function isDrunk(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedDrunk(_ped);
    }
    ped_1.isDrunk = isDrunk;
    /**
     * No comment provided
     *
     * Hash: 0x878B68960C1C2A35 | Since: 1207
     */
    function isGroupLeader(ped, groupId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedGroupLeader(_ped, groupId);
    }
    ped_1.isGroupLeader = isGroupLeader;
    /**
     * No comment provided
     *
     * Hash: 0x57779B55B83E2BEA | Since: 1207
     */
    function isIntimidated(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedIntimidated(_ped);
    }
    ped_1.isIntimidated = isIntimidated;
    /**
     * _IS_PED_IN*
     *
     * Hash: 0x7583A9D35248B83F | Since: 1207
     */
    function isInvestigating(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInvestigating(_ped);
    }
    ped_1.isInvestigating = isInvestigating;
    /**
     * If returned true: There are enemy peds near friendly turn in ped. Going to aggro.
     * If returned false: Moving back to idle as there aren't any remaining enemy peds near ped
     * _IS_PED_IN_*
     *
     * Hash: 0x078076AB50FB117F | Since: 1207
     */
    function isInPoint(ped, pos, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInPoint(_ped, pos.x, pos.y, pos.z, radius, false);
    }
    ped_1.isInPoint = isInPoint;
    /**
     * _IS_PED_L* - _IS_PED_M*
     *
     * Hash: 0x917760CFE7A0E0F1 | Since: 1207
     */
    function isLeadingAnyGroup(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedLeadingAnyGroup(_ped);
    }
    ped_1.isLeadingAnyGroup = isLeadingAnyGroup;
    /**
     * No comment provided
     *
     * Hash: 0xAA9F048DCF69B6DC | Since: 1207
     */
    function isModelSuppressed(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsPedModelSuppressed(model);
    }
    ped_1.isModelSuppressed = isModelSuppressed;
    /**
     * No comment provided
     *
     * Hash: 0x8D9BFCE3352DE47F | Since: 1207
     */
    function isQueuedForDeletion(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedQueuedForDeletion(_ped);
    }
    ped_1.isQueuedForDeletion = isQueuedForDeletion;
    /**
     * No comment provided
     *
     * Hash: 0xD6740E14E4CEFC0B | Since: 1207
     */
    function isSliding(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedSliding(_ped);
    }
    ped_1.isSliding = isSliding;
    /**
     * No comment provided
     *
     * Hash: 0x02AA2096FE00F3E1 | Since: 1207
     */
    function isTargetActionDisableFlagEnabled(ped, actionDisableFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedTargetActionDisableFlagEnabled(_ped, actionDisableFlag);
    }
    ped_1.isTargetActionDisableFlagEnabled = isTargetActionDisableFlagEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xEBB208D6AE712C03 | Since: 1207
     */
    function isUsingActionMode2(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedUsingActionMode2(_ped);
    }
    ped_1.isUsingActionMode2 = isUsingActionMode2;
    /**
     * No comment provided
     *
     * Hash: 0x5102307CE88798EB | Since: 1207
     */
    function isVisibilityTracked(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedVisibilityTracked(_ped);
    }
    ped_1.isVisibilityTracked = isVisibilityTracked;
    /**
     * No comment provided
     *
     * Hash: 0x91A5F9CBEBB9D936 | Since: 1207
     */
    function isScenarioBlockingAreaValid() {
        return IsScenarioBlockingAreaValid(undefined);
    }
    ped_1.isScenarioBlockingAreaValid = isScenarioBlockingAreaValid;
    /**
     * No comment provided
     *
     * Hash: 0x6E5CBCB3941D7D08 | Since: 1207
     */
    function isTarget(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        return IsTarget(_ped, _targetPed);
    }
    ped_1.isTarget = isTarget;
    /**
     * No comment provided
     *
     * Hash: 0x31DC8D3F216D8509 | Since: 1207
     */
    function isTextureValid(textureId) {
        return IsTextureValid(textureId);
    }
    ped_1.isTextureValid = isTextureValid;
    /**
     * No comment provided
     *
     * Hash: 0x772A1969F649E902 | Since: 1207
     */
    function isThisModelAHorse(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelAHorse(model);
    }
    ped_1.isThisModelAHorse = isThisModelAHorse;
    /**
     * No comment provided
     *
     * Hash: 0x164CECC59E70DF86 | Since: 1207
     */
    function isTrackedVisibilityPercentageNotLessThan(ped, percent) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsTrackedPedVisibilityPercentageNotLessThan(_ped, percent);
    }
    ped_1.isTrackedVisibilityPercentageNotLessThan = isTrackedVisibilityPercentageNotLessThan;
    /**
     * _IS_TRACKED_* - IS_V*
     *
     * Hash: 0xAF61B3CD8C3B82C3 | Since: 1207
     */
    function isUsingSlipstream(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsUsingSlipstream(_ped);
    }
    ped_1.isUsingSlipstream = isUsingSlipstream;
    /**
     * No comment provided
     *
     * Hash: 0x935CF6E42BAF7F4D | Since: 1207
     */
    function clearLocoMotion(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        PedClearLocoMotion(_ped);
    }
    ped_1.clearLocoMotion = clearLocoMotion;
    /**
     * No comment provided
     *
     * Hash: 0xBD6B242B8BD5543A | Since: 1207
     */
    function duelingDidPlayerHeadshotOpponent(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return PedDuelingDidPlayerHeadshotOpponent(_ped);
    }
    ped_1.duelingDidPlayerHeadshotOpponent = duelingDidPlayerHeadshotOpponent;
    /**
     * target: 0 affects everyone
     * duration: -1 indefinite
     * flag: always 4 in R* Scripts
     *
     * Hash: 0xAAB050DA48B57978 | Since: 1207
     */
    function emotionalPresetLocoMotion(ped, presetName, targetPed, duration, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        PedEmotionalPresetLocoMotion(_ped, presetName, _targetPed, duration, flag);
    }
    ped_1.emotionalPresetLocoMotion = emotionalPresetLocoMotion;
    /**
     * No comment provided
     *
     * Hash: 0x06FA94C835787C64 | Since: 1207
     */
    function wasKilledByHeadshot(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return PedWasKilledByHeadshot(_ped);
    }
    ped_1.wasKilledByHeadshot = wasKilledByHeadshot;
    /**
     * Returns loot state
     * enum eLootState
     * {
     * LAP_NONE,
     * LAP_RESUMING,
     * LAP_GETTING_ON_FOOT,
     * LAP_DISTANT_NAV,
     * LAP_CHOOSING_ACTION,
     * LAP_APPROACHING,
     * LAP_ENTERING,
     * LAP_LOOTING,
     * LAP_EXITING
     * };
     *
     * _POSSE_* - _REGISTER_HATED*
     *
     * Hash: 0x5463C962BC7777C3 | Since: 1207
     */
    function refreshLootStateFor(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return RefreshLootStateForPed(_ped, 0, 0, 0);
    }
    ped_1.refreshLootStateFor = refreshLootStateFor;
    /**
     * p1 is always 1
     *
     * Hash: 0x59BD177A1A48600A | Since: 1207
     */
    function refreshMetaShopItems(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RefreshMetaPedShopItems(_ped, 0);
    }
    ped_1.refreshMetaShopItems = refreshMetaShopItems;
    /**
     * No comment provided
     *
     * Hash: 0xD8736EFDA38EDC5C | Since: 1207
     */
    function registerHatedTargetsInArea(ped, pos, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RegisterHatedTargetsInArea(_ped, pos.x, pos.y, pos.z, radius);
    }
    ped_1.registerHatedTargetsInArea = registerHatedTargetsInArea;
    /**
     * No comment provided
     *
     * Hash: 0x13E7320C762F0477 | Since: 1207
     */
    function releaseMetaAssetRequest(requestId) {
        ReleaseMetaPedAssetRequest(requestId);
    }
    ped_1.releaseMetaAssetRequest = releaseMetaAssetRequest;
    /**
     * No comment provided
     *
     * Hash: 0x4592B8B9B0EF5F48 | Since: 1207
     */
    function releaseMetaOutfitRequest(requestId) {
        ReleaseMetaPedOutfitRequest(requestId);
    }
    ped_1.releaseMetaOutfitRequest = releaseMetaOutfitRequest;
    /**
     * No comment provided
     *
     * Hash: 0x3972F78A78B5D9DF | Since: 1207
     */
    function releaseMetaRequest(requestId) {
        ReleaseMetaPedRequest(requestId);
    }
    ped_1.releaseMetaRequest = releaseMetaRequest;
    /**
     * Removes a texture created by 0xC5E7204F322E49EB.
     *
     * Hash: 0x6BEFAA907B076859 | Since: 1207
     */
    function releaseTexture(textureId) {
        ReleaseTexture(textureId);
    }
    ped_1.releaseTexture = releaseTexture;
    /**
     * Removes gravity well by handle returned from 0x4F5EBE70081E5A20
     *
     * Hash: 0x87247BC60B60BED8 | Since: 1207
     */
    function removeGravityWell(handle) {
        RemoveGravityWell(handle);
    }
    ped_1.removeGravityWell = removeGravityWell;
    /**
     * No comment provided
     *
     * Hash: 0xDE7B2B4144906CDF | Since: 1207
     */
    function removeMotionTypeAsset(nameHash, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof nameHash === 'string')
            nameHash = misc.getHashKey(nameHash);
        RemoveMotionTypeAsset(nameHash, _ped);
    }
    ped_1.removeMotionTypeAsset = removeMotionTypeAsset;
    /**
     * No comment provided
     *
     * Hash: 0xA6F67BEC53379A32 | Since: 1207
     */
    function removeBlackboardBool(ped, variableName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedBlackboardBool(_ped, variableName);
    }
    ped_1.removeBlackboardBool = removeBlackboardBool;
    /**
     * No comment provided
     *
     * Hash: 0x411189E51B8020BA | Since: 1207
     */
    function removeBlackboardFloat(ped, variableName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedBlackboardFloat(_ped, variableName);
    }
    ped_1.removeBlackboardFloat = removeBlackboardFloat;
    /**
     * No comment provided
     *
     * Hash: 0x0E17378642156790 | Since: 1207
     */
    function removeBlackboardHash(ped, variableName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedBlackboardHash(_ped, variableName);
    }
    ped_1.removeBlackboardHash = removeBlackboardHash;
    /**
     * No comment provided
     *
     * Hash: 0x81B75428A7813E67 | Since: 1207
     */
    function removeBlackboardInt(ped, variableName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedBlackboardInt(_ped, variableName);
    }
    ped_1.removeBlackboardInt = removeBlackboardInt;
    /**
     * See _REQUEST_PED_EMOTIONAL_PRESET
     *
     * Hash: 0xFC3BAB1801A8255A | Since: 1207
     */
    function removeEmotionalPreset(ped, name) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedEmotionalPreset(_ped, name);
    }
    ped_1.removeEmotionalPreset = removeEmotionalPreset;
    /**
     * No comment provided
     *
     * Hash: 0x5337B721C51883A9 | Since: 1207
     */
    function removeFromMount(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedFromMount(_ped, false, false);
    }
    ped_1.removeFromMount = removeFromMount;
    /**
     * No comment provided
     *
     * Hash: 0x96C349DE04C49011 | Since: 1207
     */
    function removeOverlay(textureId, overlayId) {
        RemovePedOverlay(textureId, overlayId);
    }
    ped_1.removeOverlay = removeOverlay;
    /**
     * No comment provided
     *
     * Hash: 0x3A50753042B6891B | Since: 1207
     */
    function removeProp(ped, propName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePedProp(_ped, propName);
    }
    ped_1.removeProp = removeProp;
    /**
     * No comment provided
     *
     * Hash: 0x0CAB404CD2DB41F5 | Since: 1207
     */
    function removeStayOutVolume(ped, volume) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return RemovePedStayOutVolume(_ped, volume);
    }
    ped_1.removeStayOutVolume = removeStayOutVolume;
    /**
     * No comment provided
     *
     * Hash: 0x011A42FD923D41CA | Since: 1311
     */
    function removeSubscribeToLegendaryBlips(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return RemovePedSubscribeToLegendaryBlips(_ped);
    }
    ped_1.removeSubscribeToLegendaryBlips = removeSubscribeToLegendaryBlips;
    /**
     * Directly removes a shop item component from a ped
     * Params: p2 and p3 are always 0
     *
     * Hash: 0x0D7FFA1B2F69ED82 | Since: 1355
     */
    function removeShopItemFrom(ped, componentHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        RemoveShopItemFromPed(_ped, componentHash, 0, false);
    }
    ped_1.removeShopItemFrom = removeShopItemFrom;
    /**
     * No comment provided
     *
     * Hash: 0x4707E9C23D8CA3FE | Since: 1207
     */
    function removeTarget(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        RemoveTarget(_ped, _targetPed);
    }
    ped_1.removeTarget = removeTarget;
    /**
     * Returns requestId
     * Params: p1 = 1 in R* Scripts (Used in SP only)
     *
     * Hash: 0xF97C34C33487D569 | Since: 1207
     */
    function requestMeta(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return RequestMetaPed(model, 0);
    }
    ped_1.requestMeta = requestMeta;
    /**
     * Returns requestId
     * Params: p1 = 1 in R* Scripts
     *
     * Hash: 0x91FE941F9FCFB702 | Since: 1207
     */
    function requestMetaAssetBundle(asset) {
        if (typeof asset === 'string')
            asset = misc.getHashKey(asset);
        return RequestMetaPedAssetBundle(asset, 0);
    }
    ped_1.requestMetaAssetBundle = requestMetaAssetBundle;
    /**
     * No comment provided
     *
     * Hash: 0xF6D9E1F3560CBF8E | Since: 1207
     */
    function requestMetaComponent(metaPedType) {
        return RequestMetaPedComponent(metaPedType, undefined, 0, 0, 0);
    }
    ped_1.requestMetaComponent = requestMetaComponent;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
     * Returns requestId, to be used with 0x74F512E29CB717E2
     *
     * Hash: 0x13154A76CE0CF9AB | Since: 1207
     */
    function requestMetaOutfit(model, outfit) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        if (typeof outfit === 'string')
            outfit = misc.getHashKey(outfit);
        return RequestMetaPedOutfit(model, outfit);
    }
    ped_1.requestMetaOutfit = requestMetaOutfit;
    /**
     * No comment provided
     *
     * Hash: 0xF7EA250B9A919E03 | Since: 1207
     */
    function requestMotionTypeAsset(nameHash, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof nameHash === 'string')
            nameHash = misc.getHashKey(nameHash);
        RequestMotionTypeAsset(nameHash, _ped);
    }
    ped_1.requestMotionTypeAsset = requestMotionTypeAsset;
    /**
     * For more information, see common:/data/emotional_presets.meta
     *
     * Hash: 0x5C3C55EAAD19915F | Since: 1207
     */
    function requestEmotionalPreset(ped, name) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RequestPedEmotionalPreset(_ped, name);
    }
    ped_1.requestEmotionalPreset = requestEmotionalPreset;
    /**
     * mood: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/fwFacialAnimRequest__Mood
     * Params: p2 = 6 in R* Scripts
     *
     * Hash: 0x8B3B71C80A29A4BB | Since: 1207
     */
    function requestFacialMoodThisFrame(ped, mood) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof mood === 'string')
            mood = misc.getHashKey(mood);
        RequestPedFacialMoodThisFrame(_ped, mood, 0);
    }
    ped_1.requestFacialMoodThisFrame = requestFacialMoodThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xBDED916A9F9B0604 | Since: 1207
     */
    function requestForScenarioType(ped, _object, scenarioType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const __object = _object instanceof Object ? _object.handle() : _object;
        if (typeof scenarioType === 'string')
            scenarioType = misc.getHashKey(scenarioType);
        return RequestPedForScenarioType(_ped, __object, undefined, scenarioType, undefined, false);
    }
    ped_1.requestForScenarioType = requestForScenarioType;
    /**
     * Known get up animation types: REAR, FRONT
     *
     * Hash: 0xEAA8242C8479C27D | Since: 1207
     */
    function requestGetupAnimation(ped, getUpType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RequestPedGetupAnimation(_ped, getUpType);
    }
    ped_1.requestGetupAnimation = requestGetupAnimation;
    /**
     * No comment provided
     *
     * Hash: 0xBEC65C6049B3219D | Since: 1207
     */
    function requestPropScenario(ped, _object) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const __object = _object instanceof Object ? _object.handle() : _object;
        return RequestPropScenarioPed(_ped, __object, false);
    }
    ped_1.requestPropScenario = requestPropScenario;
    /**
     * Creates a texture override data for ped and returns it's index.
     * So you can replace any texture of any ped's component.
     * Also, you can add overlays on it, such as aging, lipstick and more.
     * Textures can be reused by multiple peds at once.
     * You can keep only 32 textures at once(including other peds).
     *
     * https://github.com/femga/rdr3_discoveries/blob/master/clothes/change_overlays_script.lua
     * materialHash: https://github.com/femga/rdr3_discoveries/blob/master/clothes/cloth_drawable_albedo_normal_material_TEMPORARY.lua
     *
     * Hash: 0xC5E7204F322E49EB | Since: 1207
     */
    function requestTexture(albedoHash, normalHash, materialHash) {
        if (typeof albedoHash === 'string')
            albedoHash = misc.getHashKey(albedoHash);
        if (typeof normalHash === 'string')
            normalHash = misc.getHashKey(normalHash);
        if (typeof materialHash === 'string')
            materialHash = misc.getHashKey(materialHash);
        return RequestTexture(albedoHash, normalHash, materialHash);
    }
    ped_1.requestTexture = requestTexture;
    /**
     * No comment provided
     *
     * Hash: 0xED9582B3DA8F02B4 | Since: 1207
     */
    function reserveAmbients(numPeds) {
        ReserveAmbientPeds(numPeds);
    }
    ped_1.reserveAmbients = reserveAmbients;
    /**
     * No comment provided
     *
     * Hash: 0xF008E0BA1FE1D644 | Since: 1207
     */
    function reserveAmbientsTotal(numPeds) {
        ReserveAmbientPedsTotal(numPeds);
    }
    ped_1.reserveAmbientsTotal = reserveAmbientsTotal;
    /**
     * No comment provided
     *
     * Hash: 0x0BFA1BD465CDFEFD | Since: 1207
     */
    function resetComponents(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ResetPedComponents(_ped);
    }
    ped_1.resetComponents = resetComponents;
    /**
     * No comment provided
     *
     * Hash: 0x4B9668DB91DC39B8 | Since: 1207
     */
    function resetIncapacitationBleedOutDuration(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ResetPedIncapacitationBleedOutDuration(_ped);
    }
    ped_1.resetIncapacitationBleedOutDuration = resetIncapacitationBleedOutDuration;
    /**
     * No comment provided
     *
     * Hash: 0x801917E7D7BCE418 | Since: 1207
     */
    function resetLadderMovementSpeedModifier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ResetPedLadderMovementSpeedModifier(_ped);
    }
    ped_1.resetLadderMovementSpeedModifier = resetLadderMovementSpeedModifier;
    /**
     * Removes every texture layer but the base layer
     * Clearing texture's data: setting params to default values, but keep overlays.
     *
     * Hash: 0x8472A1789478F82F | Since: 1207
     */
    function resetTexture(textureId) {
        ResetPedTexture(textureId);
    }
    ped_1.resetTexture = resetTexture;
    /**
     * 0.0 <= stamina <= 100.0
     *
     * Hash: 0x675680D089BFA21F | Since: 1207
     */
    function restoreStamina(ped, stamina) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RestorePedStamina(_ped, stamina);
    }
    ped_1.restoreStamina = restoreStamina;
    /**
     * No comment provided
     *
     * Hash: 0xC2266AA617668AD3 | Since: 1207
     */
    function setAccuracyAgainstLocalPlayerModifier(ped, modifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAccuracyAgainstLocalPlayerModifier(_ped, modifier);
    }
    ped_1.setAccuracyAgainstLocalPlayerModifier = setAccuracyAgainstLocalPlayerModifier;
    /**
     * No comment provided
     *
     * Hash: 0xC0258742B034DFAF | Since: 1207
     */
    function setAmbientAnimalDensityMultiplierThisFrame(multiplier) {
        SetAmbientAnimalDensityMultiplierThisFrame(multiplier);
    }
    ped_1.setAmbientAnimalDensityMultiplierThisFrame = setAmbientAnimalDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xBA0980B5C0A11924 | Since: 1207
     */
    function setAmbientHumanDensityMultiplierThisFrame(multiplier) {
        SetAmbientHumanDensityMultiplierThisFrame(multiplier);
    }
    ped_1.setAmbientHumanDensityMultiplierThisFrame = setAmbientHumanDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xAB0D553FE20A6E25 | Since: 1207
     */
    function setAmbientDensityMultiplierThisFrame(multiplier) {
        SetAmbientPedDensityMultiplierThisFrame(multiplier);
    }
    ped_1.setAmbientDensityMultiplierThisFrame = setAmbientDensityMultiplierThisFrame;
    /**
     * Sets MetaPedExpression at index specified. Morphs components, such as changing body size or facial features.
     *
     * Note: You have to update the ped's variation (using 0xCC8CA3E88256E58F) after calling this native
     *
     * index = MetaPedExpression IDs
     * List of face features: https://pastebin.com/9jb88FXW
     * Full list of MetaPedExpressions: https://pastebin.com/Ld76cAn7
     * value: -1.0 to 1.0 (values beyond this likely won't sync to other clients)
     *
     * This native also allows you to change a horse's gender.
     *
     * Old name: _SET_PED_FACE_FEATURE
     *
     * Hash: 0x5653AB26C82938CF | Since: 1207
     */
    function setCharExpression(ped, index, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetCharExpression(_ped, index, value);
    }
    ped_1.setCharExpression = setCharExpression;
    /**
     * No comment provided
     *
     * Hash: 0x069EDDF1FD4DEB0A | Since: 1207
     */
    function setCurrentDefenseAgainstPlayersModifier(horse, modifier) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        SetCurrentDefenseAgainstPlayersModifier(_horse, modifier);
    }
    ped_1.setCurrentDefenseAgainstPlayersModifier = setCurrentDefenseAgainstPlayersModifier;
    /**
     * No comment provided
     *
     * Hash: 0x9B6808EC46BE849B | Since: 1207
     */
    function setDefenseModifierFor(ped, modifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetDefenseModifierForPed(_ped, modifier);
    }
    ped_1.setDefenseModifierFor = setDefenseModifierFor;
    /**
     * No comment provided
     *
     * Hash: 0x478F6B9920446CE2 | Since: 1207
     */
    function setFormationAutoAssignPosition(groupId, toggle) {
        SetFormationAutoAssignPosition(groupId, toggle);
    }
    ped_1.setFormationAutoAssignPosition = setFormationAutoAssignPosition;
    /**
     * No comment provided
     *
     * Hash: 0xDE1B1907A83A1550 | Since: 1207
     */
    function setHealthRechargeMultiplier(ped, multiplier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetHealthRechargeMultiplier(_ped, multiplier);
    }
    ped_1.setHealthRechargeMultiplier = setHealthRechargeMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xFECA2081F61ED2CD | Since: 1207
     */
    function setInteractionLockonFlag(ped, player, flag, enable) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        SetInteractionLockonFlag(_ped, _player, flag, enable);
    }
    ped_1.setInteractionLockonFlag = setInteractionLockonFlag;
    /**
     * Use to apply metaped player components
     * Replaces asset, alternatively you can remove assets using REMOVE_TAG_FROM_META_PED
     *
     * Hash: 0xBC6DF00D7A4A6819 | Since: 1207
     */
    function setMetaTag(ped, drawable, albedo, normal, material, palette, tint0, tint1, tint2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof drawable === 'string')
            drawable = misc.getHashKey(drawable);
        if (typeof albedo === 'string')
            albedo = misc.getHashKey(albedo);
        if (typeof normal === 'string')
            normal = misc.getHashKey(normal);
        if (typeof material === 'string')
            material = misc.getHashKey(material);
        if (typeof palette === 'string')
            palette = misc.getHashKey(palette);
        SetMetaPedTag(_ped, drawable, albedo, normal, material, palette, tint0, tint1, tint2);
    }
    ped_1.setMetaTag = setMetaTag;
    /**
     * Sets ped eye redness, weariness: 0.f to 1.f
     *
     * Hash: 0x314C5465195F3B30 | Since: 1207
     */
    function setMetaWeariness(ped, weariness) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetMetaPedWeariness(_ped, weariness);
    }
    ped_1.setMetaWeariness = setMetaWeariness;
    /**
     * No comment provided
     *
     * Hash: 0x7883AA809DF43D98 | Since: 1355
     */
    function setMinHealthThreshold(ped, healthAmount) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetMinPedHealthThreshold(_ped, healthAmount);
    }
    ped_1.setMinHealthThreshold = setMinHealthThreshold;
    /**
     * No comment provided
     *
     * Hash: 0xA69899995997A63B | Since: 1207
     */
    function setMountBondingLevel(ped, bondingLevel) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetMountBondingLevel(_ped, bondingLevel);
    }
    ped_1.setMountBondingLevel = setMountBondingLevel;
    /**
     * Note: this native was added in build 1232.40
     *
     * Hash: 0x11E6B9629C46D6EC | Since: 1232
     */
    function setMountSecurityEnabled(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetMountSecurityEnabled(_ped, toggle);
    }
    ped_1.setMountSecurityEnabled = setMountSecurityEnabled;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ACTION_DISABLE_FLAGS
     *
     * Hash: 0xB8DE69D9473B7593 | Since: 1207
     */
    function setActionDisableFlag(ped, actionDisableFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedActionDisableFlag(_ped, actionDisableFlag);
    }
    ped_1.setActionDisableFlag = setActionDisableFlag;
    /**
     * bloodFountainPressure: visible effect from 0.0 till 20.0
     * yaw: visible effect from -3.0 till 3.0
     * bloodFountainDirection: 1.0 left side, -1.0 right side
     * bloodFountainPulse: from 0.1 (low) till 1.0 (fast)
     * make blood fountain from your stomach: _SET_PED_ACTIVATE_WOUND_EFFECT(ped, unk, 2, 14411, 0.0, 0.1, 0.0, 0.0, 3.0, -1.0, 1.0)
     *
     * Hash: 0xFFD54D9FE71B966A | Since: 1207
     */
    function setActivateWoundEffect(ped, boneId, moveWoundLeftRight, bloodFountainPressure, yaw, bloodFountainDirection, bloodFountainPulse) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedActivateWoundEffect(_ped, 0, boneId, moveWoundLeftRight, bloodFountainPressure, yaw, bloodFountainDirection, bloodFountainPulse, 0, 0);
    }
    ped_1.setActivateWoundEffect = setActivateWoundEffect;
    /**
     * Params: hash - ARTHUR or JOHN
     * _SET_PED_(A-D)*
     *
     * Hash: 0xB285AD0EC870B2DF | Since: 1207
     */
    function setActivePlayerType(ped, playerType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof playerType === 'string')
            playerType = misc.getHashKey(playerType);
        SetPedActivePlayerType(_ped, playerType);
    }
    ped_1.setActivePlayerType = setActivePlayerType;
    /**
     * No comment provided
     *
     * Hash: 0x43CA928E892CFDB8 | Since: 1311
     */
    function setAnimalDetectionModifier(ped, modifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedAnimalDetectionModifier(_ped, modifier);
    }
    ped_1.setAnimalDetectionModifier = setAnimalDetectionModifier;
    /**
     * NET_FETCH_CLIENT_UPDATE_PED_FIGHT_PROFICIENCY: Changing parry multiplier for ped
     *
     * Hash: 0x6DBF2D78709AD70B | Since: 1207
     */
    function setBeatMultiplier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedBeatMultiplier(_ped, 0);
    }
    ped_1.setBeatMultiplier = setBeatMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xCB9401F918CB0F75 | Since: 1207
     */
    function setBlackboardBool(ped, value, removeTimer) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedBlackboardBool(_ped, value, removeTimer);
    }
    ped_1.setBlackboardBool = setBlackboardBool;
    /**
     * No comment provided
     *
     * Hash: 0x437C08DB4FEBE2BD | Since: 1207
     */
    function setBlackboardFloat(ped, value, removeTimer) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedBlackboardFloat(_ped, value, removeTimer);
    }
    ped_1.setBlackboardFloat = setBlackboardFloat;
    /**
     * p1:
     * BodyPartChained
     * OverloadMostInjuredBodyPart
     *
     * p2:
     * LeftLeg
     * Legs
     * RightArm
     *
     * Hash: 0xA762C9D6CF165E0D | Since: 1207
     */
    function setBlackboardHash(ped, removeTimer) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedBlackboardHash(_ped, removeTimer);
    }
    ped_1.setBlackboardHash = setBlackboardHash;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/BLACKBOARDS
     * Blackboard natives allow you to apply and check certain data to/for peds.
     * Blackboard bools, floats and strings are subdivided into 6 sections: "all", "animation", "any", "code", "global" and "script"
     * Most changes are only visible for "script" blackboards, some "script" blackboards change ped motions
     * "removeTimer" is self-removal timer, can be "-1" so your data will not be removed by the game (forever); 100 = 1 second
     *
     * Hash: 0x5F53010C4C3F6BAF | Since: 1207
     */
    function setBlackboardInt(ped, value, removeTimer) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedBlackboardInt(_ped, value, removeTimer);
    }
    ped_1.setBlackboardInt = setBlackboardInt;
    /**
     * Bleedout profiles:
     * Animal_FastBleedout
     * Animal_Generic
     * Human_FastBleedout
     * Human_Generic
     * Human_Mission
     *
     * For more information, see common/data/ai/peddamageinfo.meta
     *
     * Hash: 0x66C047719B0E80E1 | Since: 1207
     */
    function setBleedoutProfile(ped, bleedoutProfile) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof bleedoutProfile === 'string')
            bleedoutProfile = misc.getHashKey(bleedoutProfile);
        SetPedBleedoutProfile(_ped, bleedoutProfile);
    }
    ped_1.setBleedoutProfile = setBleedoutProfile;
    /**
     * brawlingStyle:
     * enum eBrawlingStyle : Hash
     * {
     * BS_AI = 0x802C604D,
     * BS_AI_BARBRAWL = 0x4FF5F0C7,
     * BS_AI_DEFENSIVE = 0xD888F2FD,
     * BS_AI_MOONSHINE_BARBRAWL = 0xA01B433A,
     * BS_ALLIGATOR = 0x7A5548ED,
     * BS_ALLIGATOR_LARGE = 0x368EC7CB,
     * BS_ALLY = 0x69C76C14,
     * BS_ANIMAL = 0xD777C754,
     * BS_BADGER = 0x7E7C3F53,
     * BS_BEAR = 0x0BC66E35,
     * BS_BEAVER = 0x4E313783,
     * BS_BOAR = 0x176A5831,
     * BS_BOUNTY_HUNTER = 0x3900654C,
     * BS_BRUISER = 0x4514DB61,
     * BS_BULL = 0x4E50C5D2,
     * BS_COUGAR = 0x9DAA7CCB,
     * BS_COW = 0xB0E91295,
     * BS_COYOTE = 0xA448EB69,
     * BS_DEER = 0xA781E6B3,
     * BS_DOG = 0x5A4155C4,
     * BS_ELK = 0x408697F0,
     * BS_FEMALE = 0x6A3BB2C2,
     * BS_FEMALE_STRONG = 0x4DAFDD84,
     * BS_GANGUP = 0xD0CECFF2,
     * BS_GOAT = 0x078E649F,
     * BS_HORSE = 0xF6B775F3,
     * BS_MICAH_FINALE = 0x1F0BB27A,
     * BS_MOOSE = 0x968917AB,
     * BS_MUSKRAT = 0x1EDC33AC,
     * BS_NO_MELEE = 0x25B5F931,
     * BS_PIG = 0x22EAD110,
     * BS_PLAYER = 0x78BAEF07,
     * BS_PLAYER_FINALE = 0xF9E77D2D,
     * BS_PLAYER_MOONSHINER = 0x687BF19F,
     * BS_PLAYER_WINTER1 = 0x3C6A802F,
     * BS_QUICK = 0xC4CABB1B,
     * BS_RACCOON = 0x505F8917,
     * BS_SHEEP = 0x6827CCCF,
     * BS_SNAKE = 0x82BEBC4B,
     * BS_TIMID = 0x431AEF77,
     * BS_WOLF = 0xA8F023D4
     * };
     *
     * Hash: 0x8BA83CC4288CD56D | Since: 1207
     */
    function setBrawlingStyle(ped, brawlingStyle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof brawlingStyle === 'string')
            brawlingStyle = misc.getHashKey(brawlingStyle);
        SetPedBrawlingStyle(_ped, brawlingStyle);
    }
    ped_1.setBrawlingStyle = setBrawlingStyle;
    /**
     * SET_PED_CAN_*
     *
     * Hash: 0xFD6943B6DF77E449 | Since: 1207
     */
    function setCanBeLassoed(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCanBeLassoed(_ped, toggle);
    }
    ped_1.setCanBeLassoed = setCanBeLassoed;
    /**
     * No comment provided
     *
     * Hash: 0xEE9DF765990E8D1D | Since: 1207
     */
    function setCanBodyRecoilIk(PedIndex, bEnableIK) {
        const _PedIndex = PedIndex instanceof Ped ? PedIndex.handle() : PedIndex;
        SetPedCanUnkBodypartIk(_PedIndex, bEnableIK);
    }
    ped_1.setCanBodyRecoilIk = setCanBodyRecoilIk;
    /**
     * Hashes: GUARD, COMBAT_ANIMAL, LAW, LAW_SHERIFF
     * _SET_PED_COMBAT_A* - _SET_PED_COMBAT_M*
     *
     * Hash: 0xBD75500141E4725C | Since: 1207
     */
    function setCombatAttributeHash(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        SetPedCombatAttributeHash(_ped, p1);
    }
    ped_1.setCombatAttributeHash = setCombatAttributeHash;
    /**
     * No comment provided
     *
     * Hash: 0x9238A3D970BBB0A9 | Since: 1207
     */
    function setCombatBehaviour(ped, behaviour) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof behaviour === 'string')
            behaviour = misc.getHashKey(behaviour);
        SetPedCombatBehaviour(_ped, behaviour);
    }
    ped_1.setCombatBehaviour = setCombatBehaviour;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_STYLES
     * Params: p2 is usually 1, sometimes 0 or 2
     * duration in seconds, -1.0 = forever
     *
     * Hash: 0x8ACC0506743A8A5C | Since: 1207
     */
    function setCombatStyle(ped, combatStyleHash, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof combatStyleHash === 'string')
            combatStyleHash = misc.getHashKey(combatStyleHash);
        SetPedCombatStyle(_ped, combatStyleHash, 0, duration);
    }
    ped_1.setCombatStyle = setCombatStyle;
    /**
     * duration in seconds, -1.0 = forever
     *
     * Hash: 0x8B1E8E35A6E814EA | Since: 1207
     */
    function setCombatStyleMod(ped, combatStyleModHash, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof combatStyleModHash === 'string')
            combatStyleModHash = misc.getHashKey(combatStyleModHash);
        SetPedCombatStyleMod(_ped, combatStyleModHash, duration);
    }
    ped_1.setCombatStyleMod = setCombatStyleMod;
    /**
     * No comment provided
     *
     * Hash: 0x7DE9692C6F64CFE8 | Since: 1207
     */
    function setCrouchMovement(ped, state, immediately) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCrouchMovement(_ped, state, 0, immediately);
    }
    ped_1.setCrouchMovement = setCrouchMovement;
    /**
     * The higher the multiplier the less the engine renders culls (https://docs.unity3d.com/Manual/OcclusionCulling.html)
     *
     * Hash: 0x8AC1D721B2097B6E | Since: 1207
     */
    function setCullRange(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCullRange(_ped, 0, 0);
    }
    ped_1.setCullRange = setCullRange;
    /**
     * No comment provided
     *
     * Hash: 0xDACE03C65C6666DB | Since: 1207
     */
    function setDamaged(ped, damaged) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDamaged(_ped, damaged);
    }
    ped_1.setDamaged = setDamaged;
    /**
     * damageCleanliness: see _GET_PED_DAMAGE_CLEANLINESS
     *
     * Hash: 0x7528720101A807A5 | Since: 1207
     */
    function setDamageCleanliness(ped, damageCleanliness) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDamageCleanliness(_ped, damageCleanliness);
    }
    ped_1.setDamageCleanliness = setDamageCleanliness;
    /**
     * _SET_PED_(A?)*
     *
     * Hash: 0xEB2BFE5D009F0331 | Since: 1232
     */
    function setDefensiveAreaToAngledArea(ped, x1, y1, z1, x2, y2, z2, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetPedDefensiveAreaToAngledArea(_ped, x1, y1, z1, x2, y2, z2, undefined, false, false, _entity, false);
    }
    ped_1.setDefensiveAreaToAngledArea = setDefensiveAreaToAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x1854217C640B39EC | Since: 1207
     */
    function setDefensiveSphereAttachedToEntity(ped, entity, pos, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetPedDefensiveSphereAttachedToEntity(_ped, _entity, pos.x, pos.y, pos.z, radius, 0, false);
    }
    ped_1.setDefensiveSphereAttachedToEntity = setDefensiveSphereAttachedToEntity;
    /**
     * Seems to set the ped's loco type.
     * Values used in the scripts:
     * algie
     * angry_female
     * arthur_healthy
     * cowboy
     * cowboy_f
     * default
     * default_female
     * free_slave_01
     * free_slave_02
     * gold_panner
     * guard_lantern
     * injured_general
     * john_marston
     * lilly_millet
     * lone_prisoner
     * lost_man
     * mp_ova_hunter
     * mp_ova_hunter_female
     * murfree
     * old_female
     * primate
     * rally
     * waiter
     * war_veteran
     *
     * Hash: 0x923583741DC87BCE | Since: 1207
     */
    function setDesiredLocoForModel(ped, locomotionArchetype) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDesiredLocoForModel(_ped, locomotionArchetype);
    }
    ped_1.setDesiredLocoForModel = setDesiredLocoForModel;
    /**
     * Sets peds motion type
     *
     * Hash: 0x89F5E7ADECCCB49C | Since: 1207
     */
    function setDesiredLocoMotionType(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedDesiredLocoMotionType(_ped);
    }
    ped_1.setDesiredLocoMotionType = setDesiredLocoMotionType;
    /**
     * Params: ped, 0f, -1, true, true in R* MP Scripts
     * _SET_PED_DE* - _SET_PED_F*
     *
     * Hash: 0xE3144B932DFDFF65 | Since: 1207
     */
    function setDirtCleaned(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDirtCleaned(_ped, 0, 0, false, false);
    }
    ped_1.setDirtCleaned = setDirtCleaned;
    /**
     * Disables being able to kick move ped.
     *
     * Hash: 0xADD31A5C7A5FAA73 | Since: 1207
     */
    function setDisableKickMove(ped, disable) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDisableKickMove(_ped, disable);
    }
    ped_1.setDisableKickMove = setDisableKickMove;
    /**
     * SOBER = 0.0f, SLIGHTLY_DRUNK = 0.25f, MODERATELY_DRUNK = 0.5f, VERY_DRUNK = 1.0f
     *
     * Hash: 0x406CCF555B04FAD3 | Since: 1207
     */
    function setDrunkness(ped, enabled, drunknessLevel) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDrunkness(_ped, enabled, drunknessLevel);
    }
    ped_1.setDrunkness = setDrunkness;
    /**
     * Used in R* MP Script fm_mission_controller and various R* SP Scripts for ambush*
     *
     * Hash: 0x20E54854DEF6A54A | Since: 1207
     */
    function setFiringPattern2(ped, patternHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof patternHash === 'string')
            patternHash = misc.getHashKey(patternHash);
        SetPedFiringPattern2(_ped, patternHash);
    }
    ped_1.setFiringPattern2 = setFiringPattern2;
    /**
     * Only used in R* MP Script fm_mission_controller
     *
     * Hash: 0x244E8C282188E40F | Since: 1207
     */
    function setFiringPattern3(ped, patternHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof patternHash === 'string')
            patternHash = misc.getHashKey(patternHash);
        SetPedFiringPattern3(_ped, patternHash);
    }
    ped_1.setFiringPattern3 = setFiringPattern3;
    /**
     * No comment provided
     *
     * Hash: 0x0E9E95FDEDCC9D35 | Since: 1207
     */
    function setFormationPosition(ped, position, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedFormationPosition(_ped, position, toggle);
    }
    ped_1.setFormationPosition = setFormationPosition;
    /**
     * No comment provided
     *
     * Hash: 0x3AE3552E7C207CC5 | Since: 1207
     */
    function setGetupAnimation(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedGetupAnimation(_ped, false);
    }
    ped_1.setGetupAnimation = setGetupAnimation;
    /**
     * No comment provided
     *
     * Hash: 0x8301D87B1B89E219 | Since: 1207
     */
    function setGrappleAction(ped, grappleAction) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof grappleAction === 'string')
            grappleAction = misc.getHashKey(grappleAction);
        SetPedGrappleAction(_ped, grappleAction);
    }
    ped_1.setGrappleAction = setGrappleAction;
    /**
     * No comment provided
     *
     * Hash: 0x56E9C26CD29D1ED6 | Since: 1207
     */
    function setGrappleAnimation(ped, grappleAnim) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof grappleAnim === 'string')
            grappleAnim = misc.getHashKey(grappleAnim);
        SetPedGrappleAnimation(_ped, grappleAnim);
    }
    ped_1.setGrappleAnimation = setGrappleAnimation;
    /**
     * No comment provided
     *
     * Hash: 0x99A6E246C315BF60 | Since: 1207
     */
    function setGrappleEffectMultiplier(ped, multiplier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedGrappleEffectMultiplier(_ped, multiplier);
    }
    ped_1.setGrappleEffectMultiplier = setGrappleEffectMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x789DABD18E9024DB | Since: 1207
     */
    function setGrappleFlag(ped, flag, enable) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedGrappleFlag(_ped, flag, enable);
    }
    ped_1.setGrappleFlag = setGrappleFlag;
    /**
     * No comment provided
     *
     * Hash: 0x604190F0CF0DF158 | Since: 1207
     */
    function setGrappleSequence(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedGrappleSequence(_ped);
    }
    ped_1.setGrappleSequence = setGrappleSequence;
    /**
     * Hashes: GS_DRAGGING, GS_FACE_TO_BACK, GS_FACE_TO_FACE, GS_FACE_TO_FACE_WALL, GS_MOUNTED
     *
     * Hash: 0x630E7B01F091A197 | Since: 1207
     */
    function setGrappleStyle(ped, style) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof style === 'string')
            style = misc.getHashKey(style);
        return SetPedGrappleStyle(_ped, style);
    }
    ped_1.setGrappleStyle = setGrappleStyle;
    /**
     * No comment provided
     *
     * Hash: 0x2BA918C823B8BA56 | Since: 1207
     */
    function setHeadshotDamageMultiplier(ped, multiplier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedHeadshotDamageMultiplier(_ped, multiplier);
    }
    ped_1.setHeadshotDamageMultiplier = setHeadshotDamageMultiplier;
    /**
     * configHash: see pedhealth.meta
     *
     * Hash: 0xF6B82FCE03B43A37 | Since: 1207
     */
    function setHealthConfig(ped, configHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof configHash === 'string')
            configHash = misc.getHashKey(configHash);
        SetPedHealthConfig(_ped, configHash);
    }
    ped_1.setHealthConfig = setHealthConfig;
    /**
     * Only used in R* Script beat_sharp_shooter
     * Blocks ped from swimming underwater
     *
     * Hash: 0x7FB0088E8769CDDB | Since: 1207
     */
    function setImmersionFlag(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedImmersionFlag(_ped, toggle);
    }
    ped_1.setImmersionFlag = setImmersionFlag;
    /**
     * No comment provided
     *
     * Hash: 0xD67B6F3BCF81BA47 | Since: 1207
     */
    function setIncapacitationFlags(ped, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedIncapacitationFlags(_ped, flags);
    }
    ped_1.setIncapacitationFlags = setIncapacitationFlags;
    /**
     * No comment provided
     *
     * Hash: 0x39ED303390DDEAC7 | Since: 1207
     */
    function setIncapacitationModifiers(ped, canBeIncapacitated, threshold, bleedoutTime) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedIncapacitationModifiers(_ped, canBeIncapacitated, threshold, bleedoutTime, 0);
    }
    ped_1.setIncapacitationModifiers = setIncapacitationModifiers;
    /**
     * No comment provided
     *
     * Hash: 0x2890418B39BC8FFF | Since: 1207
     */
    function setIncapacitationTotalBleedOutDuration(ped, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedIncapacitationTotalBleedOutDuration(_ped, duration);
    }
    ped_1.setIncapacitationTotalBleedOutDuration = setIncapacitationTotalBleedOutDuration;
    /**
     * No comment provided
     *
     * Hash: 0xA3C53CDE922BC78B | Since: 1207
     */
    function setInteractionNegativeResponse(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedInteractionNegativeResponse(_ped);
    }
    ped_1.setInteractionNegativeResponse = setInteractionNegativeResponse;
    /**
     * personality (script_mp_rel): NONE, AGGRESSIVE, TIMID (non-aggressive), CRIPPS, SCRIPTEDINTIMIDATION, MAGGIE, MARCEL, SCRIPTEDSALOON
     * personality (script_rel): AVOID, SCRIPTEDOUTLAW, TIMIDGUARDDOG, SCRIPTEDTIMIDROB, AGGRESSIVECAMPER, LAZYDOG, KIERANTIEDUP, SCRIPTEDGALA
     *
     * Hash: 0x24C82EF607105FAA | Since: 1207
     */
    function setInteractionPersonality(ped, personality) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof personality === 'string')
            personality = misc.getHashKey(personality);
        SetPedInteractionPersonality(_ped, personality);
    }
    ped_1.setInteractionPersonality = setInteractionPersonality;
    /**
     * No comment provided
     *
     * Hash: 0x20C5459379D75C1C | Since: 1207
     */
    function setInteractionPositiveResponse(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedInteractionPositiveResponse(_ped);
    }
    ped_1.setInteractionPositiveResponse = setInteractionPositiveResponse;
    /**
     * No comment provided
     *
     * Hash: 0x5BCF0B79D4F5DBA3 | Since: 1207
     */
    function setKnockedByOneHit(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedKnockedByOneHit(_ped, 0);
    }
    ped_1.setKnockedByOneHit = setKnockedByOneHit;
    /**
     * No comment provided
     *
     * Hash: 0x05CE6AF4DF071D23 | Since: 1207
     */
    function setLadderMovementSpeedModifier(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedLadderMovementSpeedModifier(_ped, 0);
    }
    ped_1.setLadderMovementSpeedModifier = setLadderMovementSpeedModifier;
    /**
     * No comment provided
     *
     * Hash: 0x13A210949FCBD92B | Since: 1207
     */
    function setLights(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedLights(_ped, toggle);
    }
    ped_1.setLights = setLights;
    /**
     * enum eMotivationState
     * {
     * TOILET_STATE,
     * FEAR_STATE,
     * ANGRY_STATE,
     * AGITATION_STATE,
     * HUNGRY_STATE,
     * TIRED_STATE,
     * SAD_STATE,
     * BRAVE_STATE,
     * OFFER_ITEM_STATE,
     * SUSPICION,
     * DRUNK_STATE
     * };
     *
     * If targetPed is set to 0 the ped motivationState affects everyone
     *
     * Hash: 0x06D26A96CA1BCA75 | Since: 1207
     */
    function setMotivation(ped, motivationState, threshold, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        SetPedMotivation(_ped, motivationState, threshold, _targetPed);
    }
    ped_1.setMotivation = setMotivation;
    /**
     * The higher the modifier, the slower the motivationState value will decrease
     *
     * Hash: 0xA1EB5D029E0191D3 | Since: 1207
     */
    function setMotivationModifier(ped, motivationState, modifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMotivationModifier(_ped, motivationState, modifier);
    }
    ped_1.setMotivationModifier = setMotivationModifier;
    /**
     * motivationState: see _SET_PED_MOTIVATION
     *
     * Hash: 0x2EB75FB86C41F026 | Since: 1207
     */
    function setMotivationStateOverride(ped, motivationState, enabled) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedMotivationStateOverride(_ped, motivationState, enabled);
    }
    ped_1.setMotivationStateOverride = setMotivationStateOverride;
    /**
     * Hashes: STANDARD_PED_AGRO_GUARD, BOUNTY_HUNTER, PLAYER_HORSE, LAW_POLICE, GUARD_DOG, ATTACK_DOG
     * Personalities can also be found in common:/data/ai/interactionpersonalities
     *
     * Hash: 0xB8B6430EAD2D2437 | Since: 1207
     */
    function setPersonality(ped, personality) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof personality === 'string')
            personality = misc.getHashKey(personality);
        SetPedPersonality(_ped, personality);
    }
    ped_1.setPersonality = setPersonality;
    /**
     * No comment provided
     *
     * Hash: 0x4A48B6E03BABB4AC | Since: 1207
     */
    function setPromptName(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedPromptName(_ped);
    }
    ped_1.setPromptName = setPromptName;
    /**
     * No comment provided
     *
     * Hash: 0x19B14E04B009E28B | Since: 1207
     */
    function setPromptName2(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedPromptName2(_ped);
    }
    ped_1.setPromptName2 = setPromptName2;
    /**
     * No comment provided
     *
     * Hash: 0xFCA8FB9E15FA80D3 | Since: 1207
     */
    function setPromptNameFromGxtEntry(ped, gxtEntryHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof gxtEntryHash === 'string')
            gxtEntryHash = misc.getHashKey(gxtEntryHash);
        SetPedPromptNameFromGxtEntry(_ped, gxtEntryHash);
    }
    ped_1.setPromptNameFromGxtEntry = setPromptNameFromGxtEntry;
    /**
     * No comment provided
     *
     * Hash: 0xC2745D9261664901 | Since: 1207
     */
    function setPromptNameFromGxtEntry2(ped, gxtEntryHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof gxtEntryHash === 'string')
            gxtEntryHash = misc.getHashKey(gxtEntryHash);
        SetPedPromptNameFromGxtEntry2(_ped, gxtEntryHash);
    }
    ped_1.setPromptNameFromGxtEntry2 = setPromptNameFromGxtEntry2;
    /**
     * quality: see _GET_PED_QUALITY
     *
     * Hash: 0xCE6B874286D640BB | Since: 1207
     */
    function setQuality(ped, quality) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedQuality(_ped, quality);
    }
    ped_1.setQuality = setQuality;
    /**
     * No comment provided
     *
     * Hash: 0x25ACFC650B65C538 | Since: 1207
     */
    function setScale(ped, scale) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedScale(_ped, scale);
    }
    ped_1.setScale = setScale;
    /**
     * 0.0 - 1.0
     * Modifies the "scent line" on the ped's body when using Eagle Eye.
     *
     * Hash: 0x01B21B81865E2A1F | Since: 1207
     */
    function setScent(ped, scent) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedScent(_ped, scent);
    }
    ped_1.setScent = setScent;
    /**
     * No comment provided
     *
     * Hash: 0xC163DAC52AC975D3 | Since: 1207
     */
    function setTargetActionDisableFlag(ped, actionDisableFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedTargetActionDisableFlag(_ped, actionDisableFlag);
    }
    ped_1.setTargetActionDisableFlag = setTargetActionDisableFlag;
    /**
     * No comment provided
     *
     * Hash: 0x36E4B61DC56DE77C | Since: 1207
     */
    function setToBeRemoved(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedToBeRemoved(_ped, 0, 0, 0, undefined);
    }
    ped_1.setToBeRemoved = setToBeRemoved;
    /**
     * No comment provided
     *
     * Hash: 0x221F4D9912B7FE86 | Since: 1207
     */
    function setToDisableRagdoll(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedToDisableRagdoll(_ped, toggle);
    }
    ped_1.setToDisableRagdoll = setToDisableRagdoll;
    /**
     * duration in seconds
     *
     * Hash: 0xA5950E16B8F31052 | Since: 1207
     */
    function setTrailEffect(ped, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedTrailEffect(_ped, false, duration);
    }
    ped_1.setTrailEffect = setTrailEffect;
    /**
     * Doesn't actually return anything.
     *
     * Hash: 0xEB72453B6F5B45B0 | Since: 1232
     */
    function setUseHorseMapCollision(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedUseHorseMapCollision(_ped, toggle);
    }
    ped_1.setUseHorseMapCollision = setUseHorseMapCollision;
    /**
     * _SET_PED_S* - _SET_PED_T*
     *
     * Hash: 0xD05AD61F242C626B | Since: 1207
     */
    function setVoiceVolume(ped, volume) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedVoiceVolume(_ped, volume);
    }
    ped_1.setVoiceVolume = setVoiceVolume;
    /**
     * No comment provided
     *
     * Hash: 0x4DB9D03AC4E1FA84 | Since: 1207
     */
    function setWrithingDuration(ped, writhingDuration1, writhingDuration2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedWrithingDuration(_ped, writhingDuration1, writhingDuration2, 0);
    }
    ped_1.setWrithingDuration = setWrithingDuration;
    /**
     * No comment provided
     *
     * Hash: 0xA73F50E8796150D5 | Since: 1207
     */
    function setPeltForHorse(horse, peltId) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        SetPeltForHorse(_horse, peltId);
    }
    ped_1.setPeltForHorse = setPeltForHorse;
    /**
     * No comment provided
     *
     * Hash: 0x5708EDD71B50C008 | Since: 1207
     */
    function setPlayerAntagonizeDisabledFor(ped, player, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerAntagonizeDisabledForPed(_ped, _player, duration);
    }
    ped_1.setPlayerAntagonizeDisabledFor = setPlayerAntagonizeDisabledFor;
    /**
     * Animal Skin Quality Modifier
     * Params: p2 = 2, p3 = 3 in R* Scripts
     *
     * Hash: 0x9EFF3C91DF38304F | Since: 1311
     */
    function setPlayerCurrentAnimalDamageModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        return SetPlayerCurrentAnimalDamageModifier(_player, modifier, 0, 0);
    }
    ped_1.setPlayerCurrentAnimalDamageModifier = setPlayerCurrentAnimalDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x19173C3F15367B54 | Since: 1207
     */
    function setPlayerGreetDisabledFor(ped, player, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerGreetDisabledForPed(_ped, _player, duration);
    }
    ped_1.setPlayerGreetDisabledFor = setPlayerGreetDisabledFor;
    /**
     * No comment provided
     *
     * Hash: 0x283978A15512B2FE | Since: 1207
     */
    function setRandomOutfitVariation(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetRandomOutfitVariation(_ped, false);
    }
    ped_1.setRandomOutfitVariation = setRandomOutfitVariation;
    /**
     * No comment provided
     *
     * Hash: 0x39A2FC5AF55A52B1 | Since: 1207
     */
    function setRemoveNetworked(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetRemovePedNetworked(_ped, 0);
    }
    ped_1.setRemoveNetworked = setRemoveNetworked;
    /**
     * No comment provided
     *
     * Hash: 0xDB48E99F8E064E56 | Since: 1207
     */
    function setScenarioAnimalDensityMultiplierThisFrame(multiplier) {
        SetScenarioAnimalDensityMultiplierThisFrame(multiplier);
    }
    ped_1.setScenarioAnimalDensityMultiplierThisFrame = setScenarioAnimalDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x28CB6391ACEDD9DB | Since: 1207
     */
    function setScenarioHumanDensityMultiplierThisFrame(multiplier) {
        SetScenarioHumanDensityMultiplierThisFrame(multiplier);
    }
    ped_1.setScenarioHumanDensityMultiplierThisFrame = setScenarioHumanDensityMultiplierThisFrame;
    /**
     * Sets the scenario ped density to the given config.
     *
     * Valid configs:
     * - BLACKWATER
     * - DEFAULT
     * - NEWBORDEAUX
     * - RHODES
     * - STRAWBERRY
     * - TUMBLEWEED
     * - VALENTINE
     * - VANHORN
     *
     * See common/data/ai/densityscoringconfigs.meta for more information.
     *
     * Hash: 0x95423627A9CA598E | Since: 1207
     */
    function setScenarioDensityThisFrame(configHash) {
        if (typeof configHash === 'string')
            configHash = misc.getHashKey(configHash);
        SetScenarioPedDensityThisFrame(configHash);
    }
    ped_1.setScenarioDensityThisFrame = setScenarioDensityThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xA77FA7BE9312F8C0 | Since: 1207
     */
    function setScenarioRangeMultiplierThisFrame(multiplier) {
        SetScenarioPedRangeMultiplierThisFrame(multiplier);
    }
    ped_1.setScenarioRangeMultiplierThisFrame = setScenarioRangeMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xEF5A3D2285D8924B | Since: 1207
     */
    function setStaminaDepletionMultiplier(ped, multiplier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetStaminaDepletionMultiplier(_ped, multiplier);
    }
    ped_1.setStaminaDepletionMultiplier = setStaminaDepletionMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x345C9F993A8AB4A4 | Since: 1207
     */
    function setStaminaRechargeMultiplier(ped, multiplier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetStaminaRechargeMultiplier(_ped, multiplier);
    }
    ped_1.setStaminaRechargeMultiplier = setStaminaRechargeMultiplier;
    /**
     * Size will be permanent
     *
     * Hash: 0x7FF72DE061DF55E2 | Since: 1207
     */
    function setTankAttributeSize(ped, attributeIndex, size) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetTankAttributeSize(_ped, attributeIndex, size);
    }
    ped_1.setTankAttributeSize = setTankAttributeSize;
    /**
     * No comment provided
     *
     * Hash: 0x6C76BC24F8BB709A | Since: 1207
     */
    function setTextureLayerAlpha(textureId, layerId, texAlpha) {
        SetTextureLayerAlpha(textureId, layerId, texAlpha);
    }
    ped_1.setTextureLayerAlpha = setTextureLayerAlpha;
    /**
     * No comment provided
     *
     * Hash: 0xF2EA041F1146D75B | Since: 1207
     */
    function setTextureLayerMod(textureId, layerId, modTextureHash, modAlpha, modChannel) {
        if (typeof modTextureHash === 'string')
            modTextureHash = misc.getHashKey(modTextureHash);
        SetTextureLayerMod(textureId, layerId, modTextureHash, modAlpha, modChannel);
    }
    ped_1.setTextureLayerMod = setTextureLayerMod;
    /**
     * paletteHash: https://raw.githubusercontent.com/femga/rdr3_discoveries/master/clothes/cloth_color_palletes.lua
     *
     * Hash: 0x1ED8588524AC9BE1 | Since: 1207
     */
    function setTextureLayerPallete(textureId, layerId, paletteHash) {
        if (typeof paletteHash === 'string')
            paletteHash = misc.getHashKey(paletteHash);
        SetTextureLayerPallete(textureId, layerId, paletteHash);
    }
    ped_1.setTextureLayerPallete = setTextureLayerPallete;
    /**
     * No comment provided
     *
     * Hash: 0x057C4F092E2298BE | Since: 1207
     */
    function setTextureLayerRoughness(textureId, layerId, texRough) {
        SetTextureLayerRoughness(textureId, layerId, texRough);
    }
    ped_1.setTextureLayerRoughness = setTextureLayerRoughness;
    /**
     * No comment provided
     *
     * Hash: 0x3329AAE2882FC8E4 | Since: 1207
     */
    function setTextureLayerSheetGridIndex(textureId, layerId, sheetGridIndex) {
        SetTextureLayerSheetGridIndex(textureId, layerId, sheetGridIndex);
    }
    ped_1.setTextureLayerSheetGridIndex = setTextureLayerSheetGridIndex;
    /**
     * No comment provided
     *
     * Hash: 0x253A63B5BADBC398 | Since: 1207
     */
    function setTextureLayerTextureMap(textureId, layerId, albedoHash, normalHash, materialHash) {
        if (typeof albedoHash === 'string')
            albedoHash = misc.getHashKey(albedoHash);
        if (typeof normalHash === 'string')
            normalHash = misc.getHashKey(normalHash);
        if (typeof materialHash === 'string')
            materialHash = misc.getHashKey(materialHash);
        SetTextureLayerTextureMap(textureId, layerId, albedoHash, normalHash, materialHash);
    }
    ped_1.setTextureLayerTextureMap = setTextureLayerTextureMap;
    /**
     * Seem color is not RGB or HSV
     *
     * Hash: 0x2DF59FFE6FFD6044 | Since: 1207
     */
    function setTextureLayerTint(textureId, layerId, tint0, tint1, tint2) {
        SetTextureLayerTint(textureId, layerId, tint0, tint1, tint2);
    }
    ped_1.setTextureLayerTint = setTextureLayerTint;
    /**
     * Used in script function METAPED_CLOTHING__XML__APPLY_OUTFIT_TINTS_TO_PED
     *
     * Hash: 0x4EFC1F8FF1AD94DE | Since: 1207
     */
    function setTextureOutfitTints(ped, componentCategory, palette, tint0, tint1, tint2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentCategory === 'string')
            componentCategory = misc.getHashKey(componentCategory);
        if (typeof palette === 'string')
            palette = misc.getHashKey(palette);
        SetTextureOutfitTints(_ped, componentCategory, palette, tint0, tint1, tint2);
    }
    ped_1.setTextureOutfitTints = setTextureOutfitTints;
    /**
     * _SET_W(EAPON?)*
     *
     * Hash: 0x932786CE3C76477C | Since: 1207
     */
    function setTotalDamageFalloffBonus(ped, bonus) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetTotalPedDamageFalloffBonus(_ped, bonus);
    }
    ped_1.setTotalDamageFalloffBonus = setTotalDamageFalloffBonus;
    /**
     * _SET_W(EAPON?)*
     *
     * Hash: 0x73B6F907B913C860 | Since: 1207
     */
    function setTotalDamageFromAi(ped, totalDamage) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetTotalPedDamageFromAi(_ped, totalDamage);
    }
    ped_1.setTotalDamageFromAi = setTotalDamageFromAi;
    /**
     * Triggers a gunshot
     * Params: p5 = -1 in R* Scripts
     *
     * Hash: 0x4C57F27D1554E6B0 | Since: 1207
     */
    function shootTriggerAtCoords(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return ShootTriggerAtCoords(_ped, pos.x, pos.y, pos.z, 0, 0, 0, 0);
    }
    ped_1.shootTriggerAtCoords = shootTriggerAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0x83ED1FC9DF3411F5 | Since: 1311
     */
    function spawnpointsStartSearchWithVolume(volume, spawnpointsFlag, duration) {
        SpawnpointsStartSearchWithVolume(volume, spawnpointsFlag, 0, duration, 0);
    }
    ped_1.spawnpointsStartSearchWithVolume = spawnpointsStartSearchWithVolume;
    /**
     * No comment provided
     *
     * Hash: 0x7D4E70A67A651C71 | Since: 1207
     */
    function unreserveAmbients(numPeds) {
        UnreserveAmbientPeds(numPeds);
    }
    ped_1.unreserveAmbients = unreserveAmbients;
    /**
     * No comment provided
     *
     * Hash: 0x0F9E754EBE8FDBFA | Since: 1311
     */
    function updateAnimalDamageModifier(player) {
        const _player = player instanceof Player ? player.localId() : player;
        UpdateAnimalDamageModifier(_player);
    }
    ped_1.updateAnimalDamageModifier = updateAnimalDamageModifier;
    /**
     * Should be called at least once for any new texture override.
     * Otherwise component textures will be just black.
     * Also needs to be called for updating any ped overlays to apply the changes.
     *
     * Hash: 0x92DAABA2C1C10B0E | Since: 1207
     */
    function updateTexture(textureId) {
        UpdatePedTexture(textureId);
    }
    ped_1.updateTexture = updateTexture;
    /**
     * Update variation on ped, needed after first creation, or when component or texture/overlay is changed
     *
     * Hash: 0xCC8CA3E88256E58F | Since: 1207
     */
    function updateVariation(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        UpdatePedVariation(_ped, false, false, false, false, false);
    }
    ped_1.updateVariation = updateVariation;
    /**
     * Params: 0.0f to remove wound effects
     *
     * Hash: 0x66B1CB778D911F49 | Since: 1207
     */
    function updateWoundEffect(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        UpdatePedWoundEffect(_ped, value);
    }
    ped_1.updateWoundEffect = updateWoundEffect;
    /**
     * No comment provided
     *
     * Hash: 0x66B957AAC2EAAEAB | Since: 1207
     */
    function updateShopItemWearableState(ped, componentHash, wearableState) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        if (typeof wearableState === 'string')
            wearableState = misc.getHashKey(wearableState);
        UpdateShopItemWearableState(_ped, componentHash, wearableState, 0, false, 0);
    }
    ped_1.updateShopItemWearableState = updateShopItemWearableState;
    /**
     * No comment provided
     *
     * Hash: 0xE0B61ED8BB37712F | Since: 1207
     */
    function warpOutOfVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        WarpPedOutOfVehicle(_ped);
    }
    ped_1.warpOutOfVehicle = warpOutOfVehicle;
})(ped || (ped = {}));
export var perschar;
(function (perschar) {
    /**
     * No comment provided
     *
     * Hash: 0x08FC896D2CB31FCC | Since: 1207
     */
    function _0x08FC896D2CB31FCC() {
        return Citizen.invokeNative('0x08FC896D2CB31FCC', undefined, false);
    }
    perschar._0x08FC896D2CB31FCC = _0x08FC896D2CB31FCC;
    /**
     * No comment provided
     *
     * Hash: 0x0B3A99AB6713AA52 | Since: 1207
     */
    function _0x0B3A99AB6713AA52() {
        Citizen.invokeNative('0x0B3A99AB6713AA52', undefined);
    }
    perschar._0x0B3A99AB6713AA52 = _0x0B3A99AB6713AA52;
    /**
     * Returns the PersChar index of the persCharHash passed
     *
     * Hash: 0x112DDF56300BC6E5 | Since: 1207
     */
    function _0x112DDF56300BC6E5(persCharHash) {
        if (typeof persCharHash === 'string')
            persCharHash = misc.getHashKey(persCharHash);
        return Citizen.invokeNative('0x112DDF56300BC6E5', persCharHash);
    }
    perschar._0x112DDF56300BC6E5 = _0x112DDF56300BC6E5;
    /**
     * No comment provided
     *
     * Hash: 0x2DF89CD2ED1D0BDE | Since: 1207
     */
    function setOutfit(persCharHash, outfit) {
        if (typeof persCharHash === 'string')
            persCharHash = misc.getHashKey(persCharHash);
        if (typeof outfit === 'string')
            outfit = misc.getHashKey(outfit);
        Citizen.invokeNative('0x2DF89CD2ED1D0BDE', persCharHash, outfit);
    }
    perschar.setOutfit = setOutfit;
    /**
     * No comment provided
     *
     * Hash: 0x2E957AA81F2C61C9 | Since: 1207
     */
    function _0x2E957AA81F2C61C9() {
        Citizen.invokeNative('0x2E957AA81F2C61C9');
    }
    perschar._0x2E957AA81F2C61C9 = _0x2E957AA81F2C61C9;
    /**
     * No comment provided
     *
     * Hash: 0x406808610220405B | Since: 1207
     */
    function _0x406808610220405B() {
        Citizen.invokeNative('0x406808610220405B', undefined);
    }
    perschar._0x406808610220405B = _0x406808610220405B;
    /**
     * No comment provided
     *
     * Hash: 0x4AFC7288C77238B3 | Since: 1207
     */
    function _0x4AFC7288C77238B3() {
        return Citizen.invokeNative('0x4AFC7288C77238B3', undefined);
    }
    perschar._0x4AFC7288C77238B3 = _0x4AFC7288C77238B3;
    /**
     * No comment provided
     *
     * Hash: 0x4F81EAD1DE8FA19B | Since: 1207
     */
    function _0x4F81EAD1DE8FA19B(persChar) {
        Citizen.invokeNative('0x4F81EAD1DE8FA19B', persChar);
    }
    perschar._0x4F81EAD1DE8FA19B = _0x4F81EAD1DE8FA19B;
    /**
     * No comment provided
     *
     * Hash: 0x535A66AAD2BF68F9 | Since: 1207
     */
    function _0x535A66AAD2BF68F9() {
        Citizen.invokeNative('0x535A66AAD2BF68F9', undefined, undefined);
    }
    perschar._0x535A66AAD2BF68F9 = _0x535A66AAD2BF68F9;
    /**
     * No comment provided
     *
     * Hash: 0x59C7AD6FEA2AC449 | Since: 1207
     */
    function _0x59C7AD6FEA2AC449() {
        Citizen.invokeNative('0x59C7AD6FEA2AC449', undefined, undefined, undefined, undefined);
    }
    perschar._0x59C7AD6FEA2AC449 = _0x59C7AD6FEA2AC449;
    /**
     * No comment provided
     *
     * Hash: 0x5EE6FCCC9C832CA2 | Since: 1207
     */
    function _0x5EE6FCCC9C832CA2() {
        return new Vector3(Citizen.invokeNative('0x5EE6FCCC9C832CA2', undefined));
    }
    perschar._0x5EE6FCCC9C832CA2 = _0x5EE6FCCC9C832CA2;
    /**
     * No comment provided
     *
     * Hash: 0x63AA2B8EB087886A | Since: 1207
     */
    function _0x63AA2B8EB087886A() {
        Citizen.invokeNative('0x63AA2B8EB087886A', undefined, undefined);
    }
    perschar._0x63AA2B8EB087886A = _0x63AA2B8EB087886A;
    /**
     * No comment provided
     *
     * Hash: 0x669C25840C6F7AE2 | Since: 1207
     */
    function _0x669C25840C6F7AE2() {
        Citizen.invokeNative('0x669C25840C6F7AE2', undefined, undefined);
    }
    perschar._0x669C25840C6F7AE2 = _0x669C25840C6F7AE2;
    /**
     * No comment provided
     *
     * Hash: 0x6759BEE6762E140B | Since: 1207
     */
    function _0x6759BEE6762E140B(persChar) {
        Citizen.invokeNative('0x6759BEE6762E140B', persChar);
    }
    perschar._0x6759BEE6762E140B = _0x6759BEE6762E140B;
    /**
     * No comment provided
     *
     * Hash: 0x69786495C92A3044 | Since: 1207
     */
    function _0x69786495C92A3044() {
        return Citizen.invokeNative('0x69786495C92A3044', undefined);
    }
    perschar._0x69786495C92A3044 = _0x69786495C92A3044;
    /**
     * No comment provided
     *
     * Hash: 0x70605812ABC9FF0F | Since: 1207
     */
    function _0x70605812ABC9FF0F() {
        Citizen.invokeNative('0x70605812ABC9FF0F', undefined, undefined);
    }
    perschar._0x70605812ABC9FF0F = _0x70605812ABC9FF0F;
    /**
     * No comment provided
     *
     * Hash: 0x8AE4EFA464DAE42D | Since: 1207
     */
    function _0x8AE4EFA464DAE42D() {
        Citizen.invokeNative('0x8AE4EFA464DAE42D', undefined, undefined);
    }
    perschar._0x8AE4EFA464DAE42D = _0x8AE4EFA464DAE42D;
    /**
     * No comment provided
     *
     * Hash: 0x8B44273A92CD406C | Since: 1207
     */
    function resetSchedule(persCharHash) {
        if (typeof persCharHash === 'string')
            persCharHash = misc.getHashKey(persCharHash);
        Citizen.invokeNative('0x8B44273A92CD406C', persCharHash);
    }
    perschar.resetSchedule = resetSchedule;
    /**
     * No comment provided
     *
     * Hash: 0x8BC555034A5A5E8C | Since: 1207
     */
    function _0x8BC555034A5A5E8C() {
        Citizen.invokeNative('0x8BC555034A5A5E8C', undefined, undefined);
    }
    perschar._0x8BC555034A5A5E8C = _0x8BC555034A5A5E8C;
    /**
     * No comment provided
     *
     * Hash: 0x92690B0822493CE0 | Since: 1207
     */
    function _0x92690B0822493CE0() {
        Citizen.invokeNative('0x92690B0822493CE0');
    }
    perschar._0x92690B0822493CE0 = _0x92690B0822493CE0;
    /**
     * No comment provided
     *
     * Hash: 0x94995829ED15A598 | Since: 1207
     */
    function _0x94995829ED15A598() {
        return new Vector3(Citizen.invokeNative('0x94995829ED15A598', undefined));
    }
    perschar._0x94995829ED15A598 = _0x94995829ED15A598;
    /**
     * No comment provided
     *
     * Hash: 0x9C7F95946E304778 | Since: 1207
     */
    function _0x9C7F95946E304778() {
        return Citizen.invokeNative('0x9C7F95946E304778', undefined, undefined);
    }
    perschar._0x9C7F95946E304778 = _0x9C7F95946E304778;
    /**
     * No comment provided
     *
     * Hash: 0xA2B18FF8D39F6D87 | Since: 1207
     */
    function _0xA2B18FF8D39F6D87() {
        Citizen.invokeNative('0xA2B18FF8D39F6D87', undefined);
    }
    perschar._0xA2B18FF8D39F6D87 = _0xA2B18FF8D39F6D87;
    /**
     * No comment provided
     *
     * Hash: 0xA4DCB3F0DD7488BD | Since: 1207
     */
    function _0xA4DCB3F0DD7488BD() {
        Citizen.invokeNative('0xA4DCB3F0DD7488BD', undefined, undefined, undefined, undefined, undefined);
    }
    perschar._0xA4DCB3F0DD7488BD = _0xA4DCB3F0DD7488BD;
    /**
     * No comment provided
     *
     * Hash: 0xA8120EBEAF290C7A | Since: 1207
     */
    function _0xA8120EBEAF290C7A() {
        return Citizen.invokeNative('0xA8120EBEAF290C7A', undefined);
    }
    perschar._0xA8120EBEAF290C7A = _0xA8120EBEAF290C7A;
    /**
     * No comment provided
     *
     * Hash: 0xA8C406C2A56EDC16 | Since: 1207
     */
    function _0xA8C406C2A56EDC16(persChar) {
        Citizen.invokeNative('0xA8C406C2A56EDC16', persChar);
    }
    perschar._0xA8C406C2A56EDC16 = _0xA8C406C2A56EDC16;
    /**
     * No comment provided
     *
     * Hash: 0xB173599D61FAEB31 | Since: 1207
     */
    function _0xB173599D61FAEB31() {
        Citizen.invokeNative('0xB173599D61FAEB31');
    }
    perschar._0xB173599D61FAEB31 = _0xB173599D61FAEB31;
    /**
     * No comment provided
     *
     * Hash: 0xB65E7F733956CF25 | Since: 1207
     */
    function _0xB65E7F733956CF25(persChar) {
        Citizen.invokeNative('0xB65E7F733956CF25', persChar);
    }
    perschar._0xB65E7F733956CF25 = _0xB65E7F733956CF25;
    /**
     * No comment provided
     *
     * Hash: 0xBB68908CD11AEBDC | Since: 1207
     */
    function _0xBB68908CD11AEBDC(persChar) {
        Citizen.invokeNative('0xBB68908CD11AEBDC', persChar);
    }
    perschar._0xBB68908CD11AEBDC = _0xBB68908CD11AEBDC;
    /**
     * No comment provided
     *
     * Hash: 0xCEB40B678E403759 | Since: 1207
     */
    function _0xCEB40B678E403759() {
        return Citizen.invokeNative('0xCEB40B678E403759', undefined);
    }
    perschar._0xCEB40B678E403759 = _0xCEB40B678E403759;
    /**
     * No comment provided
     *
     * Hash: 0xD4B614179BCD0654 | Since: 1207
     */
    function _0xD4B614179BCD0654() {
        Citizen.invokeNative('0xD4B614179BCD0654', undefined);
    }
    perschar._0xD4B614179BCD0654 = _0xD4B614179BCD0654;
    /**
     * No comment provided
     *
     * Hash: 0xD95D777F828B2BBB | Since: 1207
     */
    function _0xD95D777F828B2BBB() {
        Citizen.invokeNative('0xD95D777F828B2BBB', undefined);
    }
    perschar._0xD95D777F828B2BBB = _0xD95D777F828B2BBB;
    /**
     * No comment provided
     *
     * Hash: 0xDC9655D47DEC0353 | Since: 1207
     */
    function getOutfit(persCharHash) {
        if (typeof persCharHash === 'string')
            persCharHash = misc.getHashKey(persCharHash);
        return Citizen.invokeNative('0xDC9655D47DEC0353', persCharHash);
    }
    perschar.getOutfit = getOutfit;
    /**
     * No comment provided
     *
     * Hash: 0xE0E65E0D261F7507 | Since: 1207
     */
    function _0xE0E65E0D261F7507() {
        Citizen.invokeNative('0xE0E65E0D261F7507', undefined);
    }
    perschar._0xE0E65E0D261F7507 = _0xE0E65E0D261F7507;
    /**
     * No comment provided
     *
     * Hash: 0xE4C51A8A3BD1664C | Since: 1207
     */
    function _0xE4C51A8A3BD1664C() {
        return Citizen.invokeNative('0xE4C51A8A3BD1664C', undefined);
    }
    perschar._0xE4C51A8A3BD1664C = _0xE4C51A8A3BD1664C;
    /**
     * No comment provided
     *
     * Hash: 0xEC254C2C9B0F08F1 | Since: 1207
     */
    function _0xEC254C2C9B0F08F1() {
        return Citizen.invokeNative('0xEC254C2C9B0F08F1', undefined, undefined);
    }
    perschar._0xEC254C2C9B0F08F1 = _0xEC254C2C9B0F08F1;
    /**
     * No comment provided
     *
     * Hash: 0xEFC5C6670E0B99BA | Since: 1207
     */
    function _0xEFC5C6670E0B99BA() {
        Citizen.invokeNative('0xEFC5C6670E0B99BA');
    }
    perschar._0xEFC5C6670E0B99BA = _0xEFC5C6670E0B99BA;
    /**
     * No comment provided
     *
     * Hash: 0xF8DE7154F7D1458F | Since: 1207
     */
    function _0xF8DE7154F7D1458F() {
        return Citizen.invokeNative('0xF8DE7154F7D1458F', undefined);
    }
    perschar._0xF8DE7154F7D1458F = _0xF8DE7154F7D1458F;
    /**
     * No comment provided
     *
     * Hash: 0xFCC6DB8DBE709BC8 | Since: 1207
     */
    function _0xFCC6DB8DBE709BC8(persChar) {
        Citizen.invokeNative('0xFCC6DB8DBE709BC8', persChar);
    }
    perschar._0xFCC6DB8DBE709BC8 = _0xFCC6DB8DBE709BC8;
    /**
     * No comment provided
     *
     * Hash: 0x4F76E3676583D951 | Since: 1207
     */
    function createPersistentCharacter(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return CreatePersistentCharacter(hash);
    }
    perschar.createPersistentCharacter = createPersistentCharacter;
    /**
     * No comment provided
     *
     * Hash: 0xFC77C5B44D5FF7C0 | Since: 1207
     */
    function deletePerschar(persChar) {
        DeletePerschar(persChar);
    }
    perschar.deletePerschar = deletePerschar;
    /**
     * No comment provided
     *
     * Hash: 0x7B204F88F6C3D287 | Since: 1207
     */
    function forceDespawn(persChar) {
        ForceDespawnPerschar(persChar);
    }
    perschar.forceDespawn = forceDespawn;
    /**
     * No comment provided
     *
     * Hash: 0x0CADC3A977997472 | Since: 1207
     */
    function forceSpawn(persChar) {
        return ForceSpawnPerschar(persChar, false);
    }
    perschar.forceSpawn = forceSpawn;
    /**
     * No comment provided
     *
     * Hash: 0x32A1E3B83D501096 | Since: 1207
     */
    function getIndexFromPedIndex(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPerscharIndexFromPedIndex(_ped);
    }
    perschar.getIndexFromPedIndex = getIndexFromPedIndex;
    /**
     * No comment provided
     *
     * Hash: 0xA00DF706C60173D1 | Since: 1207
     */
    function getModelName(persCharHash) {
        if (typeof persCharHash === 'string')
            persCharHash = misc.getHashKey(persCharHash);
        return GetPerscharModelName(persCharHash);
    }
    perschar.getModelName = getModelName;
    /**
     * No comment provided
     *
     * Hash: 0x31C70A716CAE1FEE | Since: 1207
     */
    function getPedIndex(persChar) {
        return GetPerscharPedIndex(persChar);
    }
    perschar.getPedIndex = getPedIndex;
    /**
     * No comment provided
     *
     * Hash: 0xEB98B38CA60742D7 | Since: 1207
     */
    function isPersistentCharacterDead(persChar) {
        return IsPersistentCharacterDead(persChar);
    }
    perschar.isPersistentCharacterDead = isPersistentCharacterDead;
    /**
     * No comment provided
     *
     * Hash: 0x800DF3FC913355F3 | Since: 1207
     */
    function isPersistentCharacterValid(persChar) {
        return IsPersistentCharacterValid(persChar);
    }
    perschar.isPersistentCharacterValid = isPersistentCharacterValid;
    /**
     * No comment provided
     *
     * Hash: 0x631CD2D77FDC0316 | Since: 1207
     */
    function retaskPersistentCharacter(persChar) {
        RetaskPersistentCharacter(persChar);
    }
    perschar.retaskPersistentCharacter = retaskPersistentCharacter;
    /**
     * No comment provided
     *
     * Hash: 0x49A8C2CD97815215 | Since: 1207
     */
    function revive(persChar) {
        return RevivePerschar(persChar);
    }
    perschar.revive = revive;
    /**
     * No comment provided
     *
     * Hash: 0x187D65F3AEC5D679 | Since: 1207
     */
    function setSchedule(persCharHash) {
        if (typeof persCharHash === 'string')
            persCharHash = misc.getHashKey(persCharHash);
        return SetPerscharSchedule(persCharHash);
    }
    perschar.setSchedule = setSchedule;
})(perschar || (perschar = {}));
export var persistence;
(function (persistence) {
    /**
     * No comment provided
     *
     * Hash: 0x8245C1F3262F4AC2 | Since: 1207
     */
    function addScenarioLooted(scenario) {
        PersistenceAddScenarioLooted(scenario);
    }
    persistence.addScenarioLooted = addScenarioLooted;
    /**
     * No comment provided
     *
     * Hash: 0x9D16896F0DBE78A2 | Since: 1207
     */
    function removeAllEntitiesInArea(pos, radius) {
        PersistenceRemoveAllEntitiesInArea(pos.x, pos.y, pos.z, radius);
    }
    persistence.removeAllEntitiesInArea = removeAllEntitiesInArea;
    /**
     * No comment provided
     *
     * Hash: 0x065887B694359799 | Since: 1207
     */
    function _0x065887B694359799() {
        Citizen.invokeNative('0x065887B694359799', undefined);
    }
    persistence._0x065887B694359799 = _0x065887B694359799;
    /**
     * No comment provided
     *
     * Hash: 0x1F56FB3FDB4EAF65 | Since: 1207
     */
    function _0x1F56FB3FDB4EAF65() {
        return Citizen.invokeNative('0x1F56FB3FDB4EAF65', undefined);
    }
    persistence._0x1F56FB3FDB4EAF65 = _0x1F56FB3FDB4EAF65;
    /**
     * No comment provided
     *
     * Hash: 0x291CC21D1FB6790E | Since: 1207
     */
    function _0x291CC21D1FB6790E() {
        Citizen.invokeNative('0x291CC21D1FB6790E', undefined);
    }
    persistence._0x291CC21D1FB6790E = _0x291CC21D1FB6790E;
    /**
     * No comment provided
     *
     * Hash: 0x2E545965DF98D476 | Since: 1207
     */
    function _0x2E545965DF98D476() {
        return Citizen.invokeNative('0x2E545965DF98D476', undefined);
    }
    persistence._0x2E545965DF98D476 = _0x2E545965DF98D476;
    /**
     * No comment provided
     *
     * Hash: 0x3CA5E58C9731A16B | Since: 1207
     */
    function _0x3CA5E58C9731A16B() {
        Citizen.invokeNative('0x3CA5E58C9731A16B', undefined, undefined);
    }
    persistence._0x3CA5E58C9731A16B = _0x3CA5E58C9731A16B;
    /**
     * No comment provided
     *
     * Hash: 0x5A79220F6D38D7C3 | Since: 1207
     */
    function _0x5A79220F6D38D7C3() {
        return Citizen.invokeNative('0x5A79220F6D38D7C3', undefined);
    }
    persistence._0x5A79220F6D38D7C3 = _0x5A79220F6D38D7C3;
    /**
     * _PERSISTENCE_*
     *
     * Hash: 0x66DAA3A9274E8E82 | Since: 1232
     */
    function _0x66DAA3A9274E8E82() {
        Citizen.invokeNative('0x66DAA3A9274E8E82');
    }
    persistence._0x66DAA3A9274E8E82 = _0x66DAA3A9274E8E82;
    /**
     * No comment provided
     *
     * Hash: 0x7A1BD123E5CDB6E5 | Since: 1207
     */
    function _0x7A1BD123E5CDB6E5() {
        Citizen.invokeNative('0x7A1BD123E5CDB6E5');
    }
    persistence._0x7A1BD123E5CDB6E5 = _0x7A1BD123E5CDB6E5;
    /**
     * No comment provided
     *
     * Hash: 0x8DE104BEC243A73B | Since: 1207
     */
    function _0x8DE104BEC243A73B() {
        Citizen.invokeNative('0x8DE104BEC243A73B', undefined);
    }
    persistence._0x8DE104BEC243A73B = _0x8DE104BEC243A73B;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xB03140014ACA6C40 | Since: 1207
     */
    function _0xB03140014ACA6C40() {
        Citizen.invokeNative('0xB03140014ACA6C40', undefined, undefined);
    }
    persistence._0xB03140014ACA6C40 = _0xB03140014ACA6C40;
    /**
     * No comment provided
     *
     * Hash: 0xBA2C49EA6A8D24FF | Since: 1207
     */
    function _0xBA2C49EA6A8D24FF() {
        return Citizen.invokeNative('0xBA2C49EA6A8D24FF', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    persistence._0xBA2C49EA6A8D24FF = _0xBA2C49EA6A8D24FF;
    /**
     * No comment provided
     *
     * Hash: 0xCFDA2518F322D836 | Since: 1207
     */
    function _0xCFDA2518F322D836() {
        return Citizen.invokeNative('0xCFDA2518F322D836', undefined);
    }
    persistence._0xCFDA2518F322D836 = _0xCFDA2518F322D836;
    /**
     * No comment provided
     *
     * Hash: 0xDC0A1F0ECEC9F0C0 | Since: 1207
     */
    function _0xDC0A1F0ECEC9F0C0() {
        Citizen.invokeNative('0xDC0A1F0ECEC9F0C0', undefined, undefined);
    }
    persistence._0xDC0A1F0ECEC9F0C0 = _0xDC0A1F0ECEC9F0C0;
    /**
     * No comment provided
     *
     * Hash: 0xE225CEF1901F6108 | Since: 1207
     */
    function _0xE225CEF1901F6108() {
        Citizen.invokeNative('0xE225CEF1901F6108', undefined, undefined);
    }
    persistence._0xE225CEF1901F6108 = _0xE225CEF1901F6108;
    /**
     * No comment provided
     *
     * Hash: 0xF5622FA6ACFCA7DB | Since: 1207
     */
    function _0xF5622FA6ACFCA7DB() {
        Citizen.invokeNative('0xF5622FA6ACFCA7DB', undefined, undefined);
    }
    persistence._0xF5622FA6ACFCA7DB = _0xF5622FA6ACFCA7DB;
    /**
     * No comment provided
     *
     * Hash: 0xFC9806DA9A460093 | Since: 1207
     */
    function _0xFC9806DA9A460093(x1, y1, z1, x2, y2, z2) {
        Citizen.invokeNative('0xFC9806DA9A460093', x1, y1, z1, x2, y2, z2);
    }
    persistence._0xFC9806DA9A460093 = _0xFC9806DA9A460093;
    /**
     * No comment provided
     *
     * Hash: 0xFB7CF1DE938A3E22 | Since: 1207
     */
    function isScenarioMarkedAsLooted(scenario) {
        return PersistenceIsScenarioMarkedAsLooted(scenario);
    }
    persistence.isScenarioMarkedAsLooted = isScenarioMarkedAsLooted;
    /**
     * No comment provided
     *
     * Hash: 0xB6E1A185C2B9319A | Since: 1207
     */
    function isScenarioMarkedAsLootedAtCoords(pos) {
        return PersistenceIsScenarioMarkedAsLootedAtCoords(pos.x, pos.y, pos.z);
    }
    persistence.isScenarioMarkedAsLootedAtCoords = isScenarioMarkedAsLootedAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0x188313616D184213 | Since: 1207
     */
    function isScenarioMarkedAsLootedAtCoordsWithModel(pos, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return PersistenceIsScenarioMarkedAsLootedAtCoordsWithModel(pos.x, pos.y, pos.z, model);
    }
    persistence.isScenarioMarkedAsLootedAtCoordsWithModel = isScenarioMarkedAsLootedAtCoordsWithModel;
    /**
     * Only used in R* script long_update.ysc in script function REFRESH_CLOSEST_TOWN
     *
     * Hash: 0xEFB5F34CC0953B27 | Since: 1207
     */
    function refreshTownVolume(volume) {
        PersistenceRefreshTownVolume(volume);
    }
    persistence.refreshTownVolume = refreshTownVolume;
})(persistence || (persistence = {}));
export var physics;
(function (physics) {
    /**
     * No comment provided
     *
     * Hash: 0x710311ADF0E20730 | Since: 1207
     */
    function activate(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        ActivatePhysics(_entity);
    }
    physics.activate = activate;
    /**
     * There are 19 types of rope, from type = 0 to type = 18
     * Rope definitions are stored in ropedata.xml
     * Rope types 0, 15 and 18 have proper physics for hanging objects (taut, do not sag, small to medium diameter, good aspect for a rope)
     *
     * Hash: 0xE832D760399EB220 | Since: 1207
     */
    function addRope(pos, rot, length, ropeType, maxLength, minLength, rigid, breakWhenShot) {
        return AddRope(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, length, ropeType, maxLength, minLength, 0, false, false, rigid, 0, breakWhenShot, false);
    }
    physics.addRope = addRope;
    /**
     * Attaches entity 1 to entity 2.
     * If you use a boneName (p12/p13) make sure boneId (p15/p16) is set to -1.
     *
     * Hash: 0x3D95EC8B6D940AC3 | Since: 1207
     */
    function attachEntitiesToRope(ropeId, entity1, entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z, length, alwaysZero1, alwaysZero2, boneId1, boneId2, alwaysZero3, alwaysZero4) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        return AttachEntitiesToRope(ropeId, _entity1, _entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z, length, alwaysZero1, alwaysZero2, false, boneId1, boneId2, alwaysZero3, alwaysZero4, false, false);
    }
    physics.attachEntitiesToRope = attachEntitiesToRope;
    /**
     * No comment provided
     *
     * Hash: 0x2E648D16F6E308F3 | Since: 1207
     */
    function breakEntityGlass(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        BreakEntityGlass(_entity, 0, 0, 0, 0, 0, 0, 0, 0, undefined, false);
    }
    physics.breakEntityGlass = breakEntityGlass;
    /**
     * No comment provided
     *
     * Hash: 0xAA5D6B1888E4DB20 | Since: 1207
     */
    function deleteChildRope(ropeId) {
        DeleteChildRope(ropeId);
    }
    physics.deleteChildRope = deleteChildRope;
    /**
     * No comment provided
     *
     * Hash: 0x52B4829281364649 | Since: 1207
     */
    function deleteRope(ropeId) {
        DeleteRope(ropeId);
    }
    physics.deleteRope = deleteRope;
    /**
     * No comment provided
     *
     * Hash: 0xBCF3026912A8647D | Since: 1207
     */
    function detachRopeFromEntity(ropeId, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DetachRopeFromEntity(ropeId, _entity);
    }
    physics.detachRopeFromEntity = detachRopeFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xFD5448BE3111ED96 | Since: 1207
     */
    function doesRopeExist(ropeId) {
        return DoesRopeExist(ropeId);
    }
    physics.doesRopeExist = doesRopeExist;
    /**
     * No comment provided
     *
     * Hash: 0x21BB0FBD3E217C2D | Since: 1207
     */
    function getRopeLastVertexCoord(ropeId) {
        return new Vector3(GetRopeLastVertexCoord(ropeId));
    }
    physics.getRopeLastVertexCoord = getRopeLastVertexCoord;
    /**
     * No comment provided
     *
     * Hash: 0xEA61CA8E80F09E4D | Since: 1207
     */
    function getRopeVertexCoord(ropeId, vertex) {
        return new Vector3(GetRopeVertexCoord(ropeId, vertex));
    }
    physics.getRopeVertexCoord = getRopeVertexCoord;
    /**
     * No comment provided
     *
     * Hash: 0x3655F544CD30F0B5 | Since: 1207
     */
    function getRopeVertexCount(ropeId) {
        return GetRopeVertexCount(ropeId);
    }
    physics.getRopeVertexCount = getRopeVertexCount;
    /**
     * No comment provided
     *
     * Hash: 0xF159A63806BB5BA8 | Since: 1207
     */
    function ropeDrawShadowEnabled(toggle) {
        return RopeDrawShadowEnabled(toggle);
    }
    physics.ropeDrawShadowEnabled = ropeDrawShadowEnabled;
    /**
     * Forces a rope to a certain length.
     *
     * Hash: 0xD009F759A723DB1B | Since: 1207
     */
    function ropeForceLength(ropeId, length) {
        RopeForceLength(ropeId, length);
    }
    physics.ropeForceLength = ropeForceLength;
    /**
     * No comment provided
     *
     * Hash: 0xDC57A637A20006ED | Since: 1207
     */
    function ropeSetUpdateOrder(ropeId) {
        RopeSetUpdateOrder(ropeId, undefined);
    }
    physics.ropeSetUpdateOrder = ropeSetUpdateOrder;
    /**
     * No comment provided
     *
     * Hash: 0xEEA3B200A6FEB65B | Since: 1207
     */
    function setDamping(entity, vertex, value) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetDamping(_entity, vertex, value);
    }
    physics.setDamping = setDamping;
    /**
     * No comment provided
     *
     * Hash: 0x5CEC1A84620E7D5B | Since: 1207
     */
    function setDisableBreaking(_object, toggle) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetDisableBreaking(__object, toggle);
    }
    physics.setDisableBreaking = setDisableBreaking;
    /**
     * No comment provided
     *
     * Hash: 0x01BA3AED21C16CFB | Since: 1207
     */
    function setDisableFragDamage(_object, toggle) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        SetDisableFragDamage(__object, toggle);
    }
    physics.setDisableFragDamage = setDisableFragDamage;
    /**
     * No comment provided
     *
     * Hash: 0x538D1179EC1AA9A9 | Since: 1207
     */
    function startRopeUnwindingFront(ropeId) {
        StartRopeUnwindingFront(ropeId);
    }
    physics.startRopeUnwindingFront = startRopeUnwindingFront;
    /**
     * No comment provided
     *
     * Hash: 0x1461C72C889E343E | Since: 1207
     */
    function startRopeWinding(ropeId) {
        StartRopeWinding(ropeId);
    }
    physics.startRopeWinding = startRopeWinding;
    /**
     * No comment provided
     *
     * Hash: 0xFFF3A50779EFBBB3 | Since: 1207
     */
    function stopRopeUnwindingFront(ropeId) {
        StopRopeUnwindingFront(ropeId);
    }
    physics.stopRopeUnwindingFront = stopRopeUnwindingFront;
    /**
     * No comment provided
     *
     * Hash: 0xCB2D4AB84A19AA7C | Since: 1207
     */
    function stopRopeWinding(ropeId) {
        StopRopeWinding(ropeId);
    }
    physics.stopRopeWinding = stopRopeWinding;
    /**
     * No comment provided
     *
     * Hash: 0x0CB16D05E03FB525 | Since: 1207
     */
    function _0x0CB16D05E03FB525() {
        Citizen.invokeNative('0x0CB16D05E03FB525', undefined);
    }
    physics._0x0CB16D05E03FB525 = _0x0CB16D05E03FB525;
    /**
     * No comment provided
     *
     * Hash: 0x1D97DA8ACB5D2582 | Since: 1207
     */
    function _0x1D97DA8ACB5D2582(ropeId) {
        Citizen.invokeNative('0x1D97DA8ACB5D2582', ropeId, 0);
    }
    physics._0x1D97DA8ACB5D2582 = _0x1D97DA8ACB5D2582;
    /**
     * No comment provided
     *
     * Hash: 0x1FC92BDBA1106BD2 | Since: 1207
     */
    function _0x1FC92BDBA1106BD2(ropeId) {
        Citizen.invokeNative('0x1FC92BDBA1106BD2', ropeId, 0);
    }
    physics._0x1FC92BDBA1106BD2 = _0x1FC92BDBA1106BD2;
    /**
     * No comment provided
     *
     * Hash: 0x21D0890D88DFB0B0 | Since: 1207
     */
    function _0x21D0890D88DFB0B0(ropeId) {
        Citizen.invokeNative('0x21D0890D88DFB0B0', ropeId, false, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    physics._0x21D0890D88DFB0B0 = _0x21D0890D88DFB0B0;
    /**
     * No comment provided
     *
     * Hash: 0x31160EC47E7C9549 | Since: 1207
     */
    function _0x31160EC47E7C9549() {
        Citizen.invokeNative('0x31160EC47E7C9549', undefined, undefined);
    }
    physics._0x31160EC47E7C9549 = _0x31160EC47E7C9549;
    /**
     * No comment provided
     *
     * Hash: 0x32F4DBFDFCCCC735 | Since: 1207
     */
    function _0x32F4DBFDFCCCC735() {
        Citizen.invokeNative('0x32F4DBFDFCCCC735', undefined, undefined, undefined);
    }
    physics._0x32F4DBFDFCCCC735 = _0x32F4DBFDFCCCC735;
    /**
     * No comment provided
     *
     * Hash: 0x3900491C0D61ED4B | Since: 1207
     */
    function _0x3900491C0D61ED4B() {
        Citizen.invokeNative('0x3900491C0D61ED4B', undefined, undefined);
    }
    physics._0x3900491C0D61ED4B = _0x3900491C0D61ED4B;
    /**
     * No comment provided
     *
     * Hash: 0x423C6B1F3786D28B | Since: 1207
     */
    function _0x423C6B1F3786D28B() {
        Citizen.invokeNative('0x423C6B1F3786D28B', undefined, undefined);
    }
    physics._0x423C6B1F3786D28B = _0x423C6B1F3786D28B;
    /**
     * No comment provided
     *
     * Hash: 0x461FCBDEB4D06717 | Since: 1207
     */
    function _0x461FCBDEB4D06717(ropeId) {
        Citizen.invokeNative('0x461FCBDEB4D06717', ropeId, false);
    }
    physics._0x461FCBDEB4D06717 = _0x461FCBDEB4D06717;
    /**
     * No comment provided
     *
     * Hash: 0x483D4E917B0D35A9 | Since: 1207
     */
    function _0x483D4E917B0D35A9() {
        Citizen.invokeNative('0x483D4E917B0D35A9', undefined, undefined);
    }
    physics._0x483D4E917B0D35A9 = _0x483D4E917B0D35A9;
    /**
     * No comment provided
     *
     * Hash: 0x522FA3F490E2F7AC | Since: 1207
     */
    function _0x522FA3F490E2F7AC(ropeId) {
        Citizen.invokeNative('0x522FA3F490E2F7AC', ropeId, undefined, undefined);
    }
    physics._0x522FA3F490E2F7AC = _0x522FA3F490E2F7AC;
    /**
     * No comment provided
     *
     * Hash: 0x5A989B7EE3672A56 | Since: 1207
     */
    function _0x5A989B7EE3672A56() {
        Citizen.invokeNative('0x5A989B7EE3672A56', undefined, undefined);
    }
    physics._0x5A989B7EE3672A56 = _0x5A989B7EE3672A56;
    /**
     * No comment provided
     *
     * Hash: 0x5BD7457221CC5FF4 | Since: 1207
     */
    function _0x5BD7457221CC5FF4() {
        Citizen.invokeNative('0x5BD7457221CC5FF4', undefined, undefined);
    }
    physics._0x5BD7457221CC5FF4 = _0x5BD7457221CC5FF4;
    /**
     * No comment provided
     *
     * Hash: 0x5E981C764DF33117 | Since: 1207
     */
    function _0x5E981C764DF33117() {
        Citizen.invokeNative('0x5E981C764DF33117', undefined, undefined);
    }
    physics._0x5E981C764DF33117 = _0x5E981C764DF33117;
    /**
     * No comment provided
     *
     * Hash: 0x69C810B72291D831 | Since: 1207
     */
    function _0x69C810B72291D831() {
        Citizen.invokeNative('0x69C810B72291D831', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    physics._0x69C810B72291D831 = _0x69C810B72291D831;
    /**
     * No comment provided
     *
     * Hash: 0x6EA0E93CFFA472CC | Since: 1207
     */
    function _0x6EA0E93CFFA472CC() {
        Citizen.invokeNative('0x6EA0E93CFFA472CC', undefined);
    }
    physics._0x6EA0E93CFFA472CC = _0x6EA0E93CFFA472CC;
    /**
     * No comment provided
     *
     * Hash: 0x751DF00EEFF122E3 | Since: 1207
     */
    function _0x751DF00EEFF122E3() {
        Citizen.invokeNative('0x751DF00EEFF122E3', undefined);
    }
    physics._0x751DF00EEFF122E3 = _0x751DF00EEFF122E3;
    /**
     * No comment provided
     *
     * Hash: 0x76BAD9D538BCA1AA | Since: 1207
     */
    function _0x76BAD9D538BCA1AA(ropeId) {
        Citizen.invokeNative('0x76BAD9D538BCA1AA', ropeId, 0);
    }
    physics._0x76BAD9D538BCA1AA = _0x76BAD9D538BCA1AA;
    /**
     * No comment provided
     *
     * Hash: 0x814D453FCFDF119F | Since: 1207
     */
    function _0x814D453FCFDF119F() {
        Citizen.invokeNative('0x814D453FCFDF119F', undefined, undefined, undefined);
    }
    physics._0x814D453FCFDF119F = _0x814D453FCFDF119F;
    /**
     * _ROPE_SET_*
     *
     * Hash: 0x8D59079C37C21D78 | Since: 1207
     */
    function _0x8D59079C37C21D78(ropeId) {
        Citizen.invokeNative('0x8D59079C37C21D78', ropeId, 0);
    }
    physics._0x8D59079C37C21D78 = _0x8D59079C37C21D78;
    /**
     * No comment provided
     *
     * Hash: 0x8EEDFD8921389928 | Since: 1207
     */
    function _0x8EEDFD8921389928() {
        Citizen.invokeNative('0x8EEDFD8921389928', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    physics._0x8EEDFD8921389928 = _0x8EEDFD8921389928;
    /**
     * No comment provided
     *
     * Hash: 0x9C24846D0A4A2776 | Since: 1207
     */
    function _0x9C24846D0A4A2776() {
        Citizen.invokeNative('0x9C24846D0A4A2776', undefined);
    }
    physics._0x9C24846D0A4A2776 = _0x9C24846D0A4A2776;
    /**
     * No comment provided
     *
     * Hash: 0xB40EA9E0D2E2F7F3 | Since: 1207
     */
    function _0xB40EA9E0D2E2F7F3(ropeId) {
        Citizen.invokeNative('0xB40EA9E0D2E2F7F3', ropeId, 0);
    }
    physics._0xB40EA9E0D2E2F7F3 = _0xB40EA9E0D2E2F7F3;
    /**
     * No comment provided
     *
     * Hash: 0xB7469CB9AC3C0FD4 | Since: 1207
     */
    function _0xB7469CB9AC3C0FD4() {
        Citizen.invokeNative('0xB7469CB9AC3C0FD4', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    physics._0xB7469CB9AC3C0FD4 = _0xB7469CB9AC3C0FD4;
    /**
     * No comment provided
     *
     * Hash: 0xBB3E9B073E66C3C9 | Since: 1207
     */
    function _0xBB3E9B073E66C3C9(ropeId) {
        Citizen.invokeNative('0xBB3E9B073E66C3C9', ropeId, false, false, false, false);
    }
    physics._0xBB3E9B073E66C3C9 = _0xBB3E9B073E66C3C9;
    /**
     * No comment provided
     *
     * Hash: 0xBDDA142759307528 | Since: 1207
     */
    function _0xBDDA142759307528() {
        Citizen.invokeNative('0xBDDA142759307528', undefined);
    }
    physics._0xBDDA142759307528 = _0xBDDA142759307528;
    /**
     * No comment provided
     *
     * Hash: 0xC64E7A62632AD2FE | Since: 1207
     */
    function _0xC64E7A62632AD2FE(ropeId) {
        Citizen.invokeNative('0xC64E7A62632AD2FE', ropeId, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    physics._0xC64E7A62632AD2FE = _0xC64E7A62632AD2FE;
    /**
     * No comment provided
     *
     * Hash: 0xC89E7410A93AC19A | Since: 1207
     */
    function _0xC89E7410A93AC19A(ropeId) {
        Citizen.invokeNative('0xC89E7410A93AC19A', ropeId, 0);
    }
    physics._0xC89E7410A93AC19A = _0xC89E7410A93AC19A;
    /**
     * No comment provided
     *
     * Hash: 0xD699E688B49C0FD2 | Since: 1207
     */
    function _0xD699E688B49C0FD2(ropeId) {
        Citizen.invokeNative('0xD699E688B49C0FD2', ropeId, 0, 0, 0, false);
    }
    physics._0xD699E688B49C0FD2 = _0xD699E688B49C0FD2;
    /**
     * No comment provided
     *
     * Hash: 0xDEDE679ED29DD4E7 | Since: 1207
     */
    function _0xDEDE679ED29DD4E7(ropeId) {
        Citizen.invokeNative('0xDEDE679ED29DD4E7', ropeId, false);
    }
    physics._0xDEDE679ED29DD4E7 = _0xDEDE679ED29DD4E7;
    /**
     * No comment provided
     *
     * Hash: 0xE54BF2CE6C7D23A9 | Since: 1207
     */
    function _0xE54BF2CE6C7D23A9(ropeId, pos) {
        Citizen.invokeNative('0xE54BF2CE6C7D23A9', ropeId, 0, pos.x, pos.y, pos.z);
    }
    physics._0xE54BF2CE6C7D23A9 = _0xE54BF2CE6C7D23A9;
    /**
     * No comment provided
     *
     * Hash: 0xEAF529446488EB18 | Since: 1207
     */
    function _0xEAF529446488EB18() {
        Citizen.invokeNative('0xEAF529446488EB18', undefined);
    }
    physics._0xEAF529446488EB18 = _0xEAF529446488EB18;
    /**
     * No comment provided
     *
     * Hash: 0xF1EA2A881EB7F2CD | Since: 1207
     */
    function _0xF1EA2A881EB7F2CD(ropeId) {
        Citizen.invokeNative('0xF1EA2A881EB7F2CD', ropeId, false);
    }
    physics._0xF1EA2A881EB7F2CD = _0xF1EA2A881EB7F2CD;
    /**
     * No comment provided
     *
     * Hash: 0xF27F1A8DE4F50A1B | Since: 1207
     */
    function _0xF27F1A8DE4F50A1B() {
        Citizen.invokeNative('0xF27F1A8DE4F50A1B', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    physics._0xF27F1A8DE4F50A1B = _0xF27F1A8DE4F50A1B;
    /**
     * No comment provided
     *
     * Hash: 0xF8CA39D5C0D1D9A1 | Since: 1207
     */
    function _0xF8CA39D5C0D1D9A1() {
        Citizen.invokeNative('0xF8CA39D5C0D1D9A1', undefined, undefined);
    }
    physics._0xF8CA39D5C0D1D9A1 = _0xF8CA39D5C0D1D9A1;
    /**
     * No comment provided
     *
     * Hash: 0xFB9153A54AC713E8 | Since: 1207
     */
    function _0xFB9153A54AC713E8(ropeId) {
        Citizen.invokeNative('0xFB9153A54AC713E8', ropeId, false);
    }
    physics._0xFB9153A54AC713E8 = _0xFB9153A54AC713E8;
    /**
     * No comment provided
     *
     * Hash: 0xE9C59F6809373A99 | Since: 1207
     */
    function addRope2(pos, rot, length, ropeType, isNetworked) {
        return AddRope2(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, length, ropeType, isNetworked, 0, 0);
    }
    physics.addRope2 = addRope2;
    /**
     * No comment provided
     *
     * Hash: 0xE9CD9A67834985A7 | Since: 1207
     */
    function attachEntitesToRope3(ropeId, entity1, entity2) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        AttachEntitesToRope3(ropeId, _entity1, _entity2, 0, 0, 0, 0, 0, 0, undefined, undefined);
    }
    physics.attachEntitesToRope3 = attachEntitesToRope3;
    /**
     * Attaches a rope to two entities: binds two bones from two entities; one entity can be an object, i.e. a suspension point, the other an NPC bone
     *
     * Hash: 0x462FF2A432733A44 | Since: 1207
     */
    function attachEntitiesToRope2(ropeId, entity1, entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        return AttachEntitiesToRope2(ropeId, _entity1, _entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z);
    }
    physics.attachEntitiesToRope2 = attachEntitiesToRope2;
    /**
     * ropeTop returns top half of rope, ropeBottom returns bottom half of rope
     *
     * Hash: 0x4CFA2B7FAE115ECB | Since: 1207
     */
    function breakRope(offsetX, offsetY, offsetZ) {
        return BreakRope(offsetX, offsetY, offsetZ, 0);
    }
    physics.breakRope = breakRope;
    /**
     * Combining this with ADD_ROPE enables winding
     * p1: mostly empty (0)
     * ropeModelType: RB_L_Wrist02, RB_R_Wrist02, ropeAttach, noose01x_Rope_03, SKEL_Neck0, SKEL_L_FOOT, SKEL_Neck1, Root_s_meatbit_Chunck_Xlarge01x
     * _CREATE_*
     *
     * Hash: 0x3C6490D940FF5D0B | Since: 1207
     */
    function createRopeWindingAbility(ropeId, length) {
        return CreateRopeWindingAbility(ropeId, length, false);
    }
    physics.createRopeWindingAbility = createRopeWindingAbility;
    /**
     * No comment provided
     *
     * Hash: 0x06AADE17334F7A40 | Since: 1207
     */
    function hitchHorse(horse, pos) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        HitchHorse(_horse, pos.x, pos.y, pos.z);
    }
    physics.hitchHorse = hitchHorse;
    /**
     * No comment provided
     *
     * Hash: 0x9B4F7E3E4F9C77B3 | Since: 1207
     */
    function isRopeAttachedToEntity(ropeId, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsRopeAttachedToEntity(ropeId, _entity);
    }
    physics.isRopeAttachedToEntity = isRopeAttachedToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x79C2BEC82CFD7F7F | Since: 1207
     */
    function isRopeBroken(ropeId) {
        return IsRopeBroken(ropeId);
    }
    physics.isRopeBroken = isRopeBroken;
    /**
     * No comment provided
     *
     * Hash: 0x6076213101A47B3B | Since: 1207
     */
    function releaseRope(ropeId) {
        ReleaseRope(ropeId);
    }
    physics.releaseRope = releaseRope;
    /**
     * No comment provided
     *
     * Hash: 0x7A54D82227A139DB | Since: 1207
     */
    function ropeChangeVisibility(visible) {
        return RopeChangeVisibility(visible);
    }
    physics.ropeChangeVisibility = ropeChangeVisibility;
    /**
     * No comment provided
     *
     * Hash: 0xEE360CFC80C8B2BC | Since: 1311
     */
    function ropeGetBreakerOfRope(ropeId) {
        return RopeGetBreakerOfRope(ropeId);
    }
    physics.ropeGetBreakerOfRope = ropeGetBreakerOfRope;
    /**
     * No comment provided
     *
     * Hash: 0x3D69537039F8D824 | Since: 1207
     */
    function ropeGetForcedLength(ropeId) {
        return RopeGetForcedLength(ropeId);
    }
    physics.ropeGetForcedLength = ropeGetForcedLength;
    /**
     * No comment provided
     *
     * Hash: 0x00F611A794A3C36E | Since: 1207
     */
    function startRopeUnwindingBack(ropeId) {
        StartRopeUnwindingBack(ropeId);
    }
    physics.startRopeUnwindingBack = startRopeUnwindingBack;
    /**
     * No comment provided
     *
     * Hash: 0x10DAA76CB8A201A1 | Since: 1207
     */
    function stopRopeUnwindingBack(ropeId) {
        StopRopeUnwindingBack(ropeId);
    }
    physics.stopRopeUnwindingBack = stopRopeUnwindingBack;
    /**
     * No comment provided
     *
     * Hash: 0x0348469DAA17576C | Since: 1207
     */
    function unhitchHorse(horse) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        UnhitchHorse(_horse);
    }
    physics.unhitchHorse = unhitchHorse;
})(physics || (physics = {}));
export var player;
(function (player_1) {
    /**
     * No comment provided
     *
     * Hash: 0x09C28F828EE674FA | Since: 1207
     */
    function boostHorseSpeedForTime(player, speedBoost, duration) {
        const _player = player instanceof Player ? player.localId() : player;
        BoostPlayerHorseSpeedForTime(_player, speedBoost, duration);
    }
    player_1.boostHorseSpeedForTime = boostHorseSpeedForTime;
    /**
     * No comment provided
     *
     * Hash: 0x2DF170B1185AF777 | Since: 1207
     */
    function canStartMission(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return CanPlayerStartMission(_player);
    }
    player_1.canStartMission = canStartMission;
    /**
     * No comment provided
     *
     * Hash: 0x0361096D6CE4372C | Since: 1207
     */
    function clearHasDamagedAtLeastOneNonAnimalPed(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ClearPlayerHasDamagedAtLeastOneNonAnimalPed(_player);
    }
    player_1.clearHasDamagedAtLeastOneNonAnimalPed = clearHasDamagedAtLeastOneNonAnimalPed;
    /**
     * No comment provided
     *
     * Hash: 0x270B63A641BE32F2 | Since: 1207
     */
    function clearHasDamagedAtLeastOnePed(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ClearPlayerHasDamagedAtLeastOnePed(_player);
    }
    player_1.clearHasDamagedAtLeastOnePed = clearHasDamagedAtLeastOnePed;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x4E4B996C928C7AA6 | Since: 1207
     */
    function clearWantedLevel(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ClearPlayerWantedLevel(_player);
    }
    player_1.clearWantedLevel = clearWantedLevel;
    /**
     * Inhibits the player from using any method of combat including melee and firearms.
     *
     * NOTE: Only disables the firing for one frame
     *
     * Hash: 0x2970929FD5F9FC89 | Since: 1207
     */
    function disableFiring(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        DisablePlayerFiring(_player, toggle);
    }
    player_1.disableFiring = disableFiring;
    /**
     * No comment provided
     *
     * Hash: 0x62ED71E133B6C9F1 | Since: 1207
     */
    function eagleEyeSetCustomEntityTint(entity, red, green, blue) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        EagleEyeSetCustomEntityTint(_entity, red, green, blue);
    }
    player_1.eagleEyeSetCustomEntityTint = eagleEyeSetCustomEntityTint;
    /**
     * No comment provided
     *
     * Hash: 0x768C017FB878E4F4 | Since: 1207
     */
    function forceCleanup(cleanupFlags) {
        ForceCleanup(cleanupFlags);
    }
    player_1.forceCleanup = forceCleanup;
    /**
     * No comment provided
     *
     * Hash: 0xDAACAF8B687F2353 | Since: 1207
     */
    function forceCleanupForAllThreadsWithThisName(cleanupFlags) {
        return ForceCleanupForAllThreadsWithThisName(cleanupFlags);
    }
    player_1.forceCleanupForAllThreadsWithThisName = forceCleanupForAllThreadsWithThisName;
    /**
     * No comment provided
     *
     * Hash: 0xF4C9512A2F0A3031 | Since: 1207
     */
    function forceCleanupForThreadWithThisId(id, cleanupFlags) {
        ForceCleanupForThreadWithThisId(id, cleanupFlags);
    }
    player_1.forceCleanupForThreadWithThisId = forceCleanupForThreadWithThisId;
    /**
     * No comment provided
     *
     * Hash: 0x84E8E29EBD4A46D2 | Since: 1207
     */
    function getCauseOfMostRecentForceCleanup() {
        return GetCauseOfMostRecentForceCleanup();
    }
    player_1.getCauseOfMostRecentForceCleanup = getCauseOfMostRecentForceCleanup;
    /**
     * Returns name hash (name) and outHash includes the type.
     *
     * Hash: 0x0139637A3BFF8B6D | Since: 1207
     */
    function getDiscoverableNameHashAndTypeForEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetDiscoverableNameHashAndTypeForEntity(_entity);
    }
    player_1.getDiscoverableNameHashAndTypeForEntity = getDiscoverableNameHashAndTypeForEntity;
    /**
     * No comment provided
     *
     * Hash: 0xA6817C110B830EAD | Since: 1207
     */
    function getEntityIsFreeAimingAt(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetEntityPlayerIsFreeAimingAt(_player);
    }
    player_1.getEntityIsFreeAimingAt = getEntityIsFreeAimingAt;
    /**
     * No comment provided
     *
     * Hash: 0x354F689C4FFAAB37 | Since: 1207
     */
    function getHasDiscoveredCharacterNameMp(discoveryHash) {
        if (typeof discoveryHash === 'string')
            discoveryHash = misc.getHashKey(discoveryHash);
        return GetHasPlayerDiscoveredCharacterNameMp(discoveryHash);
    }
    player_1.getHasDiscoveredCharacterNameMp = getHasDiscoveredCharacterNameMp;
    /**
     * No comment provided
     *
     * Hash: 0x51BEA356B1C60225 | Since: 1207
     */
    function getIsUiPromptActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetIsPlayerUiPromptActive(_player, 0);
    }
    player_1.getIsUiPromptActive = getIsUiPromptActive;
    /**
     * Gets the maximum wanted level the player can get.
     * Ranges from 0 to 5.
     *
     * Hash: 0xD04CFAD1E2B7984A | Since: 1207
     */
    function getMaxWantedLevel() {
        return GetMaxWantedLevel();
    }
    player_1.getMaxWantedLevel = getMaxWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0xF49F14462F0AE27C | Since: 1207
     */
    function getMountOwnedBy(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetMountOwnedByPlayer(_player);
    }
    player_1.getMountOwnedBy = getMountOwnedBy;
    /**
     * No comment provided
     *
     * Hash: 0x2F96E7720B0B19EA | Since: 1207
     */
    function getsLastVehicle() {
        return GetPlayersLastVehicle();
    }
    player_1.getsLastVehicle = getsLastVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xD7ECC25E176ECBA5 | Since: 1207
     */
    function getCurrentStealthNoise(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerCurrentStealthNoise(_player);
    }
    player_1.getCurrentStealthNoise = getCurrentStealthNoise;
    /**
     * Returns the group ID the player is member of.
     *
     * Hash: 0x9BAB31815159ABCF | Since: 1207
     */
    function getGroup(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerGroup(_player);
    }
    player_1.getGroup = getGroup;
    /**
     * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
     *
     * Hash: 0x47E385B0D957C8D4 | Since: 1207
     */
    function getIndex() {
        return GetPlayerIndex();
    }
    player_1.getIndex = getIndex;
    /**
     * No comment provided
     *
     * Hash: 0x3EE1F7A8C32F24E1 | Since: 1207
     */
    function getInteractionTargetEntity(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerInteractionTargetEntity(_player, false, false);
    }
    player_1.getInteractionTargetEntity = getInteractionTargetEntity;
    /**
     * Returns the player's invincibility status.
     *
     * Hash: 0x0CBBCB2CCFA7DC4E | Since: 1207
     */
    function getInvincible(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerInvincible(_player);
    }
    player_1.getInvincible = getInvincible;
    /**
     * No comment provided
     *
     * Hash: 0x7124FD9AC0E01BA0 | Since: 1207
     */
    function getName(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerName(_player);
    }
    player_1.getName = getName;
    /**
     * No comment provided
     *
     * Hash: 0x275F255ED201B937 | Since: 1207
     */
    function getPed(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerPed(_player);
    }
    player_1.getPed = getPed;
    /**
     * `Does the same like PLAYER::GET_PLAYER_PED`
     *
     * Hash: 0x5C880F9056D784C8 | Since: 1207
     */
    function getPedScriptIndex(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerPedScriptIndex(_player);
    }
    player_1.getPedScriptIndex = getPedScriptIndex;
    /**
     * No comment provided
     *
     * Hash: 0xFB6EB8785F808551 | Since: 1207
     */
    function getReceivedBattleEventRecently(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerReceivedBattleEventRecently(_player, 0, false);
    }
    player_1.getReceivedBattleEventRecently = getReceivedBattleEventRecently;
    /**
     * No comment provided
     *
     * Hash: 0xAE663DDD99C8A670 | Since: 1207
     */
    function getTargetEntity(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerTargetEntity(_player);
    }
    player_1.getTargetEntity = getTargetEntity;
    /**
     * Gets the player's team.
     * Returns -1 in singleplayer.
     *
     * Hash: 0xB464EB6A40C7975B | Since: 1207
     */
    function getTeam(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerTeam(_player);
    }
    player_1.getTeam = getTeam;
    /**
     * No comment provided
     *
     * Hash: 0xABC532F9098BFD9D | Since: 1207
     */
    function getWantedLevel(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerWantedLevel(_player);
    }
    player_1.getWantedLevel = getWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x36E3D8B5A6552FE8 | Since: 1207
     */
    function getTargetCharacterNameForLocal(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTargetCharacterNameForLocalPlayer(_ped);
    }
    player_1.getTargetCharacterNameForLocal = getTargetCharacterNameForLocal;
    /**
     * No comment provided
     *
     * Hash: 0x0335106F3ACABBED | Since: 1207
     */
    function getTargetCharacterNameScriptOverrideHash(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTargetCharacterNameScriptOverrideHash(_ped);
    }
    player_1.getTargetCharacterNameScriptOverrideHash = getTargetCharacterNameScriptOverrideHash;
    /**
     * No comment provided
     *
     * Hash: 0x755E08680F21EF30 | Since: 1207
     */
    function getTargetCharacterNameScriptOverrideRawString(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTargetCharacterNameScriptOverrideRawString(_ped);
    }
    player_1.getTargetCharacterNameScriptOverrideRawString = getTargetCharacterNameScriptOverrideRawString;
    /**
     * No comment provided
     *
     * Hash: 0x80B00EB26D9521C7 | Since: 1207
     */
    function getWantedLevelRadius() {
        return GetWantedLevelRadius(0);
    }
    player_1.getWantedLevelRadius = getWantedLevelRadius;
    /**
     * No comment provided
     *
     * Hash: 0x1B1A3B358F7D8F07 | Since: 1207
     */
    function getWantedLevelThreshold(wantedLevel) {
        return GetWantedLevelThreshold(wantedLevel);
    }
    player_1.getWantedLevelThreshold = getWantedLevelThreshold;
    /**
     * No comment provided
     *
     * Hash: 0xC11469DCA6FC3BB5 | Since: 1207
     */
    function hasForceCleanupOccurred(cleanupFlags) {
        return HasForceCleanupOccurred(cleanupFlags);
    }
    player_1.hasForceCleanupOccurred = hasForceCleanupOccurred;
    /**
     * No comment provided
     *
     * Hash: 0xC932F57F31EA9152 | Since: 1207
     */
    function hasBeenSpottedInStolenVehicle(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return HasPlayerBeenSpottedInStolenVehicle(_player);
    }
    player_1.hasBeenSpottedInStolenVehicle = hasBeenSpottedInStolenVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x16C8D205DD5A2E90 | Since: 1207
     */
    function hasDamagedAtLeastOneNonAnimalPed(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return HasPlayerDamagedAtLeastOneNonAnimalPed(_player);
    }
    player_1.hasDamagedAtLeastOneNonAnimalPed = hasDamagedAtLeastOneNonAnimalPed;
    /**
     * No comment provided
     *
     * Hash: 0xDA4A4B9B96E20092 | Since: 1207
     */
    function hasDamagedAtLeastOnePed(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return HasPlayerDamagedAtLeastOnePed(_player);
    }
    player_1.hasDamagedAtLeastOnePed = hasDamagedAtLeastOnePed;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x58FF971FC8F2702C | Since: 1207
     */
    function intToParticipantindex(value) {
        return IntToParticipantindex(value);
    }
    player_1.intToParticipantindex = intToParticipantindex;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x748B3A65C2604C33 | Since: 1207
     */
    function intToindex(value) {
        return IntToPlayerindex(value);
    }
    player_1.intToindex = intToindex;
    /**
     * Return true while player is being arrested / busted.
     *
     * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
     *
     * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
     *
     * Hash: 0xC8183AE963C58374 | Since: 1207
     */
    function isBeingArrested(player, atArresting) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerBeingArrested(_player, atArresting);
    }
    player_1.isBeingArrested = isBeingArrested;
    /**
     * Returns TRUE if the player ('s ped) is climbing at the moment.
     *
     * Hash: 0xB8A70C22FD48197A | Since: 1207
     */
    function isClimbing(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerClimbing(_player);
    }
    player_1.isClimbing = isClimbing;
    /**
     * Returns whether the player can control himself.
     *
     * Hash: 0x7964097FCE4C244B | Since: 1207
     */
    function isControlOn(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerControlOn(_player);
    }
    player_1.isControlOn = isControlOn;
    /**
     * No comment provided
     *
     * Hash: 0x2E9C3FCB6798F397 | Since: 1207
     */
    function isDead(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerDead(_player);
    }
    player_1.isDead = isDead;
    /**
     * Gets a value indicating whether the specified player is currently aiming freely.
     *
     * Hash: 0x936F967D4BE1CE9D | Since: 1207
     */
    function isFreeAiming(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerFreeAiming(_player);
    }
    player_1.isFreeAiming = isFreeAiming;
    /**
     * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
     *
     * Hash: 0x8C67C11C68713D25 | Since: 1207
     */
    function isFreeAimingAtEntity(player, entity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsPlayerFreeAimingAtEntity(_player, _entity);
    }
    player_1.isFreeAimingAtEntity = isFreeAimingAtEntity;
    /**
     * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
     *
     * Hash: 0xBFFB35986CAAE58C | Since: 1207
     */
    function isPlaying(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerPlaying(_player);
    }
    player_1.isPlaying = isPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xAA67BCB0097F2FA3 | Since: 1207
     */
    function isReadyForCutscene(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerReadyForCutscene(_player);
    }
    player_1.isReadyForCutscene = isReadyForCutscene;
    /**
     * Returns true if the player is riding a train.
     *
     * Hash: 0x2FB0ACADA6A238DD | Since: 1207
     */
    function isRidingTrain(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerRidingTrain(_player);
    }
    player_1.isRidingTrain = isRidingTrain;
    /**
     * No comment provided
     *
     * Hash: 0xB78350754157C00F | Since: 1207
     */
    function isScriptControlOn(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerScriptControlOn(_player);
    }
    player_1.isScriptControlOn = isScriptControlOn;
    /**
     * No comment provided
     *
     * Hash: 0x4605C66E0F935F83 | Since: 1207
     */
    function isTargettingAnything(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerTargettingAnything(_player);
    }
    player_1.isTargettingAnything = isTargettingAnything;
    /**
     * No comment provided
     *
     * Hash: 0x27F89FDC16688A7A | Since: 1207
     */
    function isTargettingEntity(player, entity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsPlayerTargettingEntity(_player, _entity, false);
    }
    player_1.isTargettingEntity = isTargettingEntity;
    /**
     * No comment provided
     *
     * Hash: 0x085EEAEB8783FEB5 | Since: 1207
     */
    function isTeleportActive() {
        return IsPlayerTeleportActive();
    }
    player_1.isTeleportActive = isTeleportActive;
    /**
     * No comment provided
     *
     * Hash: 0xE1C0AD4C24324C36 | Since: 1207
     */
    function isWantedLevelGreater(player, wantedLevel) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerWantedLevelGreater(_player, wantedLevel);
    }
    player_1.isWantedLevelGreater = isWantedLevelGreater;
    /**
     * No comment provided
     *
     * Hash: 0x908258B6209E71F7 | Since: 1207
     */
    function isSystemUiBeingDisplayed() {
        return IsSystemUiBeingDisplayed();
    }
    player_1.isSystemUiBeingDisplayed = isSystemUiBeingDisplayed;
    /**
     * Does exactly the same thing as PLAYER_ID()
     *
     * Hash: 0x8A9386F0749A17FA | Since: 1207
     */
    function networkIdToInt() {
        return NetworkPlayerIdToInt();
    }
    player_1.networkIdToInt = networkIdToInt;
    /**
     * This returns YOUR 'identity' as a Player type.
     *
     * Always returns 0 in story mode.
     *
     * Hash: 0x217E9DC48139933D | Since: 1207
     */
    function id() {
        return PlayerId();
    }
    player_1.id = id;
    /**
     * Returns current player ped
     *
     * Hash: 0x096275889B8E0EE0 | Since: 1207
     */
    function pedId() {
        return PlayerPedId();
    }
    player_1.pedId = pedId;
    /**
     * No comment provided
     *
     * Hash: 0xCBCCF73FFA69CC6B | Since: 1207
     */
    function reportPoliceSpotted(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ReportPoliceSpottedPlayer(_player);
    }
    player_1.reportPoliceSpotted = reportPoliceSpotted;
    /**
     * No comment provided
     *
     * Hash: 0x5CE5CACC01D0F985 | Since: 1207
     */
    function resetLawResponseDelayOverride() {
        ResetLawResponseDelayOverride();
    }
    player_1.resetLawResponseDelayOverride = resetLawResponseDelayOverride;
    /**
     * No comment provided
     *
     * Hash: 0x12917931C31F1750 | Since: 1207
     */
    function resetArrestState(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ResetPlayerArrestState(_player);
    }
    player_1.resetArrestState = resetArrestState;
    /**
     * No comment provided
     *
     * Hash: 0x61A2EECAB274829B | Since: 1207
     */
    function resetInputGait(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ResetPlayerInputGait(_player);
    }
    player_1.resetInputGait = resetInputGait;
    /**
     * No comment provided
     *
     * Hash: 0x062D14F18E8B0CAE | Since: 1207
     */
    function resetWantedLevelDifficulty(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ResetWantedLevelDifficulty(_player);
    }
    player_1.resetWantedLevelDifficulty = resetWantedLevelDifficulty;
    /**
     * No comment provided
     *
     * Hash: 0xC41F4B6E23FE6A4A | Since: 1207
     */
    function restoreStamina(player) {
        const _player = player instanceof Player ? player.localId() : player;
        RestorePlayerStamina(_player, 0);
    }
    player_1.restoreStamina = restoreStamina;
    /**
     * This can be between 1.0f - 50.0f
     *
     * Hash: 0x5DA6500FE849DA16 | Since: 1207
     */
    function setAirDragMultiplierForsVehicle(player, multiplier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetAirDragMultiplierForPlayersVehicle(_player, multiplier);
    }
    player_1.setAirDragMultiplierForsVehicle = setAirDragMultiplierForsVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x16752DAA7E6D3F72 | Since: 1207
     */
    function setAllNeutralRandomPedsFleeThisFrame(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SetAllNeutralRandomPedsFleeThisFrame(_player);
    }
    player_1.setAllNeutralRandomPedsFleeThisFrame = setAllNeutralRandomPedsFleeThisFrame;
    /**
     * Sets whether all random peds will run away from player if they are agitated (threatened) (bool=true), or some peds can stand up for themselves (bool=false).
     *
     * Hash: 0xE705309B8C6445A4 | Since: 1207
     */
    function setAllRandomPedsFlee(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetAllRandomPedsFlee(_player, toggle);
    }
    player_1.setAllRandomPedsFlee = setAllRandomPedsFlee;
    /**
     * No comment provided
     *
     * Hash: 0xD5C198A62F1DEB0A | Since: 1207
     */
    function setAllRandomPedsFleeThisFrame(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SetAllRandomPedsFleeThisFrame(_player);
    }
    player_1.setAllRandomPedsFleeThisFrame = setAllRandomPedsFleeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x34630A768925B852 | Since: 1207
     */
    function setEveryoneIgnore(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetEveryoneIgnorePlayer(_player, toggle);
    }
    player_1.setEveryoneIgnore = setEveryoneIgnore;
    /**
     * No comment provided
     *
     * Hash: 0xD2DFC9CCA5596A11 | Since: 1207
     */
    function setLawResponseDelayOverride() {
        SetLawResponseDelayOverride(0);
    }
    player_1.setLawResponseDelayOverride = setLawResponseDelayOverride;
    /**
     * No comment provided
     *
     * Hash: 0x4A056257802DD3E5 | Since: 1207
     */
    function setLockonToFriendlys(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetLockonToFriendlyPlayers(_player, toggle);
    }
    player_1.setLockonToFriendlys = setLockonToFriendlys;
    /**
     * No comment provided
     *
     * Hash: 0x28A4BD2CEE236E19 | Since: 1207
     */
    function setMaxWantedLevel(maxWantedLevel) {
        SetMaxWantedLevel(maxWantedLevel);
    }
    player_1.setMaxWantedLevel = setMaxWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x506CE71FB6E8CF5E | Since: 1207
     */
    function setMinTimeBeforeHorseBucking(mount, iMinBuckTime) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        SetMinTimeBeforeHorseBucking(_mount, iMinBuckTime);
    }
    player_1.setMinTimeBeforeHorseBucking = setMinTimeBeforeHorseBucking;
    /**
     * No comment provided
     *
     * Hash: 0x227B06324234FB09 | Since: 1207
     */
    function setPedAsTempHorse(player, horse) {
        const _player = player instanceof Player ? player.localId() : player;
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        return SetPedAsTempPlayerHorse(_player, _horse);
    }
    player_1.setPedAsTempHorse = setPedAsTempHorse;
    /**
     * Sets whether this player can be hassled by gangs.
     *
     * Hash: 0xC7FE774412046825 | Since: 1207
     */
    function setCanBeHassledByGangs(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerCanBeHassledByGangs(_player, toggle);
    }
    player_1.setCanBeHassledByGangs = setCanBeHassledByGangs;
    /**
     * Sets whether this player can take cover.
     *
     * Hash: 0x5EDA520F7A3BAF4E | Since: 1207
     */
    function setCanUseCover(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerCanUseCover(_player, toggle);
    }
    player_1.setCanUseCover = setCanUseCover;
    /**
     * No comment provided
     *
     * Hash: 0xD0D9317DFEEF9A66 | Since: 1207
     */
    function setClothPinFrames(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPlayerClothPinFrames(_ped, 0);
    }
    player_1.setClothPinFrames = setClothPinFrames;
    /**
     * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eSetPlayerControlFlags
     *
     * Hash: 0x4D51E59243281D80 | Since: 1207
     */
    function setControl(player, toggle, flags, bPreventHeadingChange) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerControl(_player, toggle, flags, bPreventHeadingChange);
    }
    player_1.setControl = setControl;
    /**
     * No comment provided
     *
     * Hash: 0xD5FCC166AEB2FD0F | Since: 1207
     */
    function setForcedAim(player, toggle, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPlayerForcedAim(_player, toggle, _ped, 0, false);
    }
    player_1.setForcedAim = setForcedAim;
    /**
     * No comment provided
     *
     * Hash: 0x8899C244EBCF70DE | Since: 1207
     */
    function setHealthRechargeMultiplier(player, regenRate) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerHealthRechargeMultiplier(_player, regenRate);
    }
    player_1.setHealthRechargeMultiplier = setHealthRechargeMultiplier;
    /**
     * Simply sets you as invincible (Health will not deplete).
     *
     * Hash: 0xFEBEEBC9CBDF4B12 | Since: 1207
     */
    function setInvincible(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerInvincible(_player, toggle);
    }
    player_1.setInvincible = setInvincible;
    /**
     * No comment provided
     *
     * Hash: 0x462AA1973CBBA75E | Since: 1207
     */
    function setLockon(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerLockon(_player, toggle);
    }
    player_1.setLockon = setLockon;
    /**
     * Affects the range of auto aim target.
     *
     * Hash: 0x3A3CD06597388322 | Since: 1207
     */
    function setLockonRangeOverride(player, range) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerLockonRangeOverride(_player, range);
    }
    player_1.setLockonRangeOverride = setLockonRangeOverride;
    /**
     * No comment provided
     *
     * Hash: 0xBEC463B3A11C909E | Since: 1207
     */
    function setMayNotEnterAnyVehicle(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerMayNotEnterAnyVehicle(_player);
    }
    player_1.setMayNotEnterAnyVehicle = setMayNotEnterAnyVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xDA35A134038557EC | Since: 1207
     */
    function setMayOnlyEnterThisVehicle(player, vehicle) {
        const _player = player instanceof Player ? player.localId() : player;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetPlayerMayOnlyEnterThisVehicle(_player, _vehicle);
    }
    player_1.setMayOnlyEnterThisVehicle = setMayOnlyEnterThisVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xE4CB5A3F18170381 | Since: 1207
     */
    function setMeleeWeaponDamageModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerMeleeWeaponDamageModifier(_player, modifier);
    }
    player_1.setMeleeWeaponDamageModifier = setMeleeWeaponDamageModifier;
    /**
     * Make sure to request the model first and wait until it has loaded.
     *
     * Hash: 0xED40380076A31506 | Since: 1207
     */
    function setModel(player, modelHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetPlayerModel(_player, modelHash, false);
    }
    player_1.setModel = setModel;
    /**
     * No comment provided
     *
     * Hash: 0xB5EC6BDAEBCA454C | Since: 1207
     */
    function setNoiseMultiplier(player, multiplier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerNoiseMultiplier(_player, multiplier);
    }
    player_1.setNoiseMultiplier = setNoiseMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xE0447DEF81CCDFD2 | Since: 1207
     */
    function setSimulateAiming(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerSimulateAiming(_player, toggle);
    }
    player_1.setSimulateAiming = setSimulateAiming;
    /**
     * No comment provided
     *
     * Hash: 0x4DE44FA389DCA565 | Since: 1207
     */
    function setSneakingNoiseMultiplier(player, multiplier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerSneakingNoiseMultiplier(_player, multiplier);
    }
    player_1.setSneakingNoiseMultiplier = setSneakingNoiseMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xFECA17CF3343694B | Since: 1207
     */
    function setStaminaRechargeMultiplier(player, multiplier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerStaminaRechargeMultiplier(_player, multiplier);
    }
    player_1.setStaminaRechargeMultiplier = setStaminaRechargeMultiplier;
    /**
     * Sets your targeting mode for when you're on foot.
     * enum eTargetingMode
     * {
     * TARGETING_MODE_INVALID = -1,
     * TARGETING_MODE_CAUSAL, (Wide)
     * TARGETING_MODE_NORMAL,
     * TARGETING_MODE_HARD, (Narrow)
     * TARGETING_MODE_EXPERT (Free Aim)
     * };
     *
     * Hash: 0xD66A941F401E7302 | Since: 1207
     */
    function setTargetingMode(targetMode) {
        SetPlayerTargetingMode(targetMode);
    }
    player_1.setTargetingMode = setTargetingMode;
    /**
     * Sets the player's team.
     *
     * Hash: 0xE8DD8536F01DE600 | Since: 1207
     */
    function setTeam(player, team, bRestrictToThisScript) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerTeam(_player, team, bRestrictToThisScript);
    }
    player_1.setTeam = setTeam;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x384D4765395E006C | Since: 1207
     */
    function setWantedLevel(player, wantedLevel, disableNoMission) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerWantedLevel(_player, wantedLevel, disableNoMission);
    }
    player_1.setWantedLevel = setWantedLevel;
    /**
     * This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
     *
     * Hash: 0x94D529F7B73D7A85 | Since: 1207
     */
    function setWeaponDamageModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerWeaponDamageModifier(_player, modifier);
    }
    player_1.setWeaponDamageModifier = setWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0xD15CC2D493160BE3 | Since: 1207
     */
    function setWeaponDefenseModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerWeaponDefenseModifier(_player, modifier);
    }
    player_1.setWeaponDefenseModifier = setWeaponDefenseModifier;
    /**
     * No comment provided
     *
     * Hash: 0xD04AD186CE8BB129 | Since: 1207
     */
    function setWeaponTypeDamageModifier(player, weaponHash, damageModifier) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetPlayerWeaponTypeDamageModifier(_player, weaponHash, damageModifier);
    }
    player_1.setWeaponTypeDamageModifier = setWeaponTypeDamageModifier;
    /**
     * If toggle is set to false:
     * The police won't be shown on the (mini)map
     *
     * If toggle is set to true:
     * The police will be shown on the (mini)map
     *
     * Hash: 0x6FD7DD6B63F2820E | Since: 1207
     */
    function setPoliceRadarBlips(toggle) {
        SetPoliceRadarBlips(toggle);
    }
    player_1.setPoliceRadarBlips = setPoliceRadarBlips;
    /**
     * Swim speed multiplier.
     * Multiplier goes up to 1.49f
     *
     * Hash: 0xBFCEABDE34DA5085 | Since: 1207
     */
    function setSwimMultiplierFor(player, multiplier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetSwimMultiplierForPlayer(_player, multiplier);
    }
    player_1.setSwimMultiplierFor = setSwimMultiplierFor;
    /**
     * No comment provided
     *
     * Hash: 0xD7FA719CB54866C2 | Since: 1207
     */
    function setWantedLevelMultiplier(multiplier) {
        SetWantedLevelMultiplier(multiplier);
    }
    player_1.setWantedLevelMultiplier = setWantedLevelMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xFA0C063C422C4355 | Since: 1207
     */
    function simulateInputGait(player, speed, duration, heading) {
        const _player = player instanceof Player ? player.localId() : player;
        SimulatePlayerInputGait(_player, speed, duration, heading, false, false);
    }
    player_1.simulateInputGait = simulateInputGait;
    /**
     * No comment provided
     *
     * Hash: 0xDF8822C55EDDA65B | Since: 1207
     */
    function startTeleport(player, pos, heading) {
        const _player = player instanceof Player ? player.localId() : player;
        StartPlayerTeleport(_player, pos.x, pos.y, pos.z, heading, false, false, false, false);
    }
    player_1.startTeleport = startTeleport;
    /**
     * Disables the player's teleportation
     *
     * Hash: 0x0858B86146601BE8 | Since: 1207
     */
    function stopTeleport() {
        StopPlayerTeleport();
    }
    player_1.stopTeleport = stopTeleport;
    /**
     * No comment provided
     *
     * Hash: 0x96722257E5381E00 | Since: 1207
     */
    function suppressWitnessesCallingPoliceThisFrame(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SuppressWitnessesCallingPoliceThisFrame(_player);
    }
    player_1.suppressWitnessesCallingPoliceThisFrame = suppressWitnessesCallingPoliceThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xC39DCE4672CBFBC1 | Since: 1207
     */
    function updateTeleport(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return UpdatePlayerTeleport(_player);
    }
    player_1.updateTeleport = updateTeleport;
    /**
     * No comment provided
     *
     * Hash: 0xD0B0B044112BF424 | Since: 1207
     */
    function updateWantedPositionThisFrame(player) {
        const _player = player instanceof Player ? player.localId() : player;
        UpdateWantedPositionThisFrame(_player);
    }
    player_1.updateWantedPositionThisFrame = updateWantedPositionThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x00B156AFEBCC5AE0 | Since: 1207
     */
    function _0x00B156AFEBCC5AE0() {
        Citizen.invokeNative('0x00B156AFEBCC5AE0', undefined);
    }
    player_1._0x00B156AFEBCC5AE0 = _0x00B156AFEBCC5AE0;
    /**
     * No comment provided
     *
     * Hash: 0x00EB5A760638DB55 | Since: 1207
     */
    function setWeaponDrawSpeed(player, weapon, speed) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof weapon === 'string')
            weapon = misc.getHashKey(weapon);
        Citizen.invokeNative('0x00EB5A760638DB55', _player, weapon, speed);
    }
    player_1.setWeaponDrawSpeed = setWeaponDrawSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x03B4B759A8990505 | Since: 1207
     */
    function _0x03B4B759A8990505() {
        return Citizen.invokeNative('0x03B4B759A8990505', undefined);
    }
    player_1._0x03B4B759A8990505 = _0x03B4B759A8990505;
    /**
     * Sets the stand prompt for a specific player using a predefined text entry. use AddTextEntry for promptTextKey for custom names
     *
     * Hash: 0x06C3DB00B69D5435 | Since: 1232
     */
    function setPromptLeaveText(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x06C3DB00B69D5435', _player);
    }
    player_1.setPromptLeaveText = setPromptLeaveText;
    /**
     * No comment provided
     *
     * Hash: 0x06E1FB78B1E59CA5 | Since: 1207
     */
    function _0x06E1FB78B1E59CA5(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x06E1FB78B1E59CA5', _ped, false);
    }
    player_1._0x06E1FB78B1E59CA5 = _0x06E1FB78B1E59CA5;
    /**
     * No comment provided
     *
     * Hash: 0x086549F3B0381CB1 | Since: 1207
     */
    function _0x086549F3B0381CB1() {
        Citizen.invokeNative('0x086549F3B0381CB1', undefined, undefined);
    }
    player_1._0x086549F3B0381CB1 = _0x086549F3B0381CB1;
    /**
     * No comment provided
     *
     * Hash: 0x0869D499A7848309 | Since: 1207
     */
    function _0x0869D499A7848309() {
        Citizen.invokeNative('0x0869D499A7848309', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    player_1._0x0869D499A7848309 = _0x0869D499A7848309;
    /**
     * _SET_PLAYER_*? some multiplier or modifier for health or statmina ?
     *
     * Hash: 0x08E22898A6AF4905 | Since: 1207
     */
    function _0x08E22898A6AF4905(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x08E22898A6AF4905', _player, 0);
    }
    player_1._0x08E22898A6AF4905 = _0x08E22898A6AF4905;
    /**
     * Hardcoded to return zero/false.
     *
     * Hash: 0x0B7803F6F7BB43E0 | Since: 1207
     */
    function _0x0B7803F6F7BB43E0() {
        return Citizen.invokeNative('0x0B7803F6F7BB43E0');
    }
    player_1._0x0B7803F6F7BB43E0 = _0x0B7803F6F7BB43E0;
    /**
     * Clears the intensity of aura effects applied to entities for a specific player in Deadeye mode based on a flag parameter. This function is used to reset any intensity modifications set by `_SET_DEADEYE_ENTITY_AURA_INTENSITY_WITH_FLAG - 0x131E294EF60160DF`, restoring affected entities' aura intensity to their default state.
     *
     * Hash: 0x0E9057A9DA78D0F8 | Since: 1207
     */
    function clearDeadeyeAuraIntensityWithFlag(player, bitflag) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x0E9057A9DA78D0F8', _player, bitflag);
    }
    player_1.clearDeadeyeAuraIntensityWithFlag = clearDeadeyeAuraIntensityWithFlag;
    /**
     * No comment provided
     *
     * Hash: 0x0F4EAF69DA41AF43 | Since: 1207
     */
    function _0x0F4EAF69DA41AF43() {
        return Citizen.invokeNative('0x0F4EAF69DA41AF43', undefined);
    }
    player_1._0x0F4EAF69DA41AF43 = _0x0F4EAF69DA41AF43;
    /**
     * No comment provided
     *
     * Hash: 0x0F9CF06986300875 | Since: 1207
     */
    function _0x0F9CF06986300875() {
        Citizen.invokeNative('0x0F9CF06986300875', undefined);
    }
    player_1._0x0F9CF06986300875 = _0x0F9CF06986300875;
    /**
     * Sets the melee combat prompt for a specific player using a predefined text entry. use game string or
     * AddTextEntry("custom_text", "Throw a punch") and use custom_text in the native
     *
     * Hash: 0x0FAF95D71ED67ADE | Since: 1207
     */
    function setMeleePromptText(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x0FAF95D71ED67ADE', _player);
    }
    player_1.setMeleePromptText = setMeleePromptText;
    /**
     * No comment provided
     *
     * Hash: 0x107F2A66E1C4C83A | Since: 1207
     */
    function _0x107F2A66E1C4C83A() {
        Citizen.invokeNative('0x107F2A66E1C4C83A', undefined);
    }
    player_1._0x107F2A66E1C4C83A = _0x107F2A66E1C4C83A;
    /**
     * No comment provided
     *
     * Hash: 0x113EF458AB6CDA67 | Since: 1207
     */
    function _0x113EF458AB6CDA67() {
        Citizen.invokeNative('0x113EF458AB6CDA67', undefined, undefined);
    }
    player_1._0x113EF458AB6CDA67 = _0x113EF458AB6CDA67;
    /**
     * No comment provided
     *
     * Hash: 0x12E09E278C6C29B7 | Since: 1207
     */
    function _0x12E09E278C6C29B7() {
        Citizen.invokeNative('0x12E09E278C6C29B7', undefined);
    }
    player_1._0x12E09E278C6C29B7 = _0x12E09E278C6C29B7;
    /**
     * Applies a customizable aura effect to nearby entities when Deadeye is active, with control over aura intensity and additional behavior based on a flag parameter.
     * - flag (int): A flag that determines the behavior of the aura effect and which entities are affected. 2: Applies aura to humans. 4: Applies aura to animals.
     *
     * Hash: 0x131E294EF60160DF | Since: 1207
     */
    function setDeadeyeEntityAuraIntensityWithFlag(player, intensity, flag) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x131E294EF60160DF', _player, 0, 0, 0, intensity, flag);
    }
    player_1.setDeadeyeEntityAuraIntensityWithFlag = setDeadeyeEntityAuraIntensityWithFlag;
    /**
     * No comment provided
     *
     * Hash: 0x14E57F88BA0A07FC | Since: 1207
     */
    function _0x14E57F88BA0A07FC(location) {
        if (typeof location === 'string')
            location = misc.getHashKey(location);
        Citizen.invokeNative('0x14E57F88BA0A07FC', location);
    }
    player_1._0x14E57F88BA0A07FC = _0x14E57F88BA0A07FC;
    /**
     * No comment provided
     *
     * Hash: 0x19B2C7A6C34FAD54 | Since: 1207
     */
    function _0x19B2C7A6C34FAD54() {
        return Citizen.invokeNative('0x19B2C7A6C34FAD54', undefined, undefined);
    }
    player_1._0x19B2C7A6C34FAD54 = _0x19B2C7A6C34FAD54;
    /**
     * it is used to check for that period of time if player damaged any peds only returns the last 3 hits with the entity ids so if you hit the same entity 3 times it will return the same entity id 3 times, if you hit 4 different entities within that time it will return the last 3 entity ids
     * only stores the last 3 hits in the data view buffer
     * duration is in miliseconds
     * you need dataview
     *
     * Hash: 0x1A6E84F13C952094 | Since: 1207
     */
    function getPedsDamagedByRecently(player, duration) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x1A6E84F13C952094', _player, duration);
    }
    player_1.getPedsDamagedByRecently = getPedsDamagedByRecently;
    /**
     * No comment provided
     *
     * Hash: 0x1AD8AD999C27F44A | Since: 1311
     */
    function _0x1AD8AD999C27F44A() {
        Citizen.invokeNative('0x1AD8AD999C27F44A', undefined);
    }
    player_1._0x1AD8AD999C27F44A = _0x1AD8AD999C27F44A;
    /**
     * No comment provided
     *
     * Hash: 0x1D256EED194F5B58 | Since: 1207
     */
    function _0x1D256EED194F5B58() {
        Citizen.invokeNative('0x1D256EED194F5B58', undefined);
    }
    player_1._0x1D256EED194F5B58 = _0x1D256EED194F5B58;
    /**
     * Checks if the player can focus on tracks while in Eagle Eye mode. Returns true if the player is able to focus on a track, otherwise false.
     *
     * Hash: 0x1DA5C5B0923E1B85 | Since: 1207
     */
    function eagleEyeCanFocusOnTrack(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x1DA5C5B0923E1B85', _player);
    }
    player_1.eagleEyeCanFocusOnTrack = eagleEyeCanFocusOnTrack;
    /**
     * No comment provided
     *
     * Hash: 0x1E8099F449ABB0BA | Since: 1207
     */
    function _0x1E8099F449ABB0BA() {
        return Citizen.invokeNative('0x1E8099F449ABB0BA', undefined);
    }
    player_1._0x1E8099F449ABB0BA = _0x1E8099F449ABB0BA;
    /**
     * _RESET_PLAYER_A* - _RESET_PLAYER_I*
     *
     * Hash: 0x1F488807BC8E0630 | Since: 1207
     */
    function _0x1F488807BC8E0630(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x1F488807BC8E0630', _player);
    }
    player_1._0x1F488807BC8E0630 = _0x1F488807BC8E0630;
    /**
     * No comment provided
     *
     * Hash: 0x1FDA57E8908F2609 | Since: 1207
     */
    function _0x1FDA57E8908F2609(player, ped, useSteerassist) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x1FDA57E8908F2609', _player, _ped, useSteerassist);
    }
    player_1._0x1FDA57E8908F2609 = _0x1FDA57E8908F2609;
    /**
     * This native is used to determine if the player has an active lockon an entity while riding a horse.
     *
     * Hash: 0x2009F8AB7A5E9D6D | Since: 1207
     */
    function isOnMountLockonEntity(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x2009F8AB7A5E9D6D', _player);
    }
    player_1.isOnMountLockonEntity = isOnMountLockonEntity;
    /**
     * No comment provided
     *
     * Hash: 0x21091B4BEB6376EE | Since: 1207
     */
    function _0x21091B4BEB6376EE() {
        return Citizen.invokeNative('0x21091B4BEB6376EE', undefined);
    }
    player_1._0x21091B4BEB6376EE = _0x21091B4BEB6376EE;
    /**
     * No comment provided
     *
     * Hash: 0x216BC0D3D2E413D2 | Since: 1207
     */
    function _0x216BC0D3D2E413D2(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x216BC0D3D2E413D2', _player, undefined);
    }
    player_1._0x216BC0D3D2E413D2 = _0x216BC0D3D2E413D2;
    /**
     * No comment provided
     *
     * Hash: 0x22B3CABEDDB538B2 | Since: 1207
     */
    function _0x22B3CABEDDB538B2(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x22B3CABEDDB538B2', _player, 0);
    }
    player_1._0x22B3CABEDDB538B2 = _0x22B3CABEDDB538B2;
    /**
     * No comment provided
     *
     * Hash: 0x22C8B10802301381 | Since: 1207
     */
    function eagleEyeSetRange(player, range) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x22C8B10802301381', _player, range);
    }
    player_1.eagleEyeSetRange = eagleEyeSetRange;
    /**
     * No comment provided
     *
     * Hash: 0x263D69767F76059C | Since: 1207
     */
    function _0x263D69767F76059C(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x263D69767F76059C', _player, 0);
    }
    player_1._0x263D69767F76059C = _0x263D69767F76059C;
    /**
     * Retrieves the number of marks placed on a PED when Deadeye mode is active for the specified player.
     *
     * Hash: 0x27AD7162D3FED01E | Since: 1207
     */
    function getNumDeadeyeMarksOnPed(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x27AD7162D3FED01E', _player, _ped);
    }
    player_1.getNumDeadeyeMarksOnPed = getNumDeadeyeMarksOnPed;
    /**
     * Applies a aura effect to nearby entities when Deadeye is active, based on a flag parameter. This includes humans, animals, vehicles, and horses pulling those vehicles. Additionally, depending on the flag value, the player's appearance may change (e.g., turning gray).
     * - flag (int): A flag that determines the behavior of the aura effect. 2 means people 4 means animal etc.
     *
     * Hash: 0x2B12B6FC8B8772AB | Since: 1207
     */
    function setDeadeyeEntityAuraWithFlag(player, flag) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x2B12B6FC8B8772AB', _player, flag);
    }
    player_1.setDeadeyeEntityAuraWithFlag = setDeadeyeEntityAuraWithFlag;
    /**
     * No comment provided
     *
     * Hash: 0x2BB8D58E88777499 | Since: 1207
     */
    function _0x2BB8D58E88777499() {
        Citizen.invokeNative('0x2BB8D58E88777499', undefined);
    }
    player_1._0x2BB8D58E88777499 = _0x2BB8D58E88777499;
    /**
     * No comment provided
     *
     * Hash: 0x2BEED53B912537D0 | Since: 1207
     */
    function _0x2BEED53B912537D0() {
        Citizen.invokeNative('0x2BEED53B912537D0', undefined, undefined, undefined);
    }
    player_1._0x2BEED53B912537D0 = _0x2BEED53B912537D0;
    /**
     * No comment provided
     *
     * Hash: 0x2C2D287748E8E9B7 | Since: 1207
     */
    function _0x2C2D287748E8E9B7() {
        Citizen.invokeNative('0x2C2D287748E8E9B7', false);
    }
    player_1._0x2C2D287748E8E9B7 = _0x2C2D287748E8E9B7;
    /**
     * No comment provided
     *
     * Hash: 0x2E1ABE627C95ED9B | Since: 1207
     */
    function _0x2E1ABE627C95ED9B() {
        return Citizen.invokeNative('0x2E1ABE627C95ED9B');
    }
    player_1._0x2E1ABE627C95ED9B = _0x2E1ABE627C95ED9B;
    /**
     * No comment provided
     *
     * Hash: 0x2E67707BEC52CA4B | Since: 1207
     */
    function _0x2E67707BEC52CA4B() {
        Citizen.invokeNative('0x2E67707BEC52CA4B', undefined);
    }
    player_1._0x2E67707BEC52CA4B = _0x2E67707BEC52CA4B;
    /**
     * No comment provided
     *
     * Hash: 0x310CE349E0C0EC4B | Since: 1207
     */
    function _0x310CE349E0C0EC4B(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x310CE349E0C0EC4B', _player, _ped, 0);
    }
    player_1._0x310CE349E0C0EC4B = _0x310CE349E0C0EC4B;
    /**
     * Only used in script function UPDATE_PLAYER_JUST_DIED_STATE
     *
     * Hash: 0x325434C68358D282 | Since: 1207
     */
    function _0x325434C68358D282(toggle) {
        Citizen.invokeNative('0x325434C68358D282', toggle);
    }
    player_1._0x325434C68358D282 = _0x325434C68358D282;
    /**
     * Sets whether all trails are hidden during Eagle Eye mode.
     *
     * Hash: 0x330CA55A3647FA1C | Since: 1207
     */
    function eagleEyeSetHideAllTrails(player, hide) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x330CA55A3647FA1C', _player, hide);
    }
    player_1.eagleEyeSetHideAllTrails = eagleEyeSetHideAllTrails;
    /**
     * No comment provided
     *
     * Hash: 0x35A33783EC3C3448 | Since: 1311
     */
    function _0x35A33783EC3C3448() {
        Citizen.invokeNative('0x35A33783EC3C3448', undefined);
    }
    player_1._0x35A33783EC3C3448 = _0x35A33783EC3C3448;
    /**
     * Retrieves the ID of the ped that the specified player is currently tracking while in Eagle Eye mode.
     *
     * Hash: 0x3813E11A378958A5 | Since: 1207
     */
    function eagleEyeGetTrackedPedId(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x3813E11A378958A5', _player);
    }
    player_1.eagleEyeGetTrackedPedId = eagleEyeGetTrackedPedId;
    /**
     * Associates a specific interactive focus mode preset between a player and a ped, with a specified location and target entity.
     * To access all available presets, refer to the file located at: `/update_1.rpf/common/data/interactive_focus_mode_presets.meta`
     *
     * Hash: 0x3946FC742AC305CD | Since: 1207
     */
    function addAmbientInteractiveFocusPreset(player, ped, pos, targetEntity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        return Citizen.invokeNative('0x3946FC742AC305CD', _player, _ped, pos.x, pos.y, pos.z, _targetEntity);
    }
    player_1.addAmbientInteractiveFocusPreset = addAmbientInteractiveFocusPreset;
    /**
     * No comment provided
     *
     * Hash: 0x39D8D7082BC34B72 | Since: 1311
     */
    function _0x39D8D7082BC34B72() {
        Citizen.invokeNative('0x39D8D7082BC34B72', undefined);
    }
    player_1._0x39D8D7082BC34B72 = _0x39D8D7082BC34B72;
    /**
     * No comment provided
     *
     * Hash: 0x3A8611BD7BDE84F7 | Since: 1207
     */
    function _0x3A8611BD7BDE84F7() {
        Citizen.invokeNative('0x3A8611BD7BDE84F7', undefined, undefined);
    }
    player_1._0x3A8611BD7BDE84F7 = _0x3A8611BD7BDE84F7;
    /**
     * Used in script function INIT_DEADEYE_SLOWDOWN
     *
     * Hash: 0x3ACAC8832E77BC93 | Since: 1207
     */
    function _0x3ACAC8832E77BC93(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x3ACAC8832E77BC93', _player, false);
    }
    player_1._0x3ACAC8832E77BC93 = _0x3ACAC8832E77BC93;
    /**
     * No comment provided
     *
     * Hash: 0x3AD212429E095EFB | Since: 1207
     */
    function _0x3AD212429E095EFB() {
        Citizen.invokeNative('0x3AD212429E095EFB', undefined, undefined);
    }
    player_1._0x3AD212429E095EFB = _0x3AD212429E095EFB;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x3B296934DB026873 | Since: 1207
     */
    function _0x3B296934DB026873() {
        Citizen.invokeNative('0x3B296934DB026873', undefined, undefined);
    }
    player_1._0x3B296934DB026873 = _0x3B296934DB026873;
    /**
     * No comment provided
     *
     * Hash: 0x3BB84F812E052C90 | Since: 1207
     */
    function _0x3BB84F812E052C90() {
        Citizen.invokeNative('0x3BB84F812E052C90', undefined);
    }
    player_1._0x3BB84F812E052C90 = _0x3BB84F812E052C90;
    /**
     * No comment provided
     *
     * Hash: 0x3C4AE8506638C7E2 | Since: 1207
     */
    function _0x3C4AE8506638C7E2() {
        Citizen.invokeNative('0x3C4AE8506638C7E2', undefined, undefined);
    }
    player_1._0x3C4AE8506638C7E2 = _0x3C4AE8506638C7E2;
    /**
     * No comment provided
     *
     * Hash: 0x3D9DA5C9EFD20D88 | Since: 1207
     */
    function _0x3D9DA5C9EFD20D88() {
        Citizen.invokeNative('0x3D9DA5C9EFD20D88', undefined, undefined);
    }
    player_1._0x3D9DA5C9EFD20D88 = _0x3D9DA5C9EFD20D88;
    /**
     * No comment provided
     *
     * Hash: 0x3DAABE78A23694BC | Since: 1207
     */
    function _0x3DAABE78A23694BC() {
        Citizen.invokeNative('0x3DAABE78A23694BC', undefined, undefined);
    }
    player_1._0x3DAABE78A23694BC = _0x3DAABE78A23694BC;
    /**
     * No comment provided
     *
     * Hash: 0x45EF176B532CA851 | Since: 1207
     */
    function _0x45EF176B532CA851() {
        Citizen.invokeNative('0x45EF176B532CA851', undefined, undefined);
    }
    player_1._0x45EF176B532CA851 = _0x45EF176B532CA851;
    /**
     * No comment provided
     *
     * Hash: 0x497A18F8F88AA9D8 | Since: 1207
     */
    function _0x497A18F8F88AA9D8() {
        Citizen.invokeNative('0x497A18F8F88AA9D8');
    }
    player_1._0x497A18F8F88AA9D8 = _0x497A18F8F88AA9D8;
    /**
     * _SET_SPECIAL_ABILITY_*
     *
     * Hash: 0x4D1699543B1C023C | Since: 1207
     */
    function _0x4D1699543B1C023C(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x4D1699543B1C023C', _player, 0);
    }
    player_1._0x4D1699543B1C023C = _0x4D1699543B1C023C;
    /**
     * No comment provided
     *
     * Hash: 0x4DBC4873707E8FD6 | Since: 1207
     */
    function _0x4DBC4873707E8FD6() {
        Citizen.invokeNative('0x4DBC4873707E8FD6', undefined, undefined, undefined, undefined);
    }
    player_1._0x4DBC4873707E8FD6 = _0x4DBC4873707E8FD6;
    /**
     * No comment provided
     *
     * Hash: 0x4EC8BE63B8A5D4EF | Since: 1207
     */
    function _0x4EC8BE63B8A5D4EF(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x4EC8BE63B8A5D4EF', _player, 0);
    }
    player_1._0x4EC8BE63B8A5D4EF = _0x4EC8BE63B8A5D4EF;
    /**
     * No comment provided
     *
     * Hash: 0x4F0D2256AAE94EDA | Since: 1207
     */
    function _0x4F0D2256AAE94EDA() {
        Citizen.invokeNative('0x4F0D2256AAE94EDA', 0);
    }
    player_1._0x4F0D2256AAE94EDA = _0x4F0D2256AAE94EDA;
    /**
     * No comment provided
     *
     * Hash: 0x51139D8C17B16FBC | Since: 1207
     */
    function _0x51139D8C17B16FBC() {
        return Citizen.invokeNative('0x51139D8C17B16FBC', undefined);
    }
    player_1._0x51139D8C17B16FBC = _0x51139D8C17B16FBC;
    /**
     * _IS_PLAYER_D* - _IS_PLAYER_F*
     *
     * Hash: 0x57028FD99886F6F9 | Since: 1232
     */
    function _0x57028FD99886F6F9() {
        return Citizen.invokeNative('0x57028FD99886F6F9');
    }
    player_1._0x57028FD99886F6F9 = _0x57028FD99886F6F9;
    /**
     * Used in script function INIT_DEADEYE_SLOWDOWN
     *
     * Hash: 0x570A13A4CA2799BB | Since: 1207
     */
    function _0x570A13A4CA2799BB(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x570A13A4CA2799BB', _player, false);
    }
    player_1._0x570A13A4CA2799BB = _0x570A13A4CA2799BB;
    /**
     * No comment provided
     *
     * Hash: 0x57D9991DC1334151 | Since: 1207
     */
    function _0x57D9991DC1334151() {
        return Citizen.invokeNative('0x57D9991DC1334151', undefined);
    }
    player_1._0x57D9991DC1334151 = _0x57D9991DC1334151;
    /**
     * No comment provided
     *
     * Hash: 0x585CE159DB46FADB | Since: 1207
     */
    function _0x585CE159DB46FADB() {
        Citizen.invokeNative('0x585CE159DB46FADB', undefined, undefined);
    }
    player_1._0x585CE159DB46FADB = _0x585CE159DB46FADB;
    /**
     * No comment provided
     *
     * Hash: 0x5B7B97E99F84138B | Since: 1207
     */
    function _0x5B7B97E99F84138B() {
        return Citizen.invokeNative('0x5B7B97E99F84138B', undefined);
    }
    player_1._0x5B7B97E99F84138B = _0x5B7B97E99F84138B;
    /**
     * No comment provided
     *
     * Hash: 0x5C2E5E3CAEEB1F58 | Since: 1207
     */
    function _0x5C2E5E3CAEEB1F58() {
        Citizen.invokeNative('0x5C2E5E3CAEEB1F58', undefined, undefined, undefined);
    }
    player_1._0x5C2E5E3CAEEB1F58 = _0x5C2E5E3CAEEB1F58;
    /**
     * _IS_PLAYER_S* - _IS_PLAYER_T*
     *
     * Hash: 0x621D1B289CAF5978 | Since: 1207
     */
    function _0x621D1B289CAF5978(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x621D1B289CAF5978', _player);
    }
    player_1._0x621D1B289CAF5978 = _0x621D1B289CAF5978;
    /**
     * No comment provided
     *
     * Hash: 0x628E742FE1F79C4A | Since: 1207
     */
    function _0x628E742FE1F79C4A() {
        Citizen.invokeNative('0x628E742FE1F79C4A', undefined, undefined);
    }
    player_1._0x628E742FE1F79C4A = _0x628E742FE1F79C4A;
    /**
     * No comment provided
     *
     * Hash: 0x65887EAC535A0B0C | Since: 1207
     */
    function _0x65887EAC535A0B0C() {
        Citizen.invokeNative('0x65887EAC535A0B0C', undefined);
    }
    player_1._0x65887EAC535A0B0C = _0x65887EAC535A0B0C;
    /**
     * No comment provided
     *
     * Hash: 0x67659A8F248E0141 | Since: 1207
     */
    function _0x67659A8F248E0141() {
        Citizen.invokeNative('0x67659A8F248E0141', undefined, undefined);
    }
    player_1._0x67659A8F248E0141 = _0x67659A8F248E0141;
    /**
     * No comment provided
     *
     * Hash: 0x6852288340B43239 | Since: 1207
     */
    function _0x6852288340B43239() {
        return Citizen.invokeNative('0x6852288340B43239', undefined, undefined);
    }
    player_1._0x6852288340B43239 = _0x6852288340B43239;
    /**
     * No comment provided
     *
     * Hash: 0x694FFA4308060CD1 | Since: 1207
     */
    function _0x694FFA4308060CD1() {
        Citizen.invokeNative('0x694FFA4308060CD1', undefined, undefined);
    }
    player_1._0x694FFA4308060CD1 = _0x694FFA4308060CD1;
    /**
     * No comment provided
     *
     * Hash: 0x6C54E69516CC56BD | Since: 1207
     */
    function _0x6C54E69516CC56BD() {
        return Citizen.invokeNative('0x6C54E69516CC56BD', undefined);
    }
    player_1._0x6C54E69516CC56BD = _0x6C54E69516CC56BD;
    /**
     * Add a yellow particle to the entity.
     * entity: entity to apply yellow particle
     * entity2: same entity as entit
     * p2: always
     * p3: always 0
     *
     * Hash: 0x6ECFC621A168424C | Since: 1207
     */
    function eagleEyeAddParticleEffectToEntity(entity1, entity2) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        Citizen.invokeNative('0x6ECFC621A168424C', _entity1, _entity2, 0, 0);
    }
    player_1.eagleEyeAddParticleEffectToEntity = eagleEyeAddParticleEffectToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x6EDB5D08CB03E763 | Since: 1207
     */
    function _0x6EDB5D08CB03E763() {
        Citizen.invokeNative('0x6EDB5D08CB03E763', undefined, undefined);
    }
    player_1._0x6EDB5D08CB03E763 = _0x6EDB5D08CB03E763;
    /**
     * this native checks if the player has damaged or killed any ped human/animal recently within the duration passed, either by shooting or even using melee
     * duration is in miliseconds
     *
     * Hash: 0x72AD59F7B7FB6E24 | Since: 1207
     */
    function hasDamagedAnyPedRecently(player, duration) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x72AD59F7B7FB6E24', _player, duration);
    }
    player_1.hasDamagedAnyPedRecently = hasDamagedAnyPedRecently;
    /**
     * No comment provided
     *
     * Hash: 0x73EB2EF2E92D23BF | Since: 1207
     */
    function _0x73EB2EF2E92D23BF() {
        return Citizen.invokeNative('0x73EB2EF2E92D23BF');
    }
    player_1._0x73EB2EF2E92D23BF = _0x73EB2EF2E92D23BF;
    /**
     * No comment provided
     *
     * Hash: 0x747257807B8721CE | Since: 1207
     */
    function _0x747257807B8721CE() {
        return Citizen.invokeNative('0x747257807B8721CE', undefined, undefined);
    }
    player_1._0x747257807B8721CE = _0x747257807B8721CE;
    /**
     * No comment provided
     *
     * Hash: 0x76F7E1BCD623A429 | Since: 1207
     */
    function _0x76F7E1BCD623A429() {
        Citizen.invokeNative('0x76F7E1BCD623A429', undefined);
    }
    player_1._0x76F7E1BCD623A429 = _0x76F7E1BCD623A429;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x77B0B6D17A3AC9AA | Since: 1207
     */
    function _0x77B0B6D17A3AC9AA() {
        Citizen.invokeNative('0x77B0B6D17A3AC9AA', undefined, undefined);
    }
    player_1._0x77B0B6D17A3AC9AA = _0x77B0B6D17A3AC9AA;
    /**
     * No comment provided
     *
     * Hash: 0x77E83C315A3B31CA | Since: 1207
     */
    function _0x77E83C315A3B31CA() {
        Citizen.invokeNative('0x77E83C315A3B31CA', undefined);
    }
    player_1._0x77E83C315A3B31CA = _0x77E83C315A3B31CA;
    /**
     * Only used in script function PROCESS_PED_INTERRUPT_DIALOGUE
     * _GET_PLAYER_*
     *
     * Hash: 0x7AE93C45EC14A166 | Since: 1207
     */
    function _0x7AE93C45EC14A166(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x7AE93C45EC14A166', _player);
    }
    player_1._0x7AE93C45EC14A166 = _0x7AE93C45EC14A166;
    /**
     * _SET_PLAYER_DAMAGE_* - _SET_PLAYER_DEFENSE_*
     *
     * Hash: 0x818241B3EDA84191 | Since: 1207
     */
    function _0x818241B3EDA84191(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x818241B3EDA84191', _player, false);
    }
    player_1._0x818241B3EDA84191 = _0x818241B3EDA84191;
    /**
     * No comment provided
     *
     * Hash: 0x83C989D5B5B5B466 | Since: 1207
     */
    function _0x83C989D5B5B5B466() {
        Citizen.invokeNative('0x83C989D5B5B5B466', undefined, undefined);
    }
    player_1._0x83C989D5B5B5B466 = _0x83C989D5B5B5B466;
    /**
     * No comment provided
     *
     * Hash: 0x84481018E668E1B8 | Since: 1207
     */
    function _0x84481018E668E1B8(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x84481018E668E1B8', _player, _ped, undefined);
    }
    player_1._0x84481018E668E1B8 = _0x84481018E668E1B8;
    /**
     * SET_PLAYER_S/T*
     *
     * Hash: 0x8591EE69CC3ED257 | Since: 1207
     */
    function _0x8591EE69CC3ED257(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x8591EE69CC3ED257', _player, toggle);
    }
    player_1._0x8591EE69CC3ED257 = _0x8591EE69CC3ED257;
    /**
     * No comment provided
     *
     * Hash: 0x8702D9150D9FBB3D | Since: 1207
     */
    function _0x8702D9150D9FBB3D() {
        return Citizen.invokeNative('0x8702D9150D9FBB3D', undefined, undefined);
    }
    player_1._0x8702D9150D9FBB3D = _0x8702D9150D9FBB3D;
    /**
     * No comment provided
     *
     * Hash: 0x8F44EBB3BA8F6D44 | Since: 1207
     */
    function _0x8F44EBB3BA8F6D44() {
        Citizen.invokeNative('0x8F44EBB3BA8F6D44', undefined, undefined);
    }
    player_1._0x8F44EBB3BA8F6D44 = _0x8F44EBB3BA8F6D44;
    /**
     * No comment provided
     *
     * Hash: 0x9044835BE9D9DBFE | Since: 1207
     */
    function _0x9044835BE9D9DBFE() {
        Citizen.invokeNative('0x9044835BE9D9DBFE', undefined, undefined);
    }
    player_1._0x9044835BE9D9DBFE = _0x9044835BE9D9DBFE;
    /**
     * No comment provided
     *
     * Hash: 0x9073EC5456651A90 | Since: 1207
     */
    function _0x9073EC5456651A90() {
        Citizen.invokeNative('0x9073EC5456651A90', undefined, undefined);
    }
    player_1._0x9073EC5456651A90 = _0x9073EC5456651A90;
    /**
     * No comment provided
     *
     * Hash: 0x908D4B72854C8F62 | Since: 1207
     */
    function _0x908D4B72854C8F62() {
        Citizen.invokeNative('0x908D4B72854C8F62', undefined);
    }
    player_1._0x908D4B72854C8F62 = _0x908D4B72854C8F62;
    /**
     * _GET_A* - _GET_C*
     *
     * Hash: 0x927861B2C08DBEA5 | Since: 1207
     */
    function _0x927861B2C08DBEA5(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x927861B2C08DBEA5', _player);
    }
    player_1._0x927861B2C08DBEA5 = _0x927861B2C08DBEA5;
    /**
     * No comment provided
     *
     * Hash: 0x929DDD5538F3DF1F | Since: 1232
     */
    function _0x929DDD5538F3DF1F() {
        Citizen.invokeNative('0x929DDD5538F3DF1F', undefined, undefined);
    }
    player_1._0x929DDD5538F3DF1F = _0x929DDD5538F3DF1F;
    /**
     * No comment provided
     *
     * Hash: 0x93624B36E8851B42 | Since: 1207
     */
    function _0x93624B36E8851B42(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x93624B36E8851B42', _player);
    }
    player_1._0x93624B36E8851B42 = _0x93624B36E8851B42;
    /**
     * No comment provided
     *
     * Hash: 0x9422743A5BA50E10 | Since: 1207
     */
    function _0x9422743A5BA50E10() {
        return Citizen.invokeNative('0x9422743A5BA50E10', undefined);
    }
    player_1._0x9422743A5BA50E10 = _0x9422743A5BA50E10;
    /**
     * No comment provided
     *
     * Hash: 0x9461A8FAB0378E5B | Since: 1207
     */
    function _0x9461A8FAB0378E5B() {
        Citizen.invokeNative('0x9461A8FAB0378E5B', undefined, undefined);
    }
    player_1._0x9461A8FAB0378E5B = _0x9461A8FAB0378E5B;
    /**
     * Sets the sit prompt for a specific player using a predefined text entry. use game strings like PLAYER_SIT or use custom with
     * AddTextEntry("sit_custom", "Take a seat")
     * this native must be invoked
     * https://imgur.com/gallery/0x988c9045531b9fce-9bTHgkv
     *
     * Hash: 0x988C9045531B9FCE | Since: 1232
     */
    function setSitPromptText(playerID) {
        const _playerID = playerID instanceof Player ? playerID.localId() : playerID;
        return Citizen.invokeNative('0x988C9045531B9FCE', _playerID);
    }
    player_1.setSitPromptText = setSitPromptText;
    /**
     * No comment provided
     *
     * Hash: 0x9AFCF9FE1884BF62 | Since: 1207
     */
    function _0x9AFCF9FE1884BF62() {
        Citizen.invokeNative('0x9AFCF9FE1884BF62', undefined, undefined);
    }
    player_1._0x9AFCF9FE1884BF62 = _0x9AFCF9FE1884BF62;
    /**
     * No comment provided
     *
     * Hash: 0x9FC5A003FB76EDBD | Since: 1207
     */
    function _0x9FC5A003FB76EDBD() {
        Citizen.invokeNative('0x9FC5A003FB76EDBD', undefined, undefined);
    }
    player_1._0x9FC5A003FB76EDBD = _0x9FC5A003FB76EDBD;
    /**
     * Sets the player's ability to wear hats based on the specified flag. The flag value determines whether the player can wear all hats or only the ones they own.
     * If the flag is set to 15 and `allow` is true, the player can wear all available hats. However, if you want to restrict the player to wearing only their owned hats (flag 1), you **must first** disable flag 15 by setting it to false, and then set flag 1 to true.
     *
     * Hash: 0xA0C683284DF027C7 | Since: 1207
     */
    function setHatAccess(player, flag, allow) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xA0C683284DF027C7', _player, flag, allow);
    }
    player_1.setHatAccess = setHatAccess;
    /**
     * No comment provided
     *
     * Hash: 0xA28056CD1B04B250 | Since: 1232
     */
    function _0xA28056CD1B04B250() {
        Citizen.invokeNative('0xA28056CD1B04B250', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    player_1._0xA28056CD1B04B250 = _0xA28056CD1B04B250;
    /**
     * No comment provided
     *
     * Hash: 0xA342495F93B7B838 | Since: 1207
     */
    function _0xA342495F93B7B838() {
        Citizen.invokeNative('0xA342495F93B7B838', undefined, undefined);
    }
    player_1._0xA342495F93B7B838 = _0xA342495F93B7B838;
    /**
     * No comment provided
     *
     * Hash: 0xA54000D4BFD90BDE | Since: 1207
     */
    function _0xA54000D4BFD90BDE() {
        return Citizen.invokeNative('0xA54000D4BFD90BDE', undefined);
    }
    player_1._0xA54000D4BFD90BDE = _0xA54000D4BFD90BDE;
    /**
     * Retrieves whether all trails are currently hidden during Eagle Eye mode for the specified player.
     *
     * Hash: 0xA62BBAAE67A05BB0 | Since: 1207
     */
    function eagleEyeAreAllTrailsHidden(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xA62BBAAE67A05BB0', _player);
    }
    player_1.eagleEyeAreAllTrailsHidden = eagleEyeAreAllTrailsHidden;
    /**
     * No comment provided
     *
     * Hash: 0xAAED694CE814817F | Since: 1207
     */
    function _0xAAED694CE814817F() {
        return Citizen.invokeNative('0xAAED694CE814817F', undefined);
    }
    player_1._0xAAED694CE814817F = _0xAAED694CE814817F;
    /**
     * Enables or disables the Pick Up prompt for a hat on the ground for the specified player. When set to true, the player will see a prompt to pick up the hat if they are near it.
     *
     * Hash: 0xACA45DDCEF6071C4 | Since: 1207
     */
    function setCanPickupHat(player, canPickup) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xACA45DDCEF6071C4', _player, canPickup);
    }
    player_1.setCanPickupHat = setCanPickupHat;
    /**
     * No comment provided
     *
     * Hash: 0xB15CD2F9932C9AB5 | Since: 1207
     */
    function _0xB15CD2F9932C9AB5() {
        return Citizen.invokeNative('0xB15CD2F9932C9AB5', undefined);
    }
    player_1._0xB15CD2F9932C9AB5 = _0xB15CD2F9932C9AB5;
    /**
     * _IS_PLAYER_I* - _IS_PLAYER_P*
     *
     * Hash: 0xB331D8A73F9D2BDF | Since: 1207
     */
    function _0xB331D8A73F9D2BDF(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xB331D8A73F9D2BDF', _player);
    }
    player_1._0xB331D8A73F9D2BDF = _0xB331D8A73F9D2BDF;
    /**
     * No comment provided
     *
     * Hash: 0xBA5CA1FEB5DE0DF6 | Since: 1207
     */
    function _0xBA5CA1FEB5DE0DF6() {
        Citizen.invokeNative('0xBA5CA1FEB5DE0DF6', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    player_1._0xBA5CA1FEB5DE0DF6 = _0xBA5CA1FEB5DE0DF6;
    /**
     * NPEW__ENUM__EMOTE_CATEGORY_INVALID = -1
     * NPEW__ENUM__EMOTE_CATEGORY_ACTIONS
     * NPEW__ENUM__EMOTE_CATEGORY_ANTAGONIZE
     * NPEW__ENUM__EMOTE_CATEGORY_REACTIONS
     * NPEW__ENUM__EMOTE_CATEGORY_GREET
     * NPEW__ENUM__NUM_EMOTE_CATEGORIES
     * NPEW__ENUM__NUM_DISPLAY_TEXTURES
     *
     * Hash: 0xBB6EA5D59E926095 | Since: 1207
     */
    function _0xBB6EA5D59E926095(category, emote) {
        if (typeof emote === 'string')
            emote = misc.getHashKey(emote);
        Citizen.invokeNative('0xBB6EA5D59E926095', category, emote);
    }
    player_1._0xBB6EA5D59E926095 = _0xBB6EA5D59E926095;
    /**
     * Activates the special ability for the specified player.
     *
     * Hash: 0xBBA140062B15A8AC | Since: 1207
     */
    function specialAbilitySetActivate(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xBBA140062B15A8AC', _player);
    }
    player_1.specialAbilitySetActivate = specialAbilitySetActivate;
    /**
     * Enable/disable a color on the entity in eagle eye mode.
     *
     * Hash: 0xBC02B3D151D3859F | Since: 1207
     */
    function eagleEyeSetRegisteredEntityGlow(entity, enable) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xBC02B3D151D3859F', _entity, enable);
    }
    player_1.eagleEyeSetRegisteredEntityGlow = eagleEyeSetRegisteredEntityGlow;
    /**
     * No comment provided
     *
     * Hash: 0xBD96185264DDAAEA | Since: 1207
     */
    function _0xBD96185264DDAAEA() {
        Citizen.invokeNative('0xBD96185264DDAAEA', undefined, undefined);
    }
    player_1._0xBD96185264DDAAEA = _0xBD96185264DDAAEA;
    /**
     * _GET_PLAYER_I*
     *
     * Hash: 0xBEA3A6E5F5F79A6F | Since: 1207
     */
    function _0xBEA3A6E5F5F79A6F() {
        return Citizen.invokeNative('0xBEA3A6E5F5F79A6F', undefined, undefined);
    }
    player_1._0xBEA3A6E5F5F79A6F = _0xBEA3A6E5F5F79A6F;
    /**
     * No comment provided
     *
     * Hash: 0xBED386157F65942C | Since: 1207
     */
    function _0xBED386157F65942C() {
        Citizen.invokeNative('0xBED386157F65942C', undefined, undefined);
    }
    player_1._0xBED386157F65942C = _0xBED386157F65942C;
    /**
     * No comment provided
     *
     * Hash: 0xBEFED69CE8317F91 | Since: 1207
     */
    function _0xBEFED69CE8317F91() {
        return Citizen.invokeNative('0xBEFED69CE8317F91', undefined);
    }
    player_1._0xBEFED69CE8317F91 = _0xBEFED69CE8317F91;
    /**
     * No comment provided
     *
     * Hash: 0xC177C827CEFC0AA4 | Since: 1207
     */
    function _0xC177C827CEFC0AA4() {
        Citizen.invokeNative('0xC177C827CEFC0AA4', undefined, undefined);
    }
    player_1._0xC177C827CEFC0AA4 = _0xC177C827CEFC0AA4;
    /**
     * No comment provided
     *
     * Hash: 0xC4873B053054C04B | Since: 1207
     */
    function _0xC4873B053054C04B() {
        Citizen.invokeNative('0xC4873B053054C04B', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    player_1._0xC4873B053054C04B = _0xC4873B053054C04B;
    /**
     * No comment provided
     *
     * Hash: 0xC58CE6824E604DEC | Since: 1207
     */
    function _0xC58CE6824E604DEC() {
        Citizen.invokeNative('0xC58CE6824E604DEC', undefined);
    }
    player_1._0xC58CE6824E604DEC = _0xC58CE6824E604DEC;
    /**
     * Disables the previously set interactive focus mode preset for a given player. see `_SET_PLAYER_INTERACTIVE_FOCUS_PRESET - 0x3C1B1807C7A415D6`
     *
     * Hash: 0xC67A4910425F11F1 | Since: 1207
     */
    function disableInteractiveFocusPreset(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xC67A4910425F11F1', _player);
    }
    player_1.disableInteractiveFocusPreset = disableInteractiveFocusPreset;
    /**
     * No comment provided
     *
     * Hash: 0xC71D07C96946E263 | Since: 1207
     */
    function _0xC71D07C96946E263() {
        Citizen.invokeNative('0xC71D07C96946E263', undefined, undefined);
    }
    player_1._0xC71D07C96946E263 = _0xC71D07C96946E263;
    /**
     * Hardcoded to return zero/false.
     *
     * Hash: 0xC74EB3F2EC169F6B | Since: 1232
     */
    function _0xC74EB3F2EC169F6B() {
        return Citizen.invokeNative('0xC74EB3F2EC169F6B', undefined);
    }
    player_1._0xC74EB3F2EC169F6B = _0xC74EB3F2EC169F6B;
    /**
     * No comment provided
     *
     * Hash: 0xC900A465364A85D6 | Since: 1207
     */
    function _0xC900A465364A85D6(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xC900A465364A85D6', _player);
    }
    player_1._0xC900A465364A85D6 = _0xC900A465364A85D6;
    /**
     * No comment provided
     *
     * Hash: 0xC93A9A45430D484E | Since: 1207
     */
    function _0xC93A9A45430D484E() {
        return Citizen.invokeNative('0xC93A9A45430D484E', undefined);
    }
    player_1._0xC93A9A45430D484E = _0xC93A9A45430D484E;
    /**
     * No comment provided
     *
     * Hash: 0xCA59808E51FD67C4 | Since: 1207
     */
    function _0xCA59808E51FD67C4() {
        Citizen.invokeNative('0xCA59808E51FD67C4', undefined, undefined);
    }
    player_1._0xCA59808E51FD67C4 = _0xCA59808E51FD67C4;
    /**
     * No comment provided
     *
     * Hash: 0xCB0B9506BC91E441 | Since: 1207
     */
    function _0xCB0B9506BC91E441() {
        Citizen.invokeNative('0xCB0B9506BC91E441', undefined, undefined);
    }
    player_1._0xCB0B9506BC91E441 = _0xCB0B9506BC91E441;
    /**
     * No comment provided
     *
     * Hash: 0xCB61A63AA53D7D22 | Since: 1207
     */
    function _0xCB61A63AA53D7D22() {
        Citizen.invokeNative('0xCB61A63AA53D7D22', undefined, undefined);
    }
    player_1._0xCB61A63AA53D7D22 = _0xCB61A63AA53D7D22;
    /**
     * Activates the Surrender prompt for the specified player in the current frame.
     *
     * Hash: 0xCBB54CC7FFFFAB86 | Since: 1207
     */
    function setCooperatePromptThisFrame(player, targetPed, promptOrder) {
        const _player = player instanceof Player ? player.localId() : player;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        Citizen.invokeNative('0xCBB54CC7FFFFAB86', _player, _targetPed, promptOrder, false);
    }
    player_1.setCooperatePromptThisFrame = setCooperatePromptThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xCD7CA3013FD12749 | Since: 1232
     */
    function _0xCD7CA3013FD12749() {
        Citizen.invokeNative('0xCD7CA3013FD12749', undefined, undefined);
    }
    player_1._0xCD7CA3013FD12749 = _0xCD7CA3013FD12749;
    /**
     * No comment provided
     *
     * Hash: 0xCDDD4B74660E2335 | Since: 1207
     */
    function _0xCDDD4B74660E2335() {
        Citizen.invokeNative('0xCDDD4B74660E2335', undefined, undefined, undefined);
    }
    player_1._0xCDDD4B74660E2335 = _0xCDDD4B74660E2335;
    /**
     * No comment provided
     *
     * Hash: 0xCEDC16930526F728 | Since: 1207
     */
    function _0xCEDC16930526F728() {
        Citizen.invokeNative('0xCEDC16930526F728', undefined);
    }
    player_1._0xCEDC16930526F728 = _0xCEDC16930526F728;
    /**
     * No comment provided
     *
     * Hash: 0xCFB2EED4FCB7BD77 | Since: 1207
     */
    function _0xCFB2EED4FCB7BD77() {
        Citizen.invokeNative('0xCFB2EED4FCB7BD77', undefined, undefined, undefined);
    }
    player_1._0xCFB2EED4FCB7BD77 = _0xCFB2EED4FCB7BD77;
    /**
     * Sets the weapon that the specified player will aim with. The weapon must already be assigned to the PED. This also determines the weapon order, specifying which weapon the player will automatically switch to when the current weapon runs out of ammo.
     *
     * Hash: 0xCFFC3ECCD7A5CCEB | Since: 1207
     */
    function setAimWeapon(player, weapon, attachSlotId) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof weapon === 'string')
            weapon = misc.getHashKey(weapon);
        Citizen.invokeNative('0xCFFC3ECCD7A5CCEB', _player, weapon, attachSlotId);
    }
    player_1.setAimWeapon = setAimWeapon;
    /**
     * Shows or hides all Pick Up prompts for the specified player, including the prompt for picking up hats from the ground. When set to true, the player will see Pick Up prompts for all nearby items. If set to false, all Pick Up prompts will be hidden.
     *
     * Hash: 0xD1A70C1E8D1031FE | Since: 1207
     */
    function setPickupPromptVisible(player, enable) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xD1A70C1E8D1031FE', _player, enable);
    }
    player_1.setPickupPromptVisible = setPickupPromptVisible;
    /**
     * No comment provided
     *
     * Hash: 0xD1F6B912785BFD35 | Since: 1207
     */
    function _0xD1F6B912785BFD35() {
        return Citizen.invokeNative('0xD1F6B912785BFD35', undefined);
    }
    player_1._0xD1F6B912785BFD35 = _0xD1F6B912785BFD35;
    /**
     * No comment provided
     *
     * Hash: 0xD288E02E364972D2 | Since: 1311
     */
    function _0xD288E02E364972D2() {
        Citizen.invokeNative('0xD288E02E364972D2', undefined, undefined, undefined);
    }
    player_1._0xD288E02E364972D2 = _0xD288E02E364972D2;
    /**
     * Adds an interactive focus mode preset between a player and a specific set of coordinates with a target entity.
     * To access all available presets, refer to the file located at:update_1.rpf.common.data.interactive_focus_mode_presets.meta
     *
     *
     * Hash: 0xD48227263E3D06AE | Since: 1232
     */
    function addAmbientInteractiveFocusPresetAtCoords(player, pos, targetEntity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        return Citizen.invokeNative('0xD48227263E3D06AE', _player, pos.x, pos.y, pos.z, _targetEntity);
    }
    player_1.addAmbientInteractiveFocusPresetAtCoords = addAmbientInteractiveFocusPresetAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xDA9D7BE231FE865F | Since: 1207
     */
    function _0xDA9D7BE231FE865F() {
        return Citizen.invokeNative('0xDA9D7BE231FE865F', undefined, undefined, undefined);
    }
    player_1._0xDA9D7BE231FE865F = _0xDA9D7BE231FE865F;
    /**
     * No comment provided
     *
     * Hash: 0xDAB6A2FC56B7DE65 | Since: 1207
     */
    function _0xDAB6A2FC56B7DE65() {
        return Citizen.invokeNative('0xDAB6A2FC56B7DE65', undefined);
    }
    player_1._0xDAB6A2FC56B7DE65 = _0xDAB6A2FC56B7DE65;
    /**
     * Remove yellow particle from the entity when it was set using `0x6ECFC621A168424C`
     * entity: entity to remove yellow particles
     * entity2: same entity as entity
     * p2: always 0
     *
     * Hash: 0xDC5E09D012D759C4 | Since: 1207
     */
    function eagleEyeRemoveParticleEffectFromEntity(entity1, entity2) {
        const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
        const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
        Citizen.invokeNative('0xDC5E09D012D759C4', _entity1, _entity2, 0);
    }
    player_1.eagleEyeRemoveParticleEffectFromEntity = eagleEyeRemoveParticleEffectFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xDD33A82352C4652F | Since: 1207
     */
    function _0xDD33A82352C4652F(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xDD33A82352C4652F', _player, _ped, 0);
    }
    player_1._0xDD33A82352C4652F = _0xDD33A82352C4652F;
    /**
     * Checks if the player's Deadeye ability is enabled.
     *
     * Hash: 0xDE6C85975F9D4894 | Since: 1207
     */
    function isSpecialAbilityEnabled(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xDE6C85975F9D4894', _player);
    }
    player_1.isSpecialAbilityEnabled = isSpecialAbilityEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xE1D356F5A66D0FFA | Since: 1232
     */
    function _0xE1D356F5A66D0FFA(emote) {
        if (typeof emote === 'string')
            emote = misc.getHashKey(emote);
        return Citizen.invokeNative('0xE1D356F5A66D0FFA', emote);
    }
    player_1._0xE1D356F5A66D0FFA = _0xE1D356F5A66D0FFA;
    /**
     * No comment provided
     *
     * Hash: 0xE50A67C33514A390 | Since: 1207
     */
    function _0xE50A67C33514A390() {
        return Citizen.invokeNative('0xE50A67C33514A390', undefined, undefined);
    }
    player_1._0xE50A67C33514A390 = _0xE50A67C33514A390;
    /**
     * Clears all Eagle Eye trails that were registered for entities associated with the specified player.
     *
     * Hash: 0xE5D3EB37ABC1EB03 | Since: 1207
     */
    function eagleEyeClearRegisteredTrails(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xE5D3EB37ABC1EB03', _player);
    }
    player_1.eagleEyeClearRegisteredTrails = eagleEyeClearRegisteredTrails;
    /**
     * returns true if the player is on a road while riding a horse but at a certain speed, if you go off road then it returns false or if you go too slow like walking state it also returns false
     *
     * Hash: 0xE631EAF35828FA67 | Since: 1207
     */
    function isMountOnRoad(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xE631EAF35828FA67', _player);
    }
    player_1.isMountOnRoad = isMountOnRoad;
    /**
     * _IS_PLAYER_A* - _IS_PLAYER_BE*
     *
     * Hash: 0xE7F8707269544B29 | Since: 1207
     */
    function _0xE7F8707269544B29(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xE7F8707269544B29', _player, _ped);
    }
    player_1._0xE7F8707269544B29 = _0xE7F8707269544B29;
    /**
     * Resets any aura effects applied to entities for a specific player in Deadeye mode, returning all aura-related visuals to their default state. This function is primarily used to remove any highlighting or aura effects set by `_SET_DEADEYE_ENTITY_AURA_WITH_FLAG - 0x2B12B6FC8B8772AB` and `_SET_DEADEYE_ENTITY_AURA_INTENSITY_WITH_FLAG - 0x131E294EF60160DF`
     *
     * Hash: 0xE910932F4B30BE23 | Since: 1207
     */
    function resetDeadeyeAuraEffect(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xE910932F4B30BE23', _player);
    }
    player_1.resetDeadeyeAuraEffect = resetDeadeyeAuraEffect;
    /**
     * Returns the depletion delay value for the Deadeye ability that was previously set using `SetDeadeyeAbilityDepletionDelay - 0x870634493CB4372C`
     *
     * Hash: 0xE92261BD28C0878F | Since: 1207
     */
    function getDeadeyeAbilityDepletionDelay(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xE92261BD28C0878F', _player);
    }
    player_1.getDeadeyeAbilityDepletionDelay = getDeadeyeAbilityDepletionDelay;
    /**
     * No comment provided
     *
     * Hash: 0xE956C2340A76272E | Since: 1207
     */
    function _0xE956C2340A76272E() {
        return Citizen.invokeNative('0xE956C2340A76272E', undefined);
    }
    player_1._0xE956C2340A76272E = _0xE956C2340A76272E;
    /**
     * No comment provided
     *
     * Hash: 0xEACEBAAE0A33FB3F | Since: 1207
     */
    function _0xEACEBAAE0A33FB3F() {
        Citizen.invokeNative('0xEACEBAAE0A33FB3F', undefined);
    }
    player_1._0xEACEBAAE0A33FB3F = _0xEACEBAAE0A33FB3F;
    /**
     * No comment provided
     *
     * Hash: 0xEBB6E27AC2FF32DA | Since: 1207
     */
    function _0xEBB6E27AC2FF32DA() {
        Citizen.invokeNative('0xEBB6E27AC2FF32DA', undefined, undefined, undefined, undefined, undefined);
    }
    player_1._0xEBB6E27AC2FF32DA = _0xEBB6E27AC2FF32DA;
    /**
     * No comment provided
     *
     * Hash: 0xEBFF94328FF7A18A | Since: 1207
     */
    function _0xEBFF94328FF7A18A() {
        Citizen.invokeNative('0xEBFF94328FF7A18A', undefined, undefined);
    }
    player_1._0xEBFF94328FF7A18A = _0xEBFF94328FF7A18A;
    /**
     * _CLEAR_FACIAL_* - _CLEAR_PED_BLOOD*
     *
     * Hash: 0xF21C7A3F3FFBA629 | Since: 1207
     */
    function _0xF21C7A3F3FFBA629(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xF21C7A3F3FFBA629', _player);
    }
    player_1._0xF21C7A3F3FFBA629 = _0xF21C7A3F3FFBA629;
    /**
     * No comment provided
     *
     * Hash: 0xF4CB347D7B5EB0FD | Since: 1207
     */
    function _0xF4CB347D7B5EB0FD() {
        return Citizen.invokeNative('0xF4CB347D7B5EB0FD');
    }
    player_1._0xF4CB347D7B5EB0FD = _0xF4CB347D7B5EB0FD;
    /**
     * No comment provided
     *
     * Hash: 0xF993373285053D77 | Since: 1207
     */
    function _0xF993373285053D77() {
        Citizen.invokeNative('0xF993373285053D77', undefined, undefined, undefined);
    }
    player_1._0xF993373285053D77 = _0xF993373285053D77;
    /**
     * Params: p1, p2, p3, p4 = 1.f, 0, 0, 0 in R* Scripts
     * _SPECIAL_ABILITY*
     *
     * Hash: 0xFA437FA0738C370C | Since: 1207
     */
    function _0xFA437FA0738C370C(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xFA437FA0738C370C', _player, 0, 0, 0, 0);
    }
    player_1._0xFA437FA0738C370C = _0xFA437FA0738C370C;
    /**
     * No comment provided
     *
     * Hash: 0xFA7DAAE3959E6C7B | Since: 1207
     */
    function _0xFA7DAAE3959E6C7B() {
        Citizen.invokeNative('0xFA7DAAE3959E6C7B', undefined, undefined);
    }
    player_1._0xFA7DAAE3959E6C7B = _0xFA7DAAE3959E6C7B;
    /**
     * Used in script function: NET_AUTO_FOLLOW_UPDATE_LEADER_VALUES
     * followMode:
     * HORSEFOLLOWMODE_AUTO = 0,
     * HORSEFOLLOWMODE_SIDE_ONLY,
     * HORSEFOLLOWMODE_BEHIND_ONLY,
     * HORSEFOLLOWMODE_BEHIND_AND_SIDE,
     * HORSEFOLLOWMODE_BEHIND_CLOSE
     * followPriority:
     * HORSEFOLLOWPRIORITY_STEER_ASSIST = 0,
     * HORSEFOLLOWPRIORITY_AMBIENT,
     * HORSEFOLLOWPRIORITY_NORMAL,
     * HORSEFOLLOWPRIORITY_HIGH
     *
     * Hash: 0xAC22AA6DF4D1C1DE | Since: 1207
     */
    function addAsFollowTarget(player, ped, followMode, followPriority) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddPlayerAsFollowTarget(_player, _ped, 0, 0, followMode, followPriority, false);
    }
    player_1.addAsFollowTarget = addAsFollowTarget;
    /**
     * No comment provided
     *
     * Hash: 0x8F2A81C09DA9124A | Since: 1207
     */
    function clearBountyTarget(player) {
        const _player = player instanceof Player ? player.localId() : player;
        ClearBountyTarget(_player);
    }
    player_1.clearBountyTarget = clearBountyTarget;
    /**
     * No comment provided
     *
     * Hash: 0x40AB73092C95B5F5 | Since: 1207
     */
    function eagleEyeDisableTrackingTrail(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return EagleEyeDisableTrackingTrail(_entity, undefined, undefined);
    }
    player_1.eagleEyeDisableTrackingTrail = eagleEyeDisableTrackingTrail;
    /**
     * false: default eagleeye color
     * true: green eagleeye color
     *
     * Hash: 0x2C41D93F550D5E37 | Since: 1207
     */
    function eagleEyeSetColor(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return EagleEyeSetColor(_player, false);
    }
    player_1.eagleEyeSetColor = eagleEyeSetColor;
    /**
     * No comment provided
     *
     * Hash: 0x907B16B3834C69E2 | Since: 1207
     */
    function eagleEyeSetCustomDistance(entity, distance) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        EagleEyeSetCustomDistance(_entity, distance);
    }
    player_1.eagleEyeSetCustomDistance = eagleEyeSetCustomDistance;
    /**
     * No comment provided
     *
     * Hash: 0xE0D6C2A146A5C993 | Since: 1207
     */
    function eagleEyeSetDrainRateModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        EagleEyeSetDrainRateModifier(_player, modifier);
    }
    player_1.eagleEyeSetDrainRateModifier = eagleEyeSetDrainRateModifier;
    /**
     * No comment provided
     *
     * Hash: 0x2AF423D6ECB2C485 | Since: 1207
     */
    function eagleEyeSetFocusOnAssociatedClueTrail(player, linkedWaypointPed) {
        const _player = player instanceof Player ? player.localId() : player;
        const _linkedWaypointPed = linkedWaypointPed instanceof Entity ? linkedWaypointPed.handle() : linkedWaypointPed;
        EagleEyeSetFocusOnAssociatedClueTrail(_player, _linkedWaypointPed);
    }
    player_1.eagleEyeSetFocusOnAssociatedClueTrail = eagleEyeSetFocusOnAssociatedClueTrail;
    /**
     * Sets the behavior of sprinting while the Eagleeye feature is active, determining whether sprinting cancels the effect based on the specified parameter.
     * old name was _EAGLE_EYE_SET_PLUS_FLAG_DISABLED this native can still be used as its declared.
     *
     * Hash: 0xCE285A4413B00B7F | Since: 1207
     */
    function eagleeyeSetSprintBehavior(player, disabled) {
        const _player = player instanceof Player ? player.localId() : player;
        EagleEyeSetPlusFlagDisabled(_player, disabled);
    }
    player_1.eagleeyeSetSprintBehavior = eagleeyeSetSprintBehavior;
    /**
     * No comment provided
     *
     * Hash: 0xDFC85C5199045026 | Since: 1207
     */
    function eagleEyeSetTrackingUpgrade(player) {
        const _player = player instanceof Player ? player.localId() : player;
        EagleEyeSetTrackingUpgrade(_player, 0);
    }
    player_1.eagleEyeSetTrackingUpgrade = eagleEyeSetTrackingUpgrade;
    /**
     * No comment provided
     *
     * Hash: 0x6FA957D1B55941C1 | Since: 1311
     */
    function eagleEyeSetTrackingUpgrade2(player) {
        const _player = player instanceof Player ? player.localId() : player;
        EagleEyeSetTrackingUpgrade2(_player, 0);
    }
    player_1.eagleEyeSetTrackingUpgrade2 = eagleEyeSetTrackingUpgrade2;
    /**
     * No comment provided
     *
     * Hash: 0x95EE1DEE1DCD9070 | Since: 1207
     */
    function enableCustomDeadeyeAbility(player, enable) {
        const _player = player instanceof Player ? player.localId() : player;
        EnableCustomDeadeyeAbility(_player, enable);
    }
    player_1.enableCustomDeadeyeAbility = enableCustomDeadeyeAbility;
    /**
     * (Un)lock Eagle Eye functionality
     *
     * Hash: 0xA63FCAD3A6FEC6D2 | Since: 1207
     */
    function enableEagleeye(player, enable) {
        const _player = player instanceof Player ? player.localId() : player;
        EnableEagleeye(_player, enable);
    }
    player_1.enableEagleeye = enableEagleeye;
    /**
     * No comment provided
     *
     * Hash: 0xE5A3DD2FF84E1A4B | Since: 1232
     */
    function forceRestScenario(toggle) {
        ForceRestScenario(toggle);
    }
    player_1.forceRestScenario = forceRestScenario;
    /**
     * No comment provided
     *
     * Hash: 0x5B6193813E03E4E9 | Since: 1207
     */
    function formatNameString() {
        return FormatPlayerNameString();
    }
    player_1.formatNameString = formatNameString;
    /**
     * No comment provided
     *
     * Hash: 0x46FA0AE18F4C7FA9 | Since: 1207
     */
    function getActiveHorseFor(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetActiveHorseForPlayer(_player);
    }
    player_1.getActiveHorseFor = getActiveHorseFor;
    /**
     * No comment provided
     *
     * Hash: 0x2E78D822208E740A | Since: 1207
     */
    function getAiDefenseModifierAgainstAi(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetAiPlayerDefenseModifierAgainstAi(_player);
    }
    player_1.getAiDefenseModifierAgainstAi = getAiDefenseModifierAgainstAi;
    /**
     * p0: mostly Ped Hashes
     *
     * Hash: 0x8E84119A23C16623 | Since: 1207
     */
    function getConstructedDiscoveredCharacterName(p0, model, outfit) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return GetConstructedDiscoveredCharacterName(p0, model, outfit);
    }
    player_1.getConstructedDiscoveredCharacterName = getConstructedDiscoveredCharacterName;
    /**
     * No comment provided
     *
     * Hash: 0xCCE7C695C164C35F | Since: 1207
     */
    function getDeadeyeAbilityLevel(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetDeadeyeAbilityLevel(_player);
    }
    player_1.getDeadeyeAbilityLevel = getDeadeyeAbilityLevel;
    /**
     * No comment provided
     *
     * Hash: 0x0772F87D7B07719A | Since: 1207
     */
    function getHasDiscoveredCharacterNameSp(player, discoveryHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof discoveryHash === 'string')
            discoveryHash = misc.getHashKey(discoveryHash);
        return GetHasPlayerDiscoveredCharacterNameSp(_player, 0, discoveryHash);
    }
    player_1.getHasDiscoveredCharacterNameSp = getHasDiscoveredCharacterNameSp;
    /**
     * No comment provided
     *
     * Hash: 0x32348719DCED2969 | Since: 1207
     */
    function getIsDeadeyeTaggingEnabled(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetIsDeadeyeTaggingEnabled(_player);
    }
    player_1.getIsDeadeyeTaggingEnabled = getIsDeadeyeTaggingEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xCCD9B77F70D31C9D | Since: 1207
     */
    function getNumMarkedDeadeyeTargets(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetNumMarkedDeadeyeTargets(_player);
    }
    player_1.getNumMarkedDeadeyeTargets = getNumMarkedDeadeyeTargets;
    /**
     * No comment provided
     *
     * Hash: 0xDF66A37936D5F3D9 | Since: 1207
     */
    function getCachedDeadEyeAmount(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerCachedDeadEyeAmount(_player);
    }
    player_1.getCachedDeadEyeAmount = getCachedDeadEyeAmount;
    /**
     * No comment provided
     *
     * Hash: 0xA81D24AE0AF99A5E | Since: 1207
     */
    function getDeadEye(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerDeadEye(_player);
    }
    player_1.getDeadEye = getDeadEye;
    /**
     * No comment provided
     *
     * Hash: 0x3A6AE4EEE30370FE | Since: 1207
     */
    function getDeadEyeMeterLevel(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerDeadEyeMeterLevel(_player, false);
    }
    player_1.getDeadEyeMeterLevel = getDeadEyeMeterLevel;
    /**
     * No comment provided
     *
     * Hash: 0x0317C947D062854E | Since: 1207
     */
    function getHealth(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerHealth(_player);
    }
    player_1.getHealth = getHealth;
    /**
     * No comment provided
     *
     * Hash: 0x22CD23BB0C45E0CD | Since: 1207
     */
    function getHealthRechargeMultiplier(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerHealthRechargeMultiplier(_player);
    }
    player_1.getHealthRechargeMultiplier = getHealthRechargeMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x5CA6BBD4A7D8145E | Since: 1207
     */
    function getHuntingWagon(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerHuntingWagon(_player);
    }
    player_1.getHuntingWagon = getHuntingWagon;
    /**
     * No comment provided
     *
     * Hash: 0x592F58BC4D2A2CF3 | Since: 1207
     */
    function getMaxDeadEye(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerMaxDeadEye(_player, undefined);
    }
    player_1.getMaxDeadEye = getMaxDeadEye;
    /**
     * See _SET_PLAYER_MOOD
     *
     * Hash: 0x054473164C012699 | Since: 1207
     */
    function getMood(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerMood(_player);
    }
    player_1.getMood = getMood;
    /**
     * No comment provided
     *
     * Hash: 0xAD03B03737CE6810 | Since: 1207
     */
    function getOwnerOfMount(mount) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        return GetPlayerOwnerOfMount(_mount);
    }
    player_1.getOwnerOfMount = getOwnerOfMount;
    /**
     * No comment provided
     *
     * Hash: 0x7C803BDC8343228D | Since: 1207
     */
    function getOwnerOfVehicle(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetPlayerOwnerOfVehicle(_vehicle);
    }
    player_1.getOwnerOfVehicle = getOwnerOfVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x5EBE38A20BC51C27 | Since: 1207
     */
    function getPed2(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerPed2(_player);
    }
    player_1.getPed2 = getPed2;
    /**
     * If player has less Dead Eye than required, Dead Eye cant be triggered.
     *
     * Hash: 0x811A748B1BE231BA | Since: 1207
     */
    function getRequiredDeadEyeAmount(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerRequiredDeadEyeAmount(_player);
    }
    player_1.getRequiredDeadEyeAmount = getRequiredDeadEyeAmount;
    /**
     * playerResetFlag: See 0x9F9A829C6751F3C7
     *
     * Hash: 0xFE691E89C08937B6 | Since: 1207
     */
    function getResetFlag(player, playerResetFlag) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerResetFlag(_player, playerResetFlag);
    }
    player_1.getResetFlag = getResetFlag;
    /**
     * No comment provided
     *
     * Hash: 0xAB3773E7AA1E9DCC | Since: 1207
     */
    function getSpecialAbilityMultiplier(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerSpecialAbilityMultiplier(_player);
    }
    player_1.getSpecialAbilityMultiplier = getSpecialAbilityMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x0FF421E467373FCF | Since: 1207
     */
    function getStamina(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerStamina(_player);
    }
    player_1.getStamina = getStamina;
    /**
     * No comment provided
     *
     * Hash: 0x68A0389E0718AC8F | Since: 1207
     */
    function getStaminaDepletionMultiplier(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerStaminaDepletionMultiplier(_player);
    }
    player_1.getStaminaDepletionMultiplier = getStaminaDepletionMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x617D3494AD58200F | Since: 1207
     */
    function getStaminaRechargeMultiplier(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerStaminaRechargeMultiplier(_player);
    }
    player_1.getStaminaRechargeMultiplier = getStaminaRechargeMultiplier;
    /**
     * Returns true if PromptType is enabled for ped (mount)
     * Params: See 0x0751D461F06E41CE
     *
     * Hash: 0xEA8F168A76A0B9BC | Since: 1207
     */
    function getUiPromptForPedIsEnabled(player, ped, promptType, promptMode) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPlayerUiPromptForPedIsEnabled(_player, _ped, promptType, promptMode);
    }
    player_1.getUiPromptForPedIsEnabled = getUiPromptForPedIsEnabled;
    /**
     * Returns false if PromptType is enabled
     * Params: See 0x0751D461F06E41CE
     *
     * Hash: 0x6614F9039BD31931 | Since: 1207
     */
    function getUiPromptIsDisabled(player, promptType, promptMode) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetPlayerUiPromptIsDisabled(_player, promptType, promptMode);
    }
    player_1.getUiPromptIsDisabled = getUiPromptIsDisabled;
    /**
     * No comment provided
     *
     * Hash: 0xFE0304050261442C | Since: 1207
     */
    function getWeaponDamage(player, weaponHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetPlayerWeaponDamage(_player, weaponHash);
    }
    player_1.getWeaponDamage = getWeaponDamage;
    /**
     * No comment provided
     *
     * Hash: 0xB48050D326E9A2F3 | Since: 1207
     */
    function getSaddleHorseFor(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetSaddleHorseForPlayer(_player);
    }
    player_1.getSaddleHorseFor = getSaddleHorseFor;
    /**
     * No comment provided
     *
     * Hash: 0xD3F7445CEA2E5035 | Since: 1207
     */
    function getTempHorse(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetTempPlayerHorse(_player);
    }
    player_1.getTempHorse = getTempHorse;
    /**
     * No comment provided
     *
     * Hash: 0xB9050A97594C8832 | Since: 1207
     */
    function getVehicleOwnedBy(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return GetVehicleOwnedByPlayer(_player);
    }
    player_1.getVehicleOwnedBy = getVehicleOwnedBy;
    /**
     * Returns -1.0f if no multiplier has been set
     *
     * Hash: 0xA82964B9D8D6A983 | Since: 1207
     */
    function getWantedLevelMultiplier() {
        return GetWantedLevelMultiplier();
    }
    player_1.getWantedLevelMultiplier = getWantedLevelMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x8A0643B0B4CA276B | Since: 1207
     */
    function isDeadeyeAbilityLocked(player, abilityType) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsDeadeyeAbilityLocked(_player, abilityType);
    }
    player_1.isDeadeyeAbilityLocked = isDeadeyeAbilityLocked;
    /**
     * No comment provided
     *
     * Hash: 0x0E6846476906C9DD | Since: 1207
     */
    function isEagleEyeRegisteredForEntity(player, entity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEagleEyeRegisteredForEntity(_player, _entity);
    }
    player_1.isEagleEyeRegisteredForEntity = isEagleEyeRegisteredForEntity;
    /**
     * No comment provided
     *
     * Hash: 0xE24C64D9ADED2EF5 | Since: 1207
     */
    function isFollowingTarget(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPlayerFollowingTarget(_player, _ped);
    }
    player_1.isFollowingTarget = isFollowingTarget;
    /**
     * Checks if player is focused on any entity
     *
     * Hash: 0x1A51BFE60708E482 | Since: 1207
     */
    function isFreeFocusing(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerFreeFocusing(_player);
    }
    player_1.isFreeFocusing = isFreeFocusing;
    /**
     * No comment provided
     *
     * Hash: 0x04D7F33640662FA2 | Since: 1207
     */
    function isInScope(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsPlayerInScope(_player);
    }
    player_1.isInScope = isInScope;
    /**
     * No comment provided
     *
     * Hash: 0x45AB66D02B601FA7 | Since: 1207
     */
    function isSecondarySpecialAbilityActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsSecondarySpecialAbilityActive(_player);
    }
    player_1.isSecondarySpecialAbilityActive = isSecondarySpecialAbilityActive;
    /**
     * Returns true if eagle eye is enabled for the player
     *
     * Hash: 0xE022CC1B545F1D9F | Since: 1207
     */
    function isSecondarySpecialAbilityEnabled(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsSecondarySpecialAbilityEnabled(_player);
    }
    player_1.isSecondarySpecialAbilityEnabled = isSecondarySpecialAbilityEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xB16223CB7DA965F0 | Since: 1207
     */
    function isSpecialAbilityActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return IsSpecialAbilityActive(_player);
    }
    player_1.isSpecialAbilityActive = isSpecialAbilityActive;
    /**
     * Toggle handles wether Deadeye and Eagleeye are infinite or not.
     *
     * Hash: 0x28A13BF6B05C3D83 | Since: 1207
     */
    function modifyInfiniteTrailVision(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        ModifyInfiniteTrailVision(_player, toggle);
    }
    player_1.modifyInfiniteTrailVision = modifyInfiniteTrailVision;
    /**
     * No comment provided
     *
     * Hash: 0xFB0E622B401884D3 | Since: 1207
     */
    function modifyDiscoveredCharacterNameMpSetUndiscovered(discoveryHash) {
        if (typeof discoveryHash === 'string')
            discoveryHash = misc.getHashKey(discoveryHash);
        ModifyPlayerDiscoveredCharacterNameMpSetUndiscovered(discoveryHash);
    }
    player_1.modifyDiscoveredCharacterNameMpSetUndiscovered = modifyDiscoveredCharacterNameMpSetUndiscovered;
    /**
     * Params: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptType
     * promptType is mostly 34 (PP_TRACK_ANIMAL), promptMode = 0 (PP_MODE_BLOCK) in R* Scripts
     *
     * Hash: 0x0751D461F06E41CE | Since: 1207
     */
    function modifyUiPrompt(player, promptType, promptMode, disabled) {
        const _player = player instanceof Player ? player.localId() : player;
        ModifyPlayerUiPrompt(_player, promptType, promptMode, disabled);
    }
    player_1.modifyUiPrompt = modifyUiPrompt;
    /**
     * Params: See 0x0751D461F06E41CE
     *
     * Hash: 0xA3DB37EDF9A74635 | Since: 1207
     */
    function modifyUiPromptForPed(player, ped, promptType, promptMode, enabled) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ModifyPlayerUiPromptForPed(_player, _ped, promptType, promptMode, enabled);
    }
    player_1.modifyUiPromptForPed = modifyUiPromptForPed;
    /**
     * Returns true if the given player has a valid ped.
     *
     * Hash: 0x0760D6F70EBCC05C | Since: 1207
     */
    function networkHasValidPed(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return NetworkHasPlayerValidPed(_player);
    }
    player_1.networkHasValidPed = networkHasValidPed;
    /**
     * Used for setting up eagle eye for entity
     * Params: p2 = re-register or not?
     *
     * Hash: 0x543DFE14BE720027 | Since: 1207
     */
    function registerEagleEyeForEntity(player, entity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RegisterEagleEyeForEntity(_player, _entity, false);
    }
    player_1.registerEagleEyeForEntity = registerEagleEyeForEntity;
    /**
     * No comment provided
     *
     * Hash: 0xAC67098A1E54ABB0 | Since: 1207
     */
    function registerEagleEyeTrailsForEntity(player, entity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        RegisterEagleEyeTrailsForEntity(_player, _entity, undefined);
    }
    player_1.registerEagleEyeTrailsForEntity = registerEagleEyeTrailsForEntity;
    /**
     * No comment provided
     *
     * Hash: 0x0C6B89876262A99D | Since: 1207
     */
    function removeAsFollowTarget(player, ped) {
        const _player = player instanceof Player ? player.localId() : player;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemovePlayerAsFollowTarget(_player, _ped);
    }
    player_1.removeAsFollowTarget = removeAsFollowTarget;
    /**
     * Activates EagleEye, called together with 0x28A13BF6B05C3D83
     *
     * Hash: 0x1710BC33CFB83634 | Since: 1207
     */
    function secondarySpecialAbilitySetActive(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SecondarySpecialAbilitySetActive(_player);
    }
    player_1.secondarySpecialAbilitySetActive = secondarySpecialAbilitySetActive;
    /**
     * Deactivates EagleEye, called together with 0xC0B21F235C02139C
     *
     * Hash: 0x64FF4BF9AF59E139 | Since: 1207
     */
    function secondarySpecialAbilitySetDisabled(player, disabled) {
        const _player = player instanceof Player ? player.localId() : player;
        SecondarySpecialAbilitySetDisabled(_player, disabled);
    }
    player_1.secondarySpecialAbilitySetDisabled = secondarySpecialAbilitySetDisabled;
    /**
     * Sets Player's Defense against AI modifier
     *
     * Hash: 0x914071FF93AF2692 | Since: 1207
     */
    function setAiDefenseModifierAgainstAi(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetAiPlayerDefenseModifierAgainstAi(_player, modifier);
    }
    player_1.setAiDefenseModifierAgainstAi = setAiDefenseModifierAgainstAi;
    /**
     * No comment provided
     *
     * Hash: 0x6ADF821FBF21920E | Since: 1207
     */
    function setBountyTarget(player, target) {
        const _player = player instanceof Player ? player.localId() : player;
        const _target = target instanceof Player ? target.localId() : target;
        SetBountyTarget(_player, _target);
    }
    player_1.setBountyTarget = setBountyTarget;
    /**
     * No comment provided
     *
     * Hash: 0xBE0C524970892D41 | Since: 1207
     */
    function setBowDrawReductionTimeInDeadeye(player, drawReductionTime) {
        const _player = player instanceof Player ? player.localId() : player;
        SetBowDrawReductionTimeInDeadeye(_player, drawReductionTime);
    }
    player_1.setBowDrawReductionTimeInDeadeye = setBowDrawReductionTimeInDeadeye;
    /**
     * Decreases Stamina bar drain speed by % when drawing a bow.
     *
     * Hash: 0xFE7C9CF376D23342 | Since: 1207
     */
    function setBowStaminaDrainSpeed(player, staminaDrain) {
        const _player = player instanceof Player ? player.localId() : player;
        SetBowStaminaDrainSpeed(_player, staminaDrain);
    }
    player_1.setBowStaminaDrainSpeed = setBowStaminaDrainSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x7761A30432C91297 | Since: 1207
     */
    function setDamageCloseDistanceBonus(player, closeRangeLowerBound, closeRangeUpperBound) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDamageCloseDistanceBonus(_player, closeRangeLowerBound, closeRangeUpperBound);
    }
    player_1.setDamageCloseDistanceBonus = setDamageCloseDistanceBonus;
    /**
     * No comment provided
     *
     * Hash: 0x5006C36652D6EC56 | Since: 1207
     */
    function setDamageCloseDistanceBonusTotal(player, closeDamageBonus) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDamageCloseDistanceBonusTotal(_player, closeDamageBonus);
    }
    player_1.setDamageCloseDistanceBonusTotal = setDamageCloseDistanceBonusTotal;
    /**
     * No comment provided
     *
     * Hash: 0xED591CB17C8BA216 | Since: 1207
     */
    function setDamageFarDistanceBonus(player, farRangeLowerBound, farRangeUpperBound) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDamageFarDistanceBonus(_player, farRangeLowerBound, farRangeUpperBound);
    }
    player_1.setDamageFarDistanceBonus = setDamageFarDistanceBonus;
    /**
     * No comment provided
     *
     * Hash: 0x1F0E3A4434565F8F | Since: 1207
     */
    function setDamageFarDistanceBonusTotal(player, farDamageBonus) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDamageFarDistanceBonusTotal(_player, farDamageBonus);
    }
    player_1.setDamageFarDistanceBonusTotal = setDamageFarDistanceBonusTotal;
    /**
     * Only used in R* SP Script short_update
     *
     * Hash: 0x870634493CB4372C | Since: 1207
     */
    function setDeadeyeAbilityDepletionDelay(player, delay) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDeadeyeAbilityDepletionDelay(_player, delay);
    }
    player_1.setDeadeyeAbilityDepletionDelay = setDeadeyeAbilityDepletionDelay;
    /**
     * Max level is 5.
     *
     * Hash: 0xF0FE8E790BFEB5BB | Since: 1207
     */
    function setDeadeyeAbilityLevel(player, level) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDeadeyeAbilityLevel(_player, level);
    }
    player_1.setDeadeyeAbilityLevel = setDeadeyeAbilityLevel;
    /**
     * No comment provided
     *
     * Hash: 0x2797B8D66DD0EBB8 | Since: 1207
     */
    function setDeadeyeAbilityLocked(player, abilityType, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDeadeyeAbilityLocked(_player, abilityType, toggle);
    }
    player_1.setDeadeyeAbilityLocked = setDeadeyeAbilityLocked;
    /**
     * No comment provided
     *
     * Hash: 0x83FCD6921FC8FD05 | Since: 1207
     */
    function setDeadeyeTaggingConfig(player, filter) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDeadeyeTaggingConfig(_player, filter);
    }
    player_1.setDeadeyeTaggingConfig = setDeadeyeTaggingConfig;
    /**
     * No comment provided
     *
     * Hash: 0x6B5DDFB967E5073D | Since: 1207
     */
    function setDeadeyeTaggingEnabled(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDeadeyeTaggingEnabled(_player, toggle);
    }
    player_1.setDeadeyeTaggingEnabled = setDeadeyeTaggingEnabled;
    /**
     * Disables the players ability to be wanted by lawmen
     *
     * Hash: 0x8674D138391FFB1B | Since: 1207
     */
    function setDisableWantedLevel(player, disable) {
        const _player = player instanceof Player ? player.localId() : player;
        SetDisablePlayerWantedLevel(_player, disable);
    }
    player_1.setDisableWantedLevel = setDisableWantedLevel;
    /**
     * see personaabilities.meta
     * enum ePersonaAbilityFlag
     * {
     * PERSONA_CAN_AUTOESCAPE_FROM_LASSO,
     * PERSONA_HAT_BLOCKS_FIRST_HEADSHOT,
     * PERSONA_FULL_AUTO_FOR_ALL_WEAPONS,
     * PERSONA_MIGHT_LIVE_AFTER_DEADLY_DAMAGE,
     * PERSONA_IGNORE_AIM_BEFORE_FIRING_RESTRICTIONS,
     * PERSONA_DEADEYE_INSTANT_RELOAD,
     * PERSONA_USE_PHOSPHOROUS_ROUNDS,
     * PERSONA_CONT_DEADEYE_ON_TAKING_COVER,
     * PERSONA_CONT_DEADEYE_ON_RELOAD,
     * PERSONA_CONT_DEADEYE_ON_SHOOTING,
     * PERSONA_CONT_DEADEYE_ON_EXITING_AIM,
     * PERSONA_DISABLE_PLAYER_CANCELLING_DEADEYE,
     * PERSONA_CONT_DEADEYE_ON_RAGDOLL,
     * PERSONA_USE_EXPLOSIVE_ROUNDS,
     * PERSONA_EXIT_DEADEYE_ON_TAKING_DAMAGE,
     * PERSONA_CARRY_TWO_MONEYBAGS,
     * PERSONA_ABILITY_LONG_PICK_HERBS,
     * PERSONA_ABILITY_UNBREAKABLE_LASSO,
     * PERSONA_CONT_DEADEYE_ON_SPRINTING,
     * PERSONA_CANT_DEAL_HEADSHOTS,
     * PERSONA_HANGMAN,
     * PERSONA_ALLOW_DEADEYE_WITH_MELEE_WEAPONS,
     * PERSONA_ALLOW_DEADEYE_WHILE_UNARMED,
     * PERSONA_DISABLE_DEADEYE_PERFECT_ACCURACY,
     * PERSONA_CANT_DEAL_HEADSHOTS_TO_PLAYERS,
     * PERSONA_CANT_DEAL_CRITICAL_DAMAGE,
     * PERSONA_CANT_DEAL_CRITICAL_DAMAGE_TO_PLAYERS,
     * PERSONA_ALLOW_EAGLEEYE_IN_COMBAT,
     * PERSONA_CONT_EAGLEEYE_ON_SPRINT,
     * PERSONA_SUPPRESS_LENGENDARY_EAGLEEYE_TRAIL_COLOR
     * };
     *
     * Hash: 0x7146CF430965927C | Since: 1207
     */
    function setLocalPersonaAbilityFlag(flagId, toggle) {
        SetLocalPlayerPersonaAbilityFlag(flagId, toggle);
    }
    player_1.setLocalPersonaAbilityFlag = setLocalPersonaAbilityFlag;
    /**
     * Focus Fire VFX start for player: p1 = focusfire
     *
     * Hash: 0x5F8E0303C229C84B | Since: 1207
     */
    function setLockonFocusFireVfx(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return SetLockonFocusFireVfx(_player);
    }
    player_1.setLockonFocusFireVfx = setLockonFocusFireVfx;
    /**
     * No comment provided
     *
     * Hash: 0xEA6DE0CD15AECBE2 | Since: 1207
     */
    function setMaxWantedLevel2(maxWantedLevel) {
        SetMaxWantedLevel2(maxWantedLevel);
    }
    player_1.setMaxWantedLevel2 = setMaxWantedLevel2;
    /**
     * No comment provided
     *
     * Hash: 0x5B9813ECF7633FE8 | Since: 1207
     */
    function setMountPromptDisabled(disabled) {
        SetMountPromptDisabled(disabled);
    }
    player_1.setMountPromptDisabled = setMountPromptDisabled;
    /**
     * Seems to work similar to 0xD2CB0FB0FDCB473D
     *
     * Hash: 0x8FBF9EDB378CCB8C | Since: 1207
     */
    function setPedActiveHorse(player, horse) {
        const _player = player instanceof Player ? player.localId() : player;
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        SetPedActivePlayerHorse(_player, _horse);
    }
    player_1.setPedActiveHorse = setPedActiveHorse;
    /**
     * No comment provided
     *
     * Hash: 0xD2CB0FB0FDCB473D | Since: 1207
     */
    function setPedAsSaddleHorseFor(player, mount) {
        const _player = player instanceof Player ? player.localId() : player;
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        SetPedAsSaddleHorseForPlayer(_player, _mount);
    }
    player_1.setPedAsSaddleHorseFor = setPedAsSaddleHorseFor;
    /**
     * No comment provided
     *
     * Hash: 0x39363DFD04E91496 | Since: 1311
     */
    function setCanMercyKill(player, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerCanMercyKill(_player, toggle);
    }
    player_1.setCanMercyKill = setCanMercyKill;
    /**
     * damageInfo: STANDARD_PED_DAMAGE, STANDARD_FEMALE_PED_DAMAGE, STANDARD_PLAYER_PED_DAMAGE_MP, STANDARD_FEMALE_PLAYER_PED_DAMAGE_MP
     *
     * Hash: 0x78B3D19AF6391A55 | Since: 1207
     */
    function setDamageInfoOverride(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return SetPlayerDamageInfoOverride(_player);
    }
    player_1.setDamageInfoOverride = setDamageInfoOverride;
    /**
     * Sets stamina core drains peed using ranged damage scale and melee damage scale
     *
     * Hash: 0x497A6539BB0E8787 | Since: 1207
     */
    function setDefenseModifier(player, weaponDefenseMod, meleeDefenseMod) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerDefenseModifier(_player, weaponDefenseMod, meleeDefenseMod);
    }
    player_1.setDefenseModifier = setDefenseModifier;
    /**
     * bullet damage modifier: type = 4
     * explosive damage Defense mod: type = 7
     * fire damage Defense mod: type = 8, 15
     *
     * Hash: 0x93F499CAE53FCD05 | Since: 1207
     */
    function setDefenseTypeModifier(player, _type, defenseModifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerDefenseTypeModifier(_player, _type, defenseModifier);
    }
    player_1.setDefenseTypeModifier = setDefenseTypeModifier;
    /**
     * No comment provided
     *
     * Hash: 0x2D3ACE3DE0A2B622 | Since: 1207
     */
    function setExplosiveWeaponDamageModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerExplosiveWeaponDamageModifier(_player, modifier);
    }
    player_1.setExplosiveWeaponDamageModifier = setExplosiveWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x7C32191D9FB2BDEA | Since: 1207
     */
    function setHasDiscoveredCharacterNameMp(discoveryHash) {
        if (typeof discoveryHash === 'string')
            discoveryHash = misc.getHashKey(discoveryHash);
        SetPlayerHasDiscoveredCharacterNameMp(discoveryHash);
    }
    player_1.setHasDiscoveredCharacterNameMp = setHasDiscoveredCharacterNameMp;
    /**
     * No comment provided
     *
     * Hash: 0x946D46CD6DFB9742 | Since: 1207
     */
    function setHasDiscoveredCharacterNameSp(player, discoveryHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof discoveryHash === 'string')
            discoveryHash = misc.getHashKey(discoveryHash);
        SetPlayerHasDiscoveredCharacterNameSp(_player, 0, discoveryHash);
    }
    player_1.setHasDiscoveredCharacterNameSp = setHasDiscoveredCharacterNameSp;
    /**
     * Setting player's Health recharge time to zero forces immediate health regen
     *
     * Hash: 0x535ED4605F89AB6E | Since: 1207
     */
    function setHealthRechargeTimeModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerHealthRechargeTimeModifier(_player, modifier);
    }
    player_1.setHealthRechargeTimeModifier = setHealthRechargeTimeModifier;
    /**
     * Only applies to HUNTERCART01
     *
     * Hash: 0x6A4404BDFA62CE2C | Since: 1207
     */
    function setHuntingWagon(player, wagon) {
        const _player = player instanceof Player ? player.localId() : player;
        const _wagon = wagon instanceof Vehicle ? wagon.localId() : wagon;
        SetPlayerHuntingWagon(_player, _wagon);
    }
    player_1.setHuntingWagon = setHuntingWagon;
    /**
     * No comment provided
     *
     * Hash: 0x98CD760DE43B612E | Since: 1207
     */
    function setInteractionNegativeResponse(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return SetPlayerInteractionNegativeResponse(_player);
    }
    player_1.setInteractionNegativeResponse = setInteractionNegativeResponse;
    /**
     * No comment provided
     *
     * Hash: 0xC6366A585659D15C | Since: 1207
     */
    function setInteractionPositiveResponse(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return SetPlayerInteractionPositiveResponse(_player);
    }
    player_1.setInteractionPositiveResponse = setInteractionPositiveResponse;
    /**
     * Sets your targeting mode for when you're in a vehicle (perhaps a mount/horse).
     * see SET_PLAYER_TARGETING_MODE for eTargetingMode
     *
     * Hash: 0x19B4F71703902238 | Since: 1207
     */
    function setInVehicleTargetingMode(targetMode) {
        SetPlayerInVehicleTargetingMode(targetMode);
    }
    player_1.setInVehicleTargetingMode = setInVehicleTargetingMode;
    /**
     * _SET_PLAYER_A* - _SET_PLAYER_C*
     *
     * Hash: 0x43F50A7CD2482156 | Since: 1207
     */
    function setLassoDamagePerSecond(player, damage) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerLassoDamagePerSecond(_player, damage);
    }
    player_1.setLassoDamagePerSecond = setLassoDamagePerSecond;
    /**
     * No comment provided
     *
     * Hash: 0x4EA69188FBCE6A7D | Since: 1207
     */
    function setLocalAccuracyFloorModifier(player, accuracy) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerLocalAccuracyFloorModifier(_player, accuracy);
    }
    player_1.setLocalAccuracyFloorModifier = setLocalAccuracyFloorModifier;
    /**
     * No comment provided
     *
     * Hash: 0x292F0B6EDC82E3A4 | Since: 1207
     */
    function setManageBuffSuperJump(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerManageBuffSuperJump(_player, 0);
    }
    player_1.setManageBuffSuperJump = setManageBuffSuperJump;
    /**
     * No comment provided
     *
     * Hash: 0xE133C1EC5300F740 | Since: 1207
     */
    function setMaxAmmoOverrideForAmmoType(player, ammoType, amount) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof ammoType === 'string')
            ammoType = misc.getHashKey(ammoType);
        SetPlayerMaxAmmoOverrideForAmmoType(_player, ammoType, amount);
    }
    player_1.setMaxAmmoOverrideForAmmoType = setMaxAmmoOverrideForAmmoType;
    /**
     * mood: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedMood
     *
     * Hash: 0x39BED552DB46FFA9 | Since: 1207
     */
    function setMood(player, mood) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerMood(_player, mood);
    }
    player_1.setMood = setMood;
    /**
     * Name could potentially be inaccurate.
     * Used in Script Function HORSE_SETUP_PLAYER_HORSE_ATTRIBUTES (p1 = true)
     * _SET_PLAYER_L* - _SET_PLAYER_M*
     *
     * Hash: 0xDF93973251FB2CA5 | Since: 1207
     */
    function setMountStateActive(player, active) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerMountStateActive(_player, active);
    }
    player_1.setMountStateActive = setMountStateActive;
    /**
     * Seems to enable active horse equipment prompt when being near it and enables the control that opens the inventory as well
     *
     * Hash: 0xE6D4E435B56D5BD0 | Since: 1207
     */
    function setOwnsMount(player, mount) {
        const _player = player instanceof Player ? player.localId() : player;
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        SetPlayerOwnsMount(_player, _mount);
    }
    player_1.setOwnsMount = setOwnsMount;
    /**
     * No comment provided
     *
     * Hash: 0xD0E02AA618020D17 | Since: 1207
     */
    function setOwnsVehicle(player, vehicle) {
        const _player = player instanceof Player ? player.localId() : player;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetPlayerOwnsVehicle(_player, _vehicle);
    }
    player_1.setOwnsVehicle = setOwnsVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xDEE80FEDFDD43C9B | Since: 1207
     */
    function setRemoteAccuracyFloorModifier(player, accuracy) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerRemoteAccuracyFloorModifier(_player, accuracy);
    }
    player_1.setRemoteAccuracyFloorModifier = setRemoteAccuracyFloorModifier;
    /**
     * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePlayerResetFlags
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/PLAYER_RESET_FLAGS
     *
     * Hash: 0x9F9A829C6751F3C7 | Since: 1207
     */
    function setResetFlag(player, playerResetFlag) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerResetFlag(_player, playerResetFlag, false);
    }
    player_1.setResetFlag = setResetFlag;
    /**
     * No comment provided
     *
     * Hash: 0xBBADFB5E5E5766FB | Since: 1207
     */
    function setStaminaSprintDepletionMultiplier(player, multiplier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerStaminaSprintDepletionMultiplier(_player, multiplier);
    }
    player_1.setStaminaSprintDepletionMultiplier = setStaminaSprintDepletionMultiplier;
    /**
     * Sets the aura color for entities that the player can target in Deadeye mode, based on a specific hash value. This Native was previously named `SetPlayerStatFlagHash`, but it has been re-evaluated and renamed to better reflect its function in controlling the Deadeye aura color for targeted entities
     * some colors
     * 0: Default aura
     * 1014693585
     * 1936842089
     * 1979474018
     *
     * Hash: 0x768E81AE285A4B67 | Since: 1207
     */
    function setDeadEyeAuraByHash(player, auraColorHash) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof auraColorHash === 'string')
            auraColorHash = misc.getHashKey(auraColorHash);
        SetPlayerStatFlagHash(_player, auraColorHash);
    }
    player_1.setDeadEyeAuraByHash = setDeadEyeAuraByHash;
    /**
     * No comment provided
     *
     * Hash: 0x967FF5BC0CFE6D26 | Since: 1207
     */
    function setTotalAccuracyModifier(player, accuracy) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerTotalAccuracyModifier(_player, accuracy);
    }
    player_1.setTotalAccuracyModifier = setTotalAccuracyModifier;
    /**
     * No comment provided
     *
     * Hash: 0xAF341032E97FB061 | Since: 1207
     */
    function setTrampleDamageModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetPlayerTrampleDamageModifier(_player, modifier);
    }
    player_1.setTrampleDamageModifier = setTrampleDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x59F0AFF3E0A1B019 | Since: 1207
     */
    function setWeaponGroupAsInstantKill(player, weaponGroup, toggle) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof weaponGroup === 'string')
            weaponGroup = misc.getHashKey(weaponGroup);
        SetPlayerWeaponGroupAsInstantKill(_player, weaponGroup, toggle);
    }
    player_1.setWeaponGroupAsInstantKill = setWeaponGroupAsInstantKill;
    /**
     * No comment provided
     *
     * Hash: 0xFC79DCC94D0A5897 | Since: 1207
     */
    function setWeaponGroupDamageModifier(player, weaponGroup, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof weaponGroup === 'string')
            weaponGroup = misc.getHashKey(weaponGroup);
        SetPlayerWeaponGroupDamageModifier(_player, weaponGroup, modifier);
    }
    player_1.setWeaponGroupDamageModifier = setWeaponGroupDamageModifier;
    /**
     * Decreases the damage the player receives while on horseback
     * Previous name: _SET_RECEIVED_HORSEBACK_DAMAGE_DECREASE
     *
     * Hash: 0xB427911EA6DFFEF3 | Since: 1207
     */
    function setReceivedDamageTakenOnHorsebackModifier(player, damageDecrease) {
        const _player = player instanceof Player ? player.localId() : player;
        SetReceivedHorsebackDamageDecrease(_player, damageDecrease);
    }
    player_1.setReceivedDamageTakenOnHorsebackModifier = setReceivedDamageTakenOnHorsebackModifier;
    /**
     * No comment provided
     *
     * Hash: 0xDC68829BB3F37023 | Since: 1207
     */
    function setShowInfoCard(player, showingInfoCard) {
        const _player = player instanceof Player ? player.localId() : player;
        SetShowInfoCard(_player, showingInfoCard);
    }
    player_1.setShowInfoCard = setShowInfoCard;
    /**
     * No comment provided
     *
     * Hash: 0xAE4BCC79C587EBBF | Since: 1207
     */
    function setSpecialAbilityActivationCost(player, activationCost) {
        const _player = player instanceof Player ? player.localId() : player;
        SetSpecialAbilityActivationCost(_player, activationCost, 0);
    }
    player_1.setSpecialAbilityActivationCost = setSpecialAbilityActivationCost;
    /**
     * Only used in R* SP Script short_update
     *
     * Hash: 0xC0B1C05B313693D1 | Since: 1207
     */
    function setSpecialAbilityDisableTimer(player, timer) {
        const _player = player instanceof Player ? player.localId() : player;
        SetSpecialAbilityDisableTimer(_player, timer);
    }
    player_1.setSpecialAbilityDisableTimer = setSpecialAbilityDisableTimer;
    /**
     * durationCost: per second
     *
     * Hash: 0xB783F75940B23014 | Since: 1207
     */
    function setSpecialAbilityDurationCost(player, durationCost) {
        const _player = player instanceof Player ? player.localId() : player;
        SetSpecialAbilityDurationCost(_player, durationCost);
    }
    player_1.setSpecialAbilityDurationCost = setSpecialAbilityDurationCost;
    /**
     * No comment provided
     *
     * Hash: 0x5A498FCA232F71E1 | Since: 1207
     */
    function setSpecialAbilityMultiplier(player, multiplier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetSpecialAbilityMultiplier(_player, multiplier);
    }
    player_1.setSpecialAbilityMultiplier = setSpecialAbilityMultiplier;
    /**
     * SPECIAL_ABILITY_NONE = -1,
     * SPECIAL_ABILITY_CAR_SLOWDOWN,
     * SPECIAL_ABILITY_RAGE,
     * SPECIAL_ABILITY_BULLET_TIME,
     * SPECIAL_ABILITY_SNAPSHOT,
     * SPECIAL_ABILITY_INSULT,
     * SPECIAL_ABILITY_DEADEYE,
     * SPECIAL_ABILITY_REVIVE
     *
     * Hash: 0x00BA333DA05ADC23 | Since: 1207
     */
    function setSpecialAbilityType(player, _type) {
        const _player = player instanceof Player ? player.localId() : player;
        SetSpecialAbilityType(_player, _type);
    }
    player_1.setSpecialAbilityType = setSpecialAbilityType;
    /**
     * No comment provided
     *
     * Hash: 0x0E1DB1F8F5B561DC | Since: 1207
     */
    function setUsedItemEffect(health, stamina, deadeye, healthCore, staminaCore, deadeyeCore) {
        SetUsedItemEffect(health, stamina, deadeye, healthCore, staminaCore, deadeyeCore);
    }
    player_1.setUsedItemEffect = setUsedItemEffect;
    /**
     * No comment provided
     *
     * Hash: 0x11A7FF918EF6BC66 | Since: 1207
     */
    function setWeaponDegradationModifier(player, modifier) {
        const _player = player instanceof Player ? player.localId() : player;
        SetWeaponDegradationModifier(_player, modifier);
    }
    player_1.setWeaponDegradationModifier = setWeaponDegradationModifier;
    /**
     * Drains Deadeye by given amount.
     *
     * Hash: 0x200114E99552462B | Since: 1207
     */
    function specialAbilityDrainByAmount(player, amount) {
        const _player = player instanceof Player ? player.localId() : player;
        SpecialAbilityDrainByAmount(_player, amount, undefined);
    }
    player_1.specialAbilityDrainByAmount = specialAbilityDrainByAmount;
    /**
     * Returns Deadeye value from player
     *
     * Hash: 0x029884FB65821B07 | Since: 1207
     */
    function specialAbilityGetAmountCached(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return SpecialAbilityGetAmountCached(_player);
    }
    player_1.specialAbilityGetAmountCached = specialAbilityGetAmountCached;
    /**
     * Restores Deadeye by given amount.
     * Params: p2, p3, p4 = 0, 0, 1 in R* Scripts
     *
     * Hash: 0x51345AE20F22C261 | Since: 1207
     */
    function specialAbilityRestoreByAmount(player, amount) {
        const _player = player instanceof Player ? player.localId() : player;
        SpecialAbilityRestoreByAmount(_player, amount, 0, 0, 0);
    }
    player_1.specialAbilityRestoreByAmount = specialAbilityRestoreByAmount;
    /**
     * Only used in R* SP Script short_update
     * Restores Deadeye Outer Ring
     *
     * Hash: 0x2498035289B5688F | Since: 1207
     */
    function specialAbilityRestoreOuterRing(player, amount) {
        const _player = player instanceof Player ? player.localId() : player;
        SpecialAbilityRestoreOuterRing(_player, amount);
    }
    player_1.specialAbilityRestoreOuterRing = specialAbilityRestoreOuterRing;
    /**
     * No comment provided
     *
     * Hash: 0xAE637BB8EF017875 | Since: 1207
     */
    function specialAbilitySetDisabled(player, disabled) {
        const _player = player instanceof Player ? player.localId() : player;
        SpecialAbilitySetDisabled(_player, disabled);
    }
    player_1.specialAbilitySetDisabled = specialAbilitySetDisabled;
    /**
     * No comment provided
     *
     * Hash: 0xC0B21F235C02139C | Since: 1207
     */
    function specialAbilitySetEagleEyeDisabled(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SpecialAbilitySetEagleEyeDisabled(_player);
    }
    player_1.specialAbilitySetEagleEyeDisabled = specialAbilitySetEagleEyeDisabled;
    /**
     * Params: p1 = -1 in R* Scripts
     *
     * Hash: 0x1D77B47AFA584E90 | Since: 1207
     */
    function specialAbilityStartRestore(player) {
        const _player = player instanceof Player ? player.localId() : player;
        SpecialAbilityStartRestore(_player, 0, false);
    }
    player_1.specialAbilityStartRestore = specialAbilityStartRestore;
    /**
     * No comment provided
     *
     * Hash: 0x9DAE1380CC5C6451 | Since: 1207
     */
    function unregisterEagleEyeForEntity(player, entity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        UnregisterEagleEyeForEntity(_player, _entity);
    }
    player_1.unregisterEagleEyeForEntity = unregisterEagleEyeForEntity;
    /**
     * No comment provided
     *
     * Hash: 0x9A957912CE2EABD1 | Since: 1207
     */
    function unregisterEagleEyeTrailsForEntity(player, entity) {
        const _player = player instanceof Player ? player.localId() : player;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        UnregisterEagleEyeTrailsForEntity(_player, _entity, undefined);
    }
    player_1.unregisterEagleEyeTrailsForEntity = unregisterEagleEyeTrailsForEntity;
})(player || (player = {}));
export var population;
(function (population) {
    /**
     * No comment provided
     *
     * Hash: 0x217A54DE2D200305 | Since: 1207
     */
    function clearSpawnerInfoPriority(p0, p1) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        ClearSpawnerInfoPriority(p0, p1);
    }
    population.clearSpawnerInfoPriority = clearSpawnerInfoPriority;
    /**
     * No comment provided
     *
     * Hash: 0xC6DCC2A3A8825C85 | Since: 1207
     */
    function disableAmbientRoad(unk) {
        DisableAmbientRoadPopulation(unk);
    }
    population.disableAmbientRoad = disableAmbientRoad;
    /**
     * No comment provided
     *
     * Hash: 0xBC90BDF4E5228EA1 | Since: 1207
     */
    function enableAmbientRoad() {
        EnableAmbientRoadPopulation();
    }
    population.enableAmbientRoad = enableAmbientRoad;
    /**
     * No comment provided
     *
     * Hash: 0xA1E3171ED0E47564 | Since: 1207
     */
    function getNumModelsInSet(popSetHash) {
        if (typeof popSetHash === 'string')
            popSetHash = misc.getHashKey(popSetHash);
        return GetNumModelsInPopulationSet(popSetHash);
    }
    population.getNumModelsInSet = getNumModelsInSet;
    /**
     * No comment provided
     *
     * Hash: 0x3EAFA1C533B7139E | Since: 1207
     */
    function getPedModelNameInSet(popSetHash, index) {
        if (typeof popSetHash === 'string')
            popSetHash = misc.getHashKey(popSetHash);
        return GetPedModelNameInPopulationSet(popSetHash, index);
    }
    population.getPedModelNameInSet = getPedModelNameInSet;
    /**
     * No comment provided
     *
     * Hash: 0x6B12ED8C77E8567B | Since: 1207
     */
    function getRandomModelFromSet(popSetHash, flags, p2, pos) {
        if (typeof popSetHash === 'string')
            popSetHash = misc.getHashKey(popSetHash);
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return GetRandomModelFromPopulationSet(popSetHash, flags, p2, false, false, pos.x, pos.y, pos.z);
    }
    population.getRandomModelFromSet = getRandomModelFromSet;
    /**
     * No comment provided
     *
     * Hash: 0x3E6A49D9B519E85C | Since: 1207
     */
    function setPopzoneSet(popZone, populationSetHash) {
        if (typeof populationSetHash === 'string')
            populationSetHash = misc.getHashKey(populationSetHash);
        SetPopzonePopulationSet(popZone, populationSetHash);
    }
    population.setPopzoneSet = setPopzoneSet;
    /**
     * No comment provided
     *
     * Hash: 0x60CDE717A6D47769 | Since: 1207
     */
    function setSpawnerInfoPriority(p0, p1, priority) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        SetSpawnerInfoPriority(p0, p1, priority);
    }
    population.setSpawnerInfoPriority = setSpawnerInfoPriority;
    /**
     * No comment provided
     *
     * Hash: 0x08892122769770D5 | Since: 1207
     */
    function _0x08892122769770D5(popZone) {
        Citizen.invokeNative('0x08892122769770D5', popZone, false);
    }
    population._0x08892122769770D5 = _0x08892122769770D5;
    /**
     * No comment provided
     *
     * Hash: 0x0F1861101C9A9944 | Since: 1207
     */
    function _0x0F1861101C9A9944(popZone) {
        Citizen.invokeNative('0x0F1861101C9A9944', popZone, false);
    }
    population._0x0F1861101C9A9944 = _0x0F1861101C9A9944;
    /**
     * No comment provided
     *
     * Hash: 0x2161278C6322F740 | Since: 1207
     */
    function _0x2161278C6322F740(includeFlags, excludeFlags, p3, volume) {
        if (typeof p3 === 'string')
            p3 = misc.getHashKey(p3);
        Citizen.invokeNative('0x2161278C6322F740', includeFlags, excludeFlags, 0, p3, 0, volume);
    }
    population._0x2161278C6322F740 = _0x2161278C6322F740;
    /**
     * No comment provided
     *
     * Hash: 0x247F86595D396344 | Since: 1207
     */
    function _0x247F86595D396344() {
        Citizen.invokeNative('0x247F86595D396344', undefined);
    }
    population._0x247F86595D396344 = _0x247F86595D396344;
    /**
     * No comment provided
     *
     * Hash: 0x2660E7720EDC4BD0 | Since: 1311
     */
    function _0x2660E7720EDC4BD0() {
        Citizen.invokeNative('0x2660E7720EDC4BD0', undefined, undefined, undefined);
    }
    population._0x2660E7720EDC4BD0 = _0x2660E7720EDC4BD0;
    /**
     * No comment provided
     *
     * Hash: 0x324AB2A68AD8AEE5 | Since: 1207
     */
    function _0x324AB2A68AD8AEE5() {
        Citizen.invokeNative('0x324AB2A68AD8AEE5');
    }
    population._0x324AB2A68AD8AEE5 = _0x324AB2A68AD8AEE5;
    /**
     * No comment provided
     *
     * Hash: 0x578E2FA64E847C60 | Since: 1207
     */
    function _0x578E2FA64E847C60(popZone) {
        Citizen.invokeNative('0x578E2FA64E847C60', popZone, 0);
    }
    population._0x578E2FA64E847C60 = _0x578E2FA64E847C60;
    /**
     * No comment provided
     *
     * Hash: 0x638FCFC6042A9473 | Since: 1207
     */
    function _0x638FCFC6042A9473() {
        Citizen.invokeNative('0x638FCFC6042A9473', undefined, undefined);
    }
    population._0x638FCFC6042A9473 = _0x638FCFC6042A9473;
    /**
     * No comment provided
     *
     * Hash: 0x7E6BC0B94F5928F0 | Since: 1207
     */
    function _0x7E6BC0B94F5928F0(popZone) {
        Citizen.invokeNative('0x7E6BC0B94F5928F0', popZone, 0, 0);
    }
    population._0x7E6BC0B94F5928F0 = _0x7E6BC0B94F5928F0;
    /**
     * No comment provided
     *
     * Hash: 0x8EC7CD701F872F87 | Since: 1207
     */
    function _0x8EC7CD701F872F87() {
        Citizen.invokeNative('0x8EC7CD701F872F87', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    population._0x8EC7CD701F872F87 = _0x8EC7CD701F872F87;
    /**
     * No comment provided
     *
     * Hash: 0xC4533E3E87125C9E | Since: 1207
     */
    function _0xC4533E3E87125C9E() {
        Citizen.invokeNative('0xC4533E3E87125C9E', undefined);
    }
    population._0xC4533E3E87125C9E = _0xC4533E3E87125C9E;
    /**
     * No comment provided
     *
     * Hash: 0xDBBF12EA7C1029B2 | Since: 1207
     */
    function _0xDBBF12EA7C1029B2() {
        Citizen.invokeNative('0xDBBF12EA7C1029B2', undefined, undefined);
    }
    population._0xDBBF12EA7C1029B2 = _0xDBBF12EA7C1029B2;
    /**
     * Only used for Special Event (XMAS).
     * _SET_P*
     *
     * Hash: 0xEC116EDB683AD479 | Since: 1207
     */
    function _0xEC116EDB683AD479() {
        Citizen.invokeNative('0xEC116EDB683AD479', false);
    }
    population._0xEC116EDB683AD479 = _0xEC116EDB683AD479;
    /**
     * No comment provided
     *
     * Hash: 0xF45E46DEECF7DF6E | Since: 1207
     */
    function _0xF45E46DEECF7DF6E(bitFlag) {
        Citizen.invokeNative('0xF45E46DEECF7DF6E', bitFlag, undefined, undefined, undefined, undefined);
    }
    population._0xF45E46DEECF7DF6E = _0xF45E46DEECF7DF6E;
    /**
     * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PedFilterFlags
     *
     * Hash: 0xB56D41A694E42E86 | Since: 1207
     */
    function addAmbientAvoidanceRestriction(volume, includeFlags, excludeFlags, p3, p4, p5) {
        if (typeof p3 === 'string')
            p3 = misc.getHashKey(p3);
        if (typeof p4 === 'string')
            p4 = misc.getHashKey(p4);
        if (typeof p5 === 'string')
            p5 = misc.getHashKey(p5);
        AddAmbientAvoidanceRestriction(volume, includeFlags, excludeFlags, p3, p4, p5, 0);
    }
    population.addAmbientAvoidanceRestriction = addAmbientAvoidanceRestriction;
    /**
     * flags: see 0xB56D41A694E42E86
     *
     * Hash: 0x18262CAFEBB5FBE1 | Since: 1207
     */
    function addAmbientSpawnRestriction(volume, includeFlags, excludeFlags, p3, p4, p5) {
        if (typeof p3 === 'string')
            p3 = misc.getHashKey(p3);
        if (typeof p4 === 'string')
            p4 = misc.getHashKey(p4);
        if (typeof p5 === 'string')
            p5 = misc.getHashKey(p5);
        AddAmbientSpawnRestriction(volume, includeFlags, excludeFlags, p3, p4, p5, 0);
    }
    population.addAmbientSpawnRestriction = addAmbientSpawnRestriction;
    /**
     * No comment provided
     *
     * Hash: 0x9AC1C64FE46B6D09 | Since: 1207
     */
    function createPopzoneFromVolume(volume) {
        return CreatePopzoneFromVolume(volume);
    }
    population.createPopzoneFromVolume = createPopzoneFromVolume;
    /**
     * No comment provided
     *
     * Hash: 0xA6E6A66FC4CA4224 | Since: 1207
     */
    function deleteScriptPopzone(popZone) {
        DeleteScriptPopzone(popZone);
    }
    population.deleteScriptPopzone = deleteScriptPopzone;
    /**
     * Returns model hash of the closest fish
     *
     * Hash: 0x595478B3BBC3076D | Since: 1207
     */
    function getRandomFishTypeForLocation() {
        return GetRandomFishTypeForLocation();
    }
    population.getRandomFishTypeForLocation = getRandomFishTypeForLocation;
    /**
     * No comment provided
     *
     * Hash: 0xA5BD585005EFCAD4 | Since: 1207
     */
    function isPopzoneValid(popZone) {
        return IsPopzoneValid(popZone);
    }
    population.isPopzoneValid = isPopzoneValid;
    /**
     * flags: see 0xB56D41A694E42E86
     *
     * Hash: 0x74C2B3DC0B294102 | Since: 1207
     */
    function removeAmbientAvoidanceRestriction(volume) {
        RemoveAmbientAvoidanceRestriction(volume);
    }
    population.removeAmbientAvoidanceRestriction = removeAmbientAvoidanceRestriction;
    /**
     * No comment provided
     *
     * Hash: 0xA1CFB35069D23C23 | Since: 1207
     */
    function removeAmbientSpawnRestriction(volume) {
        RemoveAmbientSpawnRestriction(volume);
    }
    population.removeAmbientSpawnRestriction = removeAmbientSpawnRestriction;
    /**
     * Params: p1 = 1 & 2 in R* Scripts, 0 = Disable avoidance, 1 = Enabled avoidance, 2 = Enabled avoidance (?)
     *
     * Hash: 0xF74E134F40192884 | Since: 1207
     */
    function setPedShouldIgnoreAvoidanceVolumes(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedShouldIgnoreAvoidanceVolumes(_ped, 0);
    }
    population.setPedShouldIgnoreAvoidanceVolumes = setPedShouldIgnoreAvoidanceVolumes;
})(population || (population = {}));
export var posse;
(function (posse) {
    /**
     * No comment provided
     *
     * Hash: 0xC088FF658B2E51DA | Since: 1207
     */
    function getPosseMembershipCount() {
        return PosseGetPosseMembershipCount();
    }
    posse.getPosseMembershipCount = getPosseMembershipCount;
    /**
     * No comment provided
     *
     * Hash: 0xC06CFF658B2E51DA | Since: 1207
     */
    function _0xC06CFF658B2E51DA() {
        return Citizen.invokeNative('0xC06CFF658B2E51DA', undefined, undefined, undefined);
    }
    posse._0xC06CFF658B2E51DA = _0xC06CFF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC07CFF658B2E51DA | Since: 1207
     */
    function _0xC07CFF658B2E51DA() {
        return Citizen.invokeNative('0xC07CFF658B2E51DA', undefined, undefined);
    }
    posse._0xC07CFF658B2E51DA = _0xC07CFF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC084FF658B2E52DA | Since: 1207
     */
    function _0xC084FF658B2E52DA() {
        return Citizen.invokeNative('0xC084FF658B2E52DA', undefined);
    }
    posse._0xC084FF658B2E52DA = _0xC084FF658B2E52DA;
    /**
     * No comment provided
     *
     * Hash: 0xC084FF658B2E53DA | Since: 1207
     */
    function _0xC084FF658B2E53DA() {
        return Citizen.invokeNative('0xC084FF658B2E53DA');
    }
    posse._0xC084FF658B2E53DA = _0xC084FF658B2E53DA;
    /**
     * No comment provided
     *
     * Hash: 0xC084FF658B2E54DA | Since: 1207
     */
    function _0xC084FF658B2E54DA() {
        return Citizen.invokeNative('0xC084FF658B2E54DA', undefined);
    }
    posse._0xC084FF658B2E54DA = _0xC084FF658B2E54DA;
    /**
     * No comment provided
     *
     * Hash: 0xC084FF658B2E55DA | Since: 1207
     */
    function _0xC084FF658B2E55DA() {
        return Citizen.invokeNative('0xC084FF658B2E55DA', undefined, undefined);
    }
    posse._0xC084FF658B2E55DA = _0xC084FF658B2E55DA;
    /**
     * No comment provided
     *
     * Hash: 0xC084FF658B2E61DA | Since: 1207
     */
    function _0xC084FF658B2E61DA() {
        return Citizen.invokeNative('0xC084FF658B2E61DA', undefined);
    }
    posse._0xC084FF658B2E61DA = _0xC084FF658B2E61DA;
    /**
     * No comment provided
     *
     * Hash: 0xC084FF658B2E71DA | Since: 1207
     */
    function _0xC084FF658B2E71DA() {
        return Citizen.invokeNative('0xC084FF658B2E71DA', undefined, undefined, undefined);
    }
    posse._0xC084FF658B2E71DA = _0xC084FF658B2E71DA;
    /**
     * No comment provided
     *
     * Hash: 0xC084FF658B2E81DA | Since: 1207
     */
    function _0xC084FF658B2E81DA() {
        return Citizen.invokeNative('0xC084FF658B2E81DA', undefined, undefined, undefined);
    }
    posse._0xC084FF658B2E81DA = _0xC084FF658B2E81DA;
    /**
     * No comment provided
     *
     * Hash: 0xC086FF658B2E51DA | Since: 1207
     */
    function _0xC086FF658B2E51DA() {
        return Citizen.invokeNative('0xC086FF658B2E51DA', undefined);
    }
    posse._0xC086FF658B2E51DA = _0xC086FF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC086FF658B2E51DB | Since: 1207
     */
    function _0xC086FF658B2E51DB() {
        return Citizen.invokeNative('0xC086FF658B2E51DB');
    }
    posse._0xC086FF658B2E51DB = _0xC086FF658B2E51DB;
    /**
     * No comment provided
     *
     * Hash: 0xC087FF658B2E51DA | Since: 1207
     */
    function _0xC087FF658B2E51DA() {
        return Citizen.invokeNative('0xC087FF658B2E51DA', undefined, undefined);
    }
    posse._0xC087FF658B2E51DA = _0xC087FF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC089FF658B2E51DA | Since: 1207
     */
    function _0xC089FF658B2E51DA() {
        return Citizen.invokeNative('0xC089FF658B2E51DA', undefined, undefined);
    }
    posse._0xC089FF658B2E51DA = _0xC089FF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC08AFF658B2E51DA | Since: 1207
     */
    function _0xC08AFF658B2E51DA() {
        Citizen.invokeNative('0xC08AFF658B2E51DA', undefined);
    }
    posse._0xC08AFF658B2E51DA = _0xC08AFF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC08AFF658B2E51DB | Since: 1207
     */
    function _0xC08AFF658B2E51DB() {
        Citizen.invokeNative('0xC08AFF658B2E51DB', undefined);
    }
    posse._0xC08AFF658B2E51DB = _0xC08AFF658B2E51DB;
    /**
     * No comment provided
     *
     * Hash: 0xC08BFF658B2E51DA | Since: 1207
     */
    function _0xC08BFF658B2E51DA() {
        return Citizen.invokeNative('0xC08BFF658B2E51DA', undefined);
    }
    posse._0xC08BFF658B2E51DA = _0xC08BFF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC08CFF658B2E51DA | Since: 1207
     */
    function _0xC08CFF658B2E51DA() {
        return Citizen.invokeNative('0xC08CFF658B2E51DA', undefined, undefined);
    }
    posse._0xC08CFF658B2E51DA = _0xC08CFF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC08DEF658B2E51DA | Since: 1207
     */
    function _0xC08DEF658B2E51DA() {
        return Citizen.invokeNative('0xC08DEF658B2E51DA', undefined);
    }
    posse._0xC08DEF658B2E51DA = _0xC08DEF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC08DFF658B2E51DA | Since: 1207
     */
    function _0xC08DFF658B2E51DA() {
        return Citizen.invokeNative('0xC08DFF658B2E51DA');
    }
    posse._0xC08DFF658B2E51DA = _0xC08DFF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC08DFF658B2E51DB | Since: 1207
     */
    function _0xC08DFF658B2E51DB() {
        return Citizen.invokeNative('0xC08DFF658B2E51DB', undefined);
    }
    posse._0xC08DFF658B2E51DB = _0xC08DFF658B2E51DB;
    /**
     * No comment provided
     *
     * Hash: 0xC08EFF658B2E51DB | Since: 1207
     */
    function _0xC08EFF658B2E51DB() {
        return Citizen.invokeNative('0xC08EFF658B2E51DB', undefined, undefined);
    }
    posse._0xC08EFF658B2E51DB = _0xC08EFF658B2E51DB;
    /**
     * No comment provided
     *
     * Hash: 0xC08FFF658B2E51DA | Since: 1207
     */
    function _0xC08FFF658B2E51DA() {
        return Citizen.invokeNative('0xC08FFF658B2E51DA');
    }
    posse._0xC08FFF658B2E51DA = _0xC08FFF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC08FFF658B2E51DB | Since: 1207
     */
    function _0xC08FFF658B2E51DB() {
        return Citizen.invokeNative('0xC08FFF658B2E51DB', undefined);
    }
    posse._0xC08FFF658B2E51DB = _0xC08FFF658B2E51DB;
    /**
     * No comment provided
     *
     * Hash: 0xC09CFF658B2E51DA | Since: 1207
     */
    function _0xC09CFF658B2E51DA() {
        return Citizen.invokeNative('0xC09CFF658B2E51DA', undefined, undefined, undefined);
    }
    posse._0xC09CFF658B2E51DA = _0xC09CFF658B2E51DA;
    /**
     * No comment provided
     *
     * Hash: 0xC184FF658B2E55DA | Since: 1207
     */
    function _0xC184FF658B2E55DA() {
        return Citizen.invokeNative('0xC184FF658B2E55DA', undefined, undefined);
    }
    posse._0xC184FF658B2E55DA = _0xC184FF658B2E55DA;
    /**
     * No comment provided
     *
     * Hash: 0xC284FF658B2E55DA | Since: 1207
     */
    function _0xC284FF658B2E55DA() {
        return Citizen.invokeNative('0xC284FF658B2E55DA', undefined, undefined, undefined);
    }
    posse._0xC284FF658B2E55DA = _0xC284FF658B2E55DA;
    /**
     * No comment provided
     *
     * Hash: 0xC394FF658B2E55DA | Since: 1207
     */
    function _0xC394FF658B2E55DA() {
        return Citizen.invokeNative('0xC394FF658B2E55DA', undefined, undefined, undefined, undefined);
    }
    posse._0xC394FF658B2E55DA = _0xC394FF658B2E55DA;
    /**
     * No comment provided
     *
     * Hash: 0xC484FF658B2E55DA | Since: 1207
     */
    function _0xC484FF658B2E55DA() {
        Citizen.invokeNative('0xC484FF658B2E55DA', undefined);
    }
    posse._0xC484FF658B2E55DA = _0xC484FF658B2E55DA;
    /**
     * No comment provided
     *
     * Hash: 0xC584FF658B2E55DA | Since: 1207
     */
    function _0xC584FF658B2E55DA() {
        Citizen.invokeNative('0xC584FF658B2E55DA', undefined);
    }
    posse._0xC584FF658B2E55DA = _0xC584FF658B2E55DA;
    /**
     * No comment provided
     *
     * Hash: 0xC684FF658B2E55DA | Since: 1207
     */
    function _0xC684FF658B2E55DA() {
        Citizen.invokeNative('0xC684FF658B2E55DA', undefined);
    }
    posse._0xC684FF658B2E55DA = _0xC684FF658B2E55DA;
})(posse || (posse = {}));
export var propset;
(function (propset_1) {
    /**
     * No comment provided
     *
     * Hash: 0x9609DBDDE18FAD8C | Since: 1207
     */
    function createInstanceAttachedToEntity(hash, pos, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return CreatePropSetInstanceAttachedToEntity(hash, pos.x, pos.y, pos.z, _entity, 0, false, 0, false);
    }
    propset_1.createInstanceAttachedToEntity = createInstanceAttachedToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x7DDDCF815E650FF5 | Since: 1207
     */
    function doesExist(propSet) {
        return DoesPropSetExist(propSet);
    }
    propset_1.doesExist = doesExist;
    /**
     * No comment provided
     *
     * Hash: 0xF42DB680A8B2A4D9 | Since: 1207
     */
    function isFullyLoaded(propSet) {
        return IsPropSetFullyLoaded(propSet);
    }
    propset_1.isFullyLoaded = isFullyLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x58E0B01D45CA7357 | Since: 1207
     */
    function _0x58E0B01D45CA7357() {
        Citizen.invokeNative('0x58E0B01D45CA7357', undefined);
    }
    propset_1._0x58E0B01D45CA7357 = _0x58E0B01D45CA7357;
    /**
     * Relocates an existing prop set to specified coordinates and adjusts its heading (rotation) without affecting the prop set's internal layout or structure. The `propSet` parameter identifies the prop set to move. The parameters (`coordsX`, `coordsY`, `coordsZ`) set the new central position of the prop set, while `heading` specifies its rotation around the Z-axis (in degrees). When `onGroundProperly` is true, the prop set automatically aligns accurately with the terrain
     *
     * Hash: 0xC4B67EF3FD65622D | Since: 1207
     */
    function modifyCoordsAndHeading(propset, pos, onGroundProperly, heading) {
        Citizen.invokeNative('0xC4B67EF3FD65622D', propset, pos.x, pos.y, pos.z, onGroundProperly, heading);
    }
    propset_1.modifyCoordsAndHeading = modifyCoordsAndHeading;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_propsets.lua
     *
     * Hash: 0x75F90E4051CC084C | Since: 1207
     */
    function addAdditionalForVehicle(vehicle, propset) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof propset === 'string')
            propset = misc.getHashKey(propset);
        AddAdditionalPropSetForVehicle(_vehicle, propset);
    }
    propset_1.addAdditionalForVehicle = addAdditionalForVehicle;
    /**
     * To remove propsets either parse a zero as hash or call 0xE31C0CB1C3186D40
     * 0xA6A9712955F53D9C returns lightPropset Hashes
     * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_lantern_propsets.lua
     *
     * Hash: 0xC0F0417A90402742 | Since: 1207
     */
    function addLightToVehicle(vehicle, lightPropset) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof lightPropset === 'string')
            lightPropset = misc.getHashKey(lightPropset);
        AddLightPropSetToVehicle(_vehicle, lightPropset);
    }
    propset_1.addLightToVehicle = addLightToVehicle;
    /**
     * List of vehicle propsets (wagons & trains): https://pastebin.com/1CsnvGLu / https://pastebin.com/v7TtqTgE
     *
     * Hash: 0xD80FAF919A2E56EA | Since: 1207
     */
    function addForVehicle(vehicle, propset) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof propset === 'string')
            propset = misc.getHashKey(propset);
        AddPropSetForVehicle(_vehicle, propset);
    }
    propset_1.addForVehicle = addForVehicle;
    /**
     * propsetType: https://github.com/femga/rdr3_discoveries/blob/master/objects/propsets_list.lua
     * placementType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PlacementType
     *
     * Hash: 0xE65C5CBA95F0E510 | Since: 1207
     */
    function create(propsetType, pos, placementType, heading, zProbe, useVegMod) {
        if (typeof propsetType === 'string')
            propsetType = misc.getHashKey(propsetType);
        return CreatePropSet(propsetType, pos.x, pos.y, pos.z, placementType, heading, zProbe, false, useVegMod);
    }
    propset_1.create = create;
    /**
     * Same as _CREATE_PROP_SET
     *
     * Hash: 0x899C97A1CCE7D483 | Since: 1207
     */
    function create2(propsetType, pos, placementType, heading, zProbe, useVegMod) {
        if (typeof propsetType === 'string')
            propsetType = misc.getHashKey(propsetType);
        return CreatePropSet2(propsetType, pos.x, pos.y, pos.z, placementType, heading, zProbe, false, useVegMod);
    }
    propset_1.create2 = create2;
    /**
     * Same as CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY
     *
     * Hash: 0xACA7FB30269096D4 | Since: 1207
     */
    function createInstanceAttachedToEntity2(hash, pos, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return CreatePropSetInstanceAttachedToEntity2(hash, pos.x, pos.y, pos.z, _entity, 0, false, 0, false);
    }
    propset_1.createInstanceAttachedToEntity2 = createInstanceAttachedToEntity2;
    /**
     * No comment provided
     *
     * Hash: 0x58AC173A55D9D7B4 | Since: 1207
     */
    function deletePropSet(propSet) {
        DeletePropSet(propSet, false, false);
    }
    propset_1.deletePropSet = deletePropSet;
    /**
     * No comment provided
     *
     * Hash: 0x72068021F498E6E3 | Since: 1207
     */
    function doesOfTypeExistNearCoords(propsetHash, pos) {
        if (typeof propsetHash === 'string')
            propsetHash = misc.getHashKey(propsetHash);
        return DoesPropSetOfTypeExistNearCoords(propsetHash, pos.x, pos.y, pos.z);
    }
    propset_1.doesOfTypeExistNearCoords = doesOfTypeExistNearCoords;
    /**
     * No comment provided
     *
     * Hash: 0xC9B4B3A36F81FD75 | Since: 1207
     */
    function doesVehicleHaveAnyLight(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return DoesVehicleHaveAnyLightPropSet(_vehicle);
    }
    propset_1.doesVehicleHaveAnyLight = doesVehicleHaveAnyLight;
    /**
     * No comment provided
     *
     * Hash: 0x53784CEA0159439B | Since: 1207
     */
    function doesVehicleHaveAny(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return DoesVehicleHaveAnyPropSet(_vehicle);
    }
    propset_1.doesVehicleHaveAny = doesVehicleHaveAny;
    /**
     * No comment provided
     *
     * Hash: 0x738271B660FE0695 | Since: 1207
     */
    function getEntitiesFrom(propSet, itemSet, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return GetEntitiesFromPropSet(propSet, itemSet, model, false, false);
    }
    propset_1.getEntitiesFrom = getEntitiesFrom;
    /**
     * No comment provided
     *
     * Hash: 0xC061E50F8D299F95 | Since: 1207
     */
    function getAtCoords(propsetHash, pos) {
        if (typeof propsetHash === 'string')
            propsetHash = misc.getHashKey(propsetHash);
        return GetPropSetAtCoords(propsetHash, pos.x, pos.y, pos.z);
    }
    propset_1.getAtCoords = getAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xA6A9712955F53D9C | Since: 1207
     */
    function getModel(propSet) {
        return GetPropSetModel(propSet);
    }
    propset_1.getModel = getModel;
    /**
     * Example before/after deleting a train carriage's propset: https://imgur.com/a/qRNrIrK
     *
     * Hash: 0xCFC0BD09BB1B73FF | Since: 1207
     */
    function getTrainCarriage(trainCarriage) {
        const _trainCarriage = trainCarriage instanceof Entity ? trainCarriage.handle() : trainCarriage;
        return GetTrainCarriagePropSet(_trainCarriage);
    }
    propset_1.getTrainCarriage = getTrainCarriage;
    /**
     * Returns PropSet handle to be used with _GET_PROP_SET_MODEL
     *
     * Hash: 0xA079300AF757FB1A | Since: 1207
     */
    function getVehicleLight(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleLightPropSet(_vehicle);
    }
    propset_1.getVehicleLight = getVehicleLight;
    /**
     * No comment provided
     *
     * Hash: 0xCE2ACD6F602803E5 | Since: 1207
     */
    function getVehicle(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehiclePropSet(_vehicle);
    }
    propset_1.getVehicle = getVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x36F69E7A22655653 | Since: 1207
     */
    function getVehicleHash(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehiclePropSetHash(_vehicle);
    }
    propset_1.getVehicleHash = getVehicleHash;
    /**
     * No comment provided
     *
     * Hash: 0x48A88FC684C55FDC | Since: 1207
     */
    function hasLoaded(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return HasPropSetLoaded(hash);
    }
    propset_1.hasLoaded = hasLoaded;
    /**
     * Same as _HAS_PROP_SET_LOADED
     *
     * Hash: 0xD090ABEF4D6A7D96 | Since: 1207
     */
    function hasLoaded2(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return HasPropSetLoaded2(hash);
    }
    propset_1.hasLoaded2 = hasLoaded2;
    /**
     * No comment provided
     *
     * Hash: 0x8F3333F0A6900B3C | Since: 1207
     */
    function hasVehicleTrailerLoaded(vehicle, wagonIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return HasVehicleTrailerPropSetLoaded(_vehicle, wagonIndex);
    }
    propset_1.hasVehicleTrailerLoaded = hasVehicleTrailerLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x0CE8AAFE9E433A23 | Since: 1207
     */
    function isVisible(propSet) {
        return IsPropSetVisible(propSet);
    }
    propset_1.isVisible = isVisible;
    /**
     * No comment provided
     *
     * Hash: 0x0790473EEE1977D3 | Since: 1207
     */
    function isVehicleLightLoaded(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleLightPropSetLoaded(_vehicle);
    }
    propset_1.isVehicleLightLoaded = isVehicleLightLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x155B2FBE72D7D1D0 | Since: 1207
     */
    function isVehicleLoaded(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehiclePropSetLoaded(_vehicle);
    }
    propset_1.isVehicleLoaded = isVehicleLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x7264F9CA87A9830B | Since: 1207
     */
    function isVehicleLoadedAdditional(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehiclePropSetLoadedAdditional(_vehicle);
    }
    propset_1.isVehicleLoadedAdditional = isVehicleLoadedAdditional;
    /**
     * No comment provided
     *
     * Hash: 0xB1964A83B345B4AB | Since: 1207
     */
    function release(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return ReleasePropSet(hash);
    }
    propset_1.release = release;
    /**
     * No comment provided
     *
     * Hash: 0xE31C0CB1C3186D40 | Since: 1207
     */
    function removeVehicleLights(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        RemoveVehicleLightPropSets(_vehicle);
    }
    propset_1.removeVehicleLights = removeVehicleLights;
    /**
     * No comment provided
     *
     * Hash: 0x3BCF32FF37EA9F1D | Since: 1207
     */
    function removeVehicles(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        RemoveVehiclePropSets(_vehicle);
    }
    propset_1.removeVehicles = removeVehicles;
    /**
     * No comment provided
     *
     * Hash: 0xF3DE57A46D5585E9 | Since: 1207
     */
    function request(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return RequestPropSet(hash);
    }
    propset_1.request = request;
    /**
     * Same as _REQUEST_PROP_SET
     *
     * Hash: 0xE72F591958F3ACAB | Since: 1207
     */
    function request2(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return RequestPropSet2(hash);
    }
    propset_1.request2 = request2;
    /**
     * No comment provided
     *
     * Hash: 0x909E3C7FAE539FB1 | Since: 1207
     */
    function setAsNoLongerNeeded(propSet) {
        SetPropSetAsNoLongerNeeded(propSet);
    }
    propset_1.setAsNoLongerNeeded = setAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0xC1AB7EEFD3E6EE49 | Since: 1207
     */
    function setFlag(propSet, flag) {
        SetPropSetFlag(propSet, flag);
    }
    propset_1.setFlag = setFlag;
    /**
     * No comment provided
     *
     * Hash: 0x9D096A5BD02F953E | Since: 1207
     */
    function setVisible(propSet, toggle) {
        SetPropSetVisible(propSet, toggle);
    }
    propset_1.setVisible = setVisible;
})(propset || (propset = {}));
export var queue;
(function (queue) {
    /**
     * No comment provided
     *
     * Hash: 0x402B5D7D269FF796 | Since: 1207
     */
    function eventIsEmpty(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return EventQueueIsEmpty(hash);
    }
    queue.eventIsEmpty = eventIsEmpty;
    /**
     * No comment provided
     *
     * Hash: 0xD87DF294B049211D | Since: 1207
     */
    function eventPop(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        EventQueuePop(hash);
    }
    queue.eventPop = eventPop;
})(queue || (queue = {}));
export var recording;
(function (recording) {
    /**
     * nullsub, doesn't do anything
     *
     * Old name: _STOP_RECORDING_THIS_FRAME
     *
     * Hash: 0xA8C44C13419634F2 | Since: 1207
     */
    function replayPreventThisFrame() {
        ReplayPreventRecordingThisFrame();
    }
    recording.replayPreventThisFrame = replayPreventThisFrame;
})(recording || (recording = {}));
export var replay;
(function (replay) {
    /**
     * Hardcoded to return true.
     *
     * Hash: 0xCEEC64BD27A59312 | Since: 1207
     */
    function closeVideoEditor() {
        return CloseVideoEditor(undefined);
    }
    replay.closeVideoEditor = closeVideoEditor;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x9EEB007317FA3B9C | Since: 1207
     */
    function isVideoEditorRunning() {
        return IsVideoEditorRunning();
    }
    replay.isVideoEditorRunning = isVideoEditorRunning;
    /**
     * Hardcoded to return true.
     *
     * Hash: 0xB3F2829907403C13 | Since: 1207
     */
    function openVideoEditor() {
        return OpenVideoEditor();
    }
    replay.openVideoEditor = openVideoEditor;
    /**
     * Hardcoded to return false.
     *
     * Old name: _IS_INTERIOR_RENDERING_DISABLED
     *
     * Hash: 0x0F838D47DE58EDB2 | Since: 1207
     */
    function systemHasRequestedAScriptCleanup() {
        return ReplaySystemHasRequestedAScriptCleanup();
    }
    replay.systemHasRequestedAScriptCleanup = systemHasRequestedAScriptCleanup;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x57C6525034E76EB0 | Since: 1207
     */
    function setScriptsHaveCleanedUpForSystem() {
        SetScriptsHaveCleanedUpForReplaySystem();
    }
    replay.setScriptsHaveCleanedUpForSystem = setScriptsHaveCleanedUpForSystem;
})(replay || (replay = {}));
export var save;
(function (save) {
    /**
     * No comment provided
     *
     * Hash: 0x3CF46F55C6585590 | Since: 1207
     */
    function gameIsSavePending() {
        return SavegameIsSavePending();
    }
    save.gameIsSavePending = gameIsSavePending;
    /**
     * See SAVEGAME_SAVE_SP
     *
     * Hash: 0x1840F3B30ED0105F | Since: 1207
     */
    function gameSaveMp(savegameType) {
        if (typeof savegameType === 'string')
            savegameType = misc.getHashKey(savegameType);
        return SavegameSaveMp(savegameType);
    }
    save.gameSaveMp = gameSaveMp;
    /**
     * enum eSavegameType : Hash
     * {
     * SAVEGAMETYPE_AMBIENT = 0x3CA4E1F8,
     * SAVEGAMETYPE_DEFAULT = 0xCB6ED080,
     * SAVEGAMETYPE_DELETE_CHAR = 0xCD35F947,
     * SAVEGAMETYPE_END_CREATE_NEWCHAR = 0x4C50A3CE,
     * SAVEGAMETYPE_END_MATCH = 0xE470ED50,
     * SAVEGAMETYPE_END_MISSION = 0x9A444E54,
     * SAVEGAMETYPE_END_SESSION = 0x6D23956C,
     * SAVEGAMETYPE_END_SHOPPING = 0xA311A6C4,
     * SAVEGAMETYPE_RANKUP = 0xE25F8017,
     * SAVEGAMETYPE_SCRIPT_MP_GLOBALS = 0xAFF30AD4,
     * SAVEGAMETYPE_SP_AUTOSAVE = 0xF4AE69EC,
     * SAVEGAMETYPE_SP_DEBUG = 0x6A8122FD,
     * SAVEGAMETYPE_SP_PROPERTY = 0xAE0AB38E
     * };
     *
     * Hash: 0x62C9EB51656D68CE | Since: 1207
     */
    function gameSaveSp(savegameType) {
        if (typeof savegameType === 'string')
            savegameType = misc.getHashKey(savegameType);
        return SavegameSaveSp(savegameType);
    }
    save.gameSaveSp = gameSaveSp;
    /**
     * No comment provided
     *
     * Hash: 0x1431540BCA1A1BD2 | Since: 1207
     */
    function gameHasSaveFailed() {
        return Citizen.invokeNative('0x1431540BCA1A1BD2');
    }
    save.gameHasSaveFailed = gameHasSaveFailed;
    /**
     * No comment provided
     *
     * Hash: 0x443174C20B8B9E7F | Since: 1207
     */
    function _0x443174C20B8B9E7F() {
        Citizen.invokeNative('0x443174C20B8B9E7F', undefined, undefined, undefined);
    }
    save._0x443174C20B8B9E7F = _0x443174C20B8B9E7F;
    /**
     * No comment provided
     *
     * Hash: 0x4FB5869E2B37FC00 | Since: 1207
     */
    function _0x4FB5869E2B37FC00() {
        Citizen.invokeNative('0x4FB5869E2B37FC00');
    }
    save._0x4FB5869E2B37FC00 = _0x4FB5869E2B37FC00;
    /**
     * No comment provided
     *
     * Hash: 0x81F4E92BE3958364 | Since: 1207
     */
    function _0x81F4E92BE3958364() {
        Citizen.invokeNative('0x81F4E92BE3958364', undefined, undefined, undefined);
    }
    save._0x81F4E92BE3958364 = _0x81F4E92BE3958364;
    /**
     * No comment provided
     *
     * Hash: 0x8E8FFB9E4AD051D2 | Since: 1207
     */
    function _0x8E8FFB9E4AD051D2() {
        Citizen.invokeNative('0x8E8FFB9E4AD051D2', undefined, undefined, undefined, undefined);
    }
    save._0x8E8FFB9E4AD051D2 = _0x8E8FFB9E4AD051D2;
    /**
     * No comment provided
     *
     * Hash: 0x9BB83C4DD7BE0802 | Since: 1207
     */
    function _0x9BB83C4DD7BE0802() {
        Citizen.invokeNative('0x9BB83C4DD7BE0802', undefined, undefined, undefined, undefined, undefined);
    }
    save._0x9BB83C4DD7BE0802 = _0x9BB83C4DD7BE0802;
    /**
     * No comment provided
     *
     * Hash: 0xA7ECEBAFBAF997A5 | Since: 1436
     */
    function _0xA7ECEBAFBAF997A5(savegameType) {
        if (typeof savegameType === 'string')
            savegameType = misc.getHashKey(savegameType);
        return Citizen.invokeNative('0xA7ECEBAFBAF997A5', savegameType);
    }
    save._0xA7ECEBAFBAF997A5 = _0xA7ECEBAFBAF997A5;
    /**
     * No comment provided
     *
     * Hash: 0xA844FEB5C22C2C74 | Since: 1207
     */
    function _0xA844FEB5C22C2C74() {
        Citizen.invokeNative('0xA844FEB5C22C2C74');
    }
    save._0xA844FEB5C22C2C74 = _0xA844FEB5C22C2C74;
    /**
     * No comment provided
     *
     * Hash: 0xB00CE33465B5406D | Since: 1207
     */
    function _0xB00CE33465B5406D() {
        return Citizen.invokeNative('0xB00CE33465B5406D', undefined, undefined);
    }
    save._0xB00CE33465B5406D = _0xB00CE33465B5406D;
    /**
     * No comment provided
     *
     * Hash: 0xC0ABF784590798A9 | Since: 1207
     */
    function _0xC0ABF784590798A9() {
        Citizen.invokeNative('0xC0ABF784590798A9', undefined);
    }
    save._0xC0ABF784590798A9 = _0xC0ABF784590798A9;
    /**
     * No comment provided
     *
     * Hash: 0xE0B45E983BFC0768 | Since: 1207
     */
    function _0xE0B45E983BFC0768() {
        Citizen.invokeNative('0xE0B45E983BFC0768');
    }
    save._0xE0B45E983BFC0768 = _0xE0B45E983BFC0768;
    /**
     * No comment provided
     *
     * Hash: 0xE8346E62FD7FB962 | Since: 1207
     */
    function _0xE8346E62FD7FB962() {
        Citizen.invokeNative('0xE8346E62FD7FB962');
    }
    save._0xE8346E62FD7FB962 = _0xE8346E62FD7FB962;
    /**
     * No comment provided
     *
     * Hash: 0xED4B0C1057892B2E | Since: 1207
     */
    function _0xED4B0C1057892B2E() {
        Citizen.invokeNative('0xED4B0C1057892B2E', undefined, undefined, undefined, undefined);
    }
    save._0xED4B0C1057892B2E = _0xED4B0C1057892B2E;
    /**
     * Does the exact same as 0x529B9CCD0972AF4E
     *
     * Hash: 0xBB7F4273C186BC4B | Since: 1207
     */
    function gameGetBool() {
        return SavegameGetBool();
    }
    save.gameGetBool = gameGetBool;
    /**
     * No comment provided
     *
     * Hash: 0x35DEFECAE36D4FAE | Since: 1207
     */
    function gameGetFloat(variableName) {
        return SavegameGetFloat(variableName);
    }
    save.gameGetFloat = gameGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x529B9CCD0972AF4E | Since: 1207
     */
    function gameGetInt(variableName) {
        return SavegameGetInt(variableName);
    }
    save.gameGetInt = gameGetInt;
    /**
     * Does the exact same as 0x529B9CCD0972AF4E
     * Commonly used with time/timestamps
     *
     * Hash: 0x529B9CCD0972AF4D | Since: 1207
     */
    function gameGetInt2(variableName) {
        return SavegameGetInt2(variableName);
    }
    save.gameGetInt2 = gameGetInt2;
    /**
     * Does the exact same as 0x529B9CCD0972AF4E
     * Commonly used with enums and flags
     *
     * Hash: 0xB25B5A375BE5BE26 | Since: 1207
     */
    function gameGetInt3(variableName) {
        return SavegameGetInt3(variableName);
    }
    save.gameGetInt3 = gameGetInt3;
    /**
     * No comment provided
     *
     * Hash: 0x5A10D6506B2F2C63 | Since: 1207
     */
    function gameGetTextLabel23(variableName) {
        return SavegameGetTextLabel23(variableName);
    }
    save.gameGetTextLabel23 = gameGetTextLabel23;
    /**
     * No comment provided
     *
     * Hash: 0x4845E7E7643A908C | Since: 1207
     */
    function gameGetTextLabel31(variableName) {
        return SavegameGetTextLabel31(variableName);
    }
    save.gameGetTextLabel31 = gameGetTextLabel31;
    /**
     * No comment provided
     *
     * Hash: 0x186608A2AC6F9E88 | Since: 1207
     */
    function gameGetTextLabel63(variableName) {
        return SavegameGetTextLabel63(variableName);
    }
    save.gameGetTextLabel63 = gameGetTextLabel63;
})(save || (save = {}));
export var scripts;
(function (scripts) {
    /**
     * No comment provided
     *
     * Hash: 0xAC8FAB22A914AE34 | Since: 1207
     */
    function awardsGetResultItem(awardHash, itemIndex) {
        if (typeof awardHash === 'string')
            awardHash = misc.getHashKey(awardHash);
        return AwardsGetResultItem(awardHash, itemIndex);
    }
    scripts.awardsGetResultItem = awardsGetResultItem;
    /**
     * No comment provided
     *
     * Hash: 0xBC2C927F5C264243 | Since: 1207
     */
    function bailToLandingPage(bailCode) {
        BailToLandingPage(bailCode);
    }
    scripts.bailToLandingPage = bailToLandingPage;
    /**
     * No comment provided
     *
     * Hash: 0xE98204D3C25AE14C | Since: 1207
     */
    function bailWithPassThroughParams(params) {
        BailWithPassThroughParams(params);
    }
    scripts.bailWithPassThroughParams = bailWithPassThroughParams;
    /**
     * No comment provided
     *
     * Hash: 0x4AE1DFF337A86FDE | Since: 1207
     */
    function bgDoesLaunchParamExist(scriptIndex) {
        return BgDoesLaunchParamExist(scriptIndex, undefined);
    }
    scripts.bgDoesLaunchParamExist = bgDoesLaunchParamExist;
    /**
     * Deletes the given context from the background scripts context map.
     *
     * Hash: 0x3ABF7BA1C3E2C8CF | Since: 1207
     */
    function bgEndContext(contextName) {
        BgEndContext(contextName);
    }
    scripts.bgEndContext = bgEndContext;
    /**
     * Hashed version of BG_END_CONTEXT
     *
     * Hash: 0x6D1431744182CDE8 | Since: 1207
     */
    function bgEndContextHash(contextHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        BgEndContextHash(contextHash);
    }
    scripts.bgEndContextHash = bgEndContextHash;
    /**
     * No comment provided
     *
     * Hash: 0x55C40B7592BAD213 | Since: 1207
     */
    function bgGetLaunchParamValue(scriptIndex) {
        return BgGetLaunchParamValue(scriptIndex, undefined);
    }
    scripts.bgGetLaunchParamValue = bgGetLaunchParamValue;
    /**
     * No comment provided
     *
     * Hash: 0x829CD22E043A2577 | Since: 1207
     */
    function bgGetScriptIdFromNameHash(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return BgGetScriptIdFromNameHash(p0);
    }
    scripts.bgGetScriptIdFromNameHash = bgGetScriptIdFromNameHash;
    /**
     * Returns true if GtaThread+0x77C is equal to 1.
     *
     * Old name: _BG_EXITED_BECAUSE_BACKGROUND_THREAD_STOPPED
     *
     * Hash: 0x2238EC3EC631AB1F | Since: 1207
     */
    function bgIsExitflagSet() {
        return BgIsExitflagSet();
    }
    scripts.bgIsExitflagSet = bgIsExitflagSet;
    /**
     * Sets bit 0 in GtaThread+0x784
     *
     * Hash: 0x4858148E3B8A75D0 | Since: 1207
     */
    function bgSetExitflagResponse() {
        BgSetExitflagResponse();
    }
    scripts.bgSetExitflagResponse = bgSetExitflagResponse;
    /**
     * Inserts the given context into the background scripts context map.
     *
     * Hash: 0x49BA5678BA040CA7 | Since: 1207
     */
    function bgStartContext(contextName) {
        BgStartContext(contextName);
    }
    scripts.bgStartContext = bgStartContext;
    /**
     * Hashed version of BG_START_CONTEXT
     *
     * Hash: 0x2EB67D564DCC09D5 | Since: 1207
     */
    function bgStartContextHash(contextHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        BgStartContextHash(contextHash);
    }
    scripts.bgStartContextHash = bgStartContextHash;
    /**
     * No comment provided
     *
     * Hash: 0x2F050A3FF8738245 | Since: 1207
     */
    function countParticipantBits() {
        return CountParticipantBits();
    }
    scripts.countParticipantBits = countParticipantBits;
    /**
     * No comment provided
     *
     * Hash: 0x462C687BEA254BD9 | Since: 1207
     */
    function countPlayerBits() {
        return CountPlayerBits();
    }
    scripts.countPlayerBits = countPlayerBits;
    /**
     * No comment provided
     *
     * Hash: 0x552B171E3F69E5AE | Since: 1207
     */
    function doesScriptExist() {
        return DoesScriptExist();
    }
    scripts.doesScriptExist = doesScriptExist;
    /**
     * No comment provided
     *
     * Hash: 0xA34E89749F628284 | Since: 1207
     */
    function doesScriptWithNameHashExist(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return DoesScriptWithNameHashExist(scriptHash);
    }
    scripts.doesScriptWithNameHashExist = doesScriptWithNameHashExist;
    /**
     * No comment provided
     *
     * Hash: 0xFF975BC4435A0FA3 | Since: 1207
     */
    function doesThreadExist(threadId) {
        return DoesThreadExist(threadId);
    }
    scripts.doesThreadExist = doesThreadExist;
    /**
     * No comment provided
     *
     * Hash: 0xFA3B530A5CC693D5 | Since: 1207
     */
    function getBlockOfPlayerBits() {
        return GetBlockOfPlayerBits(0);
    }
    scripts.getBlockOfPlayerBits = getBlockOfPlayerBits;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
     *
     * Returns event name hash: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
     *
     * Hash: 0xA85E614430EFF816 | Since: 1207
     */
    function getEventAtIndex(eventGroup, eventIndex) {
        return GetEventAtIndex(eventGroup, eventIndex);
    }
    scripts.getEventAtIndex = getEventAtIndex;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
     *
     * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
     *
     * https://github.com/femga/rdr3_discoveries/tree/master/AI/EVENTS
     *
     * Hash: 0x57EC5FA4D4D6AFCA | Since: 1207
     */
    function getEventData(eventGroup, eventIndex, eventDataSize) {
        return GetEventData(eventGroup, eventIndex, eventDataSize);
    }
    scripts.getEventData = getEventData;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
     *
     * Hash: 0xC9F59C0A710ECD34 | Since: 1207
     */
    function getEventExists(eventGroup, eventType) {
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return GetEventExists(eventGroup, eventType);
    }
    scripts.getEventExists = getEventExists;
    /**
     * No comment provided
     *
     * Hash: 0xBC2C927F5C264960 | Since: 1207
     */
    function getHashOfThisScriptName() {
        return GetHashOfThisScriptName();
    }
    scripts.getHashOfThisScriptName = getHashOfThisScriptName;
    /**
     * No comment provided
     *
     * Hash: 0x55525C346BEF6960 | Since: 1207
     */
    function getIdOfThisThread() {
        return GetIdOfThisThread();
    }
    scripts.getIdOfThisThread = getIdOfThisThread;
    /**
     * No comment provided
     *
     * Hash: 0x323DAF00687E0F28 | Since: 1207
     */
    function getNoLoadingScreen() {
        return GetNoLoadingScreen();
    }
    scripts.getNoLoadingScreen = getNoLoadingScreen;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_ERRORS (CEventGroupScriptErrors)
     *
     * Hash: 0x5CE8DE5909565748 | Since: 1207
     */
    function getNumberOfEvents(eventGroup) {
        return GetNumberOfEvents(eventGroup);
    }
    scripts.getNumberOfEvents = getNumberOfEvents;
    /**
     * Gets the number of instances of the specified script is currently running.
     *
     * Actually returns numRefs - 1.
     * if (program)
     * `v3 = rage::scrProgram::GetNumRefs(program) - 1;`
     * return v3;
     *
     * Old name: _GET_NUMBER_OF_REFERENCES_OF_SCRIPT_WITH_NAME_HASH
     *
     * Hash: 0x8E34C953364A76DD | Since: 1207
     */
    function getNumberOfThreadsRunningTheScriptWithThisHash(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return GetNumberOfThreadsRunningTheScriptWithThisHash(scriptHash);
    }
    scripts.getNumberOfThreadsRunningTheScriptWithThisHash = getNumberOfThreadsRunningTheScriptWithThisHash;
    /**
     * No comment provided
     *
     * Hash: 0xD92FA81B64920E85 | Since: 1207
     */
    function getThreadExistenceDetails(threadId) {
        return GetThreadExistenceDetails(threadId);
    }
    scripts.getThreadExistenceDetails = getThreadExistenceDetails;
    /**
     * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
     *
     * Hash: 0xE97BD36574F8B0A6 | Since: 1207
     */
    function hasScriptLoaded() {
        return HasScriptLoaded();
    }
    scripts.hasScriptLoaded = hasScriptLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xA5D8E0C2F3C7EEBC | Since: 1207
     */
    function hasScriptWithNameHashLoaded(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return HasScriptWithNameHashLoaded(scriptHash);
    }
    scripts.hasScriptWithNameHashLoaded = hasScriptWithNameHashLoaded;
    /**
     * Waiting for child scripts to terminate / waiting for collapse of child scripts
     *
     * Hash: 0x380FFA15B72408FB | Since: 1207
     */
    function haveAllChildTerminated() {
        return HaveAllChildScriptsTerminated(0);
    }
    scripts.haveAllChildTerminated = haveAllChildTerminated;
    /**
     * Same as GET_IS_LOADING_SCREEN_ACTIVE
     *
     * Hash: 0xB54ADBE65D528FCB | Since: 1207
     */
    function isLoadingScreenVisible() {
        return IsLoadingScreenVisible();
    }
    scripts.isLoadingScreenVisible = isLoadingScreenVisible;
    /**
     * No comment provided
     *
     * Hash: 0x46E9AE36D8FA6417 | Since: 1207
     */
    function isThreadActive(threadId, ignoreKilledState) {
        return IsThreadActive(threadId, ignoreKilledState);
    }
    scripts.isThreadActive = isThreadActive;
    /**
     * No comment provided
     *
     * Hash: 0x9E4EF615E307FBBE | Since: 1207
     */
    function isThreadExitRequested() {
        return IsThreadExitRequested();
    }
    scripts.isThreadExitRequested = isThreadExitRequested;
    /**
     * No comment provided
     *
     * Hash: 0x46ED607DDD40D7FE | Since: 1207
     */
    function requestScript() {
        return RequestScript();
    }
    scripts.requestScript = requestScript;
    /**
     * No comment provided
     *
     * Hash: 0xF6B9CE3F8D5B9B74 | Since: 1207
     */
    function requestScriptWithNameHash(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        RequestScriptWithNameHash(scriptHash);
    }
    scripts.requestScriptWithNameHash = requestScriptWithNameHash;
    /**
     * If the function returns 0, the end of the iteration has been reached.
     *
     * Hash: 0x3CE3FB167E837D7C | Since: 1207
     */
    function scriptThreadIteratorGetNextThreadId() {
        return ScriptThreadIteratorGetNextThreadId();
    }
    scripts.scriptThreadIteratorGetNextThreadId = scriptThreadIteratorGetNextThreadId;
    /**
     * Starts a new iteration of the current threads.
     * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
     *
     * Hash: 0x39382EB8DCD8684D | Since: 1207
     */
    function scriptThreadIteratorReset() {
        ScriptThreadIteratorReset();
    }
    scripts.scriptThreadIteratorReset = scriptThreadIteratorReset;
    /**
     * No comment provided
     *
     * Hash: 0xC6DFB8C04C86D5A5 | Since: 1207
     */
    function setBlockOfPlayerBits() {
        return SetBlockOfPlayerBits(0, 0);
    }
    scripts.setBlockOfPlayerBits = setBlockOfPlayerBits;
    /**
     * No comment provided
     *
     * Hash: 0x4768D5252EAEB76F | Since: 1207
     */
    function setEventFlagForDeletion(eventGroup, eventIndex) {
        SetEventFlagForDeletion(eventGroup, eventIndex, false);
    }
    scripts.setEventFlagForDeletion = setEventFlagForDeletion;
    /**
     * No comment provided
     *
     * Hash: 0x5CB83156AA038F95 | Since: 1207
     */
    function setNoLoadingScreen(toggle) {
        SetNoLoadingScreen(toggle);
    }
    scripts.setNoLoadingScreen = setNoLoadingScreen;
    /**
     * No comment provided
     *
     * Hash: 0x0086D3067E1CFD1C | Since: 1207
     */
    function setScriptAsNoLongerNeeded(scriptName) {
        SetScriptAsNoLongerNeeded(scriptName);
    }
    scripts.setScriptAsNoLongerNeeded = setScriptAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x50723A1567C8361E | Since: 1207
     */
    function setScriptWithNameHashAsNoLongerNeeded(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        SetScriptWithNameHashAsNoLongerNeeded(scriptHash);
    }
    scripts.setScriptWithNameHashAsNoLongerNeeded = setScriptWithNameHashAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0xFC179D7E8886DADF | Since: 1207
     */
    function shutdownLoadingScreen() {
        ShutdownLoadingScreen();
    }
    scripts.shutdownLoadingScreen = shutdownLoadingScreen;
    /**
     * No comment provided
     *
     * Hash: 0xE81651AD79516E48 | Since: 1207
     */
    function startNewScript(scriptName, stackSize) {
        return StartNewScript(scriptName, stackSize);
    }
    scripts.startNewScript = startNewScript;
    /**
     * return : script thread id, 0 if failed
     * Pass pointer to struct of args in p1, size of struct goes into p2
     *
     * Hash: 0xB8BA7F44DF1575E1 | Since: 1207
     */
    function startNewScriptWithArgs(scriptName, argCount, stackSize) {
        return StartNewScriptWithArgs(scriptName, argCount, stackSize);
    }
    scripts.startNewScriptWithArgs = startNewScriptWithArgs;
    /**
     * No comment provided
     *
     * Hash: 0xEB1C67C3A5333A92 | Since: 1207
     */
    function startNewScriptWithNameHash(scriptHash, stackSize) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return StartNewScriptWithNameHash(scriptHash, stackSize);
    }
    scripts.startNewScriptWithNameHash = startNewScriptWithNameHash;
    /**
     * No comment provided
     *
     * Hash: 0xC4BB298BD441BE78 | Since: 1207
     */
    function startNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return StartNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize);
    }
    scripts.startNewScriptWithNameHashAndArgs = startNewScriptWithNameHashAndArgs;
    /**
     * No comment provided
     *
     * Hash: 0x778D4733E0F2F265 | Since: 1207
     */
    function stopDisplayingMpTransitionLoadingScreens() {
        StopDisplayingMpTransitionLoadingScreens(undefined);
    }
    scripts.stopDisplayingMpTransitionLoadingScreens = stopDisplayingMpTransitionLoadingScreens;
    /**
     * No comment provided
     *
     * Hash: 0x5E8B6D17FF91CD59 | Since: 1207
     */
    function terminateThisThread() {
        TerminateThisThread();
    }
    scripts.terminateThisThread = terminateThisThread;
    /**
     * No comment provided
     *
     * Hash: 0x87ED52AE40EA1A52 | Since: 1207
     */
    function terminateThread(threadId) {
        TerminateThread(threadId);
    }
    scripts.terminateThread = terminateThread;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
     *
     * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
     *
     * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
     *
     * Hash: 0x5AE99C571D5BBE5D | Since: 1207
     */
    function triggerScriptEvent(eventGroup, eventDataSize, scriptMetadataIndex) {
        return TriggerScriptEvent(eventGroup, eventDataSize, scriptMetadataIndex);
    }
    scripts.triggerScriptEvent = triggerScriptEvent;
    /**
     * No comment provided
     *
     * Hash: 0x0A79C81C418F5D38 | Since: 1207
     */
    function _0x0A79C81C418F5D38() {
        return Citizen.invokeNative('0x0A79C81C418F5D38', undefined, undefined);
    }
    scripts._0x0A79C81C418F5D38 = _0x0A79C81C418F5D38;
    /**
     * Used in Script Function DISABLE_REGISTERED_WORLD_BRAINS
     *
     * Hash: 0x11B0A0B282FA9B10 | Since: 1207
     */
    function _0x11B0A0B282FA9B10() {
        Citizen.invokeNative('0x11B0A0B282FA9B10', false);
    }
    scripts._0x11B0A0B282FA9B10 = _0x11B0A0B282FA9B10;
    /**
     * No comment provided
     *
     * Hash: 0x1BDB5A07307F6929 | Since: 1207
     */
    function _0x1BDB5A07307F6929() {
        Citizen.invokeNative('0x1BDB5A07307F6929', undefined, undefined);
    }
    scripts._0x1BDB5A07307F6929 = _0x1BDB5A07307F6929;
    /**
     * No comment provided
     *
     * Hash: 0x1C5EB3C27F7508CB | Since: 1207
     */
    function _0x1C5EB3C27F7508CB() {
        Citizen.invokeNative('0x1C5EB3C27F7508CB', undefined, undefined);
    }
    scripts._0x1C5EB3C27F7508CB = _0x1C5EB3C27F7508CB;
    /**
     * No comment provided
     *
     * Hash: 0x29FB4CE89472C3CB | Since: 1207
     */
    function _0x29FB4CE89472C3CB() {
        Citizen.invokeNative('0x29FB4CE89472C3CB', undefined, undefined, 0, 0, undefined, undefined, undefined, 0);
    }
    scripts._0x29FB4CE89472C3CB = _0x29FB4CE89472C3CB;
    /**
     * No comment provided
     *
     * Hash: 0x42A429CDFED6D99D | Since: 1207
     */
    function _0x42A429CDFED6D99D() {
        Citizen.invokeNative('0x42A429CDFED6D99D', undefined, undefined, undefined);
    }
    scripts._0x42A429CDFED6D99D = _0x42A429CDFED6D99D;
    /**
     * No comment provided
     *
     * Hash: 0x5827BE85A87B073D | Since: 1207
     */
    function _0x5827BE85A87B073D() {
        Citizen.invokeNative('0x5827BE85A87B073D', undefined);
    }
    scripts._0x5827BE85A87B073D = _0x5827BE85A87B073D;
    /**
     * No comment provided
     *
     * Hash: 0x64F765D9A1F8F02C | Since: 1207
     */
    function _0x64F765D9A1F8F02C() {
        return Citizen.invokeNative('0x64F765D9A1F8F02C');
    }
    scripts._0x64F765D9A1F8F02C = _0x64F765D9A1F8F02C;
    /**
     * No comment provided
     *
     * Hash: 0x6F700A4BF7C3331B | Since: 1207
     */
    function _0x6F700A4BF7C3331B() {
        Citizen.invokeNative('0x6F700A4BF7C3331B', false);
    }
    scripts._0x6F700A4BF7C3331B = _0x6F700A4BF7C3331B;
    /**
     * No comment provided
     *
     * Hash: 0x76CBCD9EADC00955 | Since: 1207
     */
    function _0x76CBCD9EADC00955() {
        Citizen.invokeNative('0x76CBCD9EADC00955');
    }
    scripts._0x76CBCD9EADC00955 = _0x76CBCD9EADC00955;
    /**
     * No comment provided
     *
     * Hash: 0xA88E1D7FA1E20080 | Since: 1207
     */
    function _0xA88E1D7FA1E20080() {
        return Citizen.invokeNative('0xA88E1D7FA1E20080', undefined);
    }
    scripts._0xA88E1D7FA1E20080 = _0xA88E1D7FA1E20080;
    /**
     * No comment provided
     *
     * Hash: 0xE4ABE20DCE7C7CFE | Since: 1207
     */
    function _0xE4ABE20DCE7C7CFE() {
        Citizen.invokeNative('0xE4ABE20DCE7C7CFE', undefined, undefined, undefined);
    }
    scripts._0xE4ABE20DCE7C7CFE = _0xE4ABE20DCE7C7CFE;
    /**
     * No comment provided
     *
     * Hash: 0xE7282390542F570D | Since: 1207
     */
    function _0xE7282390542F570D() {
        return Citizen.invokeNative('0xE7282390542F570D', undefined);
    }
    scripts._0xE7282390542F570D = _0xE7282390542F570D;
    /**
     * No comment provided
     *
     * Hash: 0xF9E951A1E5517C06 | Since: 1207
     */
    function _0xF9E951A1E5517C06() {
        Citizen.invokeNative('0xF9E951A1E5517C06');
    }
    scripts._0xF9E951A1E5517C06 = _0xF9E951A1E5517C06;
    /**
     * No comment provided
     *
     * Hash: 0xFFDDF802279BE128 | Since: 1207
     */
    function _0xFFDDF802279BE128() {
        Citizen.invokeNative('0xFFDDF802279BE128', undefined, undefined, undefined);
    }
    scripts._0xFFDDF802279BE128 = _0xFFDDF802279BE128;
    /**
     * goalContext: see <availableContexts> in common/data/stats_and_challenges/goals_*.meta
     *
     * Hash: 0x7D654266025E921B | Since: 1207
     */
    function activateGoalContext(goalContext) {
        if (typeof goalContext === 'string')
            goalContext = misc.getHashKey(goalContext);
        ActivateGoalContext(goalContext);
    }
    scripts.activateGoalContext = activateGoalContext;
    /**
     * No comment provided
     *
     * Hash: 0xB9467E41DAB1CF2C | Since: 1207
     */
    function awardsGetUnlockClaimData(awardHash, dataIndex) {
        if (typeof awardHash === 'string')
            awardHash = misc.getHashKey(awardHash);
        return AwardsGetUnlockClaimData(awardHash, dataIndex);
    }
    scripts.awardsGetUnlockClaimData = awardsGetUnlockClaimData;
    /**
     * No comment provided
     *
     * Hash: 0xBE7D814CFA181B56 | Since: 1207
     */
    function bgReloadAllBackground() {
        BgReloadAllBackgroundScripts();
    }
    scripts.bgReloadAllBackground = bgReloadAllBackground;
    /**
     * No comment provided
     *
     * Hash: 0xDE544B7EC0C187CC | Since: 1207
     */
    function clearAllPlayerBits() {
        return ClearAllPlayerBits();
    }
    scripts.clearAllPlayerBits = clearAllPlayerBits;
    /**
     * No comment provided
     *
     * Hash: 0xD426E2E3288469D6 | Since: 1207
     */
    function clearPlayerBitAtIndex(bitIndex) {
        return ClearPlayerBitAtIndex(bitIndex);
    }
    scripts.clearPlayerBitAtIndex = clearPlayerBitAtIndex;
    /**
     * goalContext: see _ACTIVATE_GOAL_CONTEXT
     *
     * Hash: 0x50B72A754EE64A71 | Since: 1207
     */
    function deactivateGoalContext(goalContext) {
        if (typeof goalContext === 'string')
            goalContext = misc.getHashKey(goalContext);
        DeactivateGoalContext(goalContext);
    }
    scripts.deactivateGoalContext = deactivateGoalContext;
    /**
     * No comment provided
     *
     * Hash: 0x1E5B70E53DB661E5 | Since: 1207
     */
    function displayLoadingScreens(p0, p1, p2, gamemodeName, title, subtitle) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        DisplayLoadingScreens(p0, p1, p2, gamemodeName, title, subtitle);
    }
    scripts.displayLoadingScreens = displayLoadingScreens;
    /**
     * No comment provided
     *
     * Hash: 0x66EE5B93C308F734 | Since: 1207
     */
    function doesCompressedGlobalBlockBufferExist(index) {
        return DoesCompressedGlobalBlockBufferExist(index);
    }
    scripts.doesCompressedGlobalBlockBufferExist = doesCompressedGlobalBlockBufferExist;
    /**
     * No comment provided
     *
     * Hash: 0x42A7EB5C814C2DE0 | Since: 1207
     */
    function getGlobalBlockCanBeAccessed(index) {
        return GetGlobalBlockCanBeAccessed(index);
    }
    scripts.getGlobalBlockCanBeAccessed = getGlobalBlockCanBeAccessed;
    /**
     * No comment provided
     *
     * Hash: 0x724CB89D35B283D0 | Since: 1207
     */
    function getHashOfThread(threadId) {
        return GetHashOfThread(threadId);
    }
    scripts.getHashOfThread = getHashOfThread;
    /**
     * enum eThreadExitReason
     * {
     * THREAD_EXIT_REASON_NONE,
     * THREAD_EXIT_REASON_BACKGROUND_THREAD_STOPPED,
     * THREAD_EXIT_REASON_SESSION_MERGE,
     * THREAD_EXIT_REASON_SCENARIO_OUT_OF_SCOPE,
     * THREAD_EXIT_REASON_REQUESTED_BY_SCRIPT
     * };
     *
     * Hash: 0x54AE4FDEEFEAB77E | Since: 1207
     */
    function getThreadExitReason() {
        return GetThreadExitReason();
    }
    scripts.getThreadExitReason = getThreadExitReason;
    /**
     * No comment provided
     *
     * Hash: 0x179A6F0EE2E79026 | Since: 1207
     */
    function isAnyPlayerBitSet() {
        return IsAnyPlayerBitSet();
    }
    scripts.isAnyPlayerBitSet = isAnyPlayerBitSet;
    /**
     * No comment provided
     *
     * Hash: 0x20B7F69B40C6B755 | Since: 1207
     */
    function isBackgroundScript(threadId) {
        return IsBackgroundScript(threadId);
    }
    scripts.isBackgroundScript = isBackgroundScript;
    /**
     * goalContext: see _ACTIVATE_GOAL_CONTEXT
     *
     * Hash: 0x7409669C5ED50144 | Since: 1207
     */
    function isGoalContextActive(goalContext) {
        if (typeof goalContext === 'string')
            goalContext = misc.getHashKey(goalContext);
        return IsGoalContextActive(goalContext);
    }
    scripts.isGoalContextActive = isGoalContextActive;
    /**
     * No comment provided
     *
     * Hash: 0x72B2E00C9BAC6789 | Since: 1207
     */
    function isPlayerBitSetAtIndex(bitIndex) {
        return IsPlayerBitSetAtIndex(bitIndex);
    }
    scripts.isPlayerBitSetAtIndex = isPlayerBitSetAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x30BED53646C86D11 | Since: 1207
     */
    function isThreadExitRequestedForThreadWithThisId(threadId) {
        return IsThreadExitRequestedForThreadWithThisId(threadId);
    }
    scripts.isThreadExitRequestedForThreadWithThisId = isThreadExitRequestedForThreadWithThisId;
    /**
     * No comment provided
     *
     * Hash: 0xF1E9045F5AA9E428 | Since: 1311
     */
    function lootGetLootClaimData(dataIndex) {
        return LootGetLootClaimData(dataIndex);
    }
    scripts.lootGetLootClaimData = lootGetLootClaimData;
    /**
     * No comment provided
     *
     * Hash: 0x4293B44A855F82CC | Since: 1207
     */
    function lootGetResultItem(itemIndex) {
        return LootGetResultItem(itemIndex);
    }
    scripts.lootGetResultItem = lootGetResultItem;
    /**
     * Returns "INVALID_NET_RPC_GUID" if netRpcGuid is invalid.
     *
     * Hash: 0xAC9FF854BD4BA9B5 | Since: 1311
     */
    function netRpcGuidToString() {
        return NetRpcGuidToString();
    }
    scripts.netRpcGuidToString = netRpcGuidToString;
    /**
     * No comment provided
     *
     * Hash: 0x7DE4643157AD646C | Since: 1207
     */
    function requestThreadExit(threadId) {
        RequestThreadExit(threadId);
    }
    scripts.requestThreadExit = requestThreadExit;
    /**
     * No comment provided
     *
     * Hash: 0x7423F7835770F619 | Since: 1207
     */
    function requestThreadExitForAllThreadsWithThisName(nameHash) {
        if (typeof nameHash === 'string')
            nameHash = misc.getHashKey(nameHash);
        RequestThreadExitForAllThreadsWithThisName(nameHash);
    }
    scripts.requestThreadExitForAllThreadsWithThisName = requestThreadExitForAllThreadsWithThisName;
    /**
     * No comment provided
     *
     * Hash: 0xDC3914A99B4A5FDF | Since: 1207
     */
    function restoreGlobalBlock(index) {
        return RestoreGlobalBlock(index);
    }
    scripts.restoreGlobalBlock = restoreGlobalBlock;
    /**
     * No comment provided
     *
     * Hash: 0x11986B05885564D2 | Since: 1207
     */
    function setAllGlobalBlocksHaveBeenLoaded(toggle) {
        SetAllGlobalBlocksHaveBeenLoaded(toggle);
    }
    scripts.setAllGlobalBlocksHaveBeenLoaded = setAllGlobalBlocksHaveBeenLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x20F4CB76689ACDBC | Since: 1207
     */
    function setAllPlayerBits() {
        return SetAllPlayerBits();
    }
    scripts.setAllPlayerBits = setAllPlayerBits;
    /**
     * No comment provided
     *
     * Hash: 0xE66F392BFCE734AF | Since: 1207
     */
    function setGlobalBlockCanBeAccessed(index, toggle) {
        SetGlobalBlockCanBeAccessed(index, toggle);
    }
    scripts.setGlobalBlockCanBeAccessed = setGlobalBlockCanBeAccessed;
    /**
     * No comment provided
     *
     * Hash: 0x31010318BA9897AC | Since: 1207
     */
    function setPlayerBitAtIndex(bitIndex) {
        return SetPlayerBitAtIndex(bitIndex);
    }
    scripts.setPlayerBitAtIndex = setPlayerBitAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0xB952A3AC41D58F2F | Since: 1207
     */
    function storeGlobalBlock(index) {
        return StoreGlobalBlock(index);
    }
    scripts.storeGlobalBlock = storeGlobalBlock;
    /**
     * No comment provided
     *
     * Hash: 0x8B61C950A148FFA2 | Since: 1207
     */
    function triggerScriptEvent2(eventDataSize, scriptMetadataIndex, threadId) {
        return TriggerScriptEvent2(eventDataSize, scriptMetadataIndex, threadId);
    }
    scripts.triggerScriptEvent2 = triggerScriptEvent2;
})(scripts || (scripts = {}));
export var shapetest;
(function (shapetest) {
    /**
     * Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
     *
     * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
     *
     * enum eShapeTestStatus
     * {
     * SHAPETEST_STATUS_NONEXISTENT,
     * SHAPETEST_STATUS_RESULTS_NOTREADY,
     * SHAPETEST_STATUS_RESULTS_READY
     * };
     *
     * Hash: 0xEDE8AC7C5108FB1D | Since: 1207
     */
    function getResult(shapeTestHandle) {
        return GetShapeTestResult(shapeTestHandle);
    }
    shapetest.getResult = getResult;
    /**
     * Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
     *
     * Hash: 0x377906D8A31E5586 | Since: 1207
     */
    function startExpensiveSynchronousLosProbe(x1, y1, z1, x2, y2, z2, flags, entityToIgnore) {
        const _entityToIgnore = entityToIgnore instanceof Entity ? entityToIgnore.handle() : entityToIgnore;
        return StartExpensiveSynchronousShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, _entityToIgnore, 0);
    }
    shapetest.startExpensiveSynchronousLosProbe = startExpensiveSynchronousLosProbe;
    /**
     * No comment provided
     *
     * Hash: 0xFE466162C4401D18 | Since: 1207
     */
    function startBox(pos, dimensionsX, dimensionsY, dimensionsZ, rot, rotationOrder, flags, entityToIgnore, options) {
        const _entityToIgnore = entityToIgnore instanceof Entity ? entityToIgnore.handle() : entityToIgnore;
        return StartShapeTestBox(pos.x, pos.y, pos.z, dimensionsX, dimensionsY, dimensionsZ, rot.x, rot.y, rot.z, rotationOrder, flags, _entityToIgnore, options);
    }
    shapetest.startBox = startBox;
    /**
     * No comment provided
     *
     * Hash: 0x28579D1B8F8AAC80 | Since: 1207
     */
    function startCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entityToIgnore) {
        const _entityToIgnore = entityToIgnore instanceof Entity ? entityToIgnore.handle() : entityToIgnore;
        return StartShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, _entityToIgnore, 0);
    }
    shapetest.startCapsule = startCapsule;
    /**
     * Asynchronously starts a line-of-sight (raycast) world probe shape test.
     *
     * Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
     *
     * p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used. flags used are mostly 83 and 3167
     *
     * Hash: 0x7EE9F5D83DD4F90E | Since: 1207
     */
    function startLosProbe(x1, y1, z1, x2, y2, z2, flags, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, _entity, 0);
    }
    shapetest.startLosProbe = startLosProbe;
    /**
     * Old name: _START_SHAPE_TEST_SURROUNDING_COORDS
     *
     * Hash: 0x9839013D8B6014F1 | Since: 1207
     */
    function startMouseCursorLosProbe(flag, entity, flag2) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartShapeTestMouseCursorLosProbe(flag, _entity, flag2);
    }
    shapetest.startMouseCursorLosProbe = startMouseCursorLosProbe;
    /**
     * No comment provided
     *
     * Hash: 0xAA5B7C8309F73230 | Since: 1207
     */
    function startSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StartShapeTestSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, _entity, undefined);
    }
    shapetest.startSweptSphere = startSweptSphere;
    /**
     * No comment provided
     *
     * Hash: 0x04AA59CA40571C2E | Since: 1207
     */
    function _0x04AA59CA40571C2E() {
        return Citizen.invokeNative('0x04AA59CA40571C2E', undefined, undefined);
    }
    shapetest._0x04AA59CA40571C2E = _0x04AA59CA40571C2E;
})(shapetest || (shapetest = {}));
export var socialclub;
(function (socialclub) {
    /**
     * No comment provided
     *
     * Hash: 0x89D9BDE7334B110F | Since: 1207
     */
    function scCommunityEventGetDisplayName() {
        return ScCommunityEventGetDisplayName();
    }
    socialclub.scCommunityEventGetDisplayName = scCommunityEventGetDisplayName;
    /**
     * No comment provided
     *
     * Hash: 0x11EA52CAD1B55910 | Since: 1207
     */
    function scCommunityEventGetDisplayNameById() {
        return ScCommunityEventGetDisplayNameById(0);
    }
    socialclub.scCommunityEventGetDisplayNameById = scCommunityEventGetDisplayNameById;
    /**
     * No comment provided
     *
     * Hash: 0x85EA0BEC7B1F7622 | Since: 1207
     */
    function scCommunityEventGetDisplayNameForType() {
        return ScCommunityEventGetDisplayNameForType(undefined);
    }
    socialclub.scCommunityEventGetDisplayNameForType = scCommunityEventGetDisplayNameForType;
    /**
     * No comment provided
     *
     * Hash: 0xD635DF6BAA5A6017 | Since: 1207
     */
    function scCommunityEventGetEventId() {
        return ScCommunityEventGetEventId();
    }
    socialclub.scCommunityEventGetEventId = scCommunityEventGetEventId;
    /**
     * No comment provided
     *
     * Hash: 0x03C03ABBABBEF752 | Since: 1207
     */
    function scCommunityEventGetEventIdForType() {
        return ScCommunityEventGetEventIdForType(undefined);
    }
    socialclub.scCommunityEventGetEventIdForType = scCommunityEventGetEventIdForType;
    /**
     * No comment provided
     *
     * Hash: 0x060BBAD634C2B44B | Since: 1207
     */
    function scCommunityEventGetExtraDataFloat() {
        return ScCommunityEventGetExtraDataFloat(undefined);
    }
    socialclub.scCommunityEventGetExtraDataFloat = scCommunityEventGetExtraDataFloat;
    /**
     * No comment provided
     *
     * Hash: 0x91C9E2A0F9DD6DD4 | Since: 1207
     */
    function scCommunityEventGetExtraDataFloatById() {
        return ScCommunityEventGetExtraDataFloatById(0, undefined);
    }
    socialclub.scCommunityEventGetExtraDataFloatById = scCommunityEventGetExtraDataFloatById;
    /**
     * No comment provided
     *
     * Hash: 0x1BDB56DB258F052D | Since: 1207
     */
    function scCommunityEventGetExtraDataFloatForType() {
        return ScCommunityEventGetExtraDataFloatForType(undefined, undefined);
    }
    socialclub.scCommunityEventGetExtraDataFloatForType = scCommunityEventGetExtraDataFloatForType;
    /**
     * No comment provided
     *
     * Hash: 0xB4411D4D6B81438E | Since: 1207
     */
    function scCommunityEventGetExtraDataInt() {
        return ScCommunityEventGetExtraDataInt(undefined);
    }
    socialclub.scCommunityEventGetExtraDataInt = scCommunityEventGetExtraDataInt;
    /**
     * No comment provided
     *
     * Hash: 0x7C981DE05A7403A0 | Since: 1207
     */
    function scCommunityEventGetExtraDataIntById() {
        return ScCommunityEventGetExtraDataIntById(0, undefined);
    }
    socialclub.scCommunityEventGetExtraDataIntById = scCommunityEventGetExtraDataIntById;
    /**
     * No comment provided
     *
     * Hash: 0x3519CC3525319A96 | Since: 1207
     */
    function scCommunityEventGetExtraDataIntForType() {
        return ScCommunityEventGetExtraDataIntForType(undefined, undefined);
    }
    socialclub.scCommunityEventGetExtraDataIntForType = scCommunityEventGetExtraDataIntForType;
    /**
     * No comment provided
     *
     * Hash: 0x9F6DCD0C939C71E9 | Since: 1207
     */
    function scCommunityEventGetExtraDataString() {
        return ScCommunityEventGetExtraDataString(undefined);
    }
    socialclub.scCommunityEventGetExtraDataString = scCommunityEventGetExtraDataString;
    /**
     * No comment provided
     *
     * Hash: 0x049D2196D9D11184 | Since: 1207
     */
    function scCommunityEventGetExtraDataStringById() {
        return ScCommunityEventGetExtraDataStringById(0, undefined);
    }
    socialclub.scCommunityEventGetExtraDataStringById = scCommunityEventGetExtraDataStringById;
    /**
     * No comment provided
     *
     * Hash: 0xC8FC3B2432E8229D | Since: 1207
     */
    function scCommunityEventGetExtraDataStringForType() {
        return ScCommunityEventGetExtraDataStringForType(undefined, undefined);
    }
    socialclub.scCommunityEventGetExtraDataStringForType = scCommunityEventGetExtraDataStringForType;
    /**
     * No comment provided
     *
     * Hash: 0xCBF743C984695CF3 | Since: 1207
     */
    function scCommunityEventIsActive() {
        return ScCommunityEventIsActive();
    }
    socialclub.scCommunityEventIsActive = scCommunityEventIsActive;
    /**
     * No comment provided
     *
     * Hash: 0x62B384FEFDE06817 | Since: 1207
     */
    function scCommunityEventIsActiveById() {
        return ScCommunityEventIsActiveById(0);
    }
    socialclub.scCommunityEventIsActiveById = scCommunityEventIsActiveById;
    /**
     * No comment provided
     *
     * Hash: 0x09937EB0CEBC2F9F | Since: 1207
     */
    function scCommunityEventIsActiveForType() {
        return ScCommunityEventIsActiveForType(undefined);
    }
    socialclub.scCommunityEventIsActiveForType = scCommunityEventIsActiveForType;
    /**
     * No comment provided
     *
     * Hash: 0x74CF39E030A382C4 | Since: 1207
     */
    function scInboxGetMessageIsReadAtIndex(msgIndex) {
        return ScInboxGetMessageIsReadAtIndex(msgIndex);
    }
    socialclub.scInboxGetMessageIsReadAtIndex = scInboxGetMessageIsReadAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0xFF92537C4DDC1241 | Since: 1207
     */
    function scInboxGetMessageTypeAtIndex(msgIndex) {
        return ScInboxGetMessageTypeAtIndex(msgIndex);
    }
    socialclub.scInboxGetMessageTypeAtIndex = scInboxGetMessageTypeAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x8EF0F633280C0663 | Since: 1207
     */
    function scInboxGetTotalNumMessages() {
        return ScInboxGetTotalNumMessages();
    }
    socialclub.scInboxGetTotalNumMessages = scInboxGetTotalNumMessages;
    /**
     * No comment provided
     *
     * Hash: 0x95BB39C4DA99F348 | Since: 1207
     */
    function scInboxMessageGetDataInt() {
        return ScInboxMessageGetDataInt(0);
    }
    socialclub.scInboxMessageGetDataInt = scInboxMessageGetDataInt;
    /**
     * No comment provided
     *
     * Hash: 0x66F77FD58506FF6B | Since: 1207
     */
    function scInboxMessageGetDataString() {
        return ScInboxMessageGetDataString(0);
    }
    socialclub.scInboxMessageGetDataString = scInboxMessageGetDataString;
    /**
     * No comment provided
     *
     * Hash: 0x176D077685CD83E4 | Since: 1207
     */
    function scInboxMessageGetRawTypeAtIndex() {
        return ScInboxMessageGetRawTypeAtIndex(0);
    }
    socialclub.scInboxMessageGetRawTypeAtIndex = scInboxMessageGetRawTypeAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x63CAC501FFF66DC4 | Since: 1207
     */
    function scInboxSetMessageAsReadAtIndex(msgIndex) {
        return ScInboxSetMessageAsReadAtIndex(msgIndex);
    }
    socialclub.scInboxSetMessageAsReadAtIndex = scInboxSetMessageAsReadAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0xA31DAFCDC33775E9 | Since: 1207
     */
    function scPresenceAttrSetFloat(attrHash, value) {
        if (typeof attrHash === 'string')
            attrHash = misc.getHashKey(attrHash);
        return ScPresenceAttrSetFloat(attrHash, value);
    }
    socialclub.scPresenceAttrSetFloat = scPresenceAttrSetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x00000000467F4CAA | Since: 1207
     */
    function scPresenceAttrSetFloatEx(value) {
        return ScPresenceAttrSetFloatEx(value, false);
    }
    socialclub.scPresenceAttrSetFloatEx = scPresenceAttrSetFloatEx;
    /**
     * No comment provided
     *
     * Hash: 0x0000000085488C49 | Since: 1207
     */
    function scPresenceAttrSetIntEx(value) {
        return ScPresenceAttrSetIntEx(value, false);
    }
    socialclub.scPresenceAttrSetIntEx = scPresenceAttrSetIntEx;
    /**
     * No comment provided
     *
     * Hash: 0x00000000EB2D93B3 | Since: 1207
     */
    function scPresenceAttrSetStringEx(attrName, value) {
        return ScPresenceAttrSetStringEx(attrName, value, false);
    }
    socialclub.scPresenceAttrSetStringEx = scPresenceAttrSetStringEx;
    /**
     * Starts a task to check an entered string for profanity on the ROS/Social Club services.
     *
     * Hash: 0x9C74AC9D87B3FFF4 | Since: 1207
     */
    function scProfanityCheckString() {
        return ScProfanityCheckString();
    }
    socialclub.scProfanityCheckString = scProfanityCheckString;
    /**
     * No comment provided
     *
     * Hash: 0x3A10BCD0C8AA0B82 | Since: 1207
     */
    function scProfanityGetCheckIsPending(token) {
        return ScProfanityGetCheckIsPending(token);
    }
    socialclub.scProfanityGetCheckIsPending = scProfanityGetCheckIsPending;
    /**
     * No comment provided
     *
     * Hash: 0x08C8052AF40C4247 | Since: 1207
     */
    function scProfanityGetCheckIsValid(token) {
        return ScProfanityGetCheckIsValid(token);
    }
    socialclub.scProfanityGetCheckIsValid = scProfanityGetCheckIsValid;
    /**
     * No comment provided
     *
     * Hash: 0xF302973BB8BE70E6 | Since: 1207
     */
    function scProfanityGetStringPassed(token) {
        return ScProfanityGetStringPassed(token);
    }
    socialclub.scProfanityGetStringPassed = scProfanityGetStringPassed;
    /**
     * No comment provided
     *
     * Hash: 0x0CF3BFB99EBBE5B1 | Since: 1207
     */
    function scProfanityGetStringStatus(token) {
        return ScProfanityGetStringStatus(token);
    }
    socialclub.scProfanityGetStringStatus = scProfanityGetStringStatus;
})(socialclub || (socialclub = {}));
export var socialclubfeed;
(function (socialclubfeed) {
    /**
     * No comment provided
     *
     * Hash: 0x068332D20CB6F897 | Since: 1232
     */
    function scFeedHubHasNewData() {
        return ScFeedHubHasNewData();
    }
    socialclubfeed.scFeedHubHasNewData = scFeedHubHasNewData;
    /**
     * No comment provided
     *
     * Hash: 0xEFB64240F6B17817 | Since: 1207
     */
    function scFeedSubmitPresetMessage(_type, subType) {
        return ScFeedSubmitPresetMessage(_type, subType);
    }
    socialclubfeed.scFeedSubmitPresetMessage = scFeedSubmitPresetMessage;
})(socialclubfeed || (socialclubfeed = {}));
export var spactionproxy;
(function (spactionproxy) {
    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC98BEF | Since: 1207
     */
    function getNextPendingBuyAction() {
        return SpactionproxyGetNextPendingBuyAction();
    }
    spactionproxy.getNextPendingBuyAction = getNextPendingBuyAction;
    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC97BEF | Since: 1207
     */
    function getNextPendingCraftingAction() {
        return SpactionproxyGetNextPendingCraftingAction();
    }
    spactionproxy.getNextPendingCraftingAction = getNextPendingCraftingAction;
    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC91BEC | Since: 1207
     */
    function managerIsFailed() {
        return SpactionproxyManagerIsFailed();
    }
    spactionproxy.managerIsFailed = managerIsFailed;
    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC91BED | Since: 1207
     */
    function managerIsReady() {
        return SpactionproxyManagerIsReady();
    }
    spactionproxy.managerIsReady = managerIsReady;
    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC94BEF | Since: 1207
     */
    function processAction() {
        return SpactionproxyProcessAction(undefined, false);
    }
    spactionproxy.processAction = processAction;
    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC91BEE | Since: 1207
     */
    function startManager() {
        return SpactionproxyStartManager();
    }
    spactionproxy.startManager = startManager;
})(spactionproxy || (spactionproxy = {}));
export var stats;
(function (stats) {
    /**
     * No comment provided
     *
     * Hash: 0x808712E428F697B8 | Since: 1232
     */
    function chalAchievementGetProgressInt(p0, p1) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return ChalAchievementGetProgressInt(p0, p1);
    }
    stats.chalAchievementGetProgressInt = chalAchievementGetProgressInt;
    /**
     * No comment provided
     *
     * Hash: 0x77B97A827739D434 | Since: 1232
     */
    function chalAchievementIsComplete(p0, p1) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return ChalAchievementIsComplete(p0, p1);
    }
    stats.chalAchievementIsComplete = chalAchievementIsComplete;
    /**
     * No comment provided
     *
     * Hash: 0x86922D8C02FB7703 | Since: 1207
     */
    function chalAddGoalProgressFloat(chalHash, goalHash, value) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        ChalAddGoalProgressFloat(chalHash, goalHash, value);
    }
    stats.chalAddGoalProgressFloat = chalAddGoalProgressFloat;
    /**
     * No comment provided
     *
     * Hash: 0x86922D8C02FB7705 | Since: 1232
     */
    function chalAddGoalProgressFloatByScoreId(p0, value) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        ChalAddGoalProgressFloatByScoreId(p0, value);
    }
    stats.chalAddGoalProgressFloatByScoreId = chalAddGoalProgressFloatByScoreId;
    /**
     * No comment provided
     *
     * Hash: 0xDDBD560745B1EE9A | Since: 1207
     */
    function chalAddGoalProgressInt(chalHash, goalHash, value) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        ChalAddGoalProgressInt(chalHash, goalHash, value);
    }
    stats.chalAddGoalProgressInt = chalAddGoalProgressInt;
    /**
     * No comment provided
     *
     * Hash: 0xDDBD560745B1EE9C | Since: 1207
     */
    function chalAddGoalProgressIntByScoreId(p0, value) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        ChalAddGoalProgressIntByScoreId(p0, value);
    }
    stats.chalAddGoalProgressIntByScoreId = chalAddGoalProgressIntByScoreId;
    /**
     * No comment provided
     *
     * Hash: 0x58CB53DB63F84DEA | Since: 1207
     */
    function chalGetMaxRanks(chalHash) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        return ChalGetMaxRanks(chalHash);
    }
    stats.chalGetMaxRanks = chalGetMaxRanks;
    /**
     * No comment provided
     *
     * Hash: 0x58CB53DB63F84DE9 | Since: 1207
     */
    function chalGetNumRanksCompleted(chalHash) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        return ChalGetNumRanksCompleted(chalHash);
    }
    stats.chalGetNumRanksCompleted = chalGetNumRanksCompleted;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/challenge_goals.lua
     *
     * Hash: 0x04DAC3929796EB87 | Since: 1207
     */
    function chalIsGoalActive(chalHash, goalHash) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        return ChalIsGoalActive(chalHash, goalHash);
    }
    stats.chalIsGoalActive = chalIsGoalActive;
    /**
     * No comment provided
     *
     * Hash: 0x97E18E7C098626DE | Since: 1207
     */
    function chalMissionAddGoalProgressInt(missionHash, goalHash, value) {
        if (typeof missionHash === 'string')
            missionHash = misc.getHashKey(missionHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        ChalMissionAddGoalProgressInt(missionHash, goalHash, value);
    }
    stats.chalMissionAddGoalProgressInt = chalMissionAddGoalProgressInt;
    /**
     * No comment provided
     *
     * Hash: 0x0B0576DD3A75E58D | Since: 1207
     */
    function chalMissionGetNumGoals(missionHash) {
        if (typeof missionHash === 'string')
            missionHash = misc.getHashKey(missionHash);
        return ChalMissionGetNumGoals(missionHash);
    }
    stats.chalMissionGetNumGoals = chalMissionGetNumGoals;
    /**
     * No comment provided
     *
     * Hash: 0xA785A52B59B7E7B2 | Since: 1207
     */
    function chalMissionGetNumGoalsComplete(missionHash) {
        if (typeof missionHash === 'string')
            missionHash = misc.getHashKey(missionHash);
        return ChalMissionGetNumGoalsComplete(missionHash);
    }
    stats.chalMissionGetNumGoalsComplete = chalMissionGetNumGoalsComplete;
    /**
     * No comment provided
     *
     * Hash: 0xC0BB774787BBF301 | Since: 1207
     */
    function chalMissionIsGoalComplete(missionHash, goalHash) {
        if (typeof missionHash === 'string')
            missionHash = misc.getHashKey(missionHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        return ChalMissionIsGoalComplete(missionHash, goalHash);
    }
    stats.chalMissionIsGoalComplete = chalMissionIsGoalComplete;
    /**
     * No comment provided
     *
     * Hash: 0x4ABF7E4DB6279E8F | Since: 1207
     */
    function chalNetStartChal(chalHash) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        ChalNetStartChal(chalHash);
    }
    stats.chalNetStartChal = chalNetStartChal;
    /**
     * No comment provided
     *
     * Hash: 0xC3FCB47344DCB638 | Since: 1207
     */
    function chalNetStartGoal(chalHash, goalHash) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        ChalNetStartGoal(chalHash, goalHash);
    }
    stats.chalNetStartGoal = chalNetStartGoal;
    /**
     * No comment provided
     *
     * Hash: 0x43B0163154A50C86 | Since: 1207
     */
    function chalNetStopChal(chalHash) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        ChalNetStopChal(chalHash);
    }
    stats.chalNetStopChal = chalNetStopChal;
    /**
     * No comment provided
     *
     * Hash: 0x00CE6A93324A590B | Since: 1207
     */
    function chalNetStopGoal(chalHash, goalHash) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        ChalNetStopGoal(chalHash, goalHash);
    }
    stats.chalNetStopGoal = chalNetStopGoal;
    /**
     * No comment provided
     *
     * Hash: 0xF63DF9EE16393343 | Since: 1436
     */
    function chalSetGoalDisabled(chalHash, goalHash, disabled) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        ChalSetGoalDisabled(chalHash, goalHash, disabled);
    }
    stats.chalSetGoalDisabled = chalSetGoalDisabled;
    /**
     * No comment provided
     *
     * Hash: 0xDDBD560745B1EE9B | Since: 1207
     */
    function chalSetGoalProgressInt(chalHash, goalHash, value) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        ChalSetGoalProgressInt(chalHash, goalHash, value);
    }
    stats.chalSetGoalProgressInt = chalSetGoalProgressInt;
    /**
     * No comment provided
     *
     * Hash: 0xB2A38826E5886E83 | Since: 1207
     */
    function trackerDeedStarted(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        StatstrackerDeedStarted(p0, undefined);
    }
    stats.trackerDeedStarted = trackerDeedStarted;
    /**
     * No comment provided
     *
     * Hash: 0x01F4D242765C6B24 | Since: 1207
     */
    function trackerIsInitialized(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return StatstrackerIsInitialized(p0);
    }
    stats.trackerIsInitialized = trackerIsInitialized;
    /**
     * No comment provided
     *
     * Hash: 0x6B1044FDC2B09101 | Since: 1207
     */
    function statAddBountyTarget(unlockHash, ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        StatAddBountyTarget(unlockHash, _ped);
    }
    stats.statAddBountyTarget = statAddBountyTarget;
    /**
     * No comment provided
     *
     * Hash: 0x262EF7CF49CF1EB9 | Since: 1207
     */
    function statBountyCaptured(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        StatBountyCaptured(_entity);
    }
    stats.statBountyCaptured = statBountyCaptured;
    /**
     * No comment provided
     *
     * Hash: 0xB22F05732F72F70C | Since: 1207
     */
    function statBountyEscaped(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        StatBountyEscaped(_ped);
    }
    stats.statBountyEscaped = statBountyEscaped;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x11B5E6D2AE73F48F | Since: 1207
     */
    function statIdGetBool() {
        return StatIdGetBool();
    }
    stats.statIdGetBool = statIdGetBool;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x8B0FACEFC36C824C | Since: 1207
     */
    function statIdGetDate() {
        return StatIdGetDate();
    }
    stats.statIdGetDate = statIdGetDate;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0xD7AE6C9C9C6AC54D | Since: 1207
     */
    function statIdGetFloat() {
        return StatIdGetFloat();
    }
    stats.statIdGetFloat = statIdGetFloat;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x767FBC2AC802EF3E | Since: 1207
     */
    function statIdGetInt() {
        return StatIdGetInt();
    }
    stats.statIdGetInt = statIdGetInt;
    /**
     * struct StatId
     * {
     * alignas(8) Hash BaseId;
     * alignas(8) Hash PermutationId;
     * }
     *
     * Hash: 0xC48FE1971C9743FF | Since: 1207
     */
    function statIdIsValid() {
        return StatIdIsValid();
    }
    stats.statIdIsValid = statIdIsValid;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x3B5107353267D7A1 | Since: 1207
     */
    function statIdSetBool(value) {
        return StatIdSetBool(value, false);
    }
    stats.statIdSetBool = statIdSetBool;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x1FAE9B2FAA2DFE06 | Since: 1207
     */
    function statIdSetDate() {
        return StatIdSetDate(false);
    }
    stats.statIdSetDate = statIdSetDate;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x481BDF6A10C5EF68 | Since: 1207
     */
    function statIdSetFloat(value) {
        return StatIdSetFloat(value, false);
    }
    stats.statIdSetFloat = statIdSetFloat;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x05060A54834F2382 | Since: 1207
     */
    function statIdSetGxtLabel(label) {
        return StatIdSetGxtLabel(label, false);
    }
    stats.statIdSetGxtLabel = statIdSetGxtLabel;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0xA4DDF5DF95E65EEE | Since: 1207
     */
    function statIdSetInt(value) {
        return StatIdSetInt(value, false);
    }
    stats.statIdSetInt = statIdSetInt;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x34B22DE38477EDB4 | Since: 1207
     */
    function statIdSetToPosseId() {
        return StatIdSetToPosseId();
    }
    stats.statIdSetToPosseId = statIdSetToPosseId;
    /**
     * No comment provided
     *
     * Hash: 0x4D31051A4CA83787 | Since: 1311
     */
    function statPhotographTaken(itemset) {
        StatPhotographTaken(itemset);
    }
    stats.statPhotographTaken = statPhotographTaken;
    /**
     * No comment provided
     *
     * Hash: 0xCD0D69C65BB0E8B9 | Since: 1311
     */
    function statRegisterLegendaryAnimalDeed(deedHash) {
        if (typeof deedHash === 'string')
            deedHash = misc.getHashKey(deedHash);
        StatRegisterLegendaryAnimalDeed(deedHash);
    }
    stats.statRegisterLegendaryAnimalDeed = statRegisterLegendaryAnimalDeed;
    /**
     * No comment provided
     *
     * Hash: 0xBA61BA6205A3F5A8 | Since: 1207
     */
    function weeklyCollectibleGetItemInSet(chalHash, setIndex, itemIndex) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        return WeeklyCollectibleGetItemInSet(chalHash, setIndex, itemIndex);
    }
    stats.weeklyCollectibleGetItemInSet = weeklyCollectibleGetItemInSet;
    /**
     * No comment provided
     *
     * Hash: 0x610783F646894D25 | Since: 1207
     */
    function weeklyCollectibleGetItemSetBuyAward(chalHash, index) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        return WeeklyCollectibleGetItemSetBuyAward(chalHash, index);
    }
    stats.weeklyCollectibleGetItemSetBuyAward = weeklyCollectibleGetItemSetBuyAward;
    /**
     * No comment provided
     *
     * Hash: 0xBFFA88522FF0F730 | Since: 1207
     */
    function weeklyCollectibleGetItemSetLabel(chalHash, index) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        return WeeklyCollectibleGetItemSetLabel(chalHash, index);
    }
    stats.weeklyCollectibleGetItemSetLabel = weeklyCollectibleGetItemSetLabel;
    /**
     * No comment provided
     *
     * Hash: 0x7D675C9DDDB365BE | Since: 1207
     */
    function weeklyCollectibleGetNumItemsInSet(chalHash, index) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        return WeeklyCollectibleGetNumItemsInSet(chalHash, index);
    }
    stats.weeklyCollectibleGetNumItemsInSet = weeklyCollectibleGetNumItemsInSet;
    /**
     * No comment provided
     *
     * Hash: 0x8F5317729F791D10 | Since: 1207
     */
    function weeklyCollectibleGetNumSets(chalHash) {
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        return WeeklyCollectibleGetNumSets(chalHash);
    }
    stats.weeklyCollectibleGetNumSets = weeklyCollectibleGetNumSets;
    /**
     * No comment provided
     *
     * Hash: 0x025E98E317652CDD | Since: 1207
     */
    function _0x025E98E317652CDD() {
        Citizen.invokeNative('0x025E98E317652CDD', 0);
    }
    stats._0x025E98E317652CDD = _0x025E98E317652CDD;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x0FEE2561120F3333 | Since: 1207
     */
    function _0x0FEE2561120F3333() {
        return Citizen.invokeNative('0x0FEE2561120F3333');
    }
    stats._0x0FEE2561120F3333 = _0x0FEE2561120F3333;
    /**
     * No comment provided
     *
     * Hash: 0x218F7710A139D012 | Since: 1207
     */
    function _0x218F7710A139D012() {
        Citizen.invokeNative('0x218F7710A139D012');
    }
    stats._0x218F7710A139D012 = _0x218F7710A139D012;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x302E71C1D9EE75B9 | Since: 1207
     */
    function _0x302E71C1D9EE75B9(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return Citizen.invokeNative('0x302E71C1D9EE75B9', p1);
    }
    stats._0x302E71C1D9EE75B9 = _0x302E71C1D9EE75B9;
    /**
     * No comment provided
     *
     * Hash: 0x332630B862277879 | Since: unknown
     */
    function _0x332630B862277879() {
        return Citizen.invokeNative('0x332630B862277879');
    }
    stats._0x332630B862277879 = _0x332630B862277879;
    /**
     * No comment provided
     *
     * Hash: 0x378D3B1B11D9385B | Since: 1207
     */
    function _0x378D3B1B11D9385B() {
        Citizen.invokeNative('0x378D3B1B11D9385B', 0);
    }
    stats._0x378D3B1B11D9385B = _0x378D3B1B11D9385B;
    /**
     * No comment provided
     *
     * Hash: 0x3AEABAE3F3C7600C | Since: 1207
     */
    function _0x3AEABAE3F3C7600C() {
        return Citizen.invokeNative('0x3AEABAE3F3C7600C');
    }
    stats._0x3AEABAE3F3C7600C = _0x3AEABAE3F3C7600C;
    /**
     * No comment provided
     *
     * Hash: 0x3EB2791A1FBC8A42 | Since: 1207
     */
    function _0x3EB2791A1FBC8A42(statItem) {
        if (typeof statItem === 'string')
            statItem = misc.getHashKey(statItem);
        Citizen.invokeNative('0x3EB2791A1FBC8A42', statItem, 0);
    }
    stats._0x3EB2791A1FBC8A42 = _0x3EB2791A1FBC8A42;
    /**
     * No comment provided
     *
     * Hash: 0x3F6FD87D2030ADC6 | Since: 1207
     */
    function _0x3F6FD87D2030ADC6() {
        return Citizen.invokeNative('0x3F6FD87D2030ADC6');
    }
    stats._0x3F6FD87D2030ADC6 = _0x3F6FD87D2030ADC6;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0x4DAC398297981B87 | Since: 1207
     */
    function _0x4DAC398297981B87() {
        return Citizen.invokeNative('0x4DAC398297981B87', 0);
    }
    stats._0x4DAC398297981B87 = _0x4DAC398297981B87;
    /**
     * Only used in R* Script net_char_creator
     *
     * Hash: 0x4E463A3CDEFFFE96 | Since: 1207
     */
    function _0x4E463A3CDEFFFE96() {
        Citizen.invokeNative('0x4E463A3CDEFFFE96');
    }
    stats._0x4E463A3CDEFFFE96 = _0x4E463A3CDEFFFE96;
    /**
     * Only used in R* Script net_char_creator
     *
     * Hash: 0x4F2D5FA23DB992DE | Since: 1207
     */
    function _0x4F2D5FA23DB992DE() {
        Citizen.invokeNative('0x4F2D5FA23DB992DE');
    }
    stats._0x4F2D5FA23DB992DE = _0x4F2D5FA23DB992DE;
    /**
     * No comment provided
     *
     * Hash: 0x4FCBCC0584CD08E9 | Since: 1207
     */
    function _0x4FCBCC0584CD08E9(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        Citizen.invokeNative('0x4FCBCC0584CD08E9', p0);
    }
    stats._0x4FCBCC0584CD08E9 = _0x4FCBCC0584CD08E9;
    /**
     * No comment provided
     *
     * Hash: 0x6123E2832C34243D | Since: 1207
     */
    function _0x6123E2832C34243D() {
        Citizen.invokeNative('0x6123E2832C34243D', undefined, undefined, undefined, undefined, undefined);
    }
    stats._0x6123E2832C34243D = _0x6123E2832C34243D;
    /**
     * No comment provided
     *
     * Hash: 0x70379B5C3FF1D209 | Since: unknown
     */
    function _0x70379B5C3FF1D209() {
        return Citizen.invokeNative('0x70379B5C3FF1D209');
    }
    stats._0x70379B5C3FF1D209 = _0x70379B5C3FF1D209;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0x8312F09C56149A8A | Since: 1207
     */
    function _0x8312F09C56149A8A(animalType) {
        if (typeof animalType === 'string')
            animalType = misc.getHashKey(animalType);
        Citizen.invokeNative('0x8312F09C56149A8A', animalType);
    }
    stats._0x8312F09C56149A8A = _0x8312F09C56149A8A;
    /**
     * No comment provided
     *
     * Hash: 0x8BA3D7B1E83EF803 | Since: 1207
     */
    function _0x8BA3D7B1E83EF803(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0x8BA3D7B1E83EF803', p0);
    }
    stats._0x8BA3D7B1E83EF803 = _0x8BA3D7B1E83EF803;
    /**
     * No comment provided
     *
     * Hash: 0x8C889E4CBB4B2356 | Since: 1207
     */
    function _0x8C889E4CBB4B2356(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8C889E4CBB4B2356', undefined, _ped);
    }
    stats._0x8C889E4CBB4B2356 = _0x8C889E4CBB4B2356;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x91A4F58E01ED5E4C | Since: 1207
     */
    function _0x91A4F58E01ED5E4C(value) {
        return Citizen.invokeNative('0x91A4F58E01ED5E4C', value);
    }
    stats._0x91A4F58E01ED5E4C = _0x91A4F58E01ED5E4C;
    /**
     * No comment provided
     *
     * Hash: 0x99230691875FC218 | Since: 1207
     */
    function _0x99230691875FC218(p1, pos) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x99230691875FC218', undefined, p1, pos.x, pos.y, pos.z);
    }
    stats._0x99230691875FC218 = _0x99230691875FC218;
    /**
     * No comment provided
     *
     * Hash: 0x997060BC223ADFF9 | Since: unknown
     */
    function _0x997060BC223ADFF9() {
        return Citizen.invokeNative('0x997060BC223ADFF9');
    }
    stats._0x997060BC223ADFF9 = _0x997060BC223ADFF9;
    /**
     * No comment provided
     *
     * Hash: 0x9D0F5D2E1951CD84 | Since: 1207
     */
    function _0x9D0F5D2E1951CD84() {
        return Citizen.invokeNative('0x9D0F5D2E1951CD84');
    }
    stats._0x9D0F5D2E1951CD84 = _0x9D0F5D2E1951CD84;
    /**
     * No comment provided
     *
     * Hash: 0xA2E2BEA4E83F6270 | Since: 1207
     */
    function _0xA2E2BEA4E83F6270(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0xA2E2BEA4E83F6270', p0);
    }
    stats._0xA2E2BEA4E83F6270 = _0xA2E2BEA4E83F6270;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0xA59590050F80FF2E | Since: 1207
     */
    function _0xA59590050F80FF2E() {
        Citizen.invokeNative('0xA59590050F80FF2E', undefined, false, false, false);
    }
    stats._0xA59590050F80FF2E = _0xA59590050F80FF2E;
    /**
     * No comment provided
     *
     * Hash: 0xA596890CF55B5095 | Since: 1436
     */
    function _0xA596890CF55B5095(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xA596890CF55B5095', _ped, false);
    }
    stats._0xA596890CF55B5095 = _0xA596890CF55B5095;
    /**
     * No comment provided
     *
     * Hash: 0xB112B9262EC29C20 | Since: 1207
     */
    function _0xB112B9262EC29C20(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0xB112B9262EC29C20', p0, 0);
    }
    stats._0xB112B9262EC29C20 = _0xB112B9262EC29C20;
    /**
     * No comment provided
     *
     * Hash: 0xB5E2EDA2135E0FA1 | Since: 1207
     */
    function _0xB5E2EDA2135E0FA1(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0xB5E2EDA2135E0FA1', p0, 0);
    }
    stats._0xB5E2EDA2135E0FA1 = _0xB5E2EDA2135E0FA1;
    /**
     * No comment provided
     *
     * Hash: 0xBE66B26B6529E943 | Since: 1311
     */
    function _0xBE66B26B6529E943(unlockHash, ped, animalType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        if (typeof animalType === 'string')
            animalType = misc.getHashKey(animalType);
        Citizen.invokeNative('0xBE66B26B6529E943', unlockHash, _ped, animalType);
    }
    stats._0xBE66B26B6529E943 = _0xBE66B26B6529E943;
    /**
     * No comment provided
     *
     * Hash: 0xCA1F0B5103936891 | Since: 1207
     */
    function _0xCA1F0B5103936891(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0xCA1F0B5103936891', p0);
    }
    stats._0xCA1F0B5103936891 = _0xCA1F0B5103936891;
    /**
     * No comment provided
     *
     * Hash: 0xCA41E86545413B5B | Since: 1207
     */
    function _0xCA41E86545413B5B() {
        Citizen.invokeNative('0xCA41E86545413B5B', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats._0xCA41E86545413B5B = _0xCA41E86545413B5B;
    /**
     * No comment provided
     *
     * Hash: 0xCAAE29CB5591B2A5 | Since: unknown
     */
    function _0xCAAE29CB5591B2A5() {
        return Citizen.invokeNative('0xCAAE29CB5591B2A5', undefined, undefined);
    }
    stats._0xCAAE29CB5591B2A5 = _0xCAAE29CB5591B2A5;
    /**
     * No comment provided
     *
     * Hash: 0xD64DBC8B0424135F | Since: 1207
     */
    function _0xD64DBC8B0424135F(ped, animalType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof animalType === 'string')
            animalType = misc.getHashKey(animalType);
        Citizen.invokeNative('0xD64DBC8B0424135F', _ped, animalType);
    }
    stats._0xD64DBC8B0424135F = _0xD64DBC8B0424135F;
    /**
     * No comment provided
     *
     * Hash: 0xDA26263C07CCE9C2 | Since: 1207
     */
    function _0xDA26263C07CCE9C2() {
        Citizen.invokeNative('0xDA26263C07CCE9C2', 0);
    }
    stats._0xDA26263C07CCE9C2 = _0xDA26263C07CCE9C2;
    /**
     * No comment provided
     *
     * Hash: 0xDCEC875A02991AD0 | Since: unknown
     */
    function _0xDCEC875A02991AD0() {
        return Citizen.invokeNative('0xDCEC875A02991AD0', undefined, undefined, undefined, undefined);
    }
    stats._0xDCEC875A02991AD0 = _0xDCEC875A02991AD0;
    /**
     * No comment provided
     *
     * Hash: 0xDDBD560745B1EE98 | Since: 1207
     */
    function _0xDDBD560745B1EE98(chalHash, goalHash, player) {
        const _player = player instanceof Player ? player.localId() : player;
        if (typeof chalHash === 'string')
            chalHash = misc.getHashKey(chalHash);
        if (typeof goalHash === 'string')
            goalHash = misc.getHashKey(goalHash);
        return Citizen.invokeNative('0xDDBD560745B1EE98', chalHash, goalHash, _player);
    }
    stats._0xDDBD560745B1EE98 = _0xDDBD560745B1EE98;
    /**
     * No comment provided
     *
     * Hash: 0xDF95DF488A645CE7 | Since: 1207
     */
    function _0xDF95DF488A645CE7() {
        Citizen.invokeNative('0xDF95DF488A645CE7');
    }
    stats._0xDF95DF488A645CE7 = _0xDF95DF488A645CE7;
    /**
     * statId: see STAT_ID_IS_VALID
     * Only used in R* SP Scripts
     * _STAT_ID_SET_*
     *
     * Hash: 0xE141F6B40B1E3683 | Since: 1207
     */
    function _0xE141F6B40B1E3683(value) {
        return Citizen.invokeNative('0xE141F6B40B1E3683', value);
    }
    stats._0xE141F6B40B1E3683 = _0xE141F6B40B1E3683;
    /**
     * No comment provided
     *
     * Hash: 0xE5A680A5D8B1F687 | Since: 1207
     */
    function _0xE5A680A5D8B1F687() {
        Citizen.invokeNative('0xE5A680A5D8B1F687', 0);
    }
    stats._0xE5A680A5D8B1F687 = _0xE5A680A5D8B1F687;
    /**
     * No comment provided
     *
     * Hash: 0xF21A5D66874FCEDD | Since: 1207
     */
    function _0xF21A5D66874FCEDD(p1, p2) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        Citizen.invokeNative('0xF21A5D66874FCEDD', undefined, p1, p2);
    }
    stats._0xF21A5D66874FCEDD = _0xF21A5D66874FCEDD;
    /**
     * No comment provided
     *
     * Hash: 0xF2B5ABDE09958689 | Since: 1311
     */
    function _0xF2B5ABDE09958689(unlockHash, ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        Citizen.invokeNative('0xF2B5ABDE09958689', unlockHash, _ped1, _ped2);
    }
    stats._0xF2B5ABDE09958689 = _0xF2B5ABDE09958689;
    /**
     * No comment provided
     *
     * Hash: 0xF8181B5EF156862C | Since: 1207
     */
    function _0xF8181B5EF156862C(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xF8181B5EF156862C', _ped);
    }
    stats._0xF8181B5EF156862C = _0xF8181B5EF156862C;
    /**
     * No comment provided
     *
     * Hash: 0xD5910ECF81A2278C | Since: 1207
     */
    function trackerDeedStatus(deedType, deedHash, missionStatus) {
        if (typeof deedHash === 'string')
            deedHash = misc.getHashKey(deedHash);
        return StatstrackerDeedStatus(deedType, deedHash, missionStatus);
    }
    stats.trackerDeedStatus = trackerDeedStatus;
    /**
     * Related to animal tagging
     *
     * Hash: 0x90E9A5DADBABC918 | Since: 1355
     */
    function statAddAnimalSampleTarget(animalType) {
        if (typeof animalType === 'string')
            animalType = misc.getHashKey(animalType);
        StatAddAnimalSampleTarget(animalType);
    }
    stats.statAddAnimalSampleTarget = statAddAnimalSampleTarget;
    /**
     * Calculation: (value / 1000) / 60 % 60
     *
     * Hash: 0x1E7384AB5D4F4581 | Since: 1207
     */
    function statCalculateCooldown(value) {
        return StatCalculateCooldown(value);
    }
    stats.statCalculateCooldown = statCalculateCooldown;
    /**
     * No comment provided
     *
     * Hash: 0x831BF01C56149A8A | Since: 1207
     */
    function statCarriedSatchelItemFromPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        StatCarriedSatchelItemFromPed(_ped);
    }
    stats.statCarriedSatchelItemFromPed = statCarriedSatchelItemFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x7C2ABF6E556B21FC | Since: 1207
     */
    function statDonateIncrementItem(item, slot) {
        StatDonateIncrementItem(item, slot, undefined, undefined);
    }
    stats.statDonateIncrementItem = statDonateIncrementItem;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0xBD861AE8A5181ED7 | Since: 1207
     */
    function statIdDecrementInt(value) {
        return StatIdDecrementInt(value);
    }
    stats.statIdDecrementInt = statIdDecrementInt;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x4A47E38EA3D60939 | Since: 1207
     */
    function statIdIncrementFloat(value) {
        return StatIdIncrementFloat(value);
    }
    stats.statIdIncrementFloat = statIdIncrementFloat;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x6A0184E904CDF25E | Since: 1207
     */
    function statIdIncrementInt(value) {
        return StatIdIncrementInt(value);
    }
    stats.statIdIncrementInt = statIdIncrementInt;
    /**
     * No comment provided
     *
     * Hash: 0xDA26263C87CCE9C1 | Since: 1207
     */
    function statItemFishCaught(fish, weight, category, subcategory) {
        const _fish = fish instanceof Ped ? fish.handle() : fish;
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        if (typeof subcategory === 'string')
            subcategory = misc.getHashKey(subcategory);
        StatItemFishCaught(_fish, weight, category, subcategory);
    }
    stats.statItemFishCaught = statItemFishCaught;
    /**
     * statId: see STAT_ID_IS_VALID
     *
     * Hash: 0x5420D398A42917FC | Since: 1311
     */
    function statPheromoneCooldownLegendaryAnimal(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return StatPheromoneCooldownLegendaryAnimal(_entity);
    }
    stats.statPheromoneCooldownLegendaryAnimal = statPheromoneCooldownLegendaryAnimal;
})(stats || (stats = {}));
export var streaming;
(function (streaming) {
    /**
     * No comment provided
     *
     * Hash: 0x0360710033BE60D9 | Since: 1207
     */
    function beginSrl() {
        BeginSrl();
    }
    streaming.beginSrl = beginSrl;
    /**
     * No comment provided
     *
     * Hash: 0x86CCAF7CE493EFBE | Since: 1207
     */
    function clearFocus() {
        ClearFocus();
    }
    streaming.clearFocus = clearFocus;
    /**
     * No comment provided
     *
     * Hash: 0xD83B22434E52728D | Since: 1207
     */
    function clearHdArea() {
        ClearHdArea();
    }
    streaming.clearHdArea = clearHdArea;
    /**
     * No comment provided
     *
     * Hash: 0x537F44CB0D7F150D | Since: 1207
     */
    function doesAnimDictExist() {
        return DoesAnimDictExist();
    }
    streaming.doesAnimDictExist = doesAnimDictExist;
    /**
     * No comment provided
     *
     * Hash: 0x1CE71FB33CA079FE | Since: 1207
     */
    function endSrl() {
        EndSrl();
    }
    streaming.endSrl = endSrl;
    /**
     * No comment provided
     *
     * Hash: 0x30CCCC4D88E654CA | Since: 1207
     */
    function getNumberOfRequests() {
        return GetNumberOfStreamingRequests();
    }
    streaming.getNumberOfRequests = getNumberOfRequests;
    /**
     * No comment provided
     *
     * Hash: 0x8A3945405B31048F | Since: 1207
     */
    function getPopulationBudgetMultiplier() {
        return GetPopulationBudgetMultiplier();
    }
    streaming.getPopulationBudgetMultiplier = getPopulationBudgetMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x27FF6FE8009B40CA | Since: 1207
     */
    function hasAnimDictLoaded(animDict) {
        return HasAnimDictLoaded(animDict);
    }
    streaming.hasAnimDictLoaded = hasAnimDictLoaded;
    /**
     * Alias for HAS_ANIM_SET_LOADED.
     *
     * Hash: 0x1F23D6B6DA1CC3B2 | Since: 1207
     */
    function hasClipSetLoaded(clipSet) {
        return HasClipSetLoaded(clipSet);
    }
    streaming.hasClipSetLoaded = hasClipSetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x210A79C9EC89778F | Since: 1207
     */
    function hasCollisionForModelLoaded(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return HasCollisionForModelLoaded(model);
    }
    streaming.hasCollisionForModelLoaded = hasCollisionForModelLoaded;
    /**
     * Checks if the specified model has loaded into memory.
     *
     * Hash: 0x1283B8B89DD5D1B6 | Since: 1207
     */
    function hasModelLoaded(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return HasModelLoaded(model);
    }
    streaming.hasModelLoaded = hasModelLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x2C04D89A0FB4E244 | Since: 1207
     */
    function hasMoveNetworkDefLoaded() {
        return HasMoveNetworkDefLoaded();
    }
    streaming.hasMoveNetworkDefLoaded = hasMoveNetworkDefLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x65BB72F29138F5D6 | Since: 1207
     */
    function hasNamedPtfxAssetLoaded(fxNameHash) {
        if (typeof fxNameHash === 'string')
            fxNameHash = misc.getHashKey(fxNameHash);
        return HasNamedPtfxAssetLoaded(fxNameHash);
    }
    streaming.hasNamedPtfxAssetLoaded = hasNamedPtfxAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x13A3F30A9ED0BC31 | Since: 1207
     */
    function hasPtfxAssetLoaded() {
        return HasPtfxAssetLoaded();
    }
    streaming.hasPtfxAssetLoaded = hasPtfxAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x31108BB5715D035F | Since: 1207
     */
    function iplGroupSwapCancel() {
        IplGroupSwapCancel();
    }
    streaming.iplGroupSwapCancel = iplGroupSwapCancel;
    /**
     * No comment provided
     *
     * Hash: 0x040EE319EFD1D3B5 | Since: 1207
     */
    function iplGroupSwapFinish() {
        IplGroupSwapFinish();
    }
    streaming.iplGroupSwapFinish = iplGroupSwapFinish;
    /**
     * No comment provided
     *
     * Hash: 0xFC464598F6EE97B0 | Since: 1207
     */
    function iplGroupSwapIsActive() {
        return IplGroupSwapIsActive();
    }
    streaming.iplGroupSwapIsActive = iplGroupSwapIsActive;
    /**
     * No comment provided
     *
     * Hash: 0xC2C05DEFE85A0B64 | Since: 1207
     */
    function iplGroupSwapIsReady() {
        return IplGroupSwapIsReady();
    }
    streaming.iplGroupSwapIsReady = iplGroupSwapIsReady;
    /**
     * No comment provided
     *
     * Hash: 0x20D504994FDC4412 | Since: 1207
     */
    function iplGroupSwapStart() {
        return IplGroupSwapStart();
    }
    streaming.iplGroupSwapStart = iplGroupSwapStart;
    /**
     * No comment provided
     *
     * Hash: 0xF87DE697E9A06EC6 | Since: 1207
     */
    function isEntityFocus(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return IsEntityFocus(_entity);
    }
    streaming.isEntityFocus = isEntityFocus;
    /**
     * Old name: _IS_IMAP_ACTIVE_2
     *
     * Hash: 0x93AC1B91CB6D9913 | Since: 1207
     */
    function isIplActiveByHash(iplHash) {
        if (typeof iplHash === 'string')
            iplHash = misc.getHashKey(iplHash);
        return IsIplActiveByHash(iplHash);
    }
    streaming.isIplActiveByHash = isIplActiveByHash;
    /**
     * Old name: _IS_IMAP_ACTIVE
     *
     * Hash: 0xD779B9B910BD3B7C | Since: 1207
     */
    function isIplActiveHash(iplHash) {
        if (typeof iplHash === 'string')
            iplHash = misc.getHashKey(iplHash);
        return IsIplActiveHash(iplHash);
    }
    streaming.isIplActiveHash = isIplActiveHash;
    /**
     * No comment provided
     *
     * Hash: 0xCF45DF50C7775F2A | Since: 1207
     */
    function isLoadSceneActive() {
        return IsLoadSceneActive();
    }
    streaming.isLoadSceneActive = isLoadSceneActive;
    /**
     * No comment provided
     *
     * Hash: 0x0909F71B5C070797 | Since: 1207
     */
    function isLoadSceneLoaded() {
        return IsLoadSceneLoaded();
    }
    streaming.isLoadSceneLoaded = isLoadSceneLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xC3F09DE9D6D17DDA | Since: 1207
     */
    function isModelAPed(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelAPed(model);
    }
    streaming.isModelAPed = isModelAPed;
    /**
     * Returns whether the specified model represents a vehicle.
     *
     * Hash: 0x354F62672DE7DB0A | Since: 1207
     */
    function isModelAVehicle(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelAVehicle(model);
    }
    streaming.isModelAVehicle = isModelAVehicle;
    /**
     * Returns whether the specified model exists in the game.
     *
     * Hash: 0xD6F3B6D7716CFF8E | Since: 1207
     */
    function isModelInCdimage(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelInCdimage(model);
    }
    streaming.isModelInCdimage = isModelInCdimage;
    /**
     * Returns whether the specified model is valid
     *
     * Hash: 0x392C8D8E07B70EFC | Since: 1207
     */
    function isModelValid(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelValid(model);
    }
    streaming.isModelValid = isModelValid;
    /**
     * No comment provided
     *
     * Hash: 0xED20CB1F5297791D | Since: 1207
     */
    function isPlayerSwitchInProgress() {
        return IsPlayerSwitchInProgress();
    }
    streaming.isPlayerSwitchInProgress = isPlayerSwitchInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x45BF3A6239A576B7 | Since: 1207
     */
    function isRenderedSceneLoaded() {
        return IsRenderedSceneLoaded();
    }
    streaming.isRenderedSceneLoaded = isRenderedSceneLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x5C2C88512CF6DAFB | Since: 1207
     */
    function isSrlLoaded() {
        return IsSrlLoaded();
    }
    streaming.isSrlLoaded = isSrlLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x387AD749E3B69B70 | Since: 1207
     */
    function loadSceneStart(pos, offsetX, offsetY, offsetZ, radius, controlFlags) {
        return LoadSceneStart(pos.x, pos.y, pos.z, offsetX, offsetY, offsetZ, radius, controlFlags);
    }
    streaming.loadSceneStart = loadSceneStart;
    /**
     * No comment provided
     *
     * Hash: 0x513F8AA5BF2F17CF | Since: 1207
     */
    function loadSceneStartSphere(pos, radius, controlFlags) {
        return LoadSceneStartSphere(pos.x, pos.y, pos.z, radius, controlFlags);
    }
    streaming.loadSceneStartSphere = loadSceneStartSphere;
    /**
     * No comment provided
     *
     * Hash: 0x5A8B01199C3E79C3 | Since: 1207
     */
    function loadSceneStop() {
        LoadSceneStop();
    }
    streaming.loadSceneStop = loadSceneStop;
    /**
     * No comment provided
     *
     * Hash: 0x354837E5A5BAA5AF | Since: 1207
     */
    function prefetchSrl() {
        return PrefetchSrl();
    }
    streaming.prefetchSrl = prefetchSrl;
    /**
     * No comment provided
     *
     * Hash: 0x4763145053A33D46 | Since: 1207
     */
    function removeAnimDict() {
        return RemoveAnimDict();
    }
    streaming.removeAnimDict = removeAnimDict;
    /**
     * Alias for REMOVE_ANIM_SET.
     *
     * Hash: 0x817FA1B1EE7CD6F0 | Since: 1207
     */
    function removeClipSet(clipSet) {
        RemoveClipSet(clipSet);
    }
    streaming.removeClipSet = removeClipSet;
    /**
     * Old name: _REMOVE_IMAP_2
     *
     * Hash: 0x431E3AB760629B34 | Since: 1207
     */
    function removeIplByHash(iplHash) {
        if (typeof iplHash === 'string')
            iplHash = misc.getHashKey(iplHash);
        RemoveIplByHash(iplHash);
    }
    streaming.removeIplByHash = removeIplByHash;
    /**
     * Old name: _REMOVE_IMAP
     *
     * Hash: 0x5A3E5CF7B4014B96 | Since: 1207
     */
    function removeIplHash(iplHash) {
        if (typeof iplHash === 'string')
            iplHash = misc.getHashKey(iplHash);
        RemoveIplHash(iplHash);
    }
    streaming.removeIplHash = removeIplHash;
    /**
     * No comment provided
     *
     * Hash: 0x57A197AD83F66BBF | Since: 1207
     */
    function removeMoveNetworkDef(name) {
        RemoveMoveNetworkDef(name);
    }
    streaming.removeMoveNetworkDef = removeMoveNetworkDef;
    /**
     * No comment provided
     *
     * Hash: 0xF20866829E1C81A2 | Since: 1207
     */
    function removeNamedPtfxAsset(fxNameHash) {
        if (typeof fxNameHash === 'string')
            fxNameHash = misc.getHashKey(fxNameHash);
        RemoveNamedPtfxAsset(fxNameHash);
    }
    streaming.removeNamedPtfxAsset = removeNamedPtfxAsset;
    /**
     * No comment provided
     *
     * Hash: 0x042F9049EA419E86 | Since: 1207
     */
    function removePtfxAsset() {
        RemovePtfxAsset();
    }
    streaming.removePtfxAsset = removePtfxAsset;
    /**
     * No comment provided
     *
     * Hash: 0x83A8D71650D1894F | Since: 1311
     */
    function requestAdditionalCollisionAtCoord(pos) {
        RequestAdditionalCollisionAtCoord(pos.x, pos.y, pos.z);
    }
    streaming.requestAdditionalCollisionAtCoord = requestAdditionalCollisionAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xA862A2AD321F94B4 | Since: 1207
     */
    function requestAnimDict(animDict) {
        RequestAnimDict(animDict);
    }
    streaming.requestAnimDict = requestAnimDict;
    /**
     * No comment provided
     *
     * Hash: 0xEF7611B57A820126 | Since: 1207
     */
    function requestClipSet(clipSet) {
        RequestClipSet(clipSet);
    }
    streaming.requestClipSet = requestClipSet;
    /**
     * No comment provided
     *
     * Hash: 0x0A3720F162A033C9 | Since: 1207
     */
    function requestCollisionAtCoord(pos) {
        RequestCollisionAtCoord(pos.x, pos.y, pos.z);
    }
    streaming.requestCollisionAtCoord = requestCollisionAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xF1767BE37F661551 | Since: 1207
     */
    function requestCollisionForModel(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        RequestCollisionForModel(model);
    }
    streaming.requestCollisionForModel = requestCollisionForModel;
    /**
     * Old name: _REQUEST_IMAP_2
     *
     * Hash: 0x9E211A378F95C97C | Since: 1207
     */
    function requestIplByHash(iplHash) {
        if (typeof iplHash === 'string')
            iplHash = misc.getHashKey(iplHash);
        RequestIplByHash(iplHash);
    }
    streaming.requestIplByHash = requestIplByHash;
    /**
     * Old name: _REQUEST_IMAP
     *
     * Hash: 0x59767C5A7A9AE6DA | Since: 1207
     */
    function requestIplHash(iplHash) {
        if (typeof iplHash === 'string')
            iplHash = misc.getHashKey(iplHash);
        RequestIplHash(iplHash);
    }
    streaming.requestIplHash = requestIplHash;
    /**
     * Request a model to be loaded into memory.
     *
     * Hash: 0xFA28FE3A6246FC30 | Since: 1207
     */
    function requestModel(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        RequestModel(model, false);
    }
    streaming.requestModel = requestModel;
    /**
     * No comment provided
     *
     * Hash: 0x2B6529C54D29037A | Since: 1207
     */
    function requestMoveNetworkDef() {
        return RequestMoveNetworkDef();
    }
    streaming.requestMoveNetworkDef = requestMoveNetworkDef;
    /**
     * No comment provided
     *
     * Hash: 0xF2B2353BBC0D4E8F | Since: 1207
     */
    function requestNamedPtfxAsset(fxNameHash) {
        if (typeof fxNameHash === 'string')
            fxNameHash = misc.getHashKey(fxNameHash);
        RequestNamedPtfxAsset(fxNameHash);
    }
    streaming.requestNamedPtfxAsset = requestNamedPtfxAsset;
    /**
     * No comment provided
     *
     * Hash: 0x001FF43843028E0C | Since: 1207
     */
    function requestPtfxAsset() {
        RequestPtfxAsset();
    }
    streaming.requestPtfxAsset = requestPtfxAsset;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x19ABCC581D28E6F9 | Since: 1207
     */
    function setAllMapdataCulled() {
        SetAllMapdataCulled(undefined);
    }
    streaming.setAllMapdataCulled = setAllMapdataCulled;
    /**
     * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
     *
     * Hash: 0x955AEDD58F4BD309 | Since: 1207
     */
    function setFocusEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetFocusEntity(_entity);
    }
    streaming.setFocusEntity = setFocusEntity;
    /**
     * No comment provided
     *
     * Hash: 0x25F6EF88664540E2 | Since: 1207
     */
    function setFocusPosAndVel(pos, offsetX, offsetY, offsetZ) {
        SetFocusPosAndVel(pos.x, pos.y, pos.z, offsetX, offsetY, offsetZ);
    }
    streaming.setFocusPosAndVel = setFocusPosAndVel;
    /**
     * No comment provided
     *
     * Hash: 0xB3BC8250F4FE8B63 | Since: 1207
     */
    function setGamePausesFor(toggle) {
        SetGamePausesForStreaming(toggle);
    }
    streaming.setGamePausesFor = setGamePausesFor;
    /**
     * No comment provided
     *
     * Hash: 0xB88B905AFA35CB4D | Since: 1207
     */
    function setHdArea(pos, radius) {
        SetHdArea(pos.x, pos.y, pos.z, radius);
    }
    streaming.setHdArea = setHdArea;
    /**
     * No comment provided
     *
     * Hash: 0x3CACC83F6FED837C | Since: 1207
     */
    function setMapdatacullboxEnabled(toggle) {
        return SetMapdatacullboxEnabled(toggle);
    }
    streaming.setMapdatacullboxEnabled = setMapdatacullboxEnabled;
    /**
     * Marks the model as no longer needed.
     *
     * Hash: 0x4AD96EF928BD4F9A | Since: 1207
     */
    function setModelAsNoLongerNeeded(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        SetModelAsNoLongerNeeded(model);
    }
    streaming.setModelAsNoLongerNeeded = setModelAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x2F9AC754FE179D58 | Since: 1207
     */
    function setPopulationBudgetMultiplier(fBudgetMultiplier) {
        SetPopulationBudgetMultiplier(fBudgetMultiplier);
    }
    streaming.setPopulationBudgetMultiplier = setPopulationBudgetMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xA03A6812529AD9C8 | Since: 1207
     */
    function setSceneTracksCamPosThisFrame() {
        SetSceneStreamingTracksCamPosThisFrame();
    }
    streaming.setSceneTracksCamPosThisFrame = setSceneTracksCamPosThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x7C907E8A725E5FD2 | Since: 1207
     */
    function setSrlLongJumpMode() {
        SetSrlLongJumpMode(false);
    }
    streaming.setSrlLongJumpMode = setSrlLongJumpMode;
    /**
     * No comment provided
     *
     * Hash: 0xD346248C1DCE0D76 | Since: 1207
     */
    function setSrlReadaheadTimes() {
        SetSrlReadaheadTimes(0, 0, 0, 0);
    }
    streaming.setSrlReadaheadTimes = setSrlReadaheadTimes;
    /**
     * No comment provided
     *
     * Hash: 0x18231AEF458BCFF2 | Since: 1207
     */
    function setSrlTime() {
        SetSrlTime(0);
    }
    streaming.setSrlTime = setSrlTime;
    /**
     * _SET_E* or _SET_F*
     *
     * Hash: 0x032A14D082A9B269 | Since: 1207
     */
    function _0x032A14D082A9B269(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        Citizen.invokeNative('0x032A14D082A9B269', p0);
    }
    streaming._0x032A14D082A9B269 = _0x032A14D082A9B269;
    /**
     * No comment provided
     *
     * Hash: 0x03DDBF2D73799F9E | Since: 1207
     */
    function _0x03DDBF2D73799F9E() {
        Citizen.invokeNative('0x03DDBF2D73799F9E', undefined);
    }
    streaming._0x03DDBF2D73799F9E = _0x03DDBF2D73799F9E;
    /**
     * No comment provided
     *
     * Hash: 0x05DD384F39DE1C8C | Since: 1207
     */
    function _0x05DD384F39DE1C8C() {
        return Citizen.invokeNative('0x05DD384F39DE1C8C', undefined, undefined);
    }
    streaming._0x05DD384F39DE1C8C = _0x05DD384F39DE1C8C;
    /**
     * No comment provided
     *
     * Hash: 0x071769BCB24379E5 | Since: 1207
     */
    function _0x071769BCB24379E5() {
        return Citizen.invokeNative('0x071769BCB24379E5');
    }
    streaming._0x071769BCB24379E5 = _0x071769BCB24379E5;
    /**
     * No comment provided
     *
     * Hash: 0x07559B29950301FF | Since: 1207
     */
    function _0x07559B29950301FF() {
        Citizen.invokeNative('0x07559B29950301FF', undefined, undefined);
    }
    streaming._0x07559B29950301FF = _0x07559B29950301FF;
    /**
     * No comment provided
     *
     * Hash: 0x09FBF15D73EFC900 | Since: 1207
     */
    function _0x09FBF15D73EFC900() {
        Citizen.invokeNative('0x09FBF15D73EFC900');
    }
    streaming._0x09FBF15D73EFC900 = _0x09FBF15D73EFC900;
    /**
     * No comment provided
     *
     * Hash: 0x198B85CC3C7A4593 | Since: 1207
     */
    function _0x198B85CC3C7A4593() {
        return Citizen.invokeNative('0x198B85CC3C7A4593', undefined, undefined);
    }
    streaming._0x198B85CC3C7A4593 = _0x198B85CC3C7A4593;
    /**
     * No comment provided
     *
     * Hash: 0x27AF48C62B281341 | Since: 1207
     */
    function _0x27AF48C62B281341() {
        return Citizen.invokeNative('0x27AF48C62B281341');
    }
    streaming._0x27AF48C62B281341 = _0x27AF48C62B281341;
    /**
     * No comment provided
     *
     * Hash: 0x2A6D1DAAB9EBB262 | Since: 1207
     */
    function _0x2A6D1DAAB9EBB262() {
        return Citizen.invokeNative('0x2A6D1DAAB9EBB262', undefined);
    }
    streaming._0x2A6D1DAAB9EBB262 = _0x2A6D1DAAB9EBB262;
    /**
     * No comment provided
     *
     * Hash: 0x2E24C27B112B5B12 | Since: 1311
     */
    function _0x2E24C27B112B5B12() {
        Citizen.invokeNative('0x2E24C27B112B5B12', undefined);
    }
    streaming._0x2E24C27B112B5B12 = _0x2E24C27B112B5B12;
    /**
     * No comment provided
     *
     * Hash: 0x2F4D53023F826FF0 | Since: 1207
     */
    function _0x2F4D53023F826FF0() {
        return Citizen.invokeNative('0x2F4D53023F826FF0');
    }
    streaming._0x2F4D53023F826FF0 = _0x2F4D53023F826FF0;
    /**
     * No comment provided
     *
     * Hash: 0x5288B7F0690F7C1F | Since: 1207
     */
    function _0x5288B7F0690F7C1F() {
        return Citizen.invokeNative('0x5288B7F0690F7C1F', undefined);
    }
    streaming._0x5288B7F0690F7C1F = _0x5288B7F0690F7C1F;
    /**
     * No comment provided
     *
     * Hash: 0x53764309C4618087 | Since: 1207
     */
    function _0x53764309C4618087() {
        return Citizen.invokeNative('0x53764309C4618087', undefined);
    }
    streaming._0x53764309C4618087 = _0x53764309C4618087;
    /**
     * No comment provided
     *
     * Hash: 0x5D5E2102B174B8D2 | Since: 1207
     */
    function _0x5D5E2102B174B8D2() {
        return Citizen.invokeNative('0x5D5E2102B174B8D2');
    }
    streaming._0x5D5E2102B174B8D2 = _0x5D5E2102B174B8D2;
    /**
     * No comment provided
     *
     * Hash: 0x62D5F0588915B277 | Since: 1207
     */
    function _0x62D5F0588915B277() {
        Citizen.invokeNative('0x62D5F0588915B277');
    }
    streaming._0x62D5F0588915B277 = _0x62D5F0588915B277;
    /**
     * No comment provided
     *
     * Hash: 0x66BC28E50E85270E | Since: 1207
     */
    function _0x66BC28E50E85270E() {
        return Citizen.invokeNative('0x66BC28E50E85270E', undefined);
    }
    streaming._0x66BC28E50E85270E = _0x66BC28E50E85270E;
    /**
     * No comment provided
     *
     * Hash: 0x6A6E79FBE8678C98 | Since: 1207
     */
    function _0x6A6E79FBE8678C98() {
        Citizen.invokeNative('0x6A6E79FBE8678C98');
    }
    streaming._0x6A6E79FBE8678C98 = _0x6A6E79FBE8678C98;
    /**
     * No comment provided
     *
     * Hash: 0x7B8C2B846C05E5AD | Since: 1207
     */
    function _0x7B8C2B846C05E5AD() {
        return Citizen.invokeNative('0x7B8C2B846C05E5AD');
    }
    streaming._0x7B8C2B846C05E5AD = _0x7B8C2B846C05E5AD;
    /**
     * No comment provided
     *
     * Hash: 0x80B3E0597366ADF1 | Since: 1207
     */
    function _0x80B3E0597366ADF1() {
        Citizen.invokeNative('0x80B3E0597366ADF1');
    }
    streaming._0x80B3E0597366ADF1 = _0x80B3E0597366ADF1;
    /**
     * No comment provided
     *
     * Hash: 0x85B8F04555AB49B8 | Since: 1207
     */
    function _0x85B8F04555AB49B8() {
        return Citizen.invokeNative('0x85B8F04555AB49B8', undefined);
    }
    streaming._0x85B8F04555AB49B8 = _0x85B8F04555AB49B8;
    /**
     * No comment provided
     *
     * Hash: 0x8D56BDA343D9519F | Since: 1207
     */
    function _0x8D56BDA343D9519F() {
        return Citizen.invokeNative('0x8D56BDA343D9519F', undefined);
    }
    streaming._0x8D56BDA343D9519F = _0x8D56BDA343D9519F;
    /**
     * No comment provided
     *
     * Hash: 0x99F92061EFE908BA | Since: 1207
     */
    function _0x99F92061EFE908BA() {
        return Citizen.invokeNative('0x99F92061EFE908BA');
    }
    streaming._0x99F92061EFE908BA = _0x99F92061EFE908BA;
    /**
     * No comment provided
     *
     * Hash: 0x9F348DE670423460 | Since: 1207
     */
    function _0x9F348DE670423460() {
        Citizen.invokeNative('0x9F348DE670423460', undefined);
    }
    streaming._0x9F348DE670423460 = _0x9F348DE670423460;
    /**
     * No comment provided
     *
     * Hash: 0xA0AE7653E8181725 | Since: 1207
     */
    function _0xA0AE7653E8181725() {
        return Citizen.invokeNative('0xA0AE7653E8181725', undefined);
    }
    streaming._0xA0AE7653E8181725 = _0xA0AE7653E8181725;
    /**
     * No comment provided
     *
     * Hash: 0xAE00387E53B1E9FC | Since: 1207
     */
    function _0xAE00387E53B1E9FC() {
        Citizen.invokeNative('0xAE00387E53B1E9FC');
    }
    streaming._0xAE00387E53B1E9FC = _0xAE00387E53B1E9FC;
    /**
     * No comment provided
     *
     * Hash: 0xAFA87A7D41EE346A | Since: 1207
     */
    function _0xAFA87A7D41EE346A() {
        Citizen.invokeNative('0xAFA87A7D41EE346A', undefined);
    }
    streaming._0xAFA87A7D41EE346A = _0xAFA87A7D41EE346A;
    /**
     * No comment provided
     *
     * Hash: 0xB223249B7798EEED | Since: 1207
     */
    function _0xB223249B7798EEED() {
        return Citizen.invokeNative('0xB223249B7798EEED', undefined, undefined, undefined, undefined);
    }
    streaming._0xB223249B7798EEED = _0xB223249B7798EEED;
    /**
     * Sorts some unknown data.
     *
     * Likely SORT_*
     *
     * Hash: 0xB9B9E47EDB9D63DB | Since: 1207
     */
    function _0xB9B9E47EDB9D63DB() {
        Citizen.invokeNative('0xB9B9E47EDB9D63DB');
    }
    streaming._0xB9B9E47EDB9D63DB = _0xB9B9E47EDB9D63DB;
    /**
     * No comment provided
     *
     * Hash: 0xBE8DAA9D8D01DA6A | Since: 1207
     */
    function _0xBE8DAA9D8D01DA6A() {
        Citizen.invokeNative('0xBE8DAA9D8D01DA6A', undefined, undefined, undefined);
    }
    streaming._0xBE8DAA9D8D01DA6A = _0xBE8DAA9D8D01DA6A;
    /**
     * No comment provided
     *
     * Hash: 0xCC61D8D6C19D9F14 | Since: 1207
     */
    function _0xCC61D8D6C19D9F14() {
        Citizen.invokeNative('0xCC61D8D6C19D9F14', undefined);
    }
    streaming._0xCC61D8D6C19D9F14 = _0xCC61D8D6C19D9F14;
    /**
     * No comment provided
     *
     * Hash: 0xD6E39DC5D46DF4AB | Since: 1207
     */
    function _0xD6E39DC5D46DF4AB() {
        return Citizen.invokeNative('0xD6E39DC5D46DF4AB', undefined);
    }
    streaming._0xD6E39DC5D46DF4AB = _0xD6E39DC5D46DF4AB;
    /**
     * No comment provided
     *
     * Hash: 0xD840C130D7AACFA5 | Since: 1207
     */
    function _0xD840C130D7AACFA5() {
        Citizen.invokeNative('0xD840C130D7AACFA5', undefined, undefined, undefined);
    }
    streaming._0xD840C130D7AACFA5 = _0xD840C130D7AACFA5;
    /**
     * No comment provided
     *
     * Hash: 0xD9F2FF4AF394D926 | Since: 1207
     */
    function _0xD9F2FF4AF394D926() {
        Citizen.invokeNative('0xD9F2FF4AF394D926');
    }
    streaming._0xD9F2FF4AF394D926 = _0xD9F2FF4AF394D926;
    /**
     * No comment provided
     *
     * Hash: 0xDA7FDEFF4DE86839 | Since: 1207
     */
    function _0xDA7FDEFF4DE86839() {
        return Citizen.invokeNative('0xDA7FDEFF4DE86839');
    }
    streaming._0xDA7FDEFF4DE86839 = _0xDA7FDEFF4DE86839;
    /**
     * No comment provided
     *
     * Hash: 0xDABFE48BA0D457AA | Since: 1207
     */
    function _0xDABFE48BA0D457AA() {
        return Citizen.invokeNative('0xDABFE48BA0D457AA');
    }
    streaming._0xDABFE48BA0D457AA = _0xDABFE48BA0D457AA;
    /**
     * No comment provided
     *
     * Hash: 0xDEEE1F265B7ECEF5 | Since: 1311
     */
    function _0xDEEE1F265B7ECEF5() {
        Citizen.invokeNative('0xDEEE1F265B7ECEF5');
    }
    streaming._0xDEEE1F265B7ECEF5 = _0xDEEE1F265B7ECEF5;
    /**
     * No comment provided
     *
     * Hash: 0xE5B76E5B56CD77DD | Since: 1207
     */
    function _0xE5B76E5B56CD77DD() {
        return Citizen.invokeNative('0xE5B76E5B56CD77DD');
    }
    streaming._0xE5B76E5B56CD77DD = _0xE5B76E5B56CD77DD;
    /**
     * No comment provided
     *
     * Hash: 0xEF1A8A484118735E | Since: 1207
     */
    function _0xEF1A8A484118735E() {
        Citizen.invokeNative('0xEF1A8A484118735E');
    }
    streaming._0xEF1A8A484118735E = _0xEF1A8A484118735E;
    /**
     * No comment provided
     *
     * Hash: 0xF01D21DF39554115 | Since: 1207
     */
    function _0xF01D21DF39554115() {
        Citizen.invokeNative('0xF01D21DF39554115', undefined);
    }
    streaming._0xF01D21DF39554115 = _0xF01D21DF39554115;
    /**
     * No comment provided
     *
     * Hash: 0xF11D7CB962FCD747 | Since: 1207
     */
    function _0xF11D7CB962FCD747() {
        Citizen.invokeNative('0xF11D7CB962FCD747', undefined);
    }
    streaming._0xF11D7CB962FCD747 = _0xF11D7CB962FCD747;
    /**
     * Outputs IPL position and radius (previously wrongly named heading)
     * https://github.com/femga/rdr3_discoveries/blob/master/imaps/imaps_with_coords_and_heading.lua
     *
     * Hash: 0x9C77964B0E07B633 | Since: 1207
     */
    function getIplBoundingSphere(iplHash) {
        if (typeof iplHash === 'string')
            iplHash = misc.getHashKey(iplHash);
        return GetIplBoundingSphere(iplHash);
    }
    streaming.getIplBoundingSphere = getIplBoundingSphere;
    /**
     * No comment provided
     *
     * Hash: 0xDA8B2EAF29E872E2 | Since: 1207
     */
    function hasCollisionLoadedAtCoord(pos) {
        return HasCollisionLoadedAtCoord(pos.x, pos.y, pos.z);
    }
    streaming.hasCollisionLoadedAtCoord = hasCollisionLoadedAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x9427C94D2E4094A4 | Since: 1207
     */
    function hasScenarioTypeLoaded(scenarioType) {
        if (typeof scenarioType === 'string')
            scenarioType = misc.getHashKey(scenarioType);
        return HasScenarioTypeLoaded(scenarioType, false);
    }
    streaming.hasScenarioTypeLoaded = hasScenarioTypeLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x274EE1B90CFA669E | Since: 1207
     */
    function isModelAnObject(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelAnObject(model);
    }
    streaming.isModelAnObject = isModelAnObject;
    /**
     * Returns true if IPL is streamed in (?)
     *
     * Hash: 0x73B40D97D7BAAD77 | Since: 1207
     */
    function isPositionInsideIplExtents(iplHash, pos) {
        if (typeof iplHash === 'string')
            iplHash = misc.getHashKey(iplHash);
        return IsPositionInsideIplStreamingExtents(iplHash, pos.x, pos.y, pos.z);
    }
    streaming.isPositionInsideIplExtents = isPositionInsideIplExtents;
    /**
     * No comment provided
     *
     * Hash: 0x4EDDD9E9CA5AF985 | Since: 1207
     */
    function removeScenarioAsset(scenarioType) {
        if (typeof scenarioType === 'string')
            scenarioType = misc.getHashKey(scenarioType);
        return RemoveScenarioAsset(scenarioType);
    }
    streaming.removeScenarioAsset = removeScenarioAsset;
    /**
     * No comment provided
     *
     * Hash: 0xAC37644A538F7524 | Since: 1207
     */
    function requestClipSetByHash(clipSetHash) {
        if (typeof clipSetHash === 'string')
            clipSetHash = misc.getHashKey(clipSetHash);
        RequestClipSetByHash(clipSetHash);
    }
    streaming.requestClipSetByHash = requestClipSetByHash;
    /**
     * No comment provided
     *
     * Hash: 0xA8432A14D4DC2101 | Since: 1207
     */
    function requestMetadataAtCoord(pos) {
        RequestMetadataAtCoord(pos.x, pos.y, pos.z);
    }
    streaming.requestMetadataAtCoord = requestMetadataAtCoord;
    /**
     * p1 seems to be some kind of flag? p2 can be 0 or entity model accepts hash joaat("a_c_bear_01") or with GetEntityModel(entity) p3 can be 0 or pass the conditional anim or using _GET_ACTIVE_DYNAMIC_SCENARIO
     *
     * Hash: 0x19A6BE7D9C6884D3 | Since: 1207
     */
    function requestScenarioType(scenarioType, entityModel, conditionalAnim) {
        if (typeof scenarioType === 'string')
            scenarioType = misc.getHashKey(scenarioType);
        if (typeof entityModel === 'string')
            entityModel = misc.getHashKey(entityModel);
        if (typeof conditionalAnim === 'string')
            conditionalAnim = misc.getHashKey(conditionalAnim);
        return RequestScenarioType(scenarioType, 0, entityModel, conditionalAnim);
    }
    streaming.requestScenarioType = requestScenarioType;
    /**
     * No comment provided
     *
     * Hash: 0x74E2261D2A66849A | Since: 1207
     */
    function setGuarmaWorldhorizonActive(toggle) {
        SetGuarmaWorldhorizonActive(toggle);
    }
    streaming.setGuarmaWorldhorizonActive = setGuarmaWorldhorizonActive;
})(streaming || (streaming = {}));
export var task;
(function (task_1) {
    /**
     * No comment provided
     *
     * Hash: 0x45C597097DD7CB81 | Since: 1207
     */
    function addCoverBlockingArea(playerX, playerY, playerZ, radiusX, radiusY, radiusZ) {
        AddCoverBlockingArea(playerX, playerY, playerZ, radiusX, radiusY, radiusZ, false, false, false, false);
    }
    task_1.addCoverBlockingArea = addCoverBlockingArea;
    /**
     * No comment provided
     *
     * Hash: 0xD5C12A75C7B9497F | Since: 1207
     */
    function addCoverPoint() {
        return AddCoverPoint(0, 0, 0, 0, undefined, undefined, undefined, false);
    }
    task_1.addCoverPoint = addCoverPoint;
    /**
     * Params: p2 is always -1.f in R* Scripts
     *
     * Hash: 0x3923EC958249657D | Since: 1207
     */
    function addFleeTargetPed(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        AddFleeTargetPed(_ped, _targetPed, 0);
    }
    task_1.addFleeTargetPed = addFleeTargetPed;
    /**
     * No comment provided
     *
     * Hash: 0x23083260DEC3A551 | Since: 1207
     */
    function addPatrolRouteLink(node1, node2) {
        AddPatrolRouteLink(node1, node2);
    }
    task_1.addPatrolRouteLink = addPatrolRouteLink;
    /**
     * No comment provided
     *
     * Hash: 0x8EDF950167586B7C | Since: 1207
     */
    function addPatrolRouteNode(nodeId, pos, lookPosX, lookPosY, lookPosZ, duration) {
        return AddPatrolRouteNode(nodeId, pos.x, pos.y, pos.z, lookPosX, lookPosY, lookPosZ, duration, false);
    }
    task_1.addPatrolRouteNode = addPatrolRouteNode;
    /**
     * Returns true when requested asset is loaded
     *
     * Hash: 0x5E5D96BE25E9DF68 | Since: 1207
     */
    function areCompositeLootableEntityDefAssetsLoaded(asset) {
        if (typeof asset === 'string')
            asset = misc.getHashKey(asset);
        return AreCompositeLootableEntityDefAssetsLoaded(asset);
    }
    task_1.areCompositeLootableEntityDefAssetsLoaded = areCompositeLootableEntityDefAssetsLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x60F9A4393A21F741 | Since: 1207
     */
    function assistedMovementIsRouteLoaded() {
        return AssistedMovementIsRouteLoaded();
    }
    task_1.assistedMovementIsRouteLoaded = assistedMovementIsRouteLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x3548536485DD792B | Since: 1207
     */
    function assistedMovementRemoveRoute() {
        return AssistedMovementRemoveRoute();
    }
    task_1.assistedMovementRemoveRoute = assistedMovementRemoveRoute;
    /**
     * No comment provided
     *
     * Hash: 0xD5002D78B7162E1B | Since: 1207
     */
    function assistedMovementSetRouteProperties(props) {
        return AssistedMovementSetRouteProperties(props);
    }
    task_1.assistedMovementSetRouteProperties = assistedMovementSetRouteProperties;
    /**
     * No comment provided
     *
     * Hash: 0x2D19BC4DF626CBE7 | Since: 1207
     */
    function canStartItemInteraction(ped, itemHash, interactionAnimHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof itemHash === 'string')
            itemHash = misc.getHashKey(itemHash);
        if (typeof interactionAnimHash === 'string')
            interactionAnimHash = misc.getHashKey(interactionAnimHash);
        return CanStartItemInteraction(_ped, itemHash, interactionAnimHash, 0);
    }
    task_1.canStartItemInteraction = canStartItemInteraction;
    /**
     * No comment provided
     *
     * Hash: 0xC35B5CDB2824CF69 | Since: 1207
     */
    function clearDrivebyUnderneathDrivingTask(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearDrivebyTaskUnderneathDrivingTask(_ped);
    }
    task_1.clearDrivebyUnderneathDrivingTask = clearDrivebyUnderneathDrivingTask;
    /**
     * No comment provided
     *
     * Hash: 0x176CECF6F920D707 | Since: 1207
     */
    function clearPedSecondary(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedSecondaryTask(_ped);
    }
    task_1.clearPedSecondary = clearPedSecondary;
    /**
     * No comment provided
     *
     * Hash: 0xE1EF3C1216AFF2CD | Since: 1207
     */
    function clearPeds(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedTasks(_ped, false, false);
    }
    task_1.clearPeds = clearPeds;
    /**
     * Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
     *
     * resetCrouch TRUE = ped will stand up if crouching, FALSE = ped will remain crouching if crouched
     *
     * Hash: 0xAAA34F8A7CB32098 | Since: 1207
     */
    function clearPedsImmediately(ped, resetCrouch) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedTasksImmediately(_ped, false, resetCrouch);
    }
    task_1.clearPedsImmediately = clearPedsImmediately;
    /**
     * No comment provided
     *
     * Hash: 0x3841422E9C488D8C | Since: 1207
     */
    function clearSequence() {
        return ClearSequenceTask();
    }
    task_1.clearSequence = clearSequence;
    /**
     * No comment provided
     *
     * Hash: 0xB043ECA801B8CBC1 | Since: 1207
     */
    function closePatrolRoute() {
        ClosePatrolRoute();
    }
    task_1.closePatrolRoute = closePatrolRoute;
    /**
     * No comment provided
     *
     * Hash: 0x39E72BC99E6360CB | Since: 1207
     */
    function closeSequence(taskSequenceId) {
        CloseSequenceTask(taskSequenceId);
    }
    task_1.closeSequence = closeSequence;
    /**
     * No comment provided
     *
     * Hash: 0xAF8A443CCC8018DC | Since: 1207
     */
    function createPatrolRoute() {
        CreatePatrolRoute();
    }
    task_1.createPatrolRoute = createPatrolRoute;
    /**
     * Returns scenario
     *
     * Hash: 0x94B745CE41DB58A1 | Since: 1207
     */
    function createScenarioPointHash(scenarioHash, pos, heading) {
        if (typeof scenarioHash === 'string')
            scenarioHash = misc.getHashKey(scenarioHash);
        return CreateScenarioPointHash(scenarioHash, pos.x, pos.y, pos.z, heading, undefined, undefined, false);
    }
    task_1.createScenarioPointHash = createScenarioPointHash;
    /**
     * Returns scenario
     *
     * Hash: 0x794AB1379A74064D | Since: 1207
     */
    function createScenarioPointHashAttachedToEntity(entity, scenarioHash, pos, heading) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof scenarioHash === 'string')
            scenarioHash = misc.getHashKey(scenarioHash);
        return CreateScenarioPointHashAttachedToEntity(_entity, scenarioHash, pos.x, pos.y, pos.z, heading, undefined, undefined, false);
    }
    task_1.createScenarioPointHashAttachedToEntity = createScenarioPointHashAttachedToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x7767DD9D65E91319 | Since: 1207
     */
    function deletePatrolRoute(patrolRoute) {
        DeletePatrolRoute(patrolRoute);
    }
    task_1.deletePatrolRoute = deletePatrolRoute;
    /**
     * No comment provided
     *
     * Hash: 0x5A59271FFADD33C1 | Since: 1207
     */
    function doesScenarioExistInArea(pos, radius) {
        return DoesScenarioExistInArea(pos.x, pos.y, pos.z, radius, false, undefined, false);
    }
    task_1.doesScenarioExistInArea = doesScenarioExistInArea;
    /**
     * No comment provided
     *
     * Hash: 0xF9034C136C9E00D3 | Since: 1207
     */
    function doesScenarioGroupExist() {
        return DoesScenarioGroupExist();
    }
    task_1.doesScenarioGroupExist = doesScenarioGroupExist;
    /**
     * No comment provided
     *
     * Hash: 0x6EEAD6AF637DA752 | Since: 1207
     */
    function doesScenarioOfTypeExistInAreaHash(pos, typeHash, radius) {
        if (typeof typeHash === 'string')
            typeHash = misc.getHashKey(typeHash);
        return DoesScenarioOfTypeExistInAreaHash(pos.x, pos.y, pos.z, typeHash, radius, false);
    }
    task_1.doesScenarioOfTypeExistInAreaHash = doesScenarioOfTypeExistInAreaHash;
    /**
     * No comment provided
     *
     * Hash: 0x841475AC96E794D1 | Since: 1207
     */
    function doesScenarioPointExist(scenario) {
        return DoesScenarioPointExist(scenario);
    }
    task_1.doesScenarioPointExist = doesScenarioPointExist;
    /**
     * Checks if there is a cover point at position
     *
     * Hash: 0xA98B8E3C088E5A31 | Since: 1207
     */
    function doesScriptedCoverPointExistAtCoords() {
        return DoesScriptedCoverPointExistAtCoords(undefined, undefined, undefined, undefined);
    }
    task_1.doesScriptedCoverPointExistAtCoords = doesScriptedCoverPointExistAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xEED08A3A98B847E2 | Since: 1207
     */
    function endDuel(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        EndDuel(_ped, false, 0);
    }
    task_1.endDuel = endDuel;
    /**
     * No comment provided
     *
     * Hash: 0xF533D68FF970D190 | Since: 1207
     */
    function findScenarioOfTypeHash(pos, scenarioType, distance) {
        if (typeof scenarioType === 'string')
            scenarioType = misc.getHashKey(scenarioType);
        return FindScenarioOfTypeHash(pos.x, pos.y, pos.z, scenarioType, distance, undefined, false);
    }
    task_1.findScenarioOfTypeHash = findScenarioOfTypeHash;
    /**
     * No comment provided
     *
     * Hash: 0x444C910A5058E568 | Since: 1207
     */
    function forceScenarioGroupPriority() {
        ForceScenarioGroupPriority(undefined, undefined);
    }
    task_1.forceScenarioGroupPriority = forceScenarioGroupPriority;
    /**
     * No comment provided
     *
     * Hash: 0x534AEBA6E5ED4CAB | Since: 1207
     */
    function getActiveVehicleMissionType(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetActiveVehicleMissionType(_vehicle);
    }
    task_1.getActiveVehicleMissionType = getActiveVehicleMissionType;
    /**
     * No comment provided
     *
     * Hash: 0x0CCFE72B43C9CF96 | Since: 1207
     */
    function getIsCarriableEntity(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetIsCarriableEntity(_entity);
    }
    task_1.getIsCarriableEntity = getIsCarriableEntity;
    /**
     * No comment provided
     *
     * Hash: 0x8785E6E40C7A8819 | Since: 1207
     */
    function getIsPedAimingInTheAir(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetIsPedAimingInTheAir(_ped);
    }
    task_1.getIsPedAimingInTheAir = getIsPedAimingInTheAir;
    /**
     * No comment provided
     *
     * Hash: 0xB0760331C7AA4155 | Since: 1207
     */
    function getIsActive(ped, taskIndex) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetIsTaskActive(_ped, taskIndex);
    }
    task_1.getIsActive = getIsActive;
    /**
     * No comment provided
     *
     * Hash: 0xCB4E8BE8A0063C5D | Since: 1207
     */
    function getIsWaypointRecordingLoaded() {
        return GetIsWaypointRecordingLoaded();
    }
    task_1.getIsWaypointRecordingLoaded = getIsWaypointRecordingLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x804425C4BBD00883 | Since: 1207
     */
    function getItemInteractionItemId(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetItemInteractionItemId(_ped);
    }
    task_1.getItemInteractionItemId = getItemInteractionItemId;
    /**
     * No comment provided
     *
     * Hash: 0xBC864A70AD55E0C1 | Since: 1207
     */
    function getItemInteractionPromptProgress(ped, inputContext) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof inputContext === 'string')
            inputContext = misc.getHashKey(inputContext);
        return GetItemInteractionPromptProgress(_ped, inputContext);
    }
    task_1.getItemInteractionPromptProgress = getItemInteractionPromptProgress;
    /**
     * No comment provided
     *
     * Hash: 0x6AA3DCA2C6F5EB6D | Since: 1207
     */
    function getItemInteractionState(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetItemInteractionState(_ped);
    }
    task_1.getItemInteractionState = getItemInteractionState;
    /**
     * No comment provided
     *
     * Hash: 0x8517D4A6CA8513ED | Since: 1207
     */
    function getPedDesiredMoveBlendRatio(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedDesiredMoveBlendRatio(_ped);
    }
    task_1.getPedDesiredMoveBlendRatio = getPedDesiredMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0xE6A877C64CAF1BC5 | Since: 1207
     */
    function getPedWaypointDistance(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedWaypointDistance(_ped);
    }
    task_1.getPedWaypointDistance = getPedWaypointDistance;
    /**
     * No comment provided
     *
     * Hash: 0xD39A2F3E7FCAFF08 | Since: 1207
     */
    function getPedWaypointOverrideSpeed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedWaypointOverrideSpeed(_ped);
    }
    task_1.getPedWaypointOverrideSpeed = getPedWaypointOverrideSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x2720AAA75001E094 | Since: 1207
     */
    function getPedWaypointProgress(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedWaypointProgress(_ped);
    }
    task_1.getPedWaypointProgress = getPedWaypointProgress;
    /**
     * Old name: _GET_SCENARIO_POINT_ENTITY
     *
     * Hash: 0x295514F198EFD0CA | Since: 1207
     */
    function getPropForScenarioPoint(scenarioPoint) {
        return GetPropForScenarioPoint(scenarioPoint);
    }
    task_1.getPropForScenarioPoint = getPropForScenarioPoint;
    /**
     * No comment provided
     *
     * Hash: 0xD04241BBF6D03A5E | Since: 1207
     */
    function getRansackScenarioPointPedIsUsing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetRansackScenarioPointPedIsUsing(_ped);
    }
    task_1.getRansackScenarioPointPedIsUsing = getRansackScenarioPointPedIsUsing;
    /**
     * Note: scenariosInRadius is an array, and its size and values should be aligned to 8 bytes.
     *
     * Hash: 0x345EC3B7EBDE1CB5 | Since: 1207
     */
    function getScenarioPointsInArea(pos, radius, scenariosInRadius, size) {
        return GetScenarioPointsInArea(pos.x, pos.y, pos.z, radius, scenariosInRadius, size);
    }
    task_1.getScenarioPointsInArea = getScenarioPointsInArea;
    /**
     * No comment provided
     *
     * Hash: 0x594A1028FC2A3E85 | Since: 1207
     */
    function getScriptedCoverPointCoords(coverpoint) {
        return new Vector3(GetScriptedCoverPointCoords(coverpoint));
    }
    task_1.getScriptedCoverPointCoords = getScriptedCoverPointCoords;
    /**
     * Gets the status of a script-assigned task, and returns an int between 0-8
     * taskHash: https://alloc8or.re/rdr3/doc/enums/eScriptTaskHash.txt
     *
     * WAITING_TO_START_TASK = 0,
     * PERFORMING_TASK
     * DORMANT_TASK
     * VACANT_STAGE
     * GROUP_TASK_STAGE
     * ATTRACTOR_SCRIPT_TASK_STAGE
     * SECONDARY_TASK_STAGE
     * TASK_NOT_FOUND
     * FINISHED_TASK
     *
     * Hash: 0x77F1BEB8863288D5 | Since: 1207
     */
    function getScriptStatus(ped, taskHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof taskHash === 'string')
            taskHash = misc.getHashKey(taskHash);
        return GetScriptTaskStatus(_ped, taskHash, false);
    }
    task_1.getScriptStatus = getScriptStatus;
    /**
     * returned values:
     * 0 to 7 = task that's currently in progress, 0 meaning the first one.
     * -1 no task sequence in progress.
     *
     * Hash: 0x00A9010CFE1E3533 | Since: 1207
     */
    function getSequenceProgress(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetSequenceProgress(_ped);
    }
    task_1.getSequenceProgress = getSequenceProgress;
    /**
     * No comment provided
     *
     * Hash: 0xB4F47213DF45A64C | Since: 1207
     */
    function getMoveNetworkEvent(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTaskMoveNetworkEvent(_ped);
    }
    task_1.getMoveNetworkEvent = getMoveNetworkEvent;
    /**
     * No comment provided
     *
     * Hash: 0x717E4D1F2048376D | Since: 1207
     */
    function getMoveNetworkState(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTaskMoveNetworkState(_ped);
    }
    task_1.getMoveNetworkState = getMoveNetworkState;
    /**
     * No comment provided
     *
     * Hash: 0x3DC971EB22F73447 | Since: 1207
     */
    function getVehicleWaypointPlaybackOverrideSpeed() {
        return GetVehicleWaypointPlaybackOverrideSpeed(undefined);
    }
    task_1.getVehicleWaypointPlaybackOverrideSpeed = getVehicleWaypointPlaybackOverrideSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x9824CFF8FC66E159 | Since: 1207
     */
    function getVehicleWaypointProgress(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleWaypointProgress(_vehicle);
    }
    task_1.getVehicleWaypointProgress = getVehicleWaypointProgress;
    /**
     * No comment provided
     *
     * Hash: 0x416B62AC8B9E5BBD | Since: 1207
     */
    function getVehicleWaypointTargetPoint(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleWaypointTargetPoint(_vehicle);
    }
    task_1.getVehicleWaypointTargetPoint = getVehicleWaypointTargetPoint;
    /**
     * No comment provided
     *
     * Hash: 0xA5B769058763E497 | Since: 1207
     */
    function getWaypointDistanceAlongRoute() {
        return GetWaypointDistanceAlongRoute(0);
    }
    task_1.getWaypointDistanceAlongRoute = getWaypointDistanceAlongRoute;
    /**
     * No comment provided
     *
     * Hash: 0x8785E6E40C7A8818 | Since: 1207
     */
    function isDrivebyUnderneathDrivingTask(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsDrivebyTaskUnderneathDrivingTask(_ped);
    }
    task_1.isDrivebyUnderneathDrivingTask = isDrivebyUnderneathDrivingTask;
    /**
     * No comment provided
     *
     * Hash: 0xCF9B71C0AF824036 | Since: 1355
     */
    function isEmoteRunning(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsEmoteTaskRunning(_ped, undefined);
    }
    task_1.isEmoteRunning = isEmoteRunning;
    /**
     * No comment provided
     *
     * Hash: 0xA320EF046186FA3B | Since: 1207
     */
    function isMountedWeaponUnderneathDrivingTask(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsMountedWeaponTaskUnderneathDrivingTask(_ped);
    }
    task_1.isMountedWeaponUnderneathDrivingTask = isMountedWeaponUnderneathDrivingTask;
    /**
     * No comment provided
     *
     * Hash: 0xD4D8636C0199A939 | Since: 1207
     */
    function isMoveBlendRatioRunning(moveBlendRatio) {
        return IsMoveBlendRatioRunning(moveBlendRatio);
    }
    task_1.isMoveBlendRatioRunning = isMoveBlendRatioRunning;
    /**
     * No comment provided
     *
     * Hash: 0x24A2AD74FA9814E2 | Since: 1207
     */
    function isMoveBlendRatioSprinting(moveBlendRatio) {
        return IsMoveBlendRatioSprinting(moveBlendRatio);
    }
    task_1.isMoveBlendRatioSprinting = isMoveBlendRatioSprinting;
    /**
     * No comment provided
     *
     * Hash: 0x349CE7B56DAFD95C | Since: 1207
     */
    function isMoveBlendRatioStill(moveBlendRatio) {
        return IsMoveBlendRatioStill(moveBlendRatio);
    }
    task_1.isMoveBlendRatioStill = isMoveBlendRatioStill;
    /**
     * No comment provided
     *
     * Hash: 0xF133BBBE91E1691F | Since: 1207
     */
    function isMoveBlendRatioWalking(moveBlendRatio) {
        return IsMoveBlendRatioWalking(moveBlendRatio);
    }
    task_1.isMoveBlendRatioWalking = isMoveBlendRatioWalking;
    /**
     * No comment provided
     *
     * Hash: 0xAA135F9482C82CC3 | Since: 1207
     */
    function isPedActiveInScenario(ped, scenario) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedActiveInScenario(_ped, scenario);
    }
    task_1.isPedActiveInScenario = isPedActiveInScenario;
    /**
     * This function is hard-coded to always return false.
     *
     * Hash: 0x90A09F3A45FED688 | Since: 1207
     */
    function isPedBeingArrested(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedBeingArrested(_ped);
    }
    task_1.isPedBeingArrested = isPedBeingArrested;
    /**
     * No comment provided
     *
     * Hash: 0x74E559B3BC910685 | Since: 1207
     */
    function isPedCuffed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedCuffed(_ped);
    }
    task_1.isPedCuffed = isPedCuffed;
    /**
     * No comment provided
     *
     * Hash: 0x0C3CB2E600C8977D | Since: 1207
     */
    function isPedExitingScenario(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedExitingScenario(_ped, false);
    }
    task_1.isPedExitingScenario = isPedExitingScenario;
    /**
     * No comment provided
     *
     * Hash: 0x2A74E1D5F2F00EEC | Since: 1207
     */
    function isPedGettingUp(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedGettingUp(_ped);
    }
    task_1.isPedGettingUp = isPedGettingUp;
    /**
     * No comment provided
     *
     * Hash: 0xF330A5C062B29BED | Since: 1207
     */
    function isPedInHitReact(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInHitReact(_ped);
    }
    task_1.isPedInHitReact = isPedInHitReact;
    /**
     * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
     *
     * Hash: 0xDEB6D52126E7D640 | Since: 1207
     */
    function isPedInWrithe(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedInWrithe(_ped);
    }
    task_1.isPedInWrithe = isPedInWrithe;
    /**
     * No comment provided
     *
     * Hash: 0xC5286FFC176F28A2 | Since: 1207
     */
    function isPedRunning(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedRunning(_ped);
    }
    task_1.isPedRunning = isPedRunning;
    /**
     * No comment provided
     *
     * Hash: 0x038B1F1674F0E242 | Since: 1207
     */
    function isPedRunningInspection(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedRunningInspectionTask(_ped);
    }
    task_1.isPedRunningInspection = isPedRunningInspection;
    /**
     * No comment provided
     *
     * Hash: 0xEC7E480FF8BD0BED | Since: 1207
     */
    function isPedRunningItemInteraction(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedRunningTaskItemInteraction(_ped);
    }
    task_1.isPedRunningItemInteraction = isPedRunningItemInteraction;
    /**
     * No comment provided
     *
     * Hash: 0x916B8E075ABC8B4E | Since: 1207
     */
    function isPedScenarioReactLooking(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedScenarioReactLooking(_ped, false);
    }
    task_1.isPedScenarioReactLooking = isPedScenarioReactLooking;
    /**
     * No comment provided
     *
     * Hash: 0x57E457CD2C0FC168 | Since: 1207
     */
    function isPedSprinting(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedSprinting(_ped);
    }
    task_1.isPedSprinting = isPedSprinting;
    /**
     * No comment provided
     *
     * Hash: 0xAC29253EEF8F0180 | Since: 1207
     */
    function isPedStill(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedStill(_ped);
    }
    task_1.isPedStill = isPedStill;
    /**
     * No comment provided
     *
     * Hash: 0xDE4C184B2B9B071A | Since: 1207
     */
    function isPedWalking(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedWalking(_ped);
    }
    task_1.isPedWalking = isPedWalking;
    /**
     * No comment provided
     *
     * Hash: 0x367A09DED4E05B99 | Since: 1207
     */
    function isScenarioGroupEnabled() {
        return IsScenarioGroupEnabled();
    }
    task_1.isScenarioGroupEnabled = isScenarioGroupEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x788756D73AC2E07C | Since: 1207
     */
    function isScenarioOccupied() {
        return IsScenarioOccupied(0, 0, 0, 0, false);
    }
    task_1.isScenarioOccupied = isScenarioOccupied;
    /**
     * No comment provided
     *
     * Hash: 0x3A815DB3EA088722 | Since: 1207
     */
    function isScenarioTypeEnabled() {
        return IsScenarioTypeEnabled();
    }
    task_1.isScenarioTypeEnabled = isScenarioTypeEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x921CE12C489C4C41 | Since: 1207
     */
    function isMoveNetworkActive(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsTaskMoveNetworkActive(_ped);
    }
    task_1.isMoveNetworkActive = isMoveNetworkActive;
    /**
     * No comment provided
     *
     * Hash: 0x30ED88D5E0C56A37 | Since: 1207
     */
    function isMoveNetworkReadyForTransition(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsTaskMoveNetworkReadyForTransition(_ped);
    }
    task_1.isMoveNetworkReadyForTransition = isMoveNetworkReadyForTransition;
    /**
     * No comment provided
     *
     * Hash: 0x559A6F8C5133B4EE | Since: 1207
     */
    function isTeamCarriableEntity() {
        return IsTeamCarriableEntity(undefined, undefined);
    }
    task_1.isTeamCarriableEntity = isTeamCarriableEntity;
    /**
     * No comment provided
     *
     * Hash: 0xE03B3F2D3DC59B64 | Since: 1207
     */
    function isWaypointPlaybackGoingOnForPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsWaypointPlaybackGoingOnForPed(_ped);
    }
    task_1.isWaypointPlaybackGoingOnForPed = isWaypointPlaybackGoingOnForPed;
    /**
     * No comment provided
     *
     * Hash: 0xF5134943EA29868C | Since: 1207
     */
    function isWaypointPlaybackGoingOnForVehicle() {
        return IsWaypointPlaybackGoingOnForVehicle(undefined, undefined);
    }
    task_1.isWaypointPlaybackGoingOnForVehicle = isWaypointPlaybackGoingOnForVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x67BFCED22909834D | Since: 1207
     */
    function makeObjectNotCarriable(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        MakeObjectNotCarriable(__object);
    }
    task_1.makeObjectNotCarriable = makeObjectNotCarriable;
    /**
     * Note: patrolRoute must be prefixed with 'miss_' for it to be valid
     *
     * Hash: 0xA36BFB5EE89F3D82 | Since: 1207
     */
    function openPatrolRoute() {
        return OpenPatrolRoute();
    }
    task_1.openPatrolRoute = openPatrolRoute;
    /**
     * No comment provided
     *
     * Hash: 0xE8854A4326B9E12B | Since: 1207
     */
    function openSequence() {
        return OpenSequenceTask();
    }
    task_1.openSequence = openSequence;
    /**
     * No comment provided
     *
     * Hash: 0x295E3CCEC879CCD7 | Since: 1207
     */
    function pedHasUseScenario(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return PedHasUseScenarioTask(_ped);
    }
    task_1.pedHasUseScenario = pedHasUseScenario;
    /**
     * No comment provided
     *
     * Hash: 0x748040460F8DF5DC | Since: 1207
     */
    function playAnimOnRunningScenario(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return PlayAnimOnRunningScenario(_ped);
    }
    task_1.playAnimOnRunningScenario = playAnimOnRunningScenario;
    /**
     * No comment provided
     *
     * Hash: 0x77A1EEC547E7FCF1 | Since: 1207
     */
    function playEntityScriptedAnim(entity, args) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        PlayEntityScriptedAnim(_entity, args);
    }
    task_1.playEntityScriptedAnim = playEntityScriptedAnim;
    /**
     * lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
     *
     * exitAnimation: LOOK_RETURN_GENERIC = 1,
     * LOOK_RETURN_DISMISSIVE = 2,
     * LOOK_RETURN_RELIEVED = 3
     *
     * Hash: 0xE7FA07624574B79A | Since: 1207
     */
    function reactLookAt(ped, targetPed, lookIntensity, exitAnimation, duration, targetPed2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        const _targetPed2 = targetPed2 instanceof Ped ? targetPed2.handle() : targetPed2;
        ReactLookAt(_ped, _targetPed, lookIntensity, exitAnimation, duration, 0, _targetPed2, undefined, undefined);
    }
    task_1.reactLookAt = reactLookAt;
    /**
     * No comment provided
     *
     * Hash: 0x541E5B41DCA45828 | Since: 1207
     */
    function reactLookAtEnd(ped, exitAnimation) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ReactLookAtEnd(_ped, exitAnimation, false);
    }
    task_1.reactLookAtEnd = reactLookAtEnd;
    /**
     * No comment provided
     *
     * Hash: 0xDB6708C0B46F56D8 | Since: 1207
     */
    function removeAllCoverBlockingAreas() {
        RemoveAllCoverBlockingAreas();
    }
    task_1.removeAllCoverBlockingAreas = removeAllCoverBlockingAreas;
    /**
     * No comment provided
     *
     * Hash: 0xAE287C923D891715 | Since: 1207
     */
    function removeCoverPoint(coverpoint) {
        RemoveCoverPoint(coverpoint);
    }
    task_1.removeCoverPoint = removeCoverPoint;
    /**
     * No comment provided
     *
     * Hash: 0xFF1B8B4AA1C25DC8 | Since: 1207
     */
    function removeWaypointRecording(waypointRecording) {
        RemoveWaypointRecording(waypointRecording);
    }
    task_1.removeWaypointRecording = removeWaypointRecording;
    /**
     * No comment provided
     *
     * Hash: 0xD01015C7316AE176 | Since: 1207
     */
    function requestMoveNetworkStateTransition(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return RequestTaskMoveNetworkStateTransition(_ped);
    }
    task_1.requestMoveNetworkStateTransition = requestMoveNetworkStateTransition;
    /**
     * No comment provided
     *
     * Hash: 0x9EEFB62EB27B5792 | Since: 1207
     */
    function requestWaypointRecording() {
        return RequestWaypointRecording();
    }
    task_1.requestWaypointRecording = requestWaypointRecording;
    /**
     * No comment provided
     *
     * Hash: 0xDD902D0349AFAD3A | Since: 1207
     */
    function resetScenarioGroupsEnabled() {
        ResetScenarioGroupsEnabled();
    }
    task_1.resetScenarioGroupsEnabled = resetScenarioGroupsEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x0D40EE2A7F2B2D6D | Since: 1207
     */
    function resetScenarioTypesEnabled() {
        ResetScenarioTypesEnabled();
    }
    task_1.resetScenarioTypesEnabled = resetScenarioTypesEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x87B66D77D545DB66 | Since: 1207
     */
    function setAnimFilter(entity, priority, secondary) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return SetAnimFilter(_entity, priority, secondary);
    }
    task_1.setAnimFilter = setAnimFilter;
    /**
     * No comment provided
     *
     * Hash: 0x032D49C5E359C847 | Since: 1207
     */
    function setAnimRate() {
        SetAnimRate(undefined, 0, undefined, false);
    }
    task_1.setAnimRate = setAnimRate;
    /**
     * No comment provided
     *
     * Hash: 0xE5B302114D8162EE | Since: 1207
     */
    function setDrivebyTarget(shootingPed, targetPed, targetVehicle, pos) {
        const _shootingPed = shootingPed instanceof Ped ? shootingPed.handle() : shootingPed;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        const _targetVehicle = targetVehicle instanceof Vehicle ? targetVehicle.localId() : targetVehicle;
        SetDrivebyTaskTarget(_shootingPed, _targetPed, _targetVehicle, pos.x, pos.y, pos.z);
    }
    task_1.setDrivebyTarget = setDrivebyTarget;
    /**
     * No comment provided
     *
     * Hash: 0x5C9B84BD7D31D908 | Since: 1207
     */
    function setDriveCruiseSpeed(driver, cruiseSpeed) {
        const _driver = driver instanceof Ped ? driver.handle() : driver;
        SetDriveTaskCruiseSpeed(_driver, cruiseSpeed);
    }
    task_1.setDriveCruiseSpeed = setDriveCruiseSpeed;
    /**
     * Not implemented.
     *
     * Hash: 0x404A5AA9B9F0B746 | Since: 1207
     */
    function setDriveMaxCruiseSpeed(ped, maxCruiseSpeed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetDriveTaskMaxCruiseSpeed(_ped, maxCruiseSpeed);
    }
    task_1.setDriveMaxCruiseSpeed = setDriveMaxCruiseSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x295F03DC97BEEBC1 | Since: 1207
     */
    function setEnableSpeedRestrainForWaypointRecordingLeader() {
        SetEnableSpeedRestrainForWaypointRecordingLeader(undefined, undefined);
    }
    task_1.setEnableSpeedRestrainForWaypointRecordingLeader = setEnableSpeedRestrainForWaypointRecordingLeader;
    /**
     * clipset: CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@GROUND, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@SHOULDER, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@MOUNT
     * clipset can also be 0
     *
     * Hash: 0x1BF9D36A5EAFFBAE | Since: 1207
     */
    function setEnhancedBreakFree(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetEnhancedBreakFree(_ped, false);
    }
    task_1.setEnhancedBreakFree = setEnhancedBreakFree;
    /**
     * Makes the ped ragdoll like when falling from a great height
     *
     * Hash: 0x8C825BDC7741D37C | Since: 1207
     */
    function setHighFall(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetHighFallTask(_ped, 0, 0, 0);
    }
    task_1.setHighFall = setHighFall;
    /**
     * No comment provided
     *
     * Hash: 0x1E982AC8716912C5 | Since: 1207
     */
    function setPedDesiredMoveBlendRatio(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDesiredMoveBlendRatio(_ped, 0);
    }
    task_1.setPedDesiredMoveBlendRatio = setPedDesiredMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0x4455517B28441E60 | Since: 1207
     */
    function setPedPathAvoidFire(ped, avoidFire) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathAvoidFire(_ped, avoidFire);
    }
    task_1.setPedPathAvoidFire = setPedPathAvoidFire;
    /**
     * No comment provided
     *
     * Hash: 0xE361C5C71C431A4F | Since: 1207
     */
    function setPedPathCanDropFromHeight(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathCanDropFromHeight(_ped, toggle);
    }
    task_1.setPedPathCanDropFromHeight = setPedPathCanDropFromHeight;
    /**
     * No comment provided
     *
     * Hash: 0x8E06A6FE76C9EFF4 | Since: 1207
     */
    function setPedPathCanUseClimbovers(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathCanUseClimbovers(_ped, toggle);
    }
    task_1.setPedPathCanUseClimbovers = setPedPathCanUseClimbovers;
    /**
     * No comment provided
     *
     * Hash: 0x77A5B103C87F476E | Since: 1207
     */
    function setPedPathCanUseLadders(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathCanUseLadders(_ped, toggle);
    }
    task_1.setPedPathCanUseLadders = setPedPathCanUseLadders;
    /**
     * No comment provided
     *
     * Hash: 0x88E32DB8C1A4AA4B | Since: 1207
     */
    function setPedPathClimbCostModifier(ped, modifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathClimbCostModifier(_ped, modifier);
    }
    task_1.setPedPathClimbCostModifier = setPedPathClimbCostModifier;
    /**
     * No comment provided
     *
     * Hash: 0xE8C296B75EACC357 | Since: 1207
     */
    function setPedPathDeepSnowCostModifier(ped, modifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathDeepSnowCostModifier(_ped, modifier);
    }
    task_1.setPedPathDeepSnowCostModifier = setPedPathDeepSnowCostModifier;
    /**
     * No comment provided
     *
     * Hash: 0x3AD8EFF9703BE657 | Since: 1207
     */
    function setPedPathFoliageCostModifier(ped, modifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathFoliageCostModifier(_ped, modifier);
    }
    task_1.setPedPathFoliageCostModifier = setPedPathFoliageCostModifier;
    /**
     * No comment provided
     *
     * Hash: 0xF35425A4204367EC | Since: 1207
     */
    function setPedPathMayEnterWater(ped, mayEnterWater) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathMayEnterWater(_ped, mayEnterWater);
    }
    task_1.setPedPathMayEnterWater = setPedPathMayEnterWater;
    /**
     * No comment provided
     *
     * Hash: 0x38FE1EC73743793C | Since: 1207
     */
    function setPedPathPreferToAvoidWater(ped, avoidWater) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathPreferToAvoidWater(_ped, avoidWater, 0);
    }
    task_1.setPedPathPreferToAvoidWater = setPedPathPreferToAvoidWater;
    /**
     * No comment provided
     *
     * Hash: 0xED98E10B0AFCE4B4 | Since: 1207
     */
    function setPedWaypointRouteOffset(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPedWaypointRouteOffset(_ped, 0, 0, 0);
    }
    task_1.setPedWaypointRouteOffset = setPedWaypointRouteOffset;
    /**
     * No comment provided
     *
     * Hash: 0x02C8E5B49848664E | Since: 1207
     */
    function setScenarioGroupEnabled(toggle) {
        return SetScenarioGroupEnabled(toggle);
    }
    task_1.setScenarioGroupEnabled = setScenarioGroupEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xEB47EC4E34FB7EE1 | Since: 1207
     */
    function setScenarioTypeEnabled(scenarioType, toggle) {
        SetScenarioTypeEnabled(scenarioType, toggle);
    }
    task_1.setScenarioTypeEnabled = setScenarioTypeEnabled;
    /**
     * repeatMode: 0 = REPEAT_NOT; 1 = REPEAT_FOREVER
     *
     * Hash: 0x58C70CF3A41E4AE7 | Since: 1207
     */
    function setSequenceToRepeat(taskSequenceId, repeatMode) {
        SetSequenceToRepeat(taskSequenceId, repeatMode);
    }
    task_1.setSequenceToRepeat = setSequenceToRepeat;
    /**
     * No comment provided
     *
     * Hash: 0xB0A6CFD2C69C1088 | Since: 1207
     */
    function setMoveNetworkSignalBool(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetTaskMoveNetworkSignalBool(_ped, value);
    }
    task_1.setMoveNetworkSignalBool = setMoveNetworkSignalBool;
    /**
     * No comment provided
     *
     * Hash: 0xD5BB4025AE449A4E | Since: 1207
     */
    function setMoveNetworkSignalFloat(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetTaskMoveNetworkSignalFloat(_ped, value);
    }
    task_1.setMoveNetworkSignalFloat = setMoveNetworkSignalFloat;
    /**
     * No comment provided
     *
     * Hash: 0x545BF19F86E80F11 | Since: 1207
     */
    function setTeamCarriableEntity() {
        SetTeamCarriableEntity(undefined, undefined, undefined);
    }
    task_1.setTeamCarriableEntity = setTeamCarriableEntity;
    /**
     * No comment provided
     *
     * Hash: 0xB5C51DD544F14F58 | Since: 1207
     */
    function setUpSpeedRestrainInformationForPlayerFollower() {
        SetUpSpeedRestrainInformationForPlayerFollower(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.setUpSpeedRestrainInformationForPlayerFollower = setUpSpeedRestrainInformationForPlayerFollower;
    /**
     * Params: p3 = 0, 1; p5 = 0.0f, -1.0f
     * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
     *
     * Hash: 0xAE72E7DF013AAA61 | Since: 1207
     */
    function startItemInteraction(ped, itemHash, interactionAnimHash, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof itemHash === 'string')
            itemHash = misc.getHashKey(itemHash);
        if (typeof interactionAnimHash === 'string')
            interactionAnimHash = misc.getHashKey(interactionAnimHash);
        StartTaskItemInteraction(_ped, itemHash, interactionAnimHash, 0, flag, 0);
    }
    task_1.startItemInteraction = startItemInteraction;
    /**
     * No comment provided
     *
     * Hash: 0xEE08C992D238C5D1 | Since: 1207
     */
    function stopAnimPlayback(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        StopAnimPlayback(_ped, 0, false);
    }
    task_1.stopAnimPlayback = stopAnimPlayback;
    /**
     * No comment provided
     *
     * Hash: 0x97FF36A1D40EA00A | Since: 1207
     */
    function stopAnim(ped, animDictionary, animationName) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        StopAnimTask(_ped, animDictionary, animationName, 0);
    }
    task_1.stopAnim = stopAnim;
    /**
     * Makes the specified ped achieve the specified heading.
     *
     * pedHandle: The handle of the ped to assign the task to.
     * heading: The desired heading.
     * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is canceled, and the ped will stay at the heading it managed to reach in the time.
     *
     * Hash: 0x93B93A37987F1F3D | Since: 1207
     */
    function achieveHeading(ped, heading, timeout) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAchieveHeading(_ped, heading, timeout);
    }
    task_1.achieveHeading = achieveHeading;
    /**
     * No comment provided
     *
     * Hash: 0x4AF1D73861212F52 | Since: 1207
     */
    function aimAtCoord(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAimAtCoord(_ped, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.aimAtCoord = aimAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xCF7569BD0FB480A0 | Since: 1207
     */
    function aimAtEntity(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAimAtEntity(_ped, undefined, undefined, undefined, undefined);
    }
    task_1.aimAtEntity = aimAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x6671F3EEC681BDA1 | Since: 1207
     */
    function aimGunAtCoord(ped, pos, time) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAimGunAtCoord(_ped, pos.x, pos.y, pos.z, time, false, false);
    }
    task_1.aimGunAtCoord = aimGunAtCoord;
    /**
     * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
     *
     * Hash: 0x9B53BB6E8943AF53 | Since: 1207
     */
    function aimGunAtEntity(ped, targetEntity, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        TaskAimGunAtEntity(_ped, _targetEntity, duration, false, 0);
    }
    task_1.aimGunAtEntity = aimGunAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x4B39D8F9D0FE7749 | Since: 1207
     */
    function ambientAnimalHunt(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAmbientAnimalHunt(_ped, undefined, undefined);
    }
    task_1.ambientAnimalHunt = ambientAnimalHunt;
    /**
     * No comment provided
     *
     * Hash: 0x37C13863ABA1B4A3 | Since: 1207
     */
    function ambientAnimalStalk(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAmbientAnimalStalk(_ped, undefined, undefined);
    }
    task_1.ambientAnimalStalk = ambientAnimalStalk;
    /**
     * No comment provided
     *
     * Hash: 0x979D93372FC8C565 | Since: 1207
     */
    function animalAlerted(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAnimalAlerted(_ped, undefined, undefined);
    }
    task_1.animalAlerted = animalAlerted;
    /**
     * No comment provided
     *
     * Hash: 0xA899B61C66F09134 | Since: 1207
     */
    function animalFlee(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskAnimalFlee(_ped, _targetPed, undefined);
    }
    task_1.animalFlee = animalFlee;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ANIMAL_INTERACTION
     *
     * Hash: 0xCD181A959CFDD7F4 | Since: 1207
     */
    function animalInteraction(ped, targetPed, interactionType, interactionModel, skipIdleAnimationClip) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        if (typeof interactionType === 'string')
            interactionType = misc.getHashKey(interactionType);
        if (typeof interactionModel === 'string')
            interactionModel = misc.getHashKey(interactionModel);
        TaskAnimalInteraction(_ped, _targetPed, interactionType, interactionModel, skipIdleAnimationClip);
    }
    task_1.animalInteraction = animalInteraction;
    /**
     * No comment provided
     *
     * Hash: 0x21FDF9A25CFE1CE5 | Since: 1207
     */
    function animalUnalerted(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAnimalUnalerted(_ped, undefined, undefined, undefined, undefined);
    }
    task_1.animalUnalerted = animalUnalerted;
    /**
     * No comment provided
     *
     * Hash: 0x8C038A39C4A4B6D6 | Since: 1207
     */
    function animalWrithe(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskAnimalWrithe(_ped, undefined, undefined);
    }
    task_1.animalWrithe = animalWrithe;
    /**
     * No comment provided
     *
     * Hash: 0xF3B9A78A178572B1 | Since: 1207
     */
    function arrestPed(ped, target) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _target = target instanceof Ped ? target.handle() : target;
        TaskArrestPed(_ped, _target);
    }
    task_1.arrestPed = arrestPed;
    /**
     * No comment provided
     *
     * Hash: 0x83BFC1F836B2F3F2 | Since: 1207
     */
    function bark(ped, barkAtTarget, mood) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _barkAtTarget = barkAtTarget instanceof Ped ? barkAtTarget.handle() : barkAtTarget;
        if (typeof mood === 'string')
            mood = misc.getHashKey(mood);
        TaskBark(_ped, _barkAtTarget, mood);
    }
    task_1.bark = bark;
    /**
     * No comment provided
     *
     * Hash: 0x15C86013127CE63F | Since: 1207
     */
    function boatMission(pedDriver, boat, pos, maxSpeed, drivingStyle) {
        const _pedDriver = pedDriver instanceof Ped ? pedDriver.handle() : pedDriver;
        const _boat = boat instanceof Vehicle ? boat.localId() : boat;
        TaskBoatMission(_pedDriver, _boat, undefined, undefined, pos.x, pos.y, pos.z, undefined, maxSpeed, drivingStyle, 0, undefined);
    }
    task_1.boatMission = boatMission;
    /**
     * No comment provided
     *
     * Hash: 0xBB28D1BC9EA8A6A5 | Since: 1207
     */
    function breakVehicleDoorLock(ped, vehicle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskBreakVehicleDoorLock(_ped, _vehicle);
    }
    task_1.breakVehicleDoorLock = breakVehicleDoorLock;
    /**
     * carriableSlot:
     * 7 > Back of a horse
     * 6 > Right side of a horse
     * 5 > Left side of a horse
     * flags:
     * 512: enables the prompt being the name of the item when using a generic item
     *
     * Hash: 0xF0B4F759F35CC7F5 | Since: 1207
     */
    function carriable(entity, carryConfig, carrier, carriableSlot, flags) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _carrier = carrier instanceof Ped ? carrier.handle() : carrier;
        if (typeof carryConfig === 'string')
            carryConfig = misc.getHashKey(carryConfig);
        TaskCarriable(_entity, carryConfig, _carrier, carriableSlot, flags);
    }
    task_1.carriable = carriable;
    /**
     * No comment provided
     *
     * Hash: 0x95A6C46A31D1917D | Since: 1207
     */
    function clearDefensiveArea(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskClearDefensiveArea(_ped);
    }
    task_1.clearDefensiveArea = clearDefensiveArea;
    /**
     * No comment provided
     *
     * Hash: 0x0F804F1DB19B9689 | Since: 1207
     */
    function clearLookAt(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskClearLookAt(_ped);
    }
    task_1.clearLookAt = clearLookAt;
    /**
     * Climbs or vaults the nearest thing.
     *
     * Hash: 0x89D9FCC2435112F1 | Since: 1207
     */
    function climb(ped, unused) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskClimb(_ped, unused);
    }
    task_1.climb = climb;
    /**
     * No comment provided
     *
     * Hash: 0xB6C987F9285A3814 | Since: 1207
     */
    function climbLadder(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskClimbLadder(_ped, 0, false, false);
    }
    task_1.climbLadder = climbLadder;
    /**
     * No comment provided
     *
     * Hash: 0xEE3AA414CF99F368 | Since: 1207
     */
    function combatAnimalChargePed(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskCombatAnimalChargePed(_ped, _targetPed, false, undefined, undefined, undefined, undefined);
    }
    task_1.combatAnimalChargePed = combatAnimalChargePed;
    /**
     * No comment provided
     *
     * Hash: 0xF960F3D57B660E96 | Since: 1207
     */
    function combatAnimalWarn(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskCombatAnimalWarn(_ped, undefined, undefined);
    }
    task_1.combatAnimalWarn = combatAnimalWarn;
    /**
     * No comment provided
     *
     * Hash: 0x8182B561A29BD597 | Since: 1207
     */
    function combatHatedTargets(ped, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskCombatHatedTargets(_ped, radius);
    }
    task_1.combatHatedTargets = combatHatedTargets;
    /**
     * Despite its name, it only attacks ONE hated target. The one closest hated target.
     *
     * Hash: 0x7BF835BB9E2698C8 | Since: 1207
     */
    function combatHatedTargetsAroundPed(ped, radius, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskCombatHatedTargetsAroundPed(_ped, radius, flags, undefined);
    }
    task_1.combatHatedTargetsAroundPed = combatHatedTargetsAroundPed;
    /**
     * No comment provided
     *
     * Hash: 0x2BBA30B854534A0C | Since: 1207
     */
    function combatHatedTargetsAroundPedTimed(ped, radius, time, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskCombatHatedTargetsAroundPedTimed(_ped, radius, time, flags);
    }
    task_1.combatHatedTargetsAroundPedTimed = combatHatedTargetsAroundPedTimed;
    /**
     * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
     *
     * Hash: 0x4CF5F55DAC3280A0 | Since: 1207
     */
    function combatHatedTargetsInArea(ped, pos, radius, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskCombatHatedTargetsInArea(_ped, pos.x, pos.y, pos.z, radius, flags, undefined);
    }
    task_1.combatHatedTargetsInArea = combatHatedTargetsInArea;
    /**
     * No comment provided
     *
     * Hash: 0xB5BC69D9C4060BC3 | Since: 1207
     */
    function combatHatedTargetsNoLosTest(ped, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskCombatHatedTargetsNoLosTest(_ped, radius);
    }
    task_1.combatHatedTargetsNoLosTest = combatHatedTargetsNoLosTest;
    /**
     * No comment provided
     *
     * Hash: 0xF166E48407BAC484 | Since: 1207
     */
    function combatPed(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskCombatPed(_ped, _targetPed, 0, 0);
    }
    task_1.combatPed = combatPed;
    /**
     * No comment provided
     *
     * Hash: 0x944F30DCB7096BDE | Since: 1207
     */
    function combatPedTimed(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskCombatPedTimed(_ped, _targetPed, 0, undefined);
    }
    task_1.combatPedTimed = combatPedTimed;
    /**
     * No comment provided
     *
     * Hash: 0xE017CF6E2527FE4F | Since: 1207
     */
    function companionAmbient(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskCompanionAmbient(_ped, undefined);
    }
    task_1.companionAmbient = companionAmbient;
    /**
     * No comment provided
     *
     * Hash: 0x3A2A2071DF5CC569 | Since: 1207
     */
    function confront(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        return TaskConfront(_ped, _targetPed, 0);
    }
    task_1.confront = confront;
    /**
     * No comment provided
     *
     * Hash: 0x3EB1FE9E8E908E15 | Since: 1207
     */
    function cower(ped, duration, pedToCowerFrom) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _pedToCowerFrom = pedToCowerFrom instanceof Ped ? pedToCowerFrom.handle() : pedToCowerFrom;
        return TaskCower(_ped, duration, _pedToCowerFrom);
    }
    task_1.cower = cower;
    /**
     * flags: See TASK_ENTER_VEHICLE
     *
     * Hash: 0x0A11F3BDEC03ED5F | Since: 1207
     */
    function disembarkNearestTrainCarriage(ped, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskDisembarkNearestTrainCarriage(_ped, 0, flags);
    }
    task_1.disembarkNearestTrainCarriage = disembarkNearestTrainCarriage;
    /**
     * Dismounts the ped from the animal it's mounted on. taskFlag affects what side the rider gets off. p2-p5 are almost always 0.
     * flags: See TASK_ENTER_VEHICLE
     *
     * Hash: 0x48E92D3DDE23C23A | Since: 1207
     */
    function dismountAnimal(rider, taskFlag, targetPed) {
        const _rider = rider instanceof Ped ? rider.handle() : rider;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskDismountAnimal(_rider, taskFlag, undefined, undefined, undefined, _targetPed);
    }
    task_1.dismountAnimal = dismountAnimal;
    /**
     * No comment provided
     *
     * Hash: 0x2F8AF0E82773A171 | Since: 1207
     */
    function driveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, firingPattern) {
        const _driverPed = driverPed instanceof Ped ? driverPed.handle() : driverPed;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        const _targetVehicle = targetVehicle instanceof Vehicle ? targetVehicle.localId() : targetVehicle;
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskDriveBy(_driverPed, _targetPed, _targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, false, firingPattern);
    }
    task_1.driveBy = driveBy;
    /**
     * No comment provided
     *
     * Hash: 0xA14B5FBF986BAC23 | Since: 1207
     */
    function duck(ped, time) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskDuck(_ped, time);
    }
    task_1.duck = duck;
    /**
     * Params: p4 either 0.2f, 0.25f, 0.31f, 0.4f
     *
     * Hash: 0x5D5B0D5BC3626E5A | Since: 1207
     */
    function duel(ped, entity, vPosOpponentX, vPosOpponentY, vPosOpponentZ, fOpponentHead) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskDuel(_ped, undefined, 0, _entity, 0, 0, vPosOpponentX, vPosOpponentY, vPosOpponentZ, fOpponentHead, 0);
    }
    task_1.duel = duel;
    /**
     * No comment provided
     *
     * Hash: 0x17CA98707B15926A | Since: 1207
     */
    function dumpCarriableFromParent(ped, ped2, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskDumpCarriableFromParent(_ped, _ped2, _entity);
    }
    task_1.dumpCarriableFromParent = dumpCarriableFromParent;
    /**
     * No comment provided
     *
     * Hash: 0xBD7949BD07299672 | Since: 1207
     */
    function eat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskEat(_ped, undefined, undefined);
    }
    task_1.eat = eat;
    /**
     * flags:
     * MOVE_WHILST_WAITING_FOR_PATH = (1 << 0),
     * DO_NOT_STAND_STILL_AT_END_OF_PATH = (1 << 1),
     * SKIP_NAVIGATION = (1 << 2),
     * TEASF_AUTO_START_ANIM_SCENE = (1 << 3),
     * FORCE_STAND_STILL_AT_END_OF_PATH = (1 << 6),
     * ENTER_ANIM_SCENE_DONT_FOLLOW_NAVMESH = (1 << 7)
     *
     * Hash: 0xC2329B0206426644 | Since: 1207
     */
    function enterAnimScene(ped, animScene, enterSpeed, bAutoStart, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskEnterAnimScene(_ped, animScene, enterSpeed, bAutoStart, flag, 0, 0);
    }
    task_1.enterAnimScene = enterAnimScene;
    /**
     * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEnterExitVehicleFlags
     *
     * Hash: 0xC20E50AA46D09CA8 | Since: 1207
     */
    function enterVehicle(ped, vehicle, timeout, seat, speed, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskEnterVehicle(_ped, _vehicle, timeout, seat, speed, flag, undefined);
    }
    task_1.enterVehicle = enterVehicle;
    /**
     * `Params: p2 is returned by BUILTIN::SHIFT_LEFT`
     *
     * Hash: 0x5F22926E1BCE9B08 | Since: 1207
     */
    function evasiveAnim(ped1, ped2) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        TaskEvasiveAnim(_ped1, _ped2, 0);
    }
    task_1.evasiveAnim = evasiveAnim;
    /**
     * No comment provided
     *
     * Hash: 0x7F93691AB4B92272 | Since: unknown
     */
    function everyoneLeaveVehicle() {
        TaskEveryoneLeaveVehicle(undefined, undefined);
    }
    task_1.everyoneLeaveVehicle = everyoneLeaveVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x6F1C49F275BD25B3 | Since: 1207
     */
    function everyoneLeaveVehicleInOrder(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskEveryoneLeaveVehicleInOrder(_vehicle, false);
    }
    task_1.everyoneLeaveVehicleInOrder = everyoneLeaveVehicleInOrder;
    /**
     * Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
     *
     * A maximum of 8 points can be added.
     *
     * Hash: 0x1E7889778264843A | Since: 1207
     */
    function extendRoute(pos) {
        TaskExtendRoute(pos.x, pos.y, pos.z);
    }
    task_1.extendRoute = extendRoute;
    /**
     * Params: p5 = some flag?, p6 = -1.0f, p8 = 0 in R* Scripts
     * fleeStyle: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eFleeStyle
     *
     * Hash: 0x58428248BF4B64E4 | Since: 1207
     */
    function fleeCoord(ped, pos, fleeStyle, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFleeCoord(_ped, pos.x, pos.y, pos.z, fleeStyle, 0, 0, duration, 0);
    }
    task_1.fleeCoord = fleeCoord;
    /**
     * No comment provided
     *
     * Hash: 0x390E0B697D25EAF5 | Since: 1207
     */
    function fleeCoordVia() {
        TaskFleeCoordVia(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.fleeCoordVia = fleeCoordVia;
    /**
     * Params: p4 = -1.0f, p5 = -1, p6 = 0 in R* Scripts
     * fleeStyle: see TASK_FLEE_COORD
     *
     * Hash: 0xFD45175A6DFD7CE9 | Since: 1207
     */
    function fleePed(ped, fleeFromTarget, fleeStyle, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _fleeFromTarget = fleeFromTarget instanceof Ped ? fleeFromTarget.handle() : fleeFromTarget;
        TaskFleePed(_ped, _fleeFromTarget, fleeStyle, flag, 0, 0, 0);
    }
    task_1.fleePed = fleePed;
    /**
     * No comment provided
     *
     * Hash: 0x5802E0F910E4CF1D | Since: 1207
     */
    function fleePedVia() {
        TaskFleePedVia(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.fleePedVia = fleePedVia;
    /**
     * Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
     *
     * Hash: 0x841142A1376E9006 | Since: 1207
     */
    function flushRoute() {
        TaskFlushRoute();
    }
    task_1.flushRoute = flushRoute;
    /**
     * No comment provided
     *
     * Hash: 0x72997893BFB8ECCC | Since: 1207
     */
    function flyingCircle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFlyingCircle(_ped, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.flyingCircle = flyingCircle;
    /**
     * No comment provided
     *
     * Hash: 0xE86A537B5A3C297C | Since: 1207
     */
    function flyAway(ped, fleeFromTarget) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _fleeFromTarget = fleeFromTarget instanceof Ped ? fleeFromTarget.handle() : fleeFromTarget;
        TaskFlyAway(_ped, _fleeFromTarget);
    }
    task_1.flyAway = flyAway;
    /**
     * No comment provided
     *
     * Hash: 0xD6CFC2D59DA72042 | Since: 1207
     */
    function flyToCoord(ped, travelMbr, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFlyToCoord(_ped, travelMbr, pos.x, pos.y, pos.z, false, false);
    }
    task_1.flyToCoord = flyToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x489FFCCCE7392B55 | Since: 1207
     */
    function followAndConverseWithPed(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskFollowAndConverseWithPed(_ped, _targetPed, undefined, undefined, 0, 0, 0, undefined, undefined, 0, 0);
    }
    task_1.followAndConverseWithPed = followAndConverseWithPed;
    /**
     * No comment provided
     *
     * Hash: 0x4D2B787BAE9AB760 | Since: 1207
     */
    function followEntityAlongWaypointRecordingAtOffset(ped0, ped1) {
        const _ped0 = ped0 instanceof Ped ? ped0.handle() : ped0;
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        return TaskFollowEntityAlongWaypointRecordingAtOffset(_ped0, _ped1, 0, 0, 0, 0, 0, false);
    }
    task_1.followEntityAlongWaypointRecordingAtOffset = followEntityAlongWaypointRecordingAtOffset;
    /**
     * No comment provided
     *
     * Hash: 0x2D532EAA142CF83F | Since: 1207
     */
    function followEntityWhileAimingAtEntity(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFollowEntityWhileAimingAtEntity(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.followEntityWhileAimingAtEntity = followEntityWhileAimingAtEntity;
    /**
     * If no timeout, set timeout to -1.
     *
     * Hash: 0x15D3A79D4E44B913 | Since: 1207
     */
    function followNavMeshToCoord(ped, pos, speedMultiplier, timeout, stoppingRange, flags, heading) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFollowNavMeshToCoord(_ped, pos.x, pos.y, pos.z, speedMultiplier, timeout, stoppingRange, flags, heading);
    }
    task_1.followNavMeshToCoord = followNavMeshToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x17F58B88D085DBAC | Since: 1207
     */
    function followNavMeshToCoordAdvanced(ped, pos, speedMultiplier, timeout, stoppingRange, flags, entity, unk) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskFollowNavMeshToCoordAdvanced(_ped, pos.x, pos.y, pos.z, speedMultiplier, timeout, stoppingRange, flags, 0, 0, 0, _entity, unk);
    }
    task_1.followNavMeshToCoordAdvanced = followNavMeshToCoordAdvanced;
    /**
     * No comment provided
     *
     * Hash: 0x1B1475414E70DD8E | Since: 1207
     */
    function followPavementToCoord(ped, args) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFollowPavementToCoord(_ped, args);
    }
    task_1.followPavementToCoord = followPavementToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x0E14C5550DC3CD1D | Since: 1207
     */
    function followPointRoute(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFollowPointRoute(_ped, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.followPointRoute = followPointRoute;
    /**
     * No comment provided
     *
     * Hash: 0x2E3676282C18A692 | Since: 1207
     */
    function followToOffsetOfCoord(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFollowToOffsetOfCoord(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.followToOffsetOfCoord = followToOffsetOfCoord;
    /**
     * No comment provided
     *
     * Hash: 0x304AE42E357B8C7E | Since: 1207
     */
    function followToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing, walkOnly) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskFollowToOffsetOfEntity(_ped, _entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing, false, walkOnly, false, false, false);
    }
    task_1.followToOffsetOfEntity = followToOffsetOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0x0759591819534F7B | Since: 1207
     */
    function followWaypointRecording(ped, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskFollowWaypointRecording(_ped, 0, flag, 0, false, undefined, 0);
    }
    task_1.followWaypointRecording = followWaypointRecording;
    /**
     * No comment provided
     *
     * Hash: 0x0CFC13EBC19BCA52 | Since: 1207
     */
    function followWaypointRecordingAdvanced(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskFollowWaypointRecordingAdvanced(_ped, undefined);
    }
    task_1.followWaypointRecordingAdvanced = followWaypointRecordingAdvanced;
    /**
     * No comment provided
     *
     * Hash: 0xBE9B0520BD7C445B | Since: 1207
     */
    function followWaypointRecordingAtOffset(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskFollowWaypointRecordingAtOffset(_ped, 0, 0, 0, 0, false);
    }
    task_1.followWaypointRecordingAtOffset = followWaypointRecordingAtOffset;
    /**
     * motionStateHash: see FORCE_PED_MOTION_STATE
     *
     * Hash: 0x4F056E1AFFEF17AB | Since: 1207
     */
    function forceMotionState(ped, motionStateHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof motionStateHash === 'string')
            motionStateHash = misc.getHashKey(motionStateHash);
        TaskForceMotionState(_ped, motionStateHash, false);
    }
    task_1.forceMotionState = forceMotionState;
    /**
     * ped = Ped you want to perform this task.
     * target = the Entity they should aim at.
     * distanceToStopAt = distance from the target, where the ped should stop to aim.
     * StartAimingDist = distance where the ped should start to aim.
     *
     * Hash: 0xA9DA48FAB8A76C12 | Since: 1207
     */
    function gotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _target = target instanceof Entity ? target.handle() : target;
        TaskGotoEntityAiming(_ped, _target, distanceToStopAt, StartAimingDist);
    }
    task_1.gotoEntityAiming = gotoEntityAiming;
    /**
     * No comment provided
     *
     * Hash: 0xE39B4FF4FDEBDE27 | Since: 1207
     */
    function gotoEntityOffset(ped, entity, pos, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskGotoEntityOffset(_ped, _entity, undefined, pos.x, pos.y, pos.z, duration);
    }
    task_1.gotoEntityOffset = gotoEntityOffset;
    /**
     * No comment provided
     *
     * Hash: 0x338E7EF52B6095A9 | Since: 1207
     */
    function gotoEntityOffsetXy(ped, entity, duration, targetRadius, xOffset, yOffset, moveBlendRatio, offsetFlags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskGotoEntityOffsetXy(_ped, _entity, duration, targetRadius, xOffset, yOffset, moveBlendRatio, offsetFlags);
    }
    task_1.gotoEntityOffsetXy = gotoEntityOffsetXy;
    /**
     * No comment provided
     *
     * Hash: 0xFA6DA9D151769392 | Since: 1311
     */
    function gotoEntityOffsetXyz(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGotoEntityOffsetXyz(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.gotoEntityOffsetXyz = gotoEntityOffsetXyz;
    /**
     * No comment provided
     *
     * Hash: 0x41B0832CA96B5351 | Since: 1207
     */
    function gotoEntityOffsetXyzAiming(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGotoEntityOffsetXyzAiming(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.gotoEntityOffsetXyzAiming = gotoEntityOffsetXyzAiming;
    /**
     * No comment provided
     *
     * Hash: 0x901BD69984400F62 | Since: 1207
     */
    function gotoEntityOffsetXyAiming(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGotoEntityOffsetXyAiming(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.gotoEntityOffsetXyAiming = gotoEntityOffsetXyAiming;
    /**
     * Tells the ped to go to a coord, without using the navemesh. if timeBeforeTeleport is -1 the ped will never warp, p8 is always 0 or 1 still unknown
     *
     * Hash: 0xD76B57B44F1E6F8B | Since: 1207
     */
    function goStraightToCoord(ped, pos, moveBlendRatio, timeBeforeTeleport, finalHeading, targetRadius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGoStraightToCoord(_ped, pos.x, pos.y, pos.z, moveBlendRatio, timeBeforeTeleport, finalHeading, targetRadius, 0);
    }
    task_1.goStraightToCoord = goStraightToCoord;
    /**
     * Tells the ped to go to an offset coord from an entity, without using the navmesh. if timeBeforeTeleport is -1 the ped will never warp, p7 is 1 or 0 still unknown param
     *
     * Hash: 0x61E360B7E040D12E | Since: 1207
     */
    function goStraightToCoordRelativeToEntity(ped, entity, xOffset, Yoffset, zOffset, moveBlendRatio, timeBeforeTeleport) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskGoStraightToCoordRelativeToEntity(_ped, _entity, xOffset, Yoffset, zOffset, moveBlendRatio, timeBeforeTeleport, 0);
    }
    task_1.goStraightToCoordRelativeToEntity = goStraightToCoordRelativeToEntity;
    /**
     * No comment provided
     *
     * Hash: 0xA55547801EB331FC | Since: 1207
     */
    function goToCoordAndAimAtHatedEntitiesNearCoord(ped, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskGoToCoordAndAimAtHatedEntitiesNearCoord(_ped, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern);
    }
    task_1.goToCoordAndAimAtHatedEntitiesNearCoord = goToCoordAndAimAtHatedEntitiesNearCoord;
    /**
     * No comment provided
     *
     * Hash: 0x87BD711FC31EA273 | Since: 1207
     */
    function goToCoordAndAimAtHatedEntitiesNearCoordUsingCombatStyle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGoToCoordAndAimAtHatedEntitiesNearCoordUsingCombatStyle(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.goToCoordAndAimAtHatedEntitiesNearCoordUsingCombatStyle = goToCoordAndAimAtHatedEntitiesNearCoordUsingCombatStyle;
    /**
     * No comment provided
     *
     * Hash: 0x5BC448CB78FA3E88 | Since: 1207
     */
    function goToCoordAnyMeans(ped, pos, speed, entity, walkingStyle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskGoToCoordAnyMeans(_ped, pos.x, pos.y, pos.z, speed, _entity, false, walkingStyle, 0);
    }
    task_1.goToCoordAnyMeans = goToCoordAnyMeans;
    /**
     * No comment provided
     *
     * Hash: 0x1DD45F9ECFDB1BC9 | Since: 1207
     */
    function goToCoordAnyMeansExtraParams(ped, pos, speed, walkingStyle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGoToCoordAnyMeansExtraParams(_ped, pos.x, pos.y, pos.z, speed, undefined, false, walkingStyle, 0, undefined, undefined, undefined, undefined);
    }
    task_1.goToCoordAnyMeansExtraParams = goToCoordAnyMeansExtraParams;
    /**
     * This native allows to control the cruise speed of where you want the ped to go
     * 3rd param might be the entity ped is in? like boat or wagon, 12th param might be the cruiseSpeed of the entity ped is in?
     * EXAMPLE: TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(PlayerPedId(), vector3(x, y, z), 3.0, entity, 1, 0, -1082130432, 0, 101004800, 520, 3.0, 1082130432, 0)
     *
     * Hash: 0xB8ECD61F531A7B02 | Since: 1207
     */
    function goToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, cruiseSpeed, entity, cruiseSpeed_2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(_ped, cruiseSpeed, _entity, 0, 0, undefined, undefined, undefined, undefined, undefined, undefined, cruiseSpeed_2, undefined, undefined);
    }
    task_1.goToCoordAnyMeansExtraParamsWithCruiseSpeed = goToCoordAnyMeansExtraParamsWithCruiseSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x11315AB3385B8AC0 | Since: 1207
     */
    function goToCoordWhileAimingAtCoord(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGoToCoordWhileAimingAtCoord(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.goToCoordWhileAimingAtCoord = goToCoordWhileAimingAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x639C0425A0B4E77E | Since: 1207
     */
    function goToCoordWhileAimingAtCoordUsingCombatStyle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGoToCoordWhileAimingAtCoordUsingCombatStyle(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.goToCoordWhileAimingAtCoordUsingCombatStyle = goToCoordWhileAimingAtCoordUsingCombatStyle;
    /**
     * No comment provided
     *
     * Hash: 0xB2A16444EAD9AE47 | Since: 1207
     */
    function goToCoordWhileAimingAtEntity(ped1, pos, ped2, firingPattern) {
        const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskGoToCoordWhileAimingAtEntity(_ped1, pos.x, pos.y, pos.z, _ped2, 0, undefined, 0, 0, undefined, undefined, undefined, firingPattern, 0, undefined);
    }
    task_1.goToCoordWhileAimingAtEntity = goToCoordWhileAimingAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x78426D0982D083C9 | Since: 1207
     */
    function goToCoordWhileAimingAtEntityUsingCombatStyle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGoToCoordWhileAimingAtEntityUsingCombatStyle(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.goToCoordWhileAimingAtEntityUsingCombatStyle = goToCoordWhileAimingAtEntityUsingCombatStyle;
    /**
     * No comment provided
     *
     * Hash: 0x6A071245EB0D1882 | Since: 1207
     */
    function goToEntity(ped, target, duration, distance, speed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _target = target instanceof Entity ? target.handle() : target;
        TaskGoToEntity(_ped, _target, duration, distance, speed, 0, 0);
    }
    task_1.goToEntity = goToEntity;
    /**
     * shootatEntity:
     * If true, peds will shoot at Entity till it is dead.
     * If false, peds will just walk till they reach the entity and will cease shooting.
     *
     * Hash: 0x97465886D35210E9 | Since: 1207
     */
    function goToEntityWhileAimingAtEntity(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGoToEntityWhileAimingAtEntity(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.goToEntityWhileAimingAtEntity = goToEntityWhileAimingAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0xCEF0117C233026AD | Since: 1207
     */
    function goToEntityWhileAimingAtEntityUsingCombatStyle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGoToEntityWhileAimingAtEntityUsingCombatStyle(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.goToEntityWhileAimingAtEntityUsingCombatStyle = goToEntityWhileAimingAtEntityUsingCombatStyle;
    /**
     * enum eWhistleType
     * {
     * WHISTLE_MAIN,
     * WHISTLE_SECONDARY,
     * WHISTLE_DOUBLE,
     * WHISTLE_URGENT,
     * WHISTLE_LONG
     * };
     *
     * Hash: 0xBAD6545608CECA6E | Since: 1207
     */
    function goToWhistle(ped, p1, whistleType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _p1 = p1 instanceof Ped ? p1.handle() : p1;
        TaskGoToWhistle(_ped, _p1, whistleType);
    }
    task_1.goToWhistle = goToWhistle;
    /**
     * grappleStyle: AR_GRAPPLE_MOUNT_STANDING_FROM_FRONT, AR_GRAPPLE_MOUNT_STANDING_FROM_RIGHT, AR_GRAPPLE_MOUNT_STANDING_FROM_BACK, AR_GRAPPLE_MOUNT_STANDING_FROM_LEFT, AR_GRAPPLE_MOUNT_FROM_FRONT, AR_WOLF_EXECUTION_ENTER_FROM_BACK, AR_GRAPPLE_DRAG_FRONT_ON_ASS, AR_GRAPPLE_FRONT_FROM_LEFT_FAR, AR_BEAR_CHALLENGE_FRONT, AR_GRAPPLE_FRONT_FROM_FRONT, AR_GRAPPLE_MOUNT_FACEUP_FROM_FRONT
     *
     * Hash: 0x779A2FFACEFAEA7B | Since: 1207
     */
    function grapple(ped, targetPed, grappleStyle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        if (typeof grappleStyle === 'string')
            grappleStyle = misc.getHashKey(grappleStyle);
        return TaskGrapple(_ped, _targetPed, grappleStyle, 0, 0, 0, 0);
    }
    task_1.grapple = grapple;
    /**
     * No comment provided
     *
     * Hash: 0xB9FB242EACCAF30F | Since: 1207
     */
    function guard(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGuard(_ped, undefined, undefined);
    }
    task_1.guard = guard;
    /**
     * No comment provided
     *
     * Hash: 0xD2A207EEBDF9889B | Since: 1207
     */
    function guardAssignedDefensiveArea(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGuardAssignedDefensiveArea(_ped, 0, 0, 0, 0, 0, undefined);
    }
    task_1.guardAssignedDefensiveArea = guardAssignedDefensiveArea;
    /**
     * No comment provided
     *
     * Hash: 0x4A58A47A72E3FCB4 | Since: 1207
     */
    function guardCurrentPosition(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGuardCurrentPosition(_ped, 0, 0, false);
    }
    task_1.guardCurrentPosition = guardCurrentPosition;
    /**
     * flags: 0 = HANDS_UP_NOTHING; 1 = HANDS_UP_STRAIGHT_TO_LOOP
     *
     * Hash: 0xF2EAB31979A7F910 | Since: 1207
     */
    function handsUp(ped, duration, facingPed, timeToFacePed, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _facingPed = facingPed instanceof Ped ? facingPed.handle() : facingPed;
        TaskHandsUp(_ped, duration, _facingPed, timeToFacePed, flags);
    }
    task_1.handsUp = handsUp;
    /**
     * No comment provided
     *
     * Hash: 0x9030AD4B6207BFE8 | Since: 1207
     */
    function hitchAnimal(ped, scenarioPoint, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskHitchAnimal(_ped, scenarioPoint, flag);
    }
    task_1.hitchAnimal = hitchAnimal;
    /**
     * No comment provided
     *
     * Hash: 0x6AFD8FE0D723328F | Since: 1207
     */
    function hogtieable(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskHogtieable(_ped);
    }
    task_1.hogtieable = hogtieable;
    /**
     * No comment provided
     *
     * Hash: 0x27829AFD3E03AC1A | Since: 1207
     */
    function hogtieTargetPed(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskHogtieTargetPed(_ped, _targetPed);
    }
    task_1.hogtieTargetPed = hogtieTargetPed;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_HORSE_ACTION
     * Params: p2, p3 are set to 0 in R* Scripts
     *
     * Hash: 0xA09CFD29100F06C3 | Since: 1207
     */
    function horseAction(ped, action, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskHorseAction(_ped, action, _targetPed, undefined);
    }
    task_1.horseAction = horseAction;
    /**
     * No comment provided
     *
     * Hash: 0x5C8514540D27FBFB | Since: 1207
     */
    function investigate(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskInvestigate(_ped, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.investigate = investigate;
    /**
     * No comment provided
     *
     * Hash: 0x0AE4086104E067B1 | Since: 1207
     */
    function jump(ped, unused) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskJump(_ped, unused);
    }
    task_1.jump = jump;
    /**
     * No comment provided
     *
     * Hash: 0xF90427F00A495A28 | Since: 1207
     */
    function knockedOut(ped, permanently) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskKnockedOut(_ped, 0, permanently);
    }
    task_1.knockedOut = knockedOut;
    /**
     * No comment provided
     *
     * Hash: 0x42AC6401ABB8C7E5 | Since: 1207
     */
    function knockedOutAndHogtied(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskKnockedOutAndHogtied(_ped, 0, 0);
    }
    task_1.knockedOutAndHogtied = knockedOutAndHogtied;
    /**
     * No comment provided
     *
     * Hash: 0xC716EB2BD16370A3 | Since: 1207
     */
    function lassoPed(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskLassoPed(_ped, _targetPed);
    }
    task_1.lassoPed = lassoPed;
    /**
     * No comment provided
     *
     * Hash: 0xAA19711D33C6708C | Since: 1207
     */
    function leadAndConverse(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskLeadAndConverse(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.leadAndConverse = leadAndConverse;
    /**
     * No comment provided
     *
     * Hash: 0x9A7A4A54596FE09D | Since: 1207
     */
    function leadHorse(ped, horse) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        TaskLeadHorse(_ped, _horse);
    }
    task_1.leadHorse = leadHorse;
    /**
     * flags: See TASK_ENTER_VEHICLE
     *
     * Hash: 0x504D54DF3F6F2247 | Since: 1207
     */
    function leaveAnyVehicle(ped, taskFlag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskLeaveAnyVehicle(_ped, 0, taskFlag);
    }
    task_1.leaveAnyVehicle = leaveAnyVehicle;
    /**
     * flags: See TASK_ENTER_VEHICLE
     *
     * Hash: 0xD3DBCE61A490BE02 | Since: 1207
     */
    function leaveVehicle(ped, vehicle, flags, unkPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        const _unkPed = unkPed instanceof Ped ? unkPed.handle() : unkPed;
        TaskLeaveVehicle(_ped, _vehicle, flags, _unkPed);
    }
    task_1.leaveVehicle = leaveVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x6FA46612594F7973 | Since: 1207
     */
    function lookAtCoord(ped, pos, duration, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskLookAtCoord(_ped, pos.x, pos.y, pos.z, duration, flags, 0, false);
    }
    task_1.lookAtCoord = lookAtCoord;
    /**
     * param3: duration in ms, use -1 to look forever
     * param4: using 2048 is fine
     * param5: using 3 is fine
     *
     * Hash: 0x69F4BE8C8CC4796C | Since: 1207
     */
    function lookAtEntity(ped, lookAtTarget, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _lookAtTarget = lookAtTarget instanceof Entity ? lookAtTarget.handle() : lookAtTarget;
        TaskLookAtEntity(_ped, _lookAtTarget, duration, 0, 0, 0);
    }
    task_1.lookAtEntity = lookAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x48FAE038401A2888 | Since: 1207
     */
    function lootEntity(ped, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskLootEntity(_ped, _entity);
    }
    task_1.lootEntity = lootEntity;
    /**
     * No comment provided
     *
     * Hash: 0xCF1501CBC4059412 | Since: 1207
     */
    function lootNearestEntity(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskLootNearestEntity(_ped, pos.x, pos.y, pos.z, 0, 0);
    }
    task_1.lootNearestEntity = lootNearestEntity;
    /**
     * Params: p2: AR_TAKEDOWN_FRONT, AR_EXECUTION_FRONT, 0 in R* Scripts
     *
     * Hash: 0x482C99D0B38D1B0A | Since: 1207
     */
    function melee(ped, targetPed, p2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        return TaskMelee(_ped, _targetPed, p2, undefined, undefined, 0, undefined, 0);
    }
    task_1.melee = melee;
    /**
     * timer: in ms, if it reaches 0 it will auto warp the ped on the horse
     * mountStyle: See TASK_ENTER_VEHICLE
     * Flags will still apply to mountStyle
     *
     * Hash: 0x92DB0739813C5186 | Since: 1207
     */
    function mountAnimal(ped, mount, timer, seatIndex, pedSpeed, mountStyle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        TaskMountAnimal(_ped, _mount, timer, seatIndex, pedSpeed, mountStyle, undefined, undefined);
    }
    task_1.mountAnimal = mountAnimal;
    /**
     * No comment provided
     *
     * Hash: 0x4AA5AA97C65E4A2F | Since: 1207
     */
    function moveBeInFormation(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskMoveBeInFormation(_ped, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.moveBeInFormation = moveBeInFormation;
    /**
     * Params: moveBlendRatio commonly 1.25f, p5 is always 0 in R* Scripts
     *
     * Hash: 0x79482C12482A860D | Since: 1207
     */
    function moveFollowRoadUsingNavmesh(ped, moveBlendRatio, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskMoveFollowRoadUsingNavmesh(_ped, moveBlendRatio, pos.x, pos.y, pos.z, undefined);
    }
    task_1.moveFollowRoadUsingNavmesh = moveFollowRoadUsingNavmesh;
    /**
     * No comment provided
     *
     * Hash: 0x8AA1593AEC087A29 | Since: 1207
     */
    function moveInTraffic(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskMoveInTraffic(_ped, undefined, undefined, undefined);
    }
    task_1.moveInTraffic = moveInTraffic;
    /**
     * No comment provided
     *
     * Hash: 0x13DED0BC45600FE1 | Since: 1207
     */
    function moveInTrafficAwayFromEntity(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskMoveInTrafficAwayFromEntity(_ped, undefined, undefined, undefined, undefined);
    }
    task_1.moveInTrafficAwayFromEntity = moveInTrafficAwayFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xDCA3A13F7A45338B | Since: 1207
     */
    function moveInTrafficToDestination(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskMoveInTrafficToDestination(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.moveInTrafficToDestination = moveInTrafficToDestination;
    /**
     * No comment provided
     *
     * Hash: 0x7B6A04F98BBAFB2C | Since: 1207
     */
    function moveNetworkAdvancedByNameWithInitParams(ped, taskData, pos, rot, flag) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskMoveNetworkAdvancedByNameWithInitParams(_ped, taskData, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0, 0, 0, flag, 0);
    }
    task_1.moveNetworkAdvancedByNameWithInitParams = moveNetworkAdvancedByNameWithInitParams;
    /**
     * No comment provided
     *
     * Hash: 0xF92171093BCABED4 | Since: 1207
     */
    function moveNetworkAdvancedByNameWithInitParamsAttached(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskMoveNetworkAdvancedByNameWithInitParamsAttached(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.moveNetworkAdvancedByNameWithInitParamsAttached = moveNetworkAdvancedByNameWithInitParamsAttached;
    /**
     * No comment provided
     *
     * Hash: 0x2D537BA194896636 | Since: 1207
     */
    function moveNetworkByName(ped, multiplier, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskMoveNetworkByName(_ped, multiplier, false, flags);
    }
    task_1.moveNetworkByName = moveNetworkByName;
    /**
     * No comment provided
     *
     * Hash: 0x139805C2A67C4795 | Since: 1207
     */
    function moveNetworkByNameWithInitParams(ped, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskMoveNetworkByNameWithInitParams(_ped, 0, false, flags);
    }
    task_1.moveNetworkByNameWithInitParams = moveNetworkByNameWithInitParams;
    /**
     * No comment provided
     *
     * Hash: 0xBDA5DF49D080FE4E | Since: 1207
     */
    function patrol(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskPatrol(_ped, undefined, false, false);
    }
    task_1.patrol = patrol;
    /**
     * This tasks the ped to do nothing for the specified amount of milliseconds.
     * This is useful if you want to add a delay between tasks when using a sequence task.
     *
     * Hash: 0xE73A266DB0CA9042 | Since: 1207
     */
    function pause(ped, ms) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPause(_ped, ms);
    }
    task_1.pause = pause;
    /**
     * No comment provided
     *
     * Hash: 0xD04FE6765D990A06 | Since: 1207
     */
    function pedSlideToCoord(ped, pos, heading) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPedSlideToCoord(_ped, pos.x, pos.y, pos.z, heading, 0);
    }
    task_1.pedSlideToCoord = pedSlideToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x5ABA3986D90D8A3B | Since: 1207
     */
    function performSequence(ped, taskSequenceId) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPerformSequence(_ped, taskSequenceId);
    }
    task_1.performSequence = performSequence;
    /**
     * No comment provided
     *
     * Hash: 0x89221B16730234F0 | Since: 1207
     */
    function performSequenceFromProgress(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPerformSequenceFromProgress(_ped, undefined, undefined, undefined);
    }
    task_1.performSequenceFromProgress = performSequenceFromProgress;
    /**
     * No comment provided
     *
     * Hash: 0x4391700CBD89C3D8 | Since: 1207
     */
    function persistentCharacter(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPersistentCharacter(_ped);
    }
    task_1.persistentCharacter = persistentCharacter;
    /**
     * No comment provided
     *
     * Hash: 0x502EC17B1BED4BFA | Since: 1207
     */
    function pickupCarriableEntity(ped, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskPickupCarriableEntity(_ped, _entity);
    }
    task_1.pickupCarriableEntity = pickupCarriableEntity;
    /**
     * No comment provided
     *
     * Hash: 0x55B0ECFD98596624 | Since: 1207
     */
    function pickUpWeapon(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPickUpWeapon(_ped, undefined);
    }
    task_1.pickUpWeapon = pickUpWeapon;
    /**
     * No comment provided
     *
     * Hash: 0xC7F0B43DCDC57E3D | Since: 1207
     */
    function placeCarriedEntityAtCoord(ped, entity, pos, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskPlaceCarriedEntityAtCoord(_ped, _entity, pos.x, pos.y, pos.z, 0, flags);
    }
    task_1.placeCarriedEntityAtCoord = placeCarriedEntityAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x6D3D87C57B3D52C7 | Since: 1207
     */
    function placeCarriedEntityOnMount(ped, entity, mount) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        TaskPlaceCarriedEntityOnMount(_ped, _entity, _mount, 0);
    }
    task_1.placeCarriedEntityOnMount = placeCarriedEntityOnMount;
    /**
     * No comment provided
     *
     * Hash: 0x965FEC691D55E9BF | Since: 1207
     */
    function plantBomb(ped, pos, heading) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPlantBomb(_ped, pos.x, pos.y, pos.z, heading);
    }
    task_1.plantBomb = plantBomb;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/animations
     * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScriptedAnimFlags
     * ikFlags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eIkControlFlags
     *
     * Hash: 0xEA47FE3719165B94 | Since: 1207
     */
    function playAnim(ped, animDict, animName, speed, speedMultiplier, duration, flags, playbackRate, ikFlags, taskFilter) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPlayAnim(_ped, animDict, animName, speed, speedMultiplier, duration, flags, playbackRate, false, ikFlags, false, taskFilter, false);
    }
    task_1.playAnim = playAnim;
    /**
     * flags: see TASK_PLAY_ANIM
     * ikFlags: see TASK_PLAY_ANIM
     *
     * Hash: 0x83CDB10EA29B370B | Since: 1207
     */
    function playAnimAdvanced(ped, animDict, animName, pos, rot, speed, speedMultiplier, duration, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPlayAnimAdvanced(_ped, animDict, animName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, speed, speedMultiplier, duration, flags, 0, 0, 0, 0);
    }
    task_1.playAnimAdvanced = playAnimAdvanced;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/animations/kit_emotes_list.lua
     * emote: https://alloc8or.re/rdr3/doc/enums/eEmote.txt
     *
     * enum eEmoteType
     * {
     * EMOTE_TYPE_INVALID = -1,
     * EMOTE_TYPE_REACT,
     * EMOTE_TYPE_ACTION,
     * EMOTE_TYPE_TAUNT,
     * EMOTE_TYPE_GREET,
     * EMOTE_TYPE_TWIRL_GUN,
     * EMOTE_TYPE_DANCE_FLOOR
     * };
     *
     * enum eEmotePlaybackMode
     * {
     * EMOTE_PM_INVALID = -1,
     * EMOTE_PM_UPPERBODY,
     * EMOTE_PM_UPPERBODY_LOOP,
     * EMOTE_PM_FULLBODY,
     * };
     *
     * Hash: 0xB31A277C1AC7B7FF | Since: 1207
     */
    function playEmoteWithHash(ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof emote === 'string')
            emote = misc.getHashKey(emote);
        TaskPlayEmoteWithHash(_ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps);
    }
    task_1.playEmoteWithHash = playEmoteWithHash;
    /**
     * No comment provided
     *
     * Hash: 0xAD67214236AB1CFE | Since: 1207
     */
    function playUpperAnimFacingEntity(ped, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return TaskPlayUpperAnimFacingEntity(_ped, _entity, 0, 0, 0, 0, 0, false, false, 0, 0, 0);
    }
    task_1.playUpperAnimFacingEntity = playUpperAnimFacingEntity;
    /**
     * No comment provided
     *
     * Hash: 0x87BE56724650408E | Since: 1207
     */
    function police(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskPolice(_ped, false);
    }
    task_1.police = police;
    /**
     * No comment provided
     *
     * Hash: 0x4172393E6BE1FECE | Since: 1207
     */
    function putPedDirectlyIntoCover(ped, pos, timeout, coverpoint) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPutPedDirectlyIntoCover(_ped, pos.x, pos.y, pos.z, timeout, false, 0, undefined, undefined, coverpoint, false, false, undefined);
    }
    task_1.putPedDirectlyIntoCover = putPedDirectlyIntoCover;
    /**
     * grappleStyle: AR_GRAPPLE_STRUGGLE, AR_ALLIGATOR_LEG_GRAB_CHALLENGE_FAIL, AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_BACK_DEFEND, AR_GRAPPLE_FRONT_FROM_FRONT
     *
     * Hash: 0xA05F3F20889D7A5B | Since: 1207
     */
    function putPedDirectlyIntoGrapple(ped, grappleTarget, grappleStyle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _grappleTarget = grappleTarget instanceof Ped ? grappleTarget.handle() : grappleTarget;
        if (typeof grappleStyle === 'string')
            grappleStyle = misc.getHashKey(grappleStyle);
        TaskPutPedDirectlyIntoGrapple(_ped, _grappleTarget, grappleStyle, 0, 0, false, 0);
    }
    task_1.putPedDirectlyIntoGrapple = putPedDirectlyIntoGrapple;
    /**
     * meleeStyles: AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_MOUNT_FACEDOWN_FROM_FRONT, AR_ALLIGATOR_LEAPKILL, AR_ALLIGATOR_WAIST_AUTOKILL_FRONT
     *
     * Hash: 0x1C6CD14A876FFE39 | Since: 1207
     */
    function putPedDirectlyIntoMelee(ped, meleeTarget, meleeStyle, animBlendRatio) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _meleeTarget = meleeTarget instanceof Ped ? meleeTarget.handle() : meleeTarget;
        if (typeof meleeStyle === 'string')
            meleeStyle = misc.getHashKey(meleeStyle);
        TaskPutPedDirectlyIntoMelee(_ped, _meleeTarget, meleeStyle, 0, animBlendRatio, false, 0);
    }
    task_1.putPedDirectlyIntoMelee = putPedDirectlyIntoMelee;
    /**
     * Makes a ped react to an entity.
     * Params: reactingTo Entity can be 0, p8 is always 4
     *
     * Hash: 0xC4C32C31920E1B70 | Since: 1207
     */
    function react(ped, reactingTo, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _reactingTo = reactingTo instanceof Entity ? reactingTo.handle() : reactingTo;
        return TaskReact(_ped, _reactingTo, pos.x, pos.y, pos.z, 0, 0, 0);
    }
    task_1.react = react;
    /**
     * No comment provided
     *
     * Hash: 0x62D2916F56B9CD2D | Since: 1207
     */
    function reloadWeapon(ped, unused) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskReloadWeapon(_ped, unused);
    }
    task_1.reloadWeapon = reloadWeapon;
    /**
     * No comment provided
     *
     * Hash: 0x356088527D9EBAAD | Since: 1207
     */
    function reviveTarget(ped, reviver, tool) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _reviver = reviver instanceof Ped ? reviver.handle() : reviver;
        if (typeof tool === 'string')
            tool = misc.getHashKey(tool);
        TaskReviveTarget(_ped, _reviver, tool);
    }
    task_1.reviveTarget = reviveTarget;
    /**
     * No comment provided
     *
     * Hash: 0x37FB1C870E2EC2C6 | Since: 1207
     */
    function rideTrain(ped, train, scenarioPoint, scenarioHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _train = train instanceof Vehicle ? train.localId() : train;
        if (typeof scenarioHash === 'string')
            scenarioHash = misc.getHashKey(scenarioHash);
        TaskRideTrain(_ped, _train, scenarioPoint, scenarioHash);
    }
    task_1.rideTrain = rideTrain;
    /**
     * No comment provided
     *
     * Hash: 0x7BB967F85D8CCBDB | Since: 1207
     */
    function robPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskRobPed(_ped, undefined, undefined, undefined, undefined);
    }
    task_1.robPed = robPed;
    /**
     * No comment provided
     *
     * Hash: 0x126EF75F1E17ABE5 | Since: 1207
     */
    function scriptedAnimation(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskScriptedAnimation(_ped);
    }
    task_1.scriptedAnimation = scriptedAnimation;
    /**
     * No comment provided
     *
     * Hash: 0x8D7F2A63688C20A4 | Since: 1207
     */
    function seekClearLosToEntity(ped, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskSeekClearLosToEntity(_ped, _entity, 0, 0, 0);
    }
    task_1.seekClearLosToEntity = seekClearLosToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x84D32B3BEC531324 | Since: 1207
     */
    function seekCoverFromPed(ped, fromPed, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _fromPed = fromPed instanceof Ped ? fromPed.handle() : fromPed;
        TaskSeekCoverFromPed(_ped, _fromPed, duration, undefined, undefined, undefined);
    }
    task_1.seekCoverFromPed = seekCoverFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x75AC2B60386D89F2 | Since: 1207
     */
    function seekCoverFromPos(ped, pos, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSeekCoverFromPos(_ped, pos.x, pos.y, pos.z, duration, undefined, undefined, undefined);
    }
    task_1.seekCoverFromPos = seekCoverFromPos;
    /**
     * No comment provided
     *
     * Hash: 0x39246A6958EF072C | Since: 1207
     */
    function seekCoverToCoords(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSeekCoverToCoords(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.seekCoverToCoords = seekCoverToCoords;
    /**
     * No comment provided
     *
     * Hash: 0xD43D95C7A869447F | Since: 1207
     */
    function seekCoverToCoverPoint(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSeekCoverToCoverPoint(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.seekCoverToCoverPoint = seekCoverToCoverPoint;
    /**
     * No comment provided
     *
     * Hash: 0x90D2156198831D69 | Since: 1207
     */
    function setBlockingOfNonTemporaryEvents(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSetBlockingOfNonTemporaryEvents(_ped, toggle);
    }
    task_1.setBlockingOfNonTemporaryEvents = setBlockingOfNonTemporaryEvents;
    /**
     * No comment provided
     *
     * Hash: 0x17293C633C8AC019 | Since: 1207
     */
    function setCrouchMovement(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSetCrouchMovement(_ped, false, undefined, false);
    }
    task_1.setCrouchMovement = setCrouchMovement;
    /**
     * No comment provided
     *
     * Hash: 0x933C06518B52A9A4 | Since: 1207
     */
    function setSphereDefensiveArea(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSetSphereDefensiveArea(_ped, 0, 0, 0, 0);
    }
    task_1.setSphereDefensiveArea = setSphereDefensiveArea;
    /**
     * No comment provided
     *
     * Hash: 0x4C3FA937B44A90FA | Since: 1207
     */
    function setStealthMovement(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSetStealthMovement(_ped, false, undefined, false);
    }
    task_1.setStealthMovement = setStealthMovement;
    /**
     * No comment provided
     *
     * Hash: 0x452419CBD838065B | Since: 1207
     */
    function shockingEventReact(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskShockingEventReact(_ped, undefined, undefined);
    }
    task_1.shockingEventReact = shockingEventReact;
    /**
     * No comment provided
     *
     * Hash: 0x46A6CC01E0826106 | Since: 1207
     */
    function shootAtCoord(ped, pos, duration, firingPattern) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskShootAtCoord(_ped, pos.x, pos.y, pos.z, duration, firingPattern, undefined);
    }
    task_1.shootAtCoord = shootAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x08DA95E8298AE772 | Since: 1207
     */
    function shootAtEntity(entity, targetEntity, duration, firingPattern, affectCockedState) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskShootAtEntity(_entity, _targetEntity, duration, firingPattern, affectCockedState);
    }
    task_1.shootAtEntity = shootAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x08AA95E8298AE772 | Since: 1207
     */
    function shootWithWeapon(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskShootWithWeapon(_ped);
    }
    task_1.shootWithWeapon = shootWithWeapon;
    /**
     * Makes the specified ped shuffle to the next vehicle seat.
     * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
     *
     * Hash: 0x7AA80209BDA643EB | Since: 1207
     */
    function shuffleToNextVehicleSeat(ped, vehicle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskShuffleToNextVehicleSeat(_ped, _vehicle);
    }
    task_1.shuffleToNextVehicleSeat = shuffleToNextVehicleSeat;
    /**
     * Makes the specified ped flee the specified distance from the specified position.
     * fleeType: see TASK_FLEE_COORD
     *
     * Hash: 0x94587F17E9C365D5 | Since: 1207
     */
    function smartFleeCoord(ped, pos, distance, time, fleeType, fleeSpeed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSmartFleeCoord(_ped, pos.x, pos.y, pos.z, distance, time, fleeType, fleeSpeed);
    }
    task_1.smartFleeCoord = smartFleeCoord;
    /**
     * Makes a ped run away from another ped (fleeFromTarget)
     *
     * fleeDistance = ped will flee this distance
     * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
     * fleeType = see TASK_FLEE_COORD, can be 0, R* Scripts: fm_mission/race_controller: 66048; fme_escaped_convicts: 2260992, 2523136, 2359296; la_alligator/fox: 2097152; net_fetch: 17301536; net_stable_mount: 540928
     * fleeSpeed = mostly 3f, rarely 1f in R* Scripts
     *
     * Hash: 0x22B0D0E37CCB840D | Since: 1207
     */
    function smartFleePed(ped, fleeFromTarget, fleeDistance, fleeTime, fleeType, fleeSpeed, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _fleeFromTarget = fleeFromTarget instanceof Ped ? fleeFromTarget.handle() : fleeFromTarget;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskSmartFleePed(_ped, _fleeFromTarget, fleeDistance, fleeTime, fleeType, fleeSpeed, _targetPed);
    }
    task_1.smartFleePed = smartFleePed;
    /**
     * No comment provided
     *
     * Hash: 0xAE032F8BBA959E90 | Since: 1207
     */
    function standGuard(ped, pos, heading) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskStandGuard(_ped, pos.x, pos.y, pos.z, heading);
    }
    task_1.standGuard = standGuard;
    /**
     * Makes the specified ped stand still for (time) milliseconds.
     *
     * Hash: 0x919BE13EED931959 | Since: 1207
     */
    function standStill(ped, time) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskStandStill(_ped, time);
    }
    task_1.standStill = standStill;
    /**
     * No comment provided
     *
     * Hash: 0x4D1F61FC34AF3CD1 | Since: 1207
     */
    function startScenarioAtPosition(ped, scenarioHash, pos, heading, duration, sittingScenario, teleport) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof scenarioHash === 'string')
            scenarioHash = misc.getHashKey(scenarioHash);
        return TaskStartScenarioAtPosition(_ped, scenarioHash, pos.x, pos.y, pos.z, heading, duration, sittingScenario, teleport, 0, false);
    }
    task_1.startScenarioAtPosition = startScenarioAtPosition;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
     * Params: duration in milliseconds
     *
     * conditionalHash (optionally):
     * 0 = play random conditional anim.
     * Every conditional anim has requirements to play it.
     * If requirements are not met, ped plays random allowed conditional anim or can be stuck.
     * For example, this scenario type has possible conditional anim WORLD_HUMAN_LEAN_BACK_WALL_SMOKING_MALE_D, but it can not be played by player, because condition is set to NOT be CAIConditionIsPlayer (check file amb_rest.meta and amb_rest_CA.meta with OPENIV to clarify requirements).
     *
     * Hash: 0x524B54361229154F | Since: 1207
     */
    function startScenarioInPlaceHash(ped, scenarioHash, duration, playEnterAnim, conditionalHash, heading) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof scenarioHash === 'string')
            scenarioHash = misc.getHashKey(scenarioHash);
        if (typeof conditionalHash === 'string')
            conditionalHash = misc.getHashKey(conditionalHash);
        TaskStartScenarioInPlaceHash(_ped, scenarioHash, duration, playEnterAnim, conditionalHash, heading, false);
    }
    task_1.startScenarioInPlaceHash = startScenarioInPlaceHash;
    /**
     * Makes the ped run to take cover
     *
     * Hash: 0xE5DA8615A6180789 | Since: 1207
     */
    function stayInCover(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskStayInCover(_ped);
    }
    task_1.stayInCover = stayInCover;
    /**
     * No comment provided
     *
     * Hash: 0xED27560703F37258 | Since: 1207
     */
    function stopLeadingHorse(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskStopLeadingHorse(_ped);
    }
    task_1.stopLeadingHorse = stopLeadingHorse;
    /**
     * Baits: see 0x9B0C7FA063E67629
     *
     * Hash: 0x2C28AC30A72722DA | Since: 1207
     */
    function swapFishingBait(ped, withoutBuoy) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskSwapFishingBait(_ped, withoutBuoy);
    }
    task_1.swapFishingBait = swapFishingBait;
    /**
     * No comment provided
     *
     * Hash: 0xA21C51255B205245 | Since: 1207
     */
    function swapWeapon(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskSwapWeapon(_ped, undefined, undefined, undefined, undefined);
    }
    task_1.swapWeapon = swapWeapon;
    /**
     * No comment provided
     *
     * Hash: 0x7285951DBF6B5A51 | Since: 1207
     */
    function throwProjectile(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskThrowProjectile(_ped, undefined, undefined, undefined);
    }
    task_1.throwProjectile = throwProjectile;
    /**
     * duration in milliseconds
     *
     * Hash: 0x1DDA930A0AC38571 | Since: 1207
     */
    function turnPedToFaceCoord(ped, pos, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskTurnPedToFaceCoord(_ped, pos.x, pos.y, pos.z, duration);
    }
    task_1.turnPedToFaceCoord = turnPedToFaceCoord;
    /**
     * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
     *
     * Hash: 0x5AD23D40115353AC | Since: 1207
     */
    function turnPedToFaceEntity(ped, targetEntity, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        TaskTurnPedToFaceEntity(_ped, _targetEntity, duration, 0, 0, 0);
    }
    task_1.turnPedToFaceEntity = turnPedToFaceEntity;
    /**
     * No comment provided
     *
     * Hash: 0x84179419DBDD36F2 | Since: 1207
     */
    function turnToFaceClosestPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskTurnToFaceClosestPed(_ped, 0, 0, 0);
    }
    task_1.turnToFaceClosestPed = turnToFaceClosestPed;
    /**
     * No comment provided
     *
     * Hash: 0x9FDA1B3D7E7028B3 | Since: 1207
     */
    function useNearestScenarioChainToCoord(ped, pos, distance) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskUseNearestScenarioChainToCoord(_ped, pos.x, pos.y, pos.z, distance, false, false, false, false);
    }
    task_1.useNearestScenarioChainToCoord = useNearestScenarioChainToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x97A28E63F0BA5631 | Since: 1207
     */
    function useNearestScenarioChainToCoordWarp(ped, pos, distance) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskUseNearestScenarioChainToCoordWarp(_ped, pos.x, pos.y, pos.z, distance, false, false, false, false);
    }
    task_1.useNearestScenarioChainToCoordWarp = useNearestScenarioChainToCoordWarp;
    /**
     * No comment provided
     *
     * Hash: 0x58E2E0F23F6B76C3 | Since: 1207
     */
    function useNearestScenarioToCoordWarp(ped, pos, distance, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskUseNearestScenarioToCoordWarp(_ped, pos.x, pos.y, pos.z, distance, duration, false, false, false, false);
    }
    task_1.useNearestScenarioToCoordWarp = useNearestScenarioToCoordWarp;
    /**
     * No comment provided
     *
     * Hash: 0x3774B03456DD6106 | Since: 1207
     */
    function useNearestTrainScenarioToCoordWarp(ped, pos, distance) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskUseNearestTrainScenarioToCoordWarp(_ped, pos.x, pos.y, pos.z, distance);
    }
    task_1.useNearestTrainScenarioToCoordWarp = useNearestTrainScenarioToCoordWarp;
    /**
     * No comment provided
     *
     * Hash: 0x14747F4A5971DE4E | Since: 1207
     */
    function useRandomScenarioInGroup(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskUseRandomScenarioInGroup(_ped, undefined, undefined, undefined, undefined);
    }
    task_1.useRandomScenarioInGroup = useRandomScenarioInGroup;
    /**
     * No comment provided
     *
     * Hash: 0xCCDAE6324B6A821C | Since: 1207
     */
    function useScenarioPoint(ped, scenario, conditionalAnim, p6) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p6 === 'string')
            p6 = misc.getHashKey(p6);
        TaskUseScenarioPoint(_ped, scenario, conditionalAnim, 0, false, false, p6, false, 0, false);
    }
    task_1.useScenarioPoint = useScenarioPoint;
    /**
     * No comment provided
     *
     * Hash: 0x447C1E9EF844BC0F | Since: 1207
     */
    function vehicleAimAtCoord(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskVehicleAimAtCoord(_ped, pos.x, pos.y, pos.z);
    }
    task_1.vehicleAimAtCoord = vehicleAimAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xE41885592B08B097 | Since: 1207
     */
    function vehicleAimAtPed(ped, target) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _target = target instanceof Ped ? target.handle() : target;
        TaskVehicleAimAtPed(_ped, _target);
    }
    task_1.vehicleAimAtPed = vehicleAimAtPed;
    /**
     * Old name: _TASK_VEHICLE_DRIVE_TO_POINT
     * flag: 524419 and 0 in shop_horse_shop R* Script
     *
     * Hash: 0x089FF2FB965F0A29 | Since: 1207
     */
    function vehicleDriveStraightToPoint(driver, vehicle, pos, flag) {
        const _driver = driver instanceof Ped ? driver.handle() : driver;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskVehicleDriveStraightToPoint(_driver, _vehicle, pos.x, pos.y, pos.z, 0, 0, flag);
    }
    task_1.vehicleDriveStraightToPoint = vehicleDriveStraightToPoint;
    /**
     * stopRange: how close vehicle will get to destination before stopping, default 4.0
     * straightLineDist: distance at which AI switches to heading for target directly instead of following nodes, default -1
     *
     * Hash: 0xE2A2AA2F659D77A7 | Since: 1207
     */
    function vehicleDriveToCoord(ped, vehicle, pos, speed, style, vehicleModel, drivingMode, stopRange, straightLineDist) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        TaskVehicleDriveToCoord(_ped, _vehicle, pos.x, pos.y, pos.z, speed, style, vehicleModel, drivingMode, stopRange, straightLineDist);
    }
    task_1.vehicleDriveToCoord = vehicleDriveToCoord;
    /**
     * flags: 67108864, 2097152, 524564, 524675 (eDrivingFlags)
     * p7 = 6 or 3
     * p8 = x coordinate
     * p9 - 8.f
     * p10 = false
     *
     * Hash: 0x7F241A0D14354583 | Since: 1207
     */
    function vehicleDriveToDestination(driver, vehicle, pos, speed, drivingFlags, stoppingRange1, stoppingRange2) {
        const _driver = driver instanceof Ped ? driver.handle() : driver;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskVehicleDriveToDestination(_driver, _vehicle, pos.x, pos.y, pos.z, speed, drivingFlags, 0, stoppingRange1, stoppingRange2, false);
    }
    task_1.vehicleDriveToDestination = vehicleDriveToDestination;
    /**
     * No comment provided
     *
     * Hash: 0x480142959D337D00 | Since: 1207
     */
    function vehicleDriveWander(ped, vehicle, speed, drivingStyle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskVehicleDriveWander(_ped, _vehicle, speed, drivingStyle);
    }
    task_1.vehicleDriveWander = vehicleDriveWander;
    /**
     * No comment provided
     *
     * Hash: 0x0FA6E4B75F302400 | Since: 1207
     */
    function vehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, noRoadsDistance) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        const _targetVehicle = targetVehicle instanceof Vehicle ? targetVehicle.localId() : targetVehicle;
        TaskVehicleEscort(_ped, _vehicle, _targetVehicle, mode, speed, drivingStyle, minDistance, 0, noRoadsDistance);
    }
    task_1.vehicleEscort = vehicleEscort;
    /**
     * No comment provided
     *
     * Hash: 0x3123FAA6DB1CF7ED | Since: 1207
     */
    function vehicleFollowWaypointRecording(ped, vehicle, drivingMode, eWaypoint, flag, stoppingDist) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return TaskVehicleFollowWaypointRecording(_ped, _vehicle, drivingMode, undefined, eWaypoint, flag, 0, false, stoppingDist, undefined);
    }
    task_1.vehicleFollowWaypointRecording = vehicleFollowWaypointRecording;
    /**
     * No comment provided
     *
     * Hash: 0x195AEEB13CEFE2EE | Since: 1207
     */
    function vehicleGotoNavmesh(ped, vehicle, pos, speed, behaviorFlag, stoppingRange) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskVehicleGotoNavmesh(_ped, _vehicle, pos.x, pos.y, pos.z, speed, behaviorFlag, stoppingRange);
    }
    task_1.vehicleGotoNavmesh = vehicleGotoNavmesh;
    /**
     * No comment provided
     *
     * Hash: 0x659427E0EF36BCDE | Since: 1207
     */
    function vehicleMission(driver, vehicle, vehicleTarget, missionType, DriveAgainstTraffic) {
        const _driver = driver instanceof Ped ? driver.handle() : driver;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        const _vehicleTarget = vehicleTarget instanceof Vehicle ? vehicleTarget.localId() : vehicleTarget;
        TaskVehicleMission(_driver, _vehicle, _vehicleTarget, missionType, 0, undefined, 0, 0, DriveAgainstTraffic);
    }
    task_1.vehicleMission = vehicleMission;
    /**
     * See TASK_VEHICLE_MISSION
     *
     * Hash: 0x9454528DF15D657A | Since: 1207
     */
    function vehicleMissionPedTarget(ped, vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, DriveAgainstTraffic) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        const _pedTarget = pedTarget instanceof Ped ? pedTarget.handle() : pedTarget;
        TaskVehicleMissionPedTarget(_ped, _vehicle, _pedTarget, mode, maxSpeed, drivingStyle, minDistance, 0, DriveAgainstTraffic);
    }
    task_1.vehicleMissionPedTarget = vehicleMissionPedTarget;
    /**
     * No comment provided
     *
     * Hash: 0x5190796ED39C9B6D | Since: 1207
     */
    function vehicleShootAtCoord(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskVehicleShootAtCoord(_ped, pos.x, pos.y, pos.z, 0);
    }
    task_1.vehicleShootAtCoord = vehicleShootAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x10AB107B887214D8 | Since: 1207
     */
    function vehicleShootAtPed(ped, target) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _target = target instanceof Ped ? target.handle() : target;
        TaskVehicleShootAtPed(_ped, _target, 0);
    }
    task_1.vehicleShootAtPed = vehicleShootAtPed;
    /**
     * Documentation from GTA V, might be the same in RDR:
     *
     * '1 - brake
     * '3 - brake + reverse
     * '4 - turn left 90 + braking
     * '5 - turn right 90 + braking
     * '6 - brake strong (handbrake?) until time ends
     * '7 - turn left + accelerate
     * '7 - turn right + accelerate
     * '9 - weak acceleration
     * '10 - turn left + restore wheel pos to center in the end
     * '11 - turn right + restore wheel pos to center in the end
     * '13 - turn left + go reverse
     * '14 - turn left + go reverse
     * '16 - crash the game after like 2 seconds :)
     * '17 - keep actual state, game crashed after few tries
     * '18 - game crash
     * '19 - strong brake + turn left/right
     * '20 - weak brake + turn left then turn right
     * '21 - weak brake + turn right then turn left
     * '22 - brake + reverse
     * '23 - accelerate fast
     * '24 - brake
     * '25 - brake turning left then when almost stopping it turns left more
     * '26 - brake turning right then when almost stopping it turns right more
     * '27 - brake until car stop or until time ends
     * '28 - brake + strong reverse acceleration
     * '30 - performs a burnout (brake until stop + brake and accelerate)
     * '31 - accelerate + handbrake
     * '32 - accelerate very strong
     *
     * Seems to be this:
     * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
     *
     * Hash: 0xC429DCEEB339E129 | Since: 1207
     */
    function vehicleTempAction(driver, vehicle, action, time) {
        const _driver = driver instanceof Ped ? driver.handle() : driver;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskVehicleTempAction(_driver, _vehicle, action, time);
    }
    task_1.vehicleTempAction = vehicleTempAction;
    /**
     * No comment provided
     *
     * Hash: 0x04ACFAC71E6858F9 | Since: 1207
     */
    function walkAway(ped, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskWalkAway(_ped, _entity);
    }
    task_1.walkAway = walkAway;
    /**
     * No comment provided
     *
     * Hash: 0x8AC76D1408731732 | Since: 1207
     */
    function wanderAndConverseWithPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskWanderAndConverseWithPed(_ped, undefined, undefined, undefined);
    }
    task_1.wanderAndConverseWithPed = wanderAndConverseWithPed;
    /**
     * No comment provided
     *
     * Hash: 0xE054346CA3A0F315 | Since: 1207
     */
    function wanderInArea(ped, pos, radius) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskWanderInArea(_ped, pos.x, pos.y, pos.z, radius, 0, 0, 0);
    }
    task_1.wanderInArea = wanderInArea;
    /**
     * No comment provided
     *
     * Hash: 0x9FDA168777B28424 | Since: 1207
     */
    function wanderInVolume(ped, volume) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskWanderInVolume(_ped, volume, 0, 0, 0);
    }
    task_1.wanderInVolume = wanderInVolume;
    /**
     * Makes ped walk around the area the params p1 p2 seems to not affect anything but p2 is either 0 or 1 and p1 is mostly 1.0 or ped heading
     *
     * Hash: 0xBB9CE077274F6A1B | Since: 1207
     */
    function wanderStandard(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskWanderStandard(_ped, 0, 0);
    }
    task_1.wanderStandard = wanderStandard;
    /**
     * No comment provided
     *
     * Hash: 0x527EA3DB8BC7F03B | Since: 1207
     */
    function wanderSwim(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskWanderSwim(_ped, undefined);
    }
    task_1.wanderSwim = wanderSwim;
    /**
     * No comment provided
     *
     * Hash: 0x9A7D091411C5F684 | Since: 1207
     */
    function warpPedIntoVehicle(ped, vehicle, seat) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskWarpPedIntoVehicle(_ped, _vehicle, seat);
    }
    task_1.warpPedIntoVehicle = warpPedIntoVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x7157B82D60E4BC46 | Since: 1207
     */
    function weapon(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskWeapon(_ped);
    }
    task_1.weapon = weapon;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/aud_ped_whistle_types.lua
     * p2: UNSPECIFIED
     *
     * Hash: 0xD6401A1B2F63BED6 | Since: 1207
     */
    function whistleAnim(ped, audPedWhistleType, p2) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof audPedWhistleType === 'string')
            audPedWhistleType = misc.getHashKey(audPedWhistleType);
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        TaskWhistleAnim(_ped, audPedWhistleType, p2);
    }
    task_1.whistleAnim = whistleAnim;
    /**
     * No comment provided
     *
     * Hash: 0x67406F2C8F87FC4F | Since: 1207
     */
    function uncuffPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        UncuffPed(_ped);
    }
    task_1.uncuffPed = uncuffPed;
    /**
     * getupSetHash: see nm_blend_out_sets.meta
     *
     * Hash: 0x79559BAD83CCD038 | Since: 1207
     */
    function unhogtiePed(ped, flags, getupSetHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof getupSetHash === 'string')
            getupSetHash = misc.getHashKey(getupSetHash);
        return UnhogtiePed(_ped, flags, getupSetHash, 0);
    }
    task_1.unhogtiePed = unhogtiePed;
    /**
     * No comment provided
     *
     * Hash: 0xA98FCAFD7893C834 | Since: 1207
     */
    function updateHandsUpDuration(ped, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        UpdateTaskHandsUpDuration(_ped, duration);
    }
    task_1.updateHandsUpDuration = updateHandsUpDuration;
    /**
     * No comment provided
     *
     * Hash: 0x5A353B8E6B1095B5 | Since: 1207
     */
    function useWaypointRecordingAsAssistedMovementRoute() {
        return UseWaypointRecordingAsAssistedMovementRoute(false, 0, 0, false);
    }
    task_1.useWaypointRecordingAsAssistedMovementRoute = useWaypointRecordingAsAssistedMovementRoute;
    /**
     * No comment provided
     *
     * Hash: 0x4D6D30AB18B0B089 | Since: 1207
     */
    function vehicleWaypointPlaybackGetIsPaused() {
        return VehicleWaypointPlaybackGetIsPaused(undefined);
    }
    task_1.vehicleWaypointPlaybackGetIsPaused = vehicleWaypointPlaybackGetIsPaused;
    /**
     * No comment provided
     *
     * Hash: 0x121F0593E0A431D7 | Since: 1207
     */
    function vehicleWaypointPlaybackOverrideSpeed(vehicle, speed) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        VehicleWaypointPlaybackOverrideSpeed(_vehicle, speed);
    }
    task_1.vehicleWaypointPlaybackOverrideSpeed = vehicleWaypointPlaybackOverrideSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x8A4E6AC373666BC5 | Since: 1207
     */
    function vehicleWaypointPlaybackPause(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        VehicleWaypointPlaybackPause(_vehicle);
    }
    task_1.vehicleWaypointPlaybackPause = vehicleWaypointPlaybackPause;
    /**
     * No comment provided
     *
     * Hash: 0xDC04FCAA7839D492 | Since: 1207
     */
    function vehicleWaypointPlaybackResume(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        VehicleWaypointPlaybackResume(_vehicle);
    }
    task_1.vehicleWaypointPlaybackResume = vehicleWaypointPlaybackResume;
    /**
     * No comment provided
     *
     * Hash: 0x5CEB25A7D2848963 | Since: 1207
     */
    function vehicleWaypointPlaybackUseDefaultSpeed(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        VehicleWaypointPlaybackUseDefaultSpeed(_vehicle);
    }
    task_1.vehicleWaypointPlaybackUseDefaultSpeed = vehicleWaypointPlaybackUseDefaultSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xD73A5D1F0325C71C | Since: 1207
     */
    function waypointPlaybackGetIsAiming(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return WaypointPlaybackGetIsAiming(_ped);
    }
    task_1.waypointPlaybackGetIsAiming = waypointPlaybackGetIsAiming;
    /**
     * No comment provided
     *
     * Hash: 0x701375A7D43F01CB | Since: 1207
     */
    function waypointPlaybackGetIsPaused(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return WaypointPlaybackGetIsPaused(_ped);
    }
    task_1.waypointPlaybackGetIsPaused = waypointPlaybackGetIsPaused;
    /**
     * No comment provided
     *
     * Hash: 0xA5B94DF8AF058F46 | Since: 1207
     */
    function waypointPlaybackGetIsShooting(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return WaypointPlaybackGetIsShooting(_ped);
    }
    task_1.waypointPlaybackGetIsShooting = waypointPlaybackGetIsShooting;
    /**
     * No comment provided
     *
     * Hash: 0x7D7D2B47FA788E85 | Since: 1207
     */
    function waypointPlaybackOverrideSpeed(ped, speed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        WaypointPlaybackOverrideSpeed(_ped, speed, undefined, undefined, undefined);
    }
    task_1.waypointPlaybackOverrideSpeed = waypointPlaybackOverrideSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x0F342546AA06FED5 | Since: 1207
     */
    function waypointPlaybackPause(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        WaypointPlaybackPause(_ped, undefined, undefined, undefined);
    }
    task_1.waypointPlaybackPause = waypointPlaybackPause;
    /**
     * No comment provided
     *
     * Hash: 0x244F70C84C547D2D | Since: 1207
     */
    function waypointPlaybackResume(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        WaypointPlaybackResume(_ped, false, 0, 0);
    }
    task_1.waypointPlaybackResume = waypointPlaybackResume;
    /**
     * No comment provided
     *
     * Hash: 0x8968400D900ED8B3 | Since: 1207
     */
    function waypointPlaybackStartAimingAtCoord() {
        WaypointPlaybackStartAimingAtCoord(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.waypointPlaybackStartAimingAtCoord = waypointPlaybackStartAimingAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x4F158205E0C74385 | Since: 1207
     */
    function waypointPlaybackStartAimingAtEntity() {
        WaypointPlaybackStartAimingAtEntity(undefined, undefined, undefined, undefined);
    }
    task_1.waypointPlaybackStartAimingAtEntity = waypointPlaybackStartAimingAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x20E330937C399D29 | Since: 1207
     */
    function waypointPlaybackStartAimingAtPed() {
        WaypointPlaybackStartAimingAtPed(undefined, undefined, undefined, undefined);
    }
    task_1.waypointPlaybackStartAimingAtPed = waypointPlaybackStartAimingAtPed;
    /**
     * No comment provided
     *
     * Hash: 0x057A25CFCC9DB671 | Since: 1207
     */
    function waypointPlaybackStartShootingAtCoord() {
        WaypointPlaybackStartShootingAtCoord(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.waypointPlaybackStartShootingAtCoord = waypointPlaybackStartShootingAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x4AF458F71C1196D2 | Since: 1207
     */
    function waypointPlaybackStartShootingAtEntity() {
        WaypointPlaybackStartShootingAtEntity(undefined, undefined, undefined, undefined, undefined);
    }
    task_1.waypointPlaybackStartShootingAtEntity = waypointPlaybackStartShootingAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0xE70BA7B90F8390DC | Since: 1207
     */
    function waypointPlaybackStartShootingAtPed() {
        WaypointPlaybackStartShootingAtPed(undefined, undefined, undefined, undefined, undefined);
    }
    task_1.waypointPlaybackStartShootingAtPed = waypointPlaybackStartShootingAtPed;
    /**
     * No comment provided
     *
     * Hash: 0x47EFA040EBB8E2EA | Since: 1207
     */
    function waypointPlaybackStopAimingOrShooting() {
        WaypointPlaybackStopAimingOrShooting(undefined);
    }
    task_1.waypointPlaybackStopAimingOrShooting = waypointPlaybackStopAimingOrShooting;
    /**
     * No comment provided
     *
     * Hash: 0x6599D834B12D0800 | Since: 1207
     */
    function waypointPlaybackUseDefaultSpeed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        WaypointPlaybackUseDefaultSpeed(_ped);
    }
    task_1.waypointPlaybackUseDefaultSpeed = waypointPlaybackUseDefaultSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xB629A298081F876F | Since: 1207
     */
    function waypointRecordingGetClosestWaypoint(pos, point) {
        return WaypointRecordingGetClosestWaypoint(pos.x, pos.y, pos.z, point);
    }
    task_1.waypointRecordingGetClosestWaypoint = waypointRecordingGetClosestWaypoint;
    /**
     * No comment provided
     *
     * Hash: 0x2FB897405C90B361 | Since: 1207
     */
    function waypointRecordingGetCoord(point) {
        return WaypointRecordingGetCoord(point);
    }
    task_1.waypointRecordingGetCoord = waypointRecordingGetCoord;
    /**
     * No comment provided
     *
     * Hash: 0x5343532C01A07234 | Since: 1207
     */
    function waypointRecordingGetNumPoints(points) {
        return WaypointRecordingGetNumPoints(points);
    }
    task_1.waypointRecordingGetNumPoints = waypointRecordingGetNumPoints;
    /**
     * No comment provided
     *
     * Hash: 0x005622AEBC33ACA9 | Since: 1207
     */
    function waypointRecordingGetSpeedAtPoint(point) {
        return WaypointRecordingGetSpeedAtPoint(point);
    }
    task_1.waypointRecordingGetSpeedAtPoint = waypointRecordingGetSpeedAtPoint;
    /**
     * No comment provided
     *
     * Hash: 0x0000A8ACDC2E1B6A | Since: 1207
     */
    function _0x0000A8ACDC2E1B6A() {
        Citizen.invokeNative('0x0000A8ACDC2E1B6A', undefined, undefined);
    }
    task_1._0x0000A8ACDC2E1B6A = _0x0000A8ACDC2E1B6A;
    /**
     * No comment provided
     *
     * Hash: 0x00FFE0F85253C572 | Since: 1207
     */
    function _0x00FFE0F85253C572() {
        return Citizen.invokeNative('0x00FFE0F85253C572', undefined);
    }
    task_1._0x00FFE0F85253C572 = _0x00FFE0F85253C572;
    /**
     * No comment provided
     *
     * Hash: 0x01AF8A3729231A43 | Since: 1207
     */
    function _0x01AF8A3729231A43() {
        return Citizen.invokeNative('0x01AF8A3729231A43', undefined);
    }
    task_1._0x01AF8A3729231A43 = _0x01AF8A3729231A43;
    /**
     * No comment provided
     *
     * Hash: 0x0365000D8BF86531 | Since: 1207
     */
    function _0x0365000D8BF86531() {
        return Citizen.invokeNative('0x0365000D8BF86531', undefined);
    }
    task_1._0x0365000D8BF86531 = _0x0365000D8BF86531;
    /**
     * No comment provided
     *
     * Hash: 0x03D741CB4052E26C | Since: 1232
     */
    function _0x03D741CB4052E26C() {
        return Citizen.invokeNative('0x03D741CB4052E26C', undefined);
    }
    task_1._0x03D741CB4052E26C = _0x03D741CB4052E26C;
    /**
     * No comment provided
     *
     * Hash: 0x06ECF3925BC2ABAE | Since: 1311
     */
    function setPedPathMayUseSlidingSurfaces(ped, useSlidingSurfaces) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x06ECF3925BC2ABAE', _ped, useSlidingSurfaces);
    }
    task_1.setPedPathMayUseSlidingSurfaces = setPedPathMayUseSlidingSurfaces;
    /**
     * No comment provided
     *
     * Hash: 0x098036CAB8373D36 | Since: 1207
     */
    function _0x098036CAB8373D36() {
        Citizen.invokeNative('0x098036CAB8373D36', undefined);
    }
    task_1._0x098036CAB8373D36 = _0x098036CAB8373D36;
    /**
     * No comment provided
     *
     * Hash: 0x098CAA6DBE7D8D82 | Since: 1207
     */
    function _0x098CAA6DBE7D8D82() {
        Citizen.invokeNative('0x098CAA6DBE7D8D82', undefined, undefined);
    }
    task_1._0x098CAA6DBE7D8D82 = _0x098CAA6DBE7D8D82;
    /**
     * No comment provided
     *
     * Hash: 0x0A98A362C5A19A43 | Since: 1207
     */
    function _0x0A98A362C5A19A43() {
        return Citizen.invokeNative('0x0A98A362C5A19A43', undefined);
    }
    task_1._0x0A98A362C5A19A43 = _0x0A98A362C5A19A43;
    /**
     * No comment provided
     *
     * Hash: 0x0D322AEF8878B8FE | Since: 1207
     */
    function _0x0D322AEF8878B8FE() {
        Citizen.invokeNative('0x0D322AEF8878B8FE', undefined, undefined);
    }
    task_1._0x0D322AEF8878B8FE = _0x0D322AEF8878B8FE;
    /**
     * No comment provided
     *
     * Hash: 0x0E184495B27BB57D | Since: 1207
     */
    function _0x0E184495B27BB57D() {
        Citizen.invokeNative('0x0E184495B27BB57D');
    }
    task_1._0x0E184495B27BB57D = _0x0E184495B27BB57D;
    /**
     * No comment provided
     *
     * Hash: 0x0F4F6C4CE471259D | Since: 1207
     */
    function _0x0F4F6C4CE471259D() {
        Citizen.invokeNative('0x0F4F6C4CE471259D', undefined, undefined);
    }
    task_1._0x0F4F6C4CE471259D = _0x0F4F6C4CE471259D;
    /**
     * No comment provided
     *
     * Hash: 0x0FE797DD9F70DFA6 | Since: 1207
     */
    function _0x0FE797DD9F70DFA6() {
        Citizen.invokeNative('0x0FE797DD9F70DFA6', undefined, undefined, undefined, undefined);
    }
    task_1._0x0FE797DD9F70DFA6 = _0x0FE797DD9F70DFA6;
    /**
     * No comment provided
     *
     * Hash: 0x10ADFDF07B7DFFBA | Since: 1207
     */
    function _0x10ADFDF07B7DFFBA() {
        return Citizen.invokeNative('0x10ADFDF07B7DFFBA', undefined, undefined, undefined);
    }
    task_1._0x10ADFDF07B7DFFBA = _0x10ADFDF07B7DFFBA;
    /**
     * No comment provided
     *
     * Hash: 0x10C44F633E2D6D9E | Since: 1207
     */
    function _0x10C44F633E2D6D9E() {
        Citizen.invokeNative('0x10C44F633E2D6D9E', undefined);
    }
    task_1._0x10C44F633E2D6D9E = _0x10C44F633E2D6D9E;
    /**
     * No comment provided
     *
     * Hash: 0x11C7CE1AE38911B5 | Since: 1207
     */
    function _0x11C7CE1AE38911B5() {
        return Citizen.invokeNative('0x11C7CE1AE38911B5', undefined);
    }
    task_1._0x11C7CE1AE38911B5 = _0x11C7CE1AE38911B5;
    /**
     * No comment provided
     *
     * Hash: 0x12990818C1D35886 | Since: 1207
     */
    function setPedPathPreferToAvoidFoliage(ped, preferAvoidFoliage) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x12990818C1D35886', _ped, preferAvoidFoliage, 0);
    }
    task_1.setPedPathPreferToAvoidFoliage = setPedPathPreferToAvoidFoliage;
    /**
     * No comment provided
     *
     * Hash: 0x141BC64C8D7C5529 | Since: 1207
     */
    function _0x141BC64C8D7C5529(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x141BC64C8D7C5529', _vehicle);
    }
    task_1._0x141BC64C8D7C5529 = _0x141BC64C8D7C5529;
    /**
     * No comment provided
     *
     * Hash: 0x152664AA3188B193 | Since: 1207
     */
    function _0x152664AA3188B193() {
        return Citizen.invokeNative('0x152664AA3188B193', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0x152664AA3188B193 = _0x152664AA3188B193;
    /**
     * No comment provided
     *
     * Hash: 0x1632EB9386CDBE64 | Since: 1207
     */
    function _0x1632EB9386CDBE64() {
        Citizen.invokeNative('0x1632EB9386CDBE64', undefined, undefined);
    }
    task_1._0x1632EB9386CDBE64 = _0x1632EB9386CDBE64;
    /**
     * No comment provided
     *
     * Hash: 0x19BC99C678FBA139 | Since: 1207
     */
    function _0x19BC99C678FBA139() {
        Citizen.invokeNative('0x19BC99C678FBA139', undefined, undefined, undefined);
    }
    task_1._0x19BC99C678FBA139 = _0x19BC99C678FBA139;
    /**
     * No comment provided
     *
     * Hash: 0x1A7D63CB1B0BB223 | Since: 1207
     */
    function _0x1A7D63CB1B0BB223() {
        Citizen.invokeNative('0x1A7D63CB1B0BB223', undefined);
    }
    task_1._0x1A7D63CB1B0BB223 = _0x1A7D63CB1B0BB223;
    /**
     * No comment provided
     *
     * Hash: 0x1AC5A8AB50CFAA33 | Since: 1207
     */
    function _0x1AC5A8AB50CFAA33() {
        return Citizen.invokeNative('0x1AC5A8AB50CFAA33', undefined);
    }
    task_1._0x1AC5A8AB50CFAA33 = _0x1AC5A8AB50CFAA33;
    /**
     * Checks whether a specified scenario is currently being used (actively played) by any entity (player or ped). Returns true if the scenario is already occupied, otherwise false.
     *
     * Hash: 0x1ACBC313966C21F3 | Since: 1436
     */
    function isScenarioInUse(scenarioHash) {
        if (typeof scenarioHash === 'string')
            scenarioHash = misc.getHashKey(scenarioHash);
        return Citizen.invokeNative('0x1ACBC313966C21F3', scenarioHash);
    }
    task_1.isScenarioInUse = isScenarioInUse;
    /**
     * No comment provided
     *
     * Hash: 0x1D125814EBC517EB | Since: 1207
     */
    function _0x1D125814EBC517EB() {
        Citizen.invokeNative('0x1D125814EBC517EB', undefined, undefined, undefined, undefined);
    }
    task_1._0x1D125814EBC517EB = _0x1D125814EBC517EB;
    /**
     * No comment provided
     *
     * Hash: 0x1ECF56C040FD839C | Since: 1207
     */
    function _0x1ECF56C040FD839C() {
        Citizen.invokeNative('0x1ECF56C040FD839C', undefined, undefined);
    }
    task_1._0x1ECF56C040FD839C = _0x1ECF56C040FD839C;
    /**
     * No comment provided
     *
     * Hash: 0x1F298C7BD30D1240 | Since: 1207
     */
    function _0x1F298C7BD30D1240(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x1F298C7BD30D1240', _ped);
    }
    task_1._0x1F298C7BD30D1240 = _0x1F298C7BD30D1240;
    /**
     * No comment provided
     *
     * Hash: 0x1F7A9A9C38C13A56 | Since: 1207
     */
    function _0x1F7A9A9C38C13A56() {
        return Citizen.invokeNative('0x1F7A9A9C38C13A56', undefined);
    }
    task_1._0x1F7A9A9C38C13A56 = _0x1F7A9A9C38C13A56;
    /**
     * No comment provided
     *
     * Hash: 0x2064B33F6E6B92D4 | Since: 1207
     */
    function _0x2064B33F6E6B92D4() {
        Citizen.invokeNative('0x2064B33F6E6B92D4', undefined, undefined, undefined, undefined);
    }
    task_1._0x2064B33F6E6B92D4 = _0x2064B33F6E6B92D4;
    /**
     * No comment provided
     *
     * Hash: 0x216343750545A486 | Since: 1207
     */
    function setPedPathPreferHorseWalkable(ped, preferHorseWalkable) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x216343750545A486', _ped, preferHorseWalkable, 0);
    }
    task_1.setPedPathPreferHorseWalkable = setPedPathPreferHorseWalkable;
    /**
     * No comment provided
     *
     * Hash: 0x22CD2C33ED4467A1 | Since: 1207
     */
    function _0x22CD2C33ED4467A1() {
        return Citizen.invokeNative('0x22CD2C33ED4467A1', undefined);
    }
    task_1._0x22CD2C33ED4467A1 = _0x22CD2C33ED4467A1;
    /**
     * No comment provided
     *
     * Hash: 0x22CDBF317C40A122 | Since: 1207
     */
    function _0x22CDBF317C40A122(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x22CDBF317C40A122', _ped);
    }
    task_1._0x22CDBF317C40A122 = _0x22CDBF317C40A122;
    /**
     * No comment provided
     *
     * Hash: 0x23767D80C7EED7C6 | Since: 1311
     */
    function _0x23767D80C7EED7C6() {
        Citizen.invokeNative('0x23767D80C7EED7C6', undefined, undefined);
    }
    task_1._0x23767D80C7EED7C6 = _0x23767D80C7EED7C6;
    /**
     * No comment provided
     *
     * Hash: 0x2416EC2F31F75266 | Since: 1207
     */
    function _0x2416EC2F31F75266(entity, targetEntity, duration) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
        Citizen.invokeNative('0x2416EC2F31F75266', _entity, _targetEntity, duration, undefined, undefined);
    }
    task_1._0x2416EC2F31F75266 = _0x2416EC2F31F75266;
    /**
     * No comment provided
     *
     * Hash: 0x244430C13BA5258E | Since: 1207
     */
    function _0x244430C13BA5258E() {
        return Citizen.invokeNative('0x244430C13BA5258E', undefined, undefined, undefined, undefined);
    }
    task_1._0x244430C13BA5258E = _0x244430C13BA5258E;
    /**
     * No comment provided
     *
     * Hash: 0x28EF780BDEA8A639 | Since: 1207
     */
    function _0x28EF780BDEA8A639(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x28EF780BDEA8A639', _ped, 0);
    }
    task_1._0x28EF780BDEA8A639 = _0x28EF780BDEA8A639;
    /**
     * No comment provided
     *
     * Hash: 0x2948235DB2058E99 | Since: 1207
     */
    function _0x2948235DB2058E99() {
        Citizen.invokeNative('0x2948235DB2058E99', undefined, undefined);
    }
    task_1._0x2948235DB2058E99 = _0x2948235DB2058E99;
    /**
     * No comment provided
     *
     * Hash: 0x2A10538D0A005E81 | Since: 1207
     */
    function _0x2A10538D0A005E81() {
        Citizen.invokeNative('0x2A10538D0A005E81', undefined, undefined);
    }
    task_1._0x2A10538D0A005E81 = _0x2A10538D0A005E81;
    /**
     * No comment provided
     *
     * Hash: 0x2B8AF29A78024BD3 | Since: 1207
     */
    function _0x2B8AF29A78024BD3() {
        Citizen.invokeNative('0x2B8AF29A78024BD3', undefined);
    }
    task_1._0x2B8AF29A78024BD3 = _0x2B8AF29A78024BD3;
    /**
     * No comment provided
     *
     * Hash: 0x2C497BDEF897C6DF | Since: 1207
     */
    function _0x2C497BDEF897C6DF() {
        return Citizen.invokeNative('0x2C497BDEF897C6DF', undefined);
    }
    task_1._0x2C497BDEF897C6DF = _0x2C497BDEF897C6DF;
    /**
     * No comment provided
     *
     * Hash: 0x2D657B10F211C572 | Since: 1207
     */
    function _0x2D657B10F211C572(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x2D657B10F211C572', _ped, 0);
    }
    task_1._0x2D657B10F211C572 = _0x2D657B10F211C572;
    /**
     * No comment provided
     *
     * Hash: 0x2E1D6D87346BB7D2 | Since: 1207
     */
    function _0x2E1D6D87346BB7D2() {
        Citizen.invokeNative('0x2E1D6D87346BB7D2', undefined, undefined, undefined, undefined);
    }
    task_1._0x2E1D6D87346BB7D2 = _0x2E1D6D87346BB7D2;
    /**
     * No comment provided
     *
     * Hash: 0x2EB977293923C723 | Since: 1207
     */
    function _0x2EB977293923C723() {
        Citizen.invokeNative('0x2EB977293923C723', undefined, undefined);
    }
    task_1._0x2EB977293923C723 = _0x2EB977293923C723;
    /**
     * No comment provided
     *
     * Hash: 0x30146C25686B7836 | Since: 1207
     */
    function _0x30146C25686B7836() {
        return Citizen.invokeNative('0x30146C25686B7836', undefined, undefined);
    }
    task_1._0x30146C25686B7836 = _0x30146C25686B7836;
    /**
     * No comment provided
     *
     * Hash: 0x30B391915538EBE2 | Since: 1207
     */
    function _0x30B391915538EBE2() {
        Citizen.invokeNative('0x30B391915538EBE2', undefined);
    }
    task_1._0x30B391915538EBE2 = _0x30B391915538EBE2;
    /**
     * No comment provided
     *
     * Hash: 0x31BB338F64D5C861 | Since: 1207
     */
    function _0x31BB338F64D5C861(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x31BB338F64D5C861', _ped, false);
    }
    task_1._0x31BB338F64D5C861 = _0x31BB338F64D5C861;
    /**
     * No comment provided
     *
     * Hash: 0x351F74ED6177EBE7 | Since: 1207
     */
    function _0x351F74ED6177EBE7() {
        return Citizen.invokeNative('0x351F74ED6177EBE7');
    }
    task_1._0x351F74ED6177EBE7 = _0x351F74ED6177EBE7;
    /**
     * No comment provided
     *
     * Hash: 0x358A1A751B335A11 | Since: 1207
     */
    function _0x358A1A751B335A11() {
        Citizen.invokeNative('0x358A1A751B335A11', undefined);
    }
    task_1._0x358A1A751B335A11 = _0x358A1A751B335A11;
    /**
     * No comment provided
     *
     * Hash: 0x370F57C47F68EBCA | Since: 1207
     */
    function _0x370F57C47F68EBCA() {
        return Citizen.invokeNative('0x370F57C47F68EBCA', undefined);
    }
    task_1._0x370F57C47F68EBCA = _0x370F57C47F68EBCA;
    /**
     * No comment provided
     *
     * Hash: 0x3ACC128510142B9D | Since: 1207
     */
    function _0x3ACC128510142B9D(waypointRecording, pos) {
        return Citizen.invokeNative('0x3ACC128510142B9D', waypointRecording, pos.x, pos.y, pos.z);
    }
    task_1._0x3ACC128510142B9D = _0x3ACC128510142B9D;
    /**
     * No comment provided
     *
     * Hash: 0x3BBEECC5B8F35318 | Since: 1207
     */
    function _0x3BBEECC5B8F35318() {
        Citizen.invokeNative('0x3BBEECC5B8F35318', undefined, undefined);
    }
    task_1._0x3BBEECC5B8F35318 = _0x3BBEECC5B8F35318;
    /**
     * Used for HORSE_REVIVE
     *
     * Hash: 0x3F8387DB1B9F31B7 | Since: 1207
     */
    function _0x3F8387DB1B9F31B7() {
        return Citizen.invokeNative('0x3F8387DB1B9F31B7', false);
    }
    task_1._0x3F8387DB1B9F31B7 = _0x3F8387DB1B9F31B7;
    /**
     * No comment provided
     *
     * Hash: 0x3FEB770D8ED9047A | Since: 1207
     */
    function _0x3FEB770D8ED9047A() {
        return Citizen.invokeNative('0x3FEB770D8ED9047A', undefined);
    }
    task_1._0x3FEB770D8ED9047A = _0x3FEB770D8ED9047A;
    /**
     * No comment provided
     *
     * Hash: 0x3FFCD7BBA074CC80 | Since: 1207
     */
    function _0x3FFCD7BBA074CC80(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x3FFCD7BBA074CC80', _ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0x3FFCD7BBA074CC80 = _0x3FFCD7BBA074CC80;
    /**
     * No comment provided
     *
     * Hash: 0x41323F4E0C4AE94B | Since: 1207
     */
    function _0x41323F4E0C4AE94B() {
        Citizen.invokeNative('0x41323F4E0C4AE94B', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0x41323F4E0C4AE94B = _0x41323F4E0C4AE94B;
    /**
     * No comment provided
     *
     * Hash: 0x4161648394262FDF | Since: 1207
     */
    function _0x4161648394262FDF() {
        Citizen.invokeNative('0x4161648394262FDF', undefined, undefined, undefined, undefined);
    }
    task_1._0x4161648394262FDF = _0x4161648394262FDF;
    /**
     * _SET_PED_*
     *
     * Hash: 0x41D1331AFAD5A091 | Since: 1207
     */
    function _0x41D1331AFAD5A091(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x41D1331AFAD5A091', _ped, 0, undefined);
    }
    task_1._0x41D1331AFAD5A091 = _0x41D1331AFAD5A091;
    /**
     * No comment provided
     *
     * Hash: 0x42CFD8FD8CC8DC69 | Since: 1207
     */
    function setPedPathNeverUseInteriors(ped, neverUseInteriors) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x42CFD8FD8CC8DC69', _ped, neverUseInteriors);
    }
    task_1.setPedPathNeverUseInteriors = setPedPathNeverUseInteriors;
    /**
     * No comment provided
     *
     * Hash: 0x450080DDEDB91258 | Since: 1207
     */
    function _0x450080DDEDB91258() {
        Citizen.invokeNative('0x450080DDEDB91258', undefined, undefined);
    }
    task_1._0x450080DDEDB91258 = _0x450080DDEDB91258;
    /**
     * No comment provided
     *
     * Hash: 0x4A7D73989F52EB37 | Since: 1207
     */
    function _0x4A7D73989F52EB37() {
        Citizen.invokeNative('0x4A7D73989F52EB37', undefined, undefined);
    }
    task_1._0x4A7D73989F52EB37 = _0x4A7D73989F52EB37;
    /**
     * No comment provided
     *
     * Hash: 0x4BA972D0E5AD8122 | Since: 1207
     */
    function _0x4BA972D0E5AD8122() {
        Citizen.invokeNative('0x4BA972D0E5AD8122', undefined, undefined);
    }
    task_1._0x4BA972D0E5AD8122 = _0x4BA972D0E5AD8122;
    /**
     * No comment provided
     *
     * Hash: 0x4E806A395D43A458 | Since: 1207
     */
    function _0x4E806A395D43A458() {
        Citizen.invokeNative('0x4E806A395D43A458', undefined);
    }
    task_1._0x4E806A395D43A458 = _0x4E806A395D43A458;
    /**
     * No comment provided
     *
     * Hash: 0x4F57397388E1DFF8 | Since: 1207
     */
    function _0x4F57397388E1DFF8() {
        Citizen.invokeNative('0x4F57397388E1DFF8');
    }
    task_1._0x4F57397388E1DFF8 = _0x4F57397388E1DFF8;
    /**
     * Only used in R* SP Scripts
     * Params: p4 = 1.0f - 30.0f
     *
     * Hash: 0x508F5053E3F6F0C4 | Since: 1207
     */
    function _0x508F5053E3F6F0C4(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x508F5053E3F6F0C4', _ped, pos.x, pos.y, pos.z, 0);
    }
    task_1._0x508F5053E3F6F0C4 = _0x508F5053E3F6F0C4;
    /**
     * No comment provided
     *
     * Hash: 0x50AA09A0DA64E73C | Since: 1207
     */
    function _0x50AA09A0DA64E73C() {
        Citizen.invokeNative('0x50AA09A0DA64E73C', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0x50AA09A0DA64E73C = _0x50AA09A0DA64E73C;
    /**
     * No comment provided
     *
     * Hash: 0x517D01BF27B682D1 | Since: 1207
     */
    function _0x517D01BF27B682D1(ped, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x517D01BF27B682D1', _ped, _entity, 0, 0, 0, 0, 0);
    }
    task_1._0x517D01BF27B682D1 = _0x517D01BF27B682D1;
    /**
     * No comment provided
     *
     * Hash: 0x5217B7B6DB78E1F3 | Since: 1207
     */
    function _0x5217B7B6DB78E1F3() {
        Citizen.invokeNative('0x5217B7B6DB78E1F3', undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0x5217B7B6DB78E1F3 = _0x5217B7B6DB78E1F3;
    /**
     * No comment provided
     *
     * Hash: 0x583AE9AF9CEE0958 | Since: 1207
     */
    function _0x583AE9AF9CEE0958(vehicle, pos) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return Citizen.invokeNative('0x583AE9AF9CEE0958', _vehicle, pos.x, pos.y, pos.z);
    }
    task_1._0x583AE9AF9CEE0958 = _0x583AE9AF9CEE0958;
    /**
     * No comment provided
     *
     * Hash: 0x5952DFA38FA529FE | Since: 1232
     */
    function _0x5952DFA38FA529FE() {
        return Citizen.invokeNative('0x5952DFA38FA529FE');
    }
    task_1._0x5952DFA38FA529FE = _0x5952DFA38FA529FE;
    /**
     * Returns the entity coverpoint with offset.
     *
     * Hash: 0x59872EA4CBD11C56 | Since: 1207
     */
    function getCoverpointFromEntityWithOffset(entity, xOffset, yOffset, zOffset, heading) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return Citizen.invokeNative('0x59872EA4CBD11C56', _entity, xOffset, yOffset, zOffset, heading, 0, 0, 0, 0);
    }
    task_1.getCoverpointFromEntityWithOffset = getCoverpointFromEntityWithOffset;
    /**
     * No comment provided
     *
     * Hash: 0x59AE5CA4FFB4E378 | Since: 1207
     */
    function _0x59AE5CA4FFB4E378() {
        return Citizen.invokeNative('0x59AE5CA4FFB4E378', undefined, undefined);
    }
    task_1._0x59AE5CA4FFB4E378 = _0x59AE5CA4FFB4E378;
    /**
     * No comment provided
     *
     * Hash: 0x59AEA4DC640814B9 | Since: 1207
     */
    function _0x59AEA4DC640814B9() {
        Citizen.invokeNative('0x59AEA4DC640814B9', undefined, undefined);
    }
    task_1._0x59AEA4DC640814B9 = _0x59AEA4DC640814B9;
    /**
     * No comment provided
     *
     * Hash: 0x5B68D0007D9C92EB | Since: 1207
     */
    function _0x5B68D0007D9C92EB() {
        Citizen.invokeNative('0x5B68D0007D9C92EB', undefined, undefined);
    }
    task_1._0x5B68D0007D9C92EB = _0x5B68D0007D9C92EB;
    /**
     * No comment provided
     *
     * Hash: 0x5D9B0BAAF04CF65B | Since: 1207
     */
    function _0x5D9B0BAAF04CF65B() {
        Citizen.invokeNative('0x5D9B0BAAF04CF65B', undefined, undefined, undefined, undefined);
    }
    task_1._0x5D9B0BAAF04CF65B = _0x5D9B0BAAF04CF65B;
    /**
     * No comment provided
     *
     * Hash: 0x5EA655F01D93667A | Since: 1207
     */
    function _0x5EA655F01D93667A() {
        return Citizen.invokeNative('0x5EA655F01D93667A', undefined);
    }
    task_1._0x5EA655F01D93667A = _0x5EA655F01D93667A;
    /**
     * No comment provided
     *
     * Hash: 0x615DC4A82E90BB48 | Since: 1207
     */
    function _0x615DC4A82E90BB48() {
        Citizen.invokeNative('0x615DC4A82E90BB48', undefined, undefined, undefined);
    }
    task_1._0x615DC4A82E90BB48 = _0x615DC4A82E90BB48;
    /**
     * No comment provided
     *
     * Hash: 0x640A602946A8C972 | Since: 1207
     */
    function _0x640A602946A8C972() {
        return Citizen.invokeNative('0x640A602946A8C972', undefined);
    }
    task_1._0x640A602946A8C972 = _0x640A602946A8C972;
    /**
     * No comment provided
     *
     * Hash: 0x643FD1556F621772 | Since: 1207
     */
    function _0x643FD1556F621772() {
        return Citizen.invokeNative('0x643FD1556F621772', undefined, undefined, undefined);
    }
    task_1._0x643FD1556F621772 = _0x643FD1556F621772;
    /**
     * No comment provided
     *
     * Hash: 0x651F0530083C0E5A | Since: 1207
     */
    function _0x651F0530083C0E5A() {
        Citizen.invokeNative('0x651F0530083C0E5A', undefined, undefined);
    }
    task_1._0x651F0530083C0E5A = _0x651F0530083C0E5A;
    /**
     * No comment provided
     *
     * Hash: 0x65D281985F2BDFC2 | Since: 1207
     */
    function _0x65D281985F2BDFC2() {
        Citizen.invokeNative('0x65D281985F2BDFC2', undefined, undefined);
    }
    task_1._0x65D281985F2BDFC2 = _0x65D281985F2BDFC2;
    /**
     * No comment provided
     *
     * Hash: 0x673A8779D229BA5A | Since: 1207
     */
    function _0x673A8779D229BA5A() {
        Citizen.invokeNative('0x673A8779D229BA5A', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0x673A8779D229BA5A = _0x673A8779D229BA5A;
    /**
     * Only used in R* SP Script beat_washed_ashore
     * `Returns Object prop for TASK::_TASK_ITEM_INTERACTION_2`
     *
     * Hash: 0x678D3226CF70B9C8 | Since: 1207
     */
    function _0x678D3226CF70B9C8(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x678D3226CF70B9C8', _ped, false);
    }
    task_1._0x678D3226CF70B9C8 = _0x678D3226CF70B9C8;
    /**
     * No comment provided
     *
     * Hash: 0x6A1AF481407BF6E9 | Since: 1207
     */
    function _0x6A1AF481407BF6E9() {
        Citizen.invokeNative('0x6A1AF481407BF6E9', undefined);
    }
    task_1._0x6A1AF481407BF6E9 = _0x6A1AF481407BF6E9;
    /**
     * No comment provided
     *
     * Hash: 0x6AFD84AEAA3EA538 | Since: 1207
     */
    function _0x6AFD84AEAA3EA538() {
        return Citizen.invokeNative('0x6AFD84AEAA3EA538', undefined);
    }
    task_1._0x6AFD84AEAA3EA538 = _0x6AFD84AEAA3EA538;
    /**
     * No comment provided
     *
     * Hash: 0x6AFDA2264925BD11 | Since: 1207
     */
    function _0x6AFDA2264925BD11() {
        Citizen.invokeNative('0x6AFDA2264925BD11', undefined);
    }
    task_1._0x6AFDA2264925BD11 = _0x6AFDA2264925BD11;
    /**
     * No comment provided
     *
     * Hash: 0x6BA606AB3A83BC4D | Since: 1207
     */
    function _0x6BA606AB3A83BC4D() {
        return Citizen.invokeNative('0x6BA606AB3A83BC4D', undefined);
    }
    task_1._0x6BA606AB3A83BC4D = _0x6BA606AB3A83BC4D;
    /**
     * No comment provided
     *
     * Hash: 0x6C269F673C47031E | Since: 1207
     */
    function _0x6C269F673C47031E() {
        return Citizen.invokeNative('0x6C269F673C47031E', undefined);
    }
    task_1._0x6C269F673C47031E = _0x6C269F673C47031E;
    /**
     * No comment provided
     *
     * Hash: 0x6C50B9DCCCA70023 | Since: 1207
     */
    function isEntityRevivable(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x6C50B9DCCCA70023', _ped);
    }
    task_1.isEntityRevivable = isEntityRevivable;
    /**
     * No comment provided
     *
     * Hash: 0x6DAC799857EF3F11 | Since: 1311
     */
    function _0x6DAC799857EF3F11() {
        return Citizen.invokeNative('0x6DAC799857EF3F11', undefined, undefined);
    }
    task_1._0x6DAC799857EF3F11 = _0x6DAC799857EF3F11;
    /**
     * No comment provided
     *
     * Hash: 0x722D6A49200174FE | Since: 1207
     */
    function _0x722D6A49200174FE() {
        Citizen.invokeNative('0x722D6A49200174FE', undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0x722D6A49200174FE = _0x722D6A49200174FE;
    /**
     * No comment provided
     *
     * Hash: 0x748D5E0D2A1A4C61 | Since: 1207
     */
    function _0x748D5E0D2A1A4C61() {
        Citizen.invokeNative('0x748D5E0D2A1A4C61', undefined, undefined, undefined);
    }
    task_1._0x748D5E0D2A1A4C61 = _0x748D5E0D2A1A4C61;
    /**
     * No comment provided
     *
     * Hash: 0x74F0209674864CBD | Since: 1207
     */
    function _0x74F0209674864CBD() {
        return Citizen.invokeNative('0x74F0209674864CBD');
    }
    task_1._0x74F0209674864CBD = _0x74F0209674864CBD;
    /**
     * No comment provided
     *
     * Hash: 0x756C7B4C43DF0422 | Since: 1207
     */
    function _0x756C7B4C43DF0422() {
        return Citizen.invokeNative('0x756C7B4C43DF0422', undefined);
    }
    task_1._0x756C7B4C43DF0422 = _0x756C7B4C43DF0422;
    /**
     * No comment provided
     *
     * Hash: 0x764DB5A48390FBAD | Since: 1207
     */
    function _0x764DB5A48390FBAD() {
        Citizen.invokeNative('0x764DB5A48390FBAD', undefined, undefined);
    }
    task_1._0x764DB5A48390FBAD = _0x764DB5A48390FBAD;
    /**
     * No comment provided
     *
     * Hash: 0x76610D12A838EBDE | Since: 1311
     */
    function _0x76610D12A838EBDE() {
        return Citizen.invokeNative('0x76610D12A838EBDE', undefined);
    }
    task_1._0x76610D12A838EBDE = _0x76610D12A838EBDE;
    /**
     * No comment provided
     *
     * Hash: 0x78D8C1D4EB80C588 | Since: 1207
     */
    function _0x78D8C1D4EB80C588() {
        return Citizen.invokeNative('0x78D8C1D4EB80C588', undefined);
    }
    task_1._0x78D8C1D4EB80C588 = _0x78D8C1D4EB80C588;
    /**
     * No comment provided
     *
     * Hash: 0x79197F7D2BB5E73A | Since: 1207
     */
    function _0x79197F7D2BB5E73A() {
        return Citizen.invokeNative('0x79197F7D2BB5E73A', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0x79197F7D2BB5E73A = _0x79197F7D2BB5E73A;
    /**
     * No comment provided
     *
     * Hash: 0x7C015D8BCEC72CF4 | Since: 1207
     */
    function setPedPathAvoidTraffic(ped, avoidTraffic) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x7C015D8BCEC72CF4', _ped, avoidTraffic);
    }
    task_1.setPedPathAvoidTraffic = setPedPathAvoidTraffic;
    /**
     * No comment provided
     *
     * Hash: 0x7CB99FADDE73CD1B | Since: 1311
     */
    function _0x7CB99FADDE73CD1B() {
        return Citizen.invokeNative('0x7CB99FADDE73CD1B', undefined);
    }
    task_1._0x7CB99FADDE73CD1B = _0x7CB99FADDE73CD1B;
    /**
     * No comment provided
     *
     * Hash: 0x7FB78B2199C10E92 | Since: 1207
     */
    function _0x7FB78B2199C10E92() {
        Citizen.invokeNative('0x7FB78B2199C10E92', undefined);
    }
    task_1._0x7FB78B2199C10E92 = _0x7FB78B2199C10E92;
    /**
     * No comment provided
     *
     * Hash: 0x801BD27403F3CBA0 | Since: 1207
     */
    function _0x801BD27403F3CBA0() {
        Citizen.invokeNative('0x801BD27403F3CBA0', undefined, undefined, undefined, undefined);
    }
    task_1._0x801BD27403F3CBA0 = _0x801BD27403F3CBA0;
    /**
     * No comment provided
     *
     * Hash: 0x816A3ACD265E2297 | Since: 1207
     */
    function _0x816A3ACD265E2297() {
        Citizen.invokeNative('0x816A3ACD265E2297', undefined, undefined);
    }
    task_1._0x816A3ACD265E2297 = _0x816A3ACD265E2297;
    /**
     * No comment provided
     *
     * Hash: 0x827A58CED9D4D5B4 | Since: 1207
     */
    function _0x827A58CED9D4D5B4() {
        Citizen.invokeNative('0x827A58CED9D4D5B4', undefined, undefined);
    }
    task_1._0x827A58CED9D4D5B4 = _0x827A58CED9D4D5B4;
    /**
     * No comment provided
     *
     * Hash: 0x82ED59F095056550 | Since: 1207
     */
    function _0x82ED59F095056550() {
        Citizen.invokeNative('0x82ED59F095056550', undefined, undefined);
    }
    task_1._0x82ED59F095056550 = _0x82ED59F095056550;
    /**
     * No comment provided
     *
     * Hash: 0x849791EBBDBA0362 | Since: 1207
     */
    function _0x849791EBBDBA0362() {
        return Citizen.invokeNative('0x849791EBBDBA0362', undefined);
    }
    task_1._0x849791EBBDBA0362 = _0x849791EBBDBA0362;
    /**
     * No comment provided
     *
     * Hash: 0x865732725536EE39 | Since: 1207
     */
    function _0x865732725536EE39() {
        return new Vector3(Citizen.invokeNative('0x865732725536EE39', undefined));
    }
    task_1._0x865732725536EE39 = _0x865732725536EE39;
    /**
     * No comment provided
     *
     * Hash: 0x8798CF6815B8FE0F | Since: 1207
     */
    function _0x8798CF6815B8FE0F() {
        Citizen.invokeNative('0x8798CF6815B8FE0F', undefined, undefined);
    }
    task_1._0x8798CF6815B8FE0F = _0x8798CF6815B8FE0F;
    /**
     * No comment provided
     *
     * Hash: 0x885D19AC2B6FBFF4 | Since: 1207
     */
    function _0x885D19AC2B6FBFF4() {
        Citizen.invokeNative('0x885D19AC2B6FBFF4', undefined, undefined);
    }
    task_1._0x885D19AC2B6FBFF4 = _0x885D19AC2B6FBFF4;
    /**
     * No comment provided
     *
     * Hash: 0x88FD60D846D9CD63 | Since: 1207
     */
    function _0x88FD60D846D9CD63(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x88FD60D846D9CD63', _ped);
    }
    task_1._0x88FD60D846D9CD63 = _0x88FD60D846D9CD63;
    /**
     * No comment provided
     *
     * Hash: 0x8B1FDF63C3193EDA | Since: 1207
     */
    function _0x8B1FDF63C3193EDA(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8B1FDF63C3193EDA', _ped, 0);
    }
    task_1._0x8B1FDF63C3193EDA = _0x8B1FDF63C3193EDA;
    /**
     * No comment provided
     *
     * Hash: 0x8BB283A7888AD1AD | Since: 1207
     */
    function setPedPathPreferToAvoidMud(ped, preferAvoidMud) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8BB283A7888AD1AD', _ped, preferAvoidMud, 0);
    }
    task_1.setPedPathPreferToAvoidMud = setPedPathPreferToAvoidMud;
    /**
     * No comment provided
     *
     * Hash: 0x8E1DDE26D270CC5E | Since: 1207
     */
    function _0x8E1DDE26D270CC5E() {
        Citizen.invokeNative('0x8E1DDE26D270CC5E', undefined, undefined);
    }
    task_1._0x8E1DDE26D270CC5E = _0x8E1DDE26D270CC5E;
    /**
     * No comment provided
     *
     * Hash: 0x8F8C84363810691A | Since: 1207
     */
    function _0x8F8C84363810691A() {
        Citizen.invokeNative('0x8F8C84363810691A', undefined, undefined);
    }
    task_1._0x8F8C84363810691A = _0x8F8C84363810691A;
    /**
     * No comment provided
     *
     * Hash: 0x9050DF2C53801208 | Since: 1207
     */
    function _0x9050DF2C53801208(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9050DF2C53801208', _ped, 0);
    }
    task_1._0x9050DF2C53801208 = _0x9050DF2C53801208;
    /**
     * No comment provided
     *
     * Hash: 0x90703A8F75EE4ABD | Since: 1207
     */
    function _0x90703A8F75EE4ABD() {
        return Citizen.invokeNative('0x90703A8F75EE4ABD', undefined, undefined);
    }
    task_1._0x90703A8F75EE4ABD = _0x90703A8F75EE4ABD;
    /**
     * No comment provided
     *
     * Hash: 0x908BB14BCE85C80E | Since: 1207
     */
    function _0x908BB14BCE85C80E() {
        return Citizen.invokeNative('0x908BB14BCE85C80E', undefined);
    }
    task_1._0x908BB14BCE85C80E = _0x908BB14BCE85C80E;
    /**
     * No comment provided
     *
     * Hash: 0x91CB5E431F579BA1 | Since: 1207
     */
    function _0x91CB5E431F579BA1() {
        return new Vector3(Citizen.invokeNative('0x91CB5E431F579BA1', undefined));
    }
    task_1._0x91CB5E431F579BA1 = _0x91CB5E431F579BA1;
    /**
     * No comment provided
     *
     * Hash: 0x920684BE432875B1 | Since: 1311
     */
    function _0x920684BE432875B1() {
        return Citizen.invokeNative('0x920684BE432875B1', undefined);
    }
    task_1._0x920684BE432875B1 = _0x920684BE432875B1;
    /**
     * No comment provided
     *
     * Hash: 0x9420FB11B8D77948 | Since: 1207
     */
    function _0x9420FB11B8D77948() {
        return Citizen.invokeNative('0x9420FB11B8D77948', undefined);
    }
    task_1._0x9420FB11B8D77948 = _0x9420FB11B8D77948;
    /**
     * No comment provided
     *
     * Hash: 0x954451EA2D2120FB | Since: 1207
     */
    function _0x954451EA2D2120FB() {
        Citizen.invokeNative('0x954451EA2D2120FB', undefined, undefined);
    }
    task_1._0x954451EA2D2120FB = _0x954451EA2D2120FB;
    /**
     * No comment provided
     *
     * Hash: 0x9585FF23C4B8EDE0 | Since: 1207
     */
    function _0x9585FF23C4B8EDE0() {
        Citizen.invokeNative('0x9585FF23C4B8EDE0', undefined, undefined);
    }
    task_1._0x9585FF23C4B8EDE0 = _0x9585FF23C4B8EDE0;
    /**
     * No comment provided
     *
     * Hash: 0x9667CCE29BFA0780 | Since: 1207
     */
    function _0x9667CCE29BFA0780() {
        Citizen.invokeNative('0x9667CCE29BFA0780', undefined);
    }
    task_1._0x9667CCE29BFA0780 = _0x9667CCE29BFA0780;
    /**
     * No comment provided
     *
     * Hash: 0x974DA3408DEC4E79 | Since: 1207
     */
    function _0x974DA3408DEC4E79() {
        return Citizen.invokeNative('0x974DA3408DEC4E79', undefined);
    }
    task_1._0x974DA3408DEC4E79 = _0x974DA3408DEC4E79;
    /**
     * No comment provided
     *
     * Hash: 0x9ADDBB9242179D56 | Since: 1207
     */
    function _0x9ADDBB9242179D56(_object, ped) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x9ADDBB9242179D56', __object, _ped);
    }
    task_1._0x9ADDBB9242179D56 = _0x9ADDBB9242179D56;
    /**
     * No comment provided
     *
     * Hash: 0x9B6A58FDB0024F12 | Since: 1207
     */
    function _0x9B6A58FDB0024F12() {
        Citizen.invokeNative('0x9B6A58FDB0024F12', undefined, undefined);
    }
    task_1._0x9B6A58FDB0024F12 = _0x9B6A58FDB0024F12;
    /**
     * No comment provided
     *
     * Hash: 0x9C8F42A5D1859DC1 | Since: 1207
     */
    function _0x9C8F42A5D1859DC1() {
        Citizen.invokeNative('0x9C8F42A5D1859DC1', undefined);
    }
    task_1._0x9C8F42A5D1859DC1 = _0x9C8F42A5D1859DC1;
    /**
     * No comment provided
     *
     * Hash: 0x9EBD34958AB6F824 | Since: 1207
     */
    function _0x9EBD34958AB6F824() {
        Citizen.invokeNative('0x9EBD34958AB6F824', undefined);
    }
    task_1._0x9EBD34958AB6F824 = _0x9EBD34958AB6F824;
    /**
     * No comment provided
     *
     * Hash: 0x9FF5F9B24E870748 | Since: 1207
     */
    function _0x9FF5F9B24E870748() {
        return Citizen.invokeNative('0x9FF5F9B24E870748', undefined);
    }
    task_1._0x9FF5F9B24E870748 = _0x9FF5F9B24E870748;
    /**
     * No comment provided
     *
     * Hash: 0xA052608A12559BBB | Since: 1207
     */
    function _0xA052608A12559BBB() {
        Citizen.invokeNative('0xA052608A12559BBB', undefined, undefined);
    }
    task_1._0xA052608A12559BBB = _0xA052608A12559BBB;
    /**
     * No comment provided
     *
     * Hash: 0xA21AA2F0C2180125 | Since: 1207
     */
    function _0xA21AA2F0C2180125() {
        Citizen.invokeNative('0xA21AA2F0C2180125', undefined, undefined);
    }
    task_1._0xA21AA2F0C2180125 = _0xA21AA2F0C2180125;
    /**
     * No comment provided
     *
     * Hash: 0xA263ADBBC8056214 | Since: 1207
     */
    function _0xA263ADBBC8056214() {
        Citizen.invokeNative('0xA263ADBBC8056214', undefined, undefined);
    }
    task_1._0xA263ADBBC8056214 = _0xA263ADBBC8056214;
    /**
     * No comment provided
     *
     * Hash: 0xA42DC7919159CCCF | Since: 1207
     */
    function _0xA42DC7919159CCCF() {
        Citizen.invokeNative('0xA42DC7919159CCCF', undefined);
    }
    task_1._0xA42DC7919159CCCF = _0xA42DC7919159CCCF;
    /**
     * No comment provided
     *
     * Hash: 0xA6A76D666A281F2D | Since: 1207
     */
    function _0xA6A76D666A281F2D(item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        Citizen.invokeNative('0xA6A76D666A281F2D', undefined, item);
    }
    task_1._0xA6A76D666A281F2D = _0xA6A76D666A281F2D;
    /**
     * _SET_SCENARIO_*
     *
     * Hash: 0xA7479FB665361EDB | Since: 1207
     */
    function _0xA7479FB665361EDB() {
        Citizen.invokeNative('0xA7479FB665361EDB', undefined, undefined);
    }
    task_1._0xA7479FB665361EDB = _0xA7479FB665361EDB;
    /**
     * No comment provided
     *
     * Hash: 0xA9E7672F8C6C6F74 | Since: 1207
     */
    function _0xA9E7672F8C6C6F74() {
        return Citizen.invokeNative('0xA9E7672F8C6C6F74', undefined);
    }
    task_1._0xA9E7672F8C6C6F74 = _0xA9E7672F8C6C6F74;
    /**
     * No comment provided
     *
     * Hash: 0xAC5045AB7F1A34FD | Since: 1207
     */
    function _0xAC5045AB7F1A34FD() {
        return Citizen.invokeNative('0xAC5045AB7F1A34FD', undefined);
    }
    task_1._0xAC5045AB7F1A34FD = _0xAC5045AB7F1A34FD;
    /**
     * _SET_SCENARIO_POINT_*
     *
     * Hash: 0xADC45010BC17AF0E | Since: 1207
     */
    function _0xADC45010BC17AF0E() {
        Citizen.invokeNative('0xADC45010BC17AF0E', undefined, undefined);
    }
    task_1._0xADC45010BC17AF0E = _0xADC45010BC17AF0E;
    /**
     * No comment provided
     *
     * Hash: 0xAF2EF28CE3084505 | Since: 1207
     */
    function _0xAF2EF28CE3084505() {
        Citizen.invokeNative('0xAF2EF28CE3084505', undefined, undefined, undefined, undefined);
    }
    task_1._0xAF2EF28CE3084505 = _0xAF2EF28CE3084505;
    /**
     * No comment provided
     *
     * Hash: 0xB2D15D3551FE4FAE | Since: 1311
     */
    function _0xB2D15D3551FE4FAE() {
        Citizen.invokeNative('0xB2D15D3551FE4FAE', undefined);
    }
    task_1._0xB2D15D3551FE4FAE = _0xB2D15D3551FE4FAE;
    /**
     * No comment provided
     *
     * Hash: 0xB2F47A1AFDFCC595 | Since: 1207
     */
    function _0xB2F47A1AFDFCC595() {
        Citizen.invokeNative('0xB2F47A1AFDFCC595', undefined, undefined);
    }
    task_1._0xB2F47A1AFDFCC595 = _0xB2F47A1AFDFCC595;
    /**
     * All Interaction states
     * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION#-4-item_interaction_state_name--item_interaction_propid--1
     *
     * Hash: 0xB35370D5353995CB | Since: 1207
     */
    function setItemInteractionState(ped, itemInteractionState) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof itemInteractionState === 'string')
            itemInteractionState = misc.getHashKey(itemInteractionState);
        Citizen.invokeNative('0xB35370D5353995CB', _ped, itemInteractionState, 0);
    }
    task_1.setItemInteractionState = setItemInteractionState;
    /**
     * No comment provided
     *
     * Hash: 0xB520DBDA7FCF573F | Since: 1207
     */
    function _0xB520DBDA7FCF573F(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xB520DBDA7FCF573F', _ped);
    }
    task_1._0xB520DBDA7FCF573F = _0xB520DBDA7FCF573F;
    /**
     * No comment provided
     *
     * Hash: 0xB79817DB31FF72B9 | Since: 1207
     */
    function _0xB79817DB31FF72B9() {
        Citizen.invokeNative('0xB79817DB31FF72B9', undefined, undefined);
    }
    task_1._0xB79817DB31FF72B9 = _0xB79817DB31FF72B9;
    /**
     * No comment provided
     *
     * Hash: 0xB8E213D02F37947D | Since: 1207
     */
    function _0xB8E213D02F37947D() {
        Citizen.invokeNative('0xB8E213D02F37947D', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0xB8E213D02F37947D = _0xB8E213D02F37947D;
    /**
     * No comment provided
     *
     * Hash: 0xB8E3486D107F4194 | Since: 1207
     */
    function _0xB8E3486D107F4194() {
        Citizen.invokeNative('0xB8E3486D107F4194', undefined, undefined);
    }
    task_1._0xB8E3486D107F4194 = _0xB8E3486D107F4194;
    /**
     * list of carriable configs  https://gist.github.com/WesternGamer/95a1f8daf02520cad2bf96af6d957e70
     *
     * Hash: 0xB8F52A3F84A7CC59 | Since: 1207
     */
    function hasCarriableConfigHashLoaded(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return Citizen.invokeNative('0xB8F52A3F84A7CC59', hash);
    }
    task_1.hasCarriableConfigHashLoaded = hasCarriableConfigHashLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xBAAB791AA72C2821 | Since: 1207
     */
    function _0xBAAB791AA72C2821() {
        Citizen.invokeNative('0xBAAB791AA72C2821', undefined, undefined);
    }
    task_1._0xBAAB791AA72C2821 = _0xBAAB791AA72C2821;
    /**
     * No comment provided
     *
     * Hash: 0xBC3F847AE2C3DC65 | Since: 1207
     */
    function _0xBC3F847AE2C3DC65() {
        Citizen.invokeNative('0xBC3F847AE2C3DC65', undefined, undefined);
    }
    task_1._0xBC3F847AE2C3DC65 = _0xBC3F847AE2C3DC65;
    /**
     * No comment provided
     *
     * Hash: 0xBD1C3C0F271C39D3 | Since: 1207
     */
    function _0xBD1C3C0F271C39D3() {
        Citizen.invokeNative('0xBD1C3C0F271C39D3', undefined, undefined);
    }
    task_1._0xBD1C3C0F271C39D3 = _0xBD1C3C0F271C39D3;
    /**
     * No comment provided
     *
     * Hash: 0xBD70108D01875299 | Since: 1207
     */
    function _0xBD70108D01875299() {
        return Citizen.invokeNative('0xBD70108D01875299', undefined);
    }
    task_1._0xBD70108D01875299 = _0xBD70108D01875299;
    /**
     * No comment provided
     *
     * Hash: 0xBEDBE39B5FD98FD6 | Since: 1207
     */
    function _0xBEDBE39B5FD98FD6(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xBEDBE39B5FD98FD6', _ped);
    }
    task_1._0xBEDBE39B5FD98FD6 = _0xBEDBE39B5FD98FD6;
    /**
     * No comment provided
     *
     * Hash: 0xBEEFBB608D2AA68A | Since: 1207
     */
    function _0xBEEFBB608D2AA68A() {
        Citizen.invokeNative('0xBEEFBB608D2AA68A', undefined);
    }
    task_1._0xBEEFBB608D2AA68A = _0xBEEFBB608D2AA68A;
    /**
     * No comment provided
     *
     * Hash: 0xC6170856E54557B2 | Since: 1207
     */
    function setPedPathPreferStayInWater(ped, preferStayInWater) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xC6170856E54557B2', _ped, preferStayInWater, 0);
    }
    task_1.setPedPathPreferStayInWater = setPedPathPreferStayInWater;
    /**
     * No comment provided
     *
     * Hash: 0xCE4E669400E5F8AA | Since: 1207
     */
    function _0xCE4E669400E5F8AA() {
        Citizen.invokeNative('0xCE4E669400E5F8AA', undefined, undefined, undefined, undefined);
    }
    task_1._0xCE4E669400E5F8AA = _0xCE4E669400E5F8AA;
    /**
     * No comment provided
     *
     * Hash: 0xD0ABC4EA3B5E21A0 | Since: 1311
     */
    function _0xD0ABC4EA3B5E21A0() {
        return Citizen.invokeNative('0xD0ABC4EA3B5E21A0', undefined, undefined);
    }
    task_1._0xD0ABC4EA3B5E21A0 = _0xD0ABC4EA3B5E21A0;
    /**
     * No comment provided
     *
     * Hash: 0xD508FA229F1C4900 | Since: 1207
     */
    function _0xD508FA229F1C4900() {
        return Citizen.invokeNative('0xD508FA229F1C4900', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0xD508FA229F1C4900 = _0xD508FA229F1C4900;
    /**
     * No comment provided
     *
     * Hash: 0xD999E379265A4501 | Since: 1207
     */
    function _0xD999E379265A4501() {
        Citizen.invokeNative('0xD999E379265A4501', undefined, undefined, undefined);
    }
    task_1._0xD999E379265A4501 = _0xD999E379265A4501;
    /**
     * No comment provided
     *
     * Hash: 0xDE0C8B145EA466FF | Since: 1207
     */
    function _0xDE0C8B145EA466FF() {
        Citizen.invokeNative('0xDE0C8B145EA466FF', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1._0xDE0C8B145EA466FF = _0xDE0C8B145EA466FF;
    /**
     * No comment provided
     *
     * Hash: 0xDF56A2B50C04DEA4 | Since: 1207
     */
    function _0xDF56A2B50C04DEA4() {
        return Citizen.invokeNative('0xDF56A2B50C04DEA4', undefined, undefined);
    }
    task_1._0xDF56A2B50C04DEA4 = _0xDF56A2B50C04DEA4;
    /**
     * No comment provided
     *
     * Hash: 0xDF94844D474F31E5 | Since: 1207
     */
    function _0xDF94844D474F31E5(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xDF94844D474F31E5', _ped);
    }
    task_1._0xDF94844D474F31E5 = _0xDF94844D474F31E5;
    /**
     * No comment provided
     *
     * Hash: 0xE01C8DC8EDD28D31 | Since: 1207
     */
    function _0xE01C8DC8EDD28D31() {
        Citizen.invokeNative('0xE01C8DC8EDD28D31', undefined, undefined);
    }
    task_1._0xE01C8DC8EDD28D31 = _0xE01C8DC8EDD28D31;
    /**
     * No comment provided
     *
     * Hash: 0xE01F55B2896F6B37 | Since: 1207
     */
    function _0xE01F55B2896F6B37() {
        Citizen.invokeNative('0xE01F55B2896F6B37', undefined, undefined);
    }
    task_1._0xE01F55B2896F6B37 = _0xE01F55B2896F6B37;
    /**
     * No comment provided
     *
     * Hash: 0xE05A5D39BE6E93AF | Since: 1207
     */
    function _0xE05A5D39BE6E93AF() {
        Citizen.invokeNative('0xE05A5D39BE6E93AF', undefined);
    }
    task_1._0xE05A5D39BE6E93AF = _0xE05A5D39BE6E93AF;
    /**
     * No comment provided
     *
     * Hash: 0xE116F6F2DA2D777E | Since: 1207
     */
    function _0xE116F6F2DA2D777E() {
        return new Vector3(Citizen.invokeNative('0xE116F6F2DA2D777E', undefined));
    }
    task_1._0xE116F6F2DA2D777E = _0xE116F6F2DA2D777E;
    /**
     * No comment provided
     *
     * Hash: 0xE1C105E6BBA48270 | Since: 1207
     */
    function _0xE1C105E6BBA48270() {
        return Citizen.invokeNative('0xE1C105E6BBA48270');
    }
    task_1._0xE1C105E6BBA48270 = _0xE1C105E6BBA48270;
    /**
     * No comment provided
     *
     * Hash: 0xE2CF104ADD49D4BF | Since: 1207
     */
    function _0xE2CF104ADD49D4BF() {
        Citizen.invokeNative('0xE2CF104ADD49D4BF', undefined);
    }
    task_1._0xE2CF104ADD49D4BF = _0xE2CF104ADD49D4BF;
    /**
     * No comment provided
     *
     * Hash: 0xE55478C5EDF70AC2 | Since: 1207
     */
    function _0xE55478C5EDF70AC2() {
        return Citizen.invokeNative('0xE55478C5EDF70AC2', undefined);
    }
    task_1._0xE55478C5EDF70AC2 = _0xE55478C5EDF70AC2;
    /**
     * No comment provided
     *
     * Hash: 0xE5831AA1E2FD147C | Since: 1207
     */
    function _0xE5831AA1E2FD147C() {
        Citizen.invokeNative('0xE5831AA1E2FD147C', undefined);
    }
    task_1._0xE5831AA1E2FD147C = _0xE5831AA1E2FD147C;
    /**
     * No comment provided
     *
     * Hash: 0xE62754D09354F6CF | Since: 1207
     */
    function _0xE62754D09354F6CF() {
        return Citizen.invokeNative('0xE62754D09354F6CF', undefined);
    }
    task_1._0xE62754D09354F6CF = _0xE62754D09354F6CF;
    /**
     * No comment provided
     *
     * Hash: 0xE69FDA40AAC3EFC0 | Since: 1207
     */
    function _0xE69FDA40AAC3EFC0() {
        Citizen.invokeNative('0xE69FDA40AAC3EFC0', undefined, undefined);
    }
    task_1._0xE69FDA40AAC3EFC0 = _0xE69FDA40AAC3EFC0;
    /**
     * No comment provided
     *
     * Hash: 0xE6A151364C600B24 | Since: 1207
     */
    function _0xE6A151364C600B24() {
        return Citizen.invokeNative('0xE6A151364C600B24', undefined);
    }
    task_1._0xE6A151364C600B24 = _0xE6A151364C600B24;
    /**
     * No comment provided
     *
     * Hash: 0xE7BBC4E56B989449 | Since: 1207
     */
    function _0xE7BBC4E56B989449() {
        return Citizen.invokeNative('0xE7BBC4E56B989449', undefined, undefined, undefined);
    }
    task_1._0xE7BBC4E56B989449 = _0xE7BBC4E56B989449;
    /**
     * No comment provided
     *
     * Hash: 0xE9225354FB7437A7 | Since: 1207
     */
    function _0xE9225354FB7437A7() {
        Citizen.invokeNative('0xE9225354FB7437A7', undefined, undefined);
    }
    task_1._0xE9225354FB7437A7 = _0xE9225354FB7437A7;
    /**
     * No comment provided
     *
     * Hash: 0xE9A6400D1A0E7A55 | Since: 1207
     */
    function _0xE9A6400D1A0E7A55() {
        return Citizen.invokeNative('0xE9A6400D1A0E7A55', undefined);
    }
    task_1._0xE9A6400D1A0E7A55 = _0xE9A6400D1A0E7A55;
    /**
     * No comment provided
     *
     * Hash: 0xEAF87DA2BE78A15B | Since: 1207
     */
    function _0xEAF87DA2BE78A15B() {
        Citizen.invokeNative('0xEAF87DA2BE78A15B', undefined, undefined);
    }
    task_1._0xEAF87DA2BE78A15B = _0xEAF87DA2BE78A15B;
    /**
     * No comment provided
     *
     * Hash: 0xEB67D4E056C85A81 | Since: 1207
     */
    function _0xEB67D4E056C85A81() {
        return Citizen.invokeNative('0xEB67D4E056C85A81', undefined);
    }
    task_1._0xEB67D4E056C85A81 = _0xEB67D4E056C85A81;
    /**
     * No comment provided
     *
     * Hash: 0xEBA2081E0A5F4D17 | Since: 1207
     */
    function _0xEBA2081E0A5F4D17() {
        Citizen.invokeNative('0xEBA2081E0A5F4D17', undefined);
    }
    task_1._0xEBA2081E0A5F4D17 = _0xEBA2081E0A5F4D17;
    /**
     * No comment provided
     *
     * Hash: 0xEC516FE805D2CB2D | Since: 1207
     */
    function _0xEC516FE805D2CB2D() {
        Citizen.invokeNative('0xEC516FE805D2CB2D', undefined);
    }
    task_1._0xEC516FE805D2CB2D = _0xEC516FE805D2CB2D;
    /**
     * No comment provided
     *
     * Hash: 0xEFD875C2791EBEFD | Since: 1207
     */
    function _0xEFD875C2791EBEFD() {
        return Citizen.invokeNative('0xEFD875C2791EBEFD', undefined, undefined, undefined, undefined);
    }
    task_1._0xEFD875C2791EBEFD = _0xEFD875C2791EBEFD;
    /**
     * No comment provided
     *
     * Hash: 0xF3C3503276F4A034 | Since: 1436
     */
    function _0xF3C3503276F4A034(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xF3C3503276F4A034', _entity, undefined);
    }
    task_1._0xF3C3503276F4A034 = _0xF3C3503276F4A034;
    /**
     * No comment provided
     *
     * Hash: 0xF40A109B4B79A848 | Since: 1207
     */
    function _0xF40A109B4B79A848() {
        Citizen.invokeNative('0xF40A109B4B79A848', undefined, undefined, undefined);
    }
    task_1._0xF40A109B4B79A848 = _0xF40A109B4B79A848;
    /**
     * No comment provided
     *
     * Hash: 0xF718931A82EEB898 | Since: 1207
     */
    function _0xF718931A82EEB898() {
        Citizen.invokeNative('0xF718931A82EEB898');
    }
    task_1._0xF718931A82EEB898 = _0xF718931A82EEB898;
    /**
     * No comment provided
     *
     * Hash: 0xF948F4356F010F11 | Since: 1207
     */
    function _0xF948F4356F010F11() {
        Citizen.invokeNative('0xF948F4356F010F11', undefined, undefined, undefined);
    }
    task_1._0xF948F4356F010F11 = _0xF948F4356F010F11;
    /**
     * No comment provided
     *
     * Hash: 0xF97F462779B31786 | Since: 1207
     */
    function _0xF97F462779B31786() {
        return Citizen.invokeNative('0xF97F462779B31786', undefined);
    }
    task_1._0xF97F462779B31786 = _0xF97F462779B31786;
    /**
     * No comment provided
     *
     * Hash: 0xFA30E2254461ADEB | Since: 1207
     */
    function _0xFA30E2254461ADEB() {
        Citizen.invokeNative('0xFA30E2254461ADEB', undefined, undefined);
    }
    task_1._0xFA30E2254461ADEB = _0xFA30E2254461ADEB;
    /**
     * No comment provided
     *
     * Hash: 0xFC7F71CF49F70B6B | Since: 1207
     */
    function _0xFC7F71CF49F70B6B() {
        Citizen.invokeNative('0xFC7F71CF49F70B6B', undefined);
    }
    task_1._0xFC7F71CF49F70B6B = _0xFC7F71CF49F70B6B;
    /**
     * No comment provided
     *
     * Hash: 0xFDECCA06E8B81346 | Since: 1207
     */
    function _0xFDECCA06E8B81346(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xFDECCA06E8B81346', _ped);
    }
    task_1._0xFDECCA06E8B81346 = _0xFDECCA06E8B81346;
    /**
     * No comment provided
     *
     * Hash: 0xFE5D28B9B7837CC1 | Since: 1207
     */
    function _0xFE5D28B9B7837CC1() {
        return Citizen.invokeNative('0xFE5D28B9B7837CC1', undefined, undefined, undefined, undefined);
    }
    task_1._0xFE5D28B9B7837CC1 = _0xFE5D28B9B7837CC1;
    /**
     * https://gist.github.com/WesternGamer/95a1f8daf02520cad2bf96af6d957e70 carriable config list
     *
     * Hash: 0xFF745B0346E19E2C | Since: 1207
     */
    function loadCarriableConfigHash(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        Citizen.invokeNative('0xFF745B0346E19E2C', hash);
    }
    task_1.loadCarriableConfigHash = loadCarriableConfigHash;
    /**
     * No comment provided
     *
     * Hash: 0xFF8AFCA532B500D4 | Since: 1207
     */
    function _0xFF8AFCA532B500D4() {
        Citizen.invokeNative('0xFF8AFCA532B500D4', undefined, undefined);
    }
    task_1._0xFF8AFCA532B500D4 = _0xFF8AFCA532B500D4;
    /**
     * No comment provided
     *
     * Hash: 0xFFB520A3E16F7B7B | Since: 1207
     */
    function _0xFFB520A3E16F7B7B(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xFFB520A3E16F7B7B', _ped, 0);
    }
    task_1._0xFFB520A3E16F7B7B = _0xFFB520A3E16F7B7B;
    /**
     * No comment provided
     *
     * Hash: 0xEB2ED1DC3AEC0654 | Since: 1207
     */
    function addCoverBlockingVolume(volume) {
        AddCoverBlockingVolume(volume, false, false, false, false);
    }
    task_1.addCoverBlockingVolume = addCoverBlockingVolume;
    /**
     * No comment provided
     *
     * Hash: 0xE8F1A5B4CED3725A | Since: 1207
     */
    function addFleeTargetCoords(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        AddFleeTargetCoords(_ped, pos.x, pos.y, pos.z, 0);
    }
    task_1.addFleeTargetCoords = addFleeTargetCoords;
    /**
     * No comment provided
     *
     * Hash: 0x8360C47380B6F351 | Since: 1207
     */
    function associatePropWithScenario(scenario, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return AssociatePropWithScenario(scenario, _entity, false);
    }
    task_1.associatePropWithScenario = associatePropWithScenario;
    /**
     * groundSetting: 0: spawn on ground, 2 (1?): do not spawn on ground
     * p7: -1 in R* Scripts
     * Returns compositeId
     *
     * Hash: 0x5B4BBE80AD5972DC | Since: 1207
     */
    function createHerbComposites(asset, pos, heading, groundSetting) {
        if (typeof asset === 'string')
            asset = misc.getHashKey(asset);
        return CreateHerbComposites(asset, pos.x, pos.y, pos.z, heading, groundSetting, undefined, 0);
    }
    task_1.createHerbComposites = createHerbComposites;
    /**
     * No comment provided
     *
     * Hash: 0x5C885E0978B6AD60 | Since: 1207
     */
    function createWaypointPath(nodes) {
        return CreateWaypointPath(undefined, nodes, 0);
    }
    task_1.createWaypointPath = createWaypointPath;
    /**
     * No comment provided
     *
     * Hash: 0x7981037A96E7D174 | Since: 1207
     */
    function cuffPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        CuffPed(_ped);
    }
    task_1.cuffPed = cuffPed;
    /**
     * Params: p1 is always false except in script nb_egg_protector
     *
     * Hash: 0x5758B1EE0C3FD4AC | Since: 1207
     */
    function deletePatchObjectsFromHerbComposites(compositeId) {
        DeletePatchObjectsFromHerbComposites(compositeId, false);
    }
    task_1.deletePatchObjectsFromHerbComposites = deletePatchObjectsFromHerbComposites;
    /**
     * No comment provided
     *
     * Hash: 0x81948DFE4F5A0283 | Since: 1207
     */
    function deleteScenarioPoint(scenario) {
        DeleteScenarioPoint(scenario);
    }
    task_1.deleteScenarioPoint = deleteScenarioPoint;
    /**
     * No comment provided
     *
     * Hash: 0x36D188AECB26094B | Since: 1207
     */
    function detachCarriablePed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        DetachCarriablePed(_ped);
    }
    task_1.detachCarriablePed = detachCarriablePed;
    /**
     * No comment provided
     *
     * Hash: 0x6EF4E31B4D5D2DA0 | Since: 1207
     */
    function disassociatePropFromScenario(scenario) {
        return DisassociatePropFromScenario(scenario);
    }
    task_1.disassociatePropFromScenario = disassociatePropFromScenario;
    /**
     * No comment provided
     *
     * Hash: 0x76E98B52369A289C | Since: 1207
     */
    function doesScenarioGroupExistHash(scenarioGroup) {
        if (typeof scenarioGroup === 'string')
            scenarioGroup = misc.getHashKey(scenarioGroup);
        return DoesScenarioGroupExistHash(scenarioGroup);
    }
    task_1.doesScenarioGroupExistHash = doesScenarioGroupExistHash;
    /**
     * No comment provided
     *
     * Hash: 0xEA31F199A73801D3 | Since: 1207
     */
    function doesScenarioPointHaveProps(scenario) {
        return DoesScenarioPointHaveProps(scenario);
    }
    task_1.doesScenarioPointHaveProps = doesScenarioPointHaveProps;
    /**
     * No comment provided
     *
     * Hash: 0xE47DD64B9F02677D | Since: 1207
     */
    function findModelForItem(item) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return FindModelForItem(item);
    }
    task_1.findModelForItem = findModelForItem;
    /**
     * Flowers, Stalks or whatever the composite has
     *
     * Hash: 0x96C6ED22FB742C3E | Since: 1207
     */
    function getHerbCompositeNumEntities(compositeId) {
        return GetHerbCompositeNumEntities(compositeId);
    }
    task_1.getHerbCompositeNumEntities = getHerbCompositeNumEntities;
    /**
     * No comment provided
     *
     * Hash: 0x4687E69D258BBE41 | Since: 1207
     */
    function getHogtieEscapeTimer(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetHogtieEscapeTimer(_ped);
    }
    task_1.getHogtieEscapeTimer = getHogtieEscapeTimer;
    /**
     * item hashes: PRIMARYITEM, P_MUGCOFFEE01X_PH_R_HAND, P_BOTTLEBEER01X_PH_R_HAND
     * http://prntscr.com/1qtp3bz
     * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
     *
     * Hash: 0x05A0100EA714DB68 | Since: 1207
     */
    function getItemInteractionEntityFromPed(ped, item) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return GetItemInteractionEntityFromPed(_ped, item);
    }
    task_1.getItemInteractionEntityFromPed = getItemInteractionEntityFromPed;
    /**
     * No comment provided
     *
     * Hash: 0xED1F514AF4732258 | Since: 1207
     */
    function getLedHorseFromPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetLedHorseFromPed(_ped);
    }
    task_1.getLedHorseFromPed = getLedHorseFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x1948BBE561A2375A | Since: 1207
     */
    function getPedIsIgnoringDeadBodies(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedIsIgnoringDeadBodies(_ped);
    }
    task_1.getPedIsIgnoringDeadBodies = getPedIsIgnoringDeadBodies;
    /**
     * No comment provided
     *
     * Hash: 0x5BA659955369B0E2 | Since: 1207
     */
    function getPedUsingScenarioPoint(scenario) {
        return GetPedUsingScenarioPoint(scenario);
    }
    task_1.getPedUsingScenarioPoint = getPedUsingScenarioPoint;
    /**
     * Returns m_eContainerState
     *
     * Hash: 0xB219612B5568E9EC | Since: 1207
     */
    function getScenarioContainerOpeningState(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return GetScenarioContainerOpeningState(_entity);
    }
    task_1.getScenarioContainerOpeningState = getScenarioContainerOpeningState;
    /**
     * Params: p1 is always true in R* Scripts
     *
     * Hash: 0xA8452DD321607029 | Since: 1207
     */
    function getScenarioPointCoords(scenario) {
        return new Vector3(GetScenarioPointCoords(scenario, false));
    }
    task_1.getScenarioPointCoords = getScenarioPointCoords;
    /**
     * Note: The current name for this native is the old name of 0x295514F198EFD0CA
     * Old name for this native: _GET_ENTITY_SCENARIO_POINT_IS_ATTACHED_TO
     *
     * Hash: 0x7467165EE97D3C68 | Since: 1207
     */
    function getScenarioPointEntity(scenario) {
        return GetScenarioPointEntity(scenario);
    }
    task_1.getScenarioPointEntity = getScenarioPointEntity;
    /**
     * Params: p1 is always true in R* Scripts
     *
     * Hash: 0xB93EA7184BAA85C3 | Since: 1207
     */
    function getScenarioPointHeading(scenario) {
        return GetScenarioPointHeading(scenario, false);
    }
    task_1.getScenarioPointHeading = getScenarioPointHeading;
    /**
     * No comment provided
     *
     * Hash: 0xDF7993356F52359A | Since: 1207
     */
    function getScenarioPointPedIsUsing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetScenarioPointPedIsUsing(_ped, false);
    }
    task_1.getScenarioPointPedIsUsing = getScenarioPointPedIsUsing;
    /**
     * No comment provided
     *
     * Hash: 0x6718F40313A2B5A6 | Since: 1207
     */
    function getScenarioPointRadius(scenario) {
        return GetScenarioPointRadius(scenario);
    }
    task_1.getScenarioPointRadius = getScenarioPointRadius;
    /**
     * No comment provided
     *
     * Hash: 0xA92450B5AE687AAF | Since: 1207
     */
    function getScenarioPointType(scenario) {
        return GetScenarioPointType(scenario);
    }
    task_1.getScenarioPointType = getScenarioPointType;
    /**
     * No comment provided
     *
     * Hash: 0x2D0571BB55879DA2 | Since: 1207
     */
    function getScenarioPointTypePedIsUsing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetScenarioPointTypePedIsUsing(_ped);
    }
    task_1.getScenarioPointTypePedIsUsing = getScenarioPointTypePedIsUsing;
    /**
     * No comment provided
     *
     * Hash: 0xA710DC5D25F8B942 | Since: 1207
     */
    function getScriptActionTime(ped, task) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof task === 'string')
            task = misc.getHashKey(task);
        return GetScriptTaskActionTime(_ped, task);
    }
    task_1.getScriptActionTime = getScriptActionTime;
    /**
     * Fishing Research: https://pastebin.com/NmK5ZLVs
     * Only used in R* Scripts fishing_core and av_fishing_river
     *
     * Hash: 0xF3735ACD11ACD500 | Since: 1207
     */
    function getFishing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTaskFishing(_ped);
    }
    task_1.getFishing = getFishing;
    /**
     * Returns hash of the underlying move network def, see move_networks.xml
     * https://alloc8or.re/rdr3/doc/misc/move_networks.txt
     *
     * Hash: 0xCACC2F9D994504B7 | Since: 1207
     */
    function getMoveNetworkId(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTaskMoveNetworkId(_ped);
    }
    task_1.getMoveNetworkId = getMoveNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x844CEEE428EA35B0 | Since: 1207
     */
    function getMoveNetworkPhaseFloat(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetTaskMoveNetworkPhaseFloat(_ped);
    }
    task_1.getMoveNetworkPhaseFloat = getMoveNetworkPhaseFloat;
    /**
     * Returns true while a hat is being picked up
     * _IS_A* - _IS_D*
     *
     * Hash: 0x11CD066F54DA0133 | Since: 1207
     */
    function isHatBeingPickedUp(hatObject) {
        const _hatObject = hatObject instanceof Object ? hatObject.handle() : hatObject;
        return IsHatBeingPickedUp(_hatObject);
    }
    task_1.isHatBeingPickedUp = isHatBeingPickedUp;
    /**
     * Returns true while a hat is being picked up. Similar to 0x11CD066F54DA0133
     * _IS_A* - _IS_D*
     *
     * Hash: 0x4ECCC2815CA79AE2 | Since: 1207
     */
    function isHatBeingPickedUp2(hatObject) {
        const _hatObject = hatObject instanceof Object ? hatObject.handle() : hatObject;
        return IsHatBeingPickedUp2(_hatObject);
    }
    task_1.isHatBeingPickedUp2 = isHatBeingPickedUp2;
    /**
     * No comment provided
     *
     * Hash: 0xA9CC7856D52DBD25 | Since: 1207
     */
    function isPedArrestingAnyPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedArrestingAnyPed(_ped);
    }
    task_1.isPedArrestingAnyPed = isPedArrestingAnyPed;
    /**
     * No comment provided
     *
     * Hash: 0xC8B29D18022EA2B7 | Since: 1207
     */
    function isPedDuelling(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedDuelling(_ped);
    }
    task_1.isPedDuelling = isPedDuelling;
    /**
     * No comment provided
     *
     * Hash: 0xEFC4303DDC6E60D3 | Since: 1207
     */
    function isPedLeadingHorse(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedLeadingHorse(_ped);
    }
    task_1.isPedLeadingHorse = isPedLeadingHorse;
    /**
     * No comment provided
     *
     * Hash: 0xDCC374913DE6AAA6 | Since: 1207
     */
    function isScenarioGroupEnabledHash(scenarioGroup) {
        if (typeof scenarioGroup === 'string')
            scenarioGroup = misc.getHashKey(scenarioGroup);
        return IsScenarioGroupEnabledHash(scenarioGroup);
    }
    task_1.isScenarioGroupEnabledHash = isScenarioGroupEnabledHash;
    /**
     * No comment provided
     *
     * Hash: 0x0CC36D4156006509 | Since: 1207
     */
    function isScenarioPointActive(scenario) {
        return IsScenarioPointActive(scenario);
    }
    task_1.isScenarioPointActive = isScenarioPointActive;
    /**
     * No comment provided
     *
     * Hash: 0x8569C38D2FB80650 | Since: 1207
     */
    function isScenarioPointFlagSet(scenario, flag) {
        return IsScenarioPointFlagSet(scenario, flag);
    }
    task_1.isScenarioPointFlagSet = isScenarioPointFlagSet;
    /**
     * No comment provided
     *
     * Hash: 0x78B4567E18B54480 | Since: 1207
     */
    function makeObjectCarriable(_object) {
        const __object = _object instanceof Object ? _object.handle() : _object;
        MakeObjectCarriable(__object);
    }
    task_1.makeObjectCarriable = makeObjectCarriable;
    /**
     * No comment provided
     *
     * Hash: 0x1A52076D26E09004 | Since: 1207
     */
    function pedFishingrodHookEntity(ped, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        PedFishingrodHookEntity(_ped, _entity);
    }
    task_1.pedFishingrodHookEntity = pedFishingrodHookEntity;
    /**
     * Used with 'P_BODYPARTARMFLOAT02X' model in fishing_core.c
     *
     * Hash: 0xCE71C2F9BAA3F975 | Since: 1207
     */
    function pedFishingrodHookObject(ped, _object) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const __object = _object instanceof Object ? _object.handle() : _object;
        PedFishingrodHookObject(_ped, __object);
    }
    task_1.pedFishingrodHookObject = pedFishingrodHookObject;
    /**
     * No comment provided
     *
     * Hash: 0x02EBBB3989B7E695 | Since: 1207
     */
    function pedIsInScenarioBase(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return PedIsInScenarioBase(_ped);
    }
    task_1.pedIsInScenarioBase = pedIsInScenarioBase;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/objects/composites
     *
     * Hash: 0x73F0D0327BFA0812 | Since: 1207
     */
    function requestHerbCompositeAsset(asset) {
        if (typeof asset === 'string')
            asset = misc.getHashKey(asset);
        return RequestHerbCompositeAsset(asset);
    }
    task_1.requestHerbCompositeAsset = requestHerbCompositeAsset;
    /**
     * No comment provided
     *
     * Hash: 0x2E20878FD208A68E | Since: 1207
     */
    function resetScenarioForEntity(scenario, entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        ResetScenarioForEntity(scenario, _entity);
    }
    task_1.resetScenarioForEntity = resetScenarioForEntity;
    /**
     * No comment provided
     *
     * Hash: 0x5A40040BB5AE3EA2 | Since: 1207
     */
    function resetScenarioScript(scenario) {
        ResetScenarioScript(scenario);
    }
    task_1.resetScenarioScript = resetScenarioScript;
    /**
     * Baits: p_fishHook02x, p_baitBread01x, p_baitCorn01x, p_baitCheese01x, p_baitWorm01x, p_baitCricket01x, p_crawdad01x, p_finisheDragonfly01x, p_finisdFishlure01x, p_finishdCrawd01x, p_finisheDragonflyLegendary01x, p_finisdFishlureLegendary01x, p_finishdCrawdLegendary01x, p_lgoc_spinner_v4
     *
     * Hash: 0x9B0C7FA063E67629 | Since: 1207
     */
    function setFishingBait(ped, withoutBuoy, instantly) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetFishingBait(_ped, withoutBuoy, instantly);
    }
    task_1.setFishingBait = setFishingBait;
    /**
     * Sets the time it takes for a hogtied ped to escape
     * -1.0f for ped to never escape
     *
     * Hash: 0xAB591AE6B48B913E | Since: 1207
     */
    function setHogtieEscapeTimer(ped, time) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetHogtieEscapeTimer(_ped, time);
    }
    task_1.setHogtieEscapeTimer = setHogtieEscapeTimer;
    /**
     * No comment provided
     *
     * Hash: 0x34C0010188D7C54A | Since: 1207
     */
    function setPedClearAimingInTheAir(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedClearAimingInTheAir(_ped, undefined);
    }
    task_1.setPedClearAimingInTheAir = setPedClearAimingInTheAir;
    /**
     * No comment provided
     *
     * Hash: 0x013A7BA5015C1372 | Since: 1207
     */
    function setPedIgnoreDeadBodies(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedIgnoreDeadBodies(_ped, toggle);
    }
    task_1.setPedIgnoreDeadBodies = setPedIgnoreDeadBodies;
    /**
     * _SET_PED_PATH_P*
     *
     * Hash: 0x70F7A1EAB1AE3AA8 | Since: 1232
     */
    function setPedPathLadderCostModifier(ped, modifier) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathLadderCostModifier(_ped, modifier);
    }
    task_1.setPedPathLadderCostModifier = setPedPathLadderCostModifier;
    /**
     * No comment provided
     *
     * Hash: 0x9DE63896B176EA94 | Since: 1207
     */
    function setPedPathMayEnterDeepWater(ped, mayEnterDeepWater) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedPathMayEnterDeepWater(_ped, mayEnterDeepWater);
    }
    task_1.setPedPathMayEnterDeepWater = setPedPathMayEnterDeepWater;
    /**
     * Opens/closes containers: ChestDugUp
     *
     * Hash: 0x188F8071F244B9B8 | Since: 1207
     */
    function setScenarioContainerOpeningState(entity, open) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        SetScenarioContainerOpeningState(_entity, open);
    }
    task_1.setScenarioContainerOpeningState = setScenarioContainerOpeningState;
    /**
     * No comment provided
     *
     * Hash: 0x9925EDDB6EAB88CD | Since: 1207
     */
    function setScenarioGroupEnabledHash(scenarioGroup, toggle) {
        if (typeof scenarioGroup === 'string')
            scenarioGroup = misc.getHashKey(scenarioGroup);
        SetScenarioGroupEnabledHash(scenarioGroup, toggle);
    }
    task_1.setScenarioGroupEnabledHash = setScenarioGroupEnabledHash;
    /**
     * No comment provided
     *
     * Hash: 0xEEE4829304F93EEE | Since: 1207
     */
    function setScenarioPointActive(scenario, active) {
        SetScenarioPointActive(scenario, active);
    }
    task_1.setScenarioPointActive = setScenarioPointActive;
    /**
     * No comment provided
     *
     * Hash: 0x2056AB38DF06825C | Since: 1207
     */
    function setScenarioPointCoords(scenario, pos) {
        SetScenarioPointCoords(scenario, pos.x, pos.y, pos.z, false);
    }
    task_1.setScenarioPointCoords = setScenarioPointCoords;
    /**
     * flag: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CScenarioPointFlags__Flags
     *
     * Hash: 0x5AF19B6CC2115D34 | Since: 1207
     */
    function setScenarioPointFlag(scenario, flag, value) {
        SetScenarioPointFlag(scenario, flag, value);
    }
    task_1.setScenarioPointFlag = setScenarioPointFlag;
    /**
     * No comment provided
     *
     * Hash: 0xD3A0DA8F91612C6E | Since: 1207
     */
    function setScenarioPointHeading(scenario, heading) {
        SetScenarioPointHeading(scenario, heading, false);
    }
    task_1.setScenarioPointHeading = setScenarioPointHeading;
    /**
     * No comment provided
     *
     * Hash: 0xC47D9080A9A8856A | Since: 1207
     */
    function setScenarioPointRadius(scenario, radius) {
        SetScenarioPointRadius(scenario, radius);
    }
    task_1.setScenarioPointRadius = setScenarioPointRadius;
    /**
     * No comment provided
     *
     * Hash: 0xD00E50E673802D71 | Since: 1207
     */
    function setScenarioTypeEnabledHash(scenarioType, toggle) {
        if (typeof scenarioType === 'string')
            scenarioType = misc.getHashKey(scenarioType);
        SetScenarioTypeEnabledHash(scenarioType, toggle);
    }
    task_1.setScenarioTypeEnabledHash = setScenarioTypeEnabledHash;
    /**
     * Only used in R* Scripts fishing_core and av_fishing_river
     *
     * Hash: 0xF3735ACD11ACD501 | Since: 1207
     */
    function setFishing(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetTaskFishing(_ped, undefined);
    }
    task_1.setFishing = setFishing;
    /**
     * No comment provided
     *
     * Hash: 0x099D4A855D53B03B | Since: 1207
     */
    function setMoveNetworkSignalFloat2(ped, value) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetTaskMoveNetworkSignalFloat2(_ped, value);
    }
    task_1.setMoveNetworkSignalFloat2 = setMoveNetworkSignalFloat2;
    /**
     * No comment provided
     *
     * Hash: 0x4662BFE01938D98D | Since: 1207
     */
    function setMoveNetworkSignalVector(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetTaskMoveNetworkSignalVector(_ped, pos.x, pos.y, pos.z);
    }
    task_1.setMoveNetworkSignalVector = setMoveNetworkSignalVector;
    /**
     * No comment provided
     *
     * Hash: 0x30A768C30D385EC5 | Since: 1207
     */
    function animalBleedOut(ped, killer, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _killer = killer instanceof Ped ? killer.handle() : killer;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        TaskAnimalBleedOut(_ped, _killer, false, weaponHash, 0, 0);
    }
    task_1.animalBleedOut = animalBleedOut;
    /**
     * No comment provided
     *
     * Hash: 0xE53D17AD837CBF7C | Since: 1207
     */
    function boardVehicle(ped, vehicle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskBoardVehicle(_ped, _vehicle, undefined, undefined, undefined, undefined);
    }
    task_1.boardVehicle = boardVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xE41A09C8DDFF7AA4 | Since: 1207
     */
    function boardVehicle2(ped, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskBoardVehicle2(_ped, undefined, undefined, 0, flags);
    }
    task_1.boardVehicle2 = boardVehicle2;
    /**
     * No comment provided
     *
     * Hash: 0xDF1D85BCAF60D537 | Since: 1207
     */
    function climb2(ped, heading) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskClimb2(_ped, heading);
    }
    task_1.climb2 = climb2;
    /**
     * Coords: volume coords used in R* Script smuggler2
     * p4/p5 = 0 in R* Scripts previous name TASK_COMBAT_PED_3
     *
     * Hash: 0xC624414FA748B9BA | Since: 1207
     */
    function combatPedAtCoords(ped, pos) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskCombatPed3(_ped, pos.x, pos.y, pos.z, 0, 0);
    }
    task_1.combatPedAtCoords = combatPedAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0x81D16C4FF3A77ADF | Since: 1207
     */
    function cutFreeHogtiedTargetPed(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskCutFreeHogtiedTargetPed(_ped, _targetPed);
    }
    task_1.cutFreeHogtiedTargetPed = cutFreeHogtiedTargetPed;
    /**
     * No comment provided
     *
     * Hash: 0x525421A507216084 | Since: 1207
     */
    function cutFreeHogtiedTargetPed2(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskCutFreeHogtiedTargetPed2(_ped, _targetPed, 0);
    }
    task_1.cutFreeHogtiedTargetPed2 = cutFreeHogtiedTargetPed2;
    /**
     * No comment provided
     *
     * Hash: 0xA7C6854BB5A4192A | Since: 1207
     */
    function disembarkVehicle(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskDisembarkVehicle(undefined, _vehicle, 0, undefined, 0, undefined);
    }
    task_1.disembarkVehicle = disembarkVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xBDFEEB7600BCD938 | Since: 1207
     */
    function emoteOutro(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskEmoteOutro(_ped);
    }
    task_1.emoteOutro = emoteOutro;
    /**
     * _A*
     *
     * Hash: 0xAA0AF6025160243A | Since: 1207
     */
    function equipHat(hatObject, ped) {
        const _hatObject = hatObject instanceof Object ? hatObject.handle() : hatObject;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskEquipHat(_hatObject, _ped);
    }
    task_1.equipHat = equipHat;
    /**
     * fleeType: see TASK_FLEE_COORD
     *
     * Hash: 0x6879FF208ED87F2A | Since: 1207
     */
    function fleeFromCoord() {
        TaskFleeFromCoord(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.fleeFromCoord = fleeFromCoord;
    /**
     * fleeType: see TASK_FLEE_COORD
     *
     * Hash: 0x7B74D8EEDE9B5727 | Since: 1207
     */
    function fleeFromPed(ped, fleeFromTarget, pos, distance, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _fleeFromTarget = fleeFromTarget instanceof Ped ? fleeFromTarget.handle() : fleeFromTarget;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        TaskFleeFromPed(_ped, _fleeFromTarget, pos.x, pos.y, pos.z, distance, 0, 0, 0, _targetPed);
    }
    task_1.fleeFromPed = fleeFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x1FC9B33976BACD6C | Since: 1207
     */
    function guardAssignedDefensiveArea2(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskGuardAssignedDefensiveArea2(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.guardAssignedDefensiveArea2 = guardAssignedDefensiveArea2;
    /**
     * No comment provided
     *
     * Hash: 0x648B75D44930D6BD | Since: 1207
     */
    function intimidated(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskIntimidated(undefined, _ped, undefined, undefined, undefined);
    }
    task_1.intimidated = intimidated;
    /**
     * No comment provided
     *
     * Hash: 0x933ACC1A1771A288 | Since: 1207
     */
    function intimidated2(victim, attacker, everyFrame, flag) {
        const _victim = victim instanceof Ped ? victim.handle() : victim;
        const _attacker = attacker instanceof Ped ? attacker.handle() : attacker;
        return TaskIntimidated2(_victim, _attacker, 0, false, false, everyFrame, false, false, flag);
    }
    task_1.intimidated2 = intimidated2;
    /**
     * No comment provided
     *
     * Hash: 0x72F52AA2D2B172CC | Since: 1207
     */
    function itemInteraction2(ped, propNameGxt, prop, propId, itemInteractionState) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _prop = prop instanceof Object ? prop.handle() : prop;
        if (typeof propNameGxt === 'string')
            propNameGxt = misc.getHashKey(propNameGxt);
        if (typeof propId === 'string')
            propId = misc.getHashKey(propId);
        if (typeof itemInteractionState === 'string')
            itemInteractionState = misc.getHashKey(itemInteractionState);
        TaskItemInteraction2(_ped, propNameGxt, _prop, propId, itemInteractionState, 0, undefined, 0);
    }
    task_1.itemInteraction2 = itemInteraction2;
    /**
     * Params: p3, p4, p5, p6: 0, 0, 0, -1.0f in R* Scripts
     *
     * Hash: 0xD61D5E1AD9876DEB | Since: 1207
     */
    function itemInteraction3(ped, item) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        return TaskItemInteraction3(_ped, item, undefined, undefined, undefined, 0);
    }
    task_1.itemInteraction3 = itemInteraction3;
    /**
     * No comment provided
     *
     * Hash: 0x91083103137D7254 | Since: 1207
     */
    function jump2(ped, pos, entity) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        TaskJump2(_ped, pos.x, pos.y, pos.z, _entity);
    }
    task_1.jump2 = jump2;
    /**
     * No comment provided
     *
     * Hash: 0x964B06C88E4C86DB | Since: 1207
     */
    function patrol2() {
        TaskPatrol2(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.patrol2 = patrol2;
    /**
     * Old name: _TASK_PERFORM_SEQUENCE_2
     *
     * Hash: 0x4FC0AF869D6E309D | Since: 1207
     */
    function performSequenceLocally() {
        TaskPerformSequence2(undefined, undefined, undefined, undefined);
    }
    task_1.performSequenceLocally = performSequenceLocally;
    /**
     * Similar to 0xB31A277C1AC7B7FF but checks if the ped's inventory contains the specified emote kit.
     *
     * Hash: 0x884E3436CC1F41DD | Since: 1207
     */
    function playEmote(ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof emote === 'string')
            emote = misc.getHashKey(emote);
        TaskPlayEmote(_ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps);
    }
    task_1.playEmote = playEmote;
    /**
     * No comment provided
     *
     * Hash: 0xDF8A5855B9F9A97B | Since: 1207
     */
    function putPedDirectlyIntoCoverFromCoords(ped, pos, fromX, fromY, fromZ, timeout) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskPutPedDirectlyIntoCoverFromCoords(_ped, pos.x, pos.y, pos.z, fromX, fromY, fromZ, timeout, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.putPedDirectlyIntoCoverFromCoords = putPedDirectlyIntoCoverFromCoords;
    /**
     * Takes scenario point handle instead of hash
     *
     * Hash: 0xA917E39F2CEFD215 | Since: 1207
     */
    function startScenarioInPlace2(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return TaskStartScenarioInPlace2(_ped, undefined, 0, false, 0, false);
    }
    task_1.startScenarioInPlace2 = startScenarioInPlace2;
    /**
     * No comment provided
     *
     * Hash: 0x7282356DFF6B5A51 | Since: 1207
     */
    function throwProjectile2() {
        TaskThrowProjectile2(undefined, undefined, undefined, undefined);
    }
    task_1.throwProjectile2 = throwProjectile2;
    /**
     * No comment provided
     *
     * Hash: 0x322BFDEA666E2B0E | Since: 1207
     */
    function useNearestScenarioToCoord(ped, pos, distance, duration) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskUseNearestScenarioToCoord(_ped, pos.x, pos.y, pos.z, distance, duration, false, false, false, false);
    }
    task_1.useNearestScenarioToCoord = useNearestScenarioToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x0F6641449DD86FBE | Since: 1207
     */
    function useScenarioPoint2(ped, ped2, p5) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
        if (typeof p5 === 'string')
            p5 = misc.getHashKey(p5);
        return TaskUseScenarioPoint2(_ped, _ped2, undefined, 0, p5, 0, false);
    }
    task_1.useScenarioPoint2 = useScenarioPoint2;
    /**
     * No comment provided
     *
     * Hash: 0xF0108F01FB105DA2 | Since: 1207
     */
    function vehicleDriveToCoord2(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TaskVehicleDriveToCoord2(_ped, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.vehicleDriveToCoord2 = vehicleDriveToCoord2;
    /**
     * Tasks vehicle towards owner
     *
     * Hash: 0x391073B9D3CCE2BA | Since: 1207
     */
    function vehicleDriveToDestination2(vehicle, pos, speed) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskVehicleDriveToDestination2(_vehicle, pos.x, pos.y, pos.z, speed, 0, 0, 0, 0);
    }
    task_1.vehicleDriveToDestination2 = vehicleDriveToDestination2;
    /**
     * Params: p4 = 3.f or 8.f, p5 = 0.25f, p6 = 0 in R* Scripts
     *
     * Hash: 0x6524A8981E8BE7C9 | Since: 1207
     */
    function vehicleDriveToPoint2(vehicle, pos) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TaskVehicleDriveToPoint2(_vehicle, pos.x, pos.y, pos.z, 0, 0, undefined);
    }
    task_1.vehicleDriveToPoint2 = vehicleDriveToPoint2;
    /**
     * Vehicle Auto Drive (?)
     * p1/p2/p3: usually 1f, 1f, 0f or 0f, 0f, 0f
     * Speed: usually 8f
     * Types: 1148979456 (task with flee), 1148979587 (dismissing the vehicle)
     *
     * Hash: 0x55CD5FDDD4335C1E | Since: 1207
     */
    function vehicleFleeOnCleanup(vehicle, speed, _type) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        TaskVehicleFleeOnCleanup(_vehicle, 0, 0, 0, speed, _type);
    }
    task_1.vehicleFleeOnCleanup = vehicleFleeOnCleanup;
    /**
     * No comment provided
     *
     * Hash: 0x041D17A9E221AE30 | Since: 1207
     */
    function vehicleFollowWaypointRecording2() {
        TaskVehicleFollowWaypointRecording2(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    task_1.vehicleFollowWaypointRecording2 = vehicleFollowWaypointRecording2;
})(task || (task = {}));
export var telemetry;
(function (telemetry) {
    /**
     * No comment provided
     *
     * Hash: 0x3180E991D4B8F248 | Since: 1207
     */
    function analyticsPlaytimeFreemodeEnd() {
        AnalyticsPlaytimeFreemodeEnd();
    }
    telemetry.analyticsPlaytimeFreemodeEnd = analyticsPlaytimeFreemodeEnd;
    /**
     * No comment provided
     *
     * Hash: 0xE9F24081D84931B8 | Since: 1207
     */
    function analyticsPlaytimeFreemodeStart() {
        AnalyticsPlaytimeFreemodeStart();
    }
    telemetry.analyticsPlaytimeFreemodeStart = analyticsPlaytimeFreemodeStart;
    /**
     * No comment provided
     *
     * Hash: 0xDF516E598D966D06 | Since: 1207
     */
    function campDonate(transactionId, slotId, p6) {
        if (typeof slotId === 'string')
            slotId = misc.getHashKey(slotId);
        if (typeof p6 === 'string')
            p6 = misc.getHashKey(p6);
        TelemetryCampDonate(transactionId, undefined, undefined, undefined, undefined, slotId, p6, undefined, false);
    }
    telemetry.campDonate = campDonate;
    /**
     * No comment provided
     *
     * Hash: 0xFF9052BC7A3B7D33 | Since: 1207
     */
    function personalVehicleMount() {
        TelemetryPersonalVehicleMount(undefined, undefined, undefined, undefined);
    }
    telemetry.personalVehicleMount = personalVehicleMount;
    /**
     * No comment provided
     *
     * Hash: 0x076C5843371EB889 | Since: 1311
     */
    function playerMenuPin() {
        TelemetryPlayerMenuPin(undefined, undefined, undefined, undefined);
    }
    telemetry.playerMenuPin = playerMenuPin;
    /**
     * Note: this native was added in build 1491.50
     *
     * Hash: 0x6F5BC5C4EAB42B15 | Since: 1491
     */
    function _0x6F5BC5C4EAB42B15(linkID, _type, contentId) {
        Citizen.invokeNative('0x6F5BC5C4EAB42B15', linkID, _type, contentId);
    }
    telemetry._0x6F5BC5C4EAB42B15 = _0x6F5BC5C4EAB42B15;
    /**
     * No comment provided
     *
     * Hash: 0xEC0BD8736DCAF841 | Since: 1207
     */
    function _0xEC0BD8736DCAF841(toggle) {
        Citizen.invokeNative('0xEC0BD8736DCAF841', toggle);
    }
    telemetry._0xEC0BD8736DCAF841 = _0xEC0BD8736DCAF841;
    /**
     * No comment provided
     *
     * Hash: 0x32D5898C4898CD95 | Since: 1207
     */
    function clearShopUi() {
        ClearTelemetryShopUi();
    }
    telemetry.clearShopUi = clearShopUi;
    /**
     * No comment provided
     *
     * Hash: 0x3145044F3990D321 | Since: 1207
     */
    function ambientVignette() {
        TelemetryAmbientVignette(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.ambientVignette = ambientVignette;
    /**
     * No comment provided
     *
     * Hash: 0x7581972ADF5D699A | Since: 1207
     */
    function animalSkinned(_type) {
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        return TelemetryAnimalSkinned(_type);
    }
    telemetry.animalSkinned = animalSkinned;
    /**
     * No comment provided
     *
     * Hash: 0x52FA31DB8F3AD25D | Since: 1207
     */
    function bountyTarget() {
        return TelemetryBountyTarget();
    }
    telemetry.bountyTarget = bountyTarget;
    /**
     * No comment provided
     *
     * Hash: 0x565EAA726B2CE3B7 | Since: 1207
     */
    function campCreated() {
        TelemetryCampCreated(undefined);
    }
    telemetry.campCreated = campCreated;
    /**
     * No comment provided
     *
     * Hash: 0x217F47761376E16E | Since: 1207
     */
    function campSupplies() {
        TelemetryCampSupplies(undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.campSupplies = campSupplies;
    /**
     * No comment provided
     *
     * Hash: 0x7207AD471BC9278C | Since: 1355
     */
    function charCreator() {
        TelemetryCharCreator(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.charCreator = charCreator;
    /**
     * No comment provided
     *
     * Hash: 0xD6CB05DDAEE43AFD | Since: 1207
     */
    function collect(transactionId) {
        TelemetryCollect(transactionId, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.collect = collect;
    /**
     * No comment provided
     *
     * Hash: 0x621D719C4836292B | Since: 1232
     */
    function coupon() {
        TelemetryCoupon(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.coupon = coupon;
    /**
     * No comment provided
     *
     * Hash: 0x78C2E029DB205A3A | Since: 1207
     */
    function craftItem(quantity) {
        TelemetryCraftItem(undefined, undefined, undefined, quantity);
    }
    telemetry.craftItem = craftItem;
    /**
     * Works in MP only.
     *
     * Hash: 0xE692D336F8A2A97F | Since: 1207
     */
    function createUuid() {
        return TelemetryCreateUuid();
    }
    telemetry.createUuid = createUuid;
    /**
     * No comment provided
     *
     * Hash: 0x40914CCF2A1AB531 | Since: 1207
     */
    function custom() {
        return TelemetryCustom();
    }
    telemetry.custom = custom;
    /**
     * No comment provided
     *
     * Hash: 0xE57529D23541D2DD | Since: 1207
     */
    function defensive() {
        TelemetryDefensive(undefined, undefined, undefined);
    }
    telemetry.defensive = defensive;
    /**
     * No comment provided
     *
     * Hash: 0xF5EAD898EF387E73 | Since: 1207
     */
    function discoverable() {
        TelemetryDiscoverable(undefined);
    }
    telemetry.discoverable = discoverable;
    /**
     * No comment provided
     *
     * Hash: 0x2C24AF8EEEEF8A55 | Since: 1207
     */
    function emoteAddCategoryToSave(emote) {
        if (typeof emote === 'string')
            emote = misc.getHashKey(emote);
        TelemetryEmoteAddCategoryToSave(undefined, undefined, emote);
    }
    telemetry.emoteAddCategoryToSave = emoteAddCategoryToSave;
    /**
     * No comment provided
     *
     * Hash: 0x7CEF4AC79F7E7FAD | Since: 1207
     */
    function fastTravel() {
        TelemetryFastTravel(undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.fastTravel = fastTravel;
    /**
     * No comment provided
     *
     * Hash: 0x16B23D4F7A1F50D9 | Since: 1207
     */
    function favorEmote() {
        TelemetryFavorEmote(undefined, undefined, undefined);
    }
    telemetry.favorEmote = favorEmote;
    /**
     * No comment provided
     *
     * Hash: 0x51EC204A6E5B5A1A | Since: 1207
     */
    function gameProgress() {
        TelemetryGameProgress(undefined, undefined);
    }
    telemetry.gameProgress = gameProgress;
    /**
     * No comment provided
     *
     * Hash: 0xE6DC9B21AC7A8729 | Since: 1207
     */
    function gangShares() {
        TelemetryGangShares(undefined, undefined, undefined, undefined);
    }
    telemetry.gangShares = gangShares;
    /**
     * No comment provided
     *
     * Hash: 0x536B6025E94AC48F | Since: 1207
     */
    function goldStore() {
        TelemetryGoldStore(undefined, undefined, undefined, undefined);
    }
    telemetry.goldStore = goldStore;
    /**
     * No comment provided
     *
     * Hash: 0x415FE28ED44BFF14 | Since: 1207
     */
    function gunLocker() {
        TelemetryGunLocker();
    }
    telemetry.gunLocker = gunLocker;
    /**
     * No comment provided
     *
     * Hash: 0x317D9C9560529CC2 | Since: 1207
     */
    function gunLockerWeaponRemoved(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        TelemetryGunLockerWeaponRemoved(p0);
    }
    telemetry.gunLockerWeaponRemoved = gunLockerWeaponRemoved;
    /**
     * No comment provided
     *
     * Hash: 0xC3ADF4880784FA9C | Since: 1207
     */
    function gunLockerWeaponStored(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        TelemetryGunLockerWeaponStored(p0);
    }
    telemetry.gunLockerWeaponStored = gunLockerWeaponStored;
    /**
     * No comment provided
     *
     * Hash: 0xAE693EC3A178F6C2 | Since: 1207
     */
    function herbPicked(herbType) {
        if (typeof herbType === 'string')
            herbType = misc.getHashKey(herbType);
        TelemetryHerbPicked(herbType);
    }
    telemetry.herbPicked = herbPicked;
    /**
     * No comment provided
     *
     * Hash: 0xE6B763C7F4902201 | Since: 1207
     */
    function honor() {
        TelemetryHonor(undefined, undefined);
    }
    telemetry.honor = honor;
    /**
     * No comment provided
     *
     * Hash: 0x25CC50EC1A6F3A96 | Since: 1232
     */
    function hubNavigation() {
        TelemetryHubNavigation(undefined, undefined, undefined, undefined);
    }
    telemetry.hubNavigation = hubNavigation;
    /**
     * No comment provided
     *
     * Hash: 0x37AA282163B0D2C4 | Since: 1232
     */
    function hubOffers(couponItem) {
        TelemetryHubOffers(couponItem, undefined);
    }
    telemetry.hubOffers = hubOffers;
    /**
     * No comment provided
     *
     * Hash: 0x1B554723799245F4 | Since: 1355
     */
    function introSkip() {
        TelemetryIntroSkip(undefined, undefined, undefined);
    }
    telemetry.introSkip = introSkip;
    /**
     * No comment provided
     *
     * Hash: 0xECD67E9FA677CCCF | Since: 1207
     */
    function lobbyProgression() {
        TelemetryLobbyProgression(undefined, undefined, undefined, undefined);
    }
    telemetry.lobbyProgression = lobbyProgression;
    /**
     * No comment provided
     *
     * Hash: 0xCF63EF77B0DF0397 | Since: 1207
     */
    function loot() {
        TelemetryLoot(undefined, undefined, undefined, undefined);
    }
    telemetry.loot = loot;
    /**
     * No comment provided
     *
     * Hash: 0x330029E121380CEB | Since: 1355
     */
    function matchNomination() {
        return TelemetryMatchNomination();
    }
    telemetry.matchNomination = matchNomination;
    /**
     * No comment provided
     *
     * Hash: 0xA2058154357726BB | Since: 1207
     */
    function matchOver() {
        TelemetryMatchOver(undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.matchOver = matchOver;
    /**
     * No comment provided
     *
     * Hash: 0x4C08D2B6D8BE17E4 | Since: 1311
     */
    function matchQueue() {
        TelemetryMatchQueue(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.matchQueue = matchQueue;
    /**
     * No comment provided
     *
     * Hash: 0xF620F47B4F4A78C4 | Since: 1207
     */
    function matchStarted() {
        return TelemetryMatchStarted();
    }
    telemetry.matchStarted = matchStarted;
    /**
     * No comment provided
     *
     * Hash: 0xEF3C68F56BAD7B69 | Since: 1207
     */
    function matchVote() {
        return TelemetryMatchVote();
    }
    telemetry.matchVote = matchVote;
    /**
     * No comment provided
     *
     * Hash: 0x3255D4D2082C6339 | Since: 1207
     */
    function menuNavigation() {
        TelemetryMenuNavigation(undefined, undefined, undefined, undefined);
    }
    telemetry.menuNavigation = menuNavigation;
    /**
     * No comment provided
     *
     * Hash: 0x8EC7890D446BD9C1 | Since: 1207
     */
    function missionCheckpoint() {
        TelemetryMissionCheckpoint(undefined, undefined, undefined);
    }
    telemetry.missionCheckpoint = missionCheckpoint;
    /**
     * _TELEMETRY_C* - _TELEMETRY_G*
     *
     * Hash: 0x6571E4327390EC0B | Since: 1207
     */
    function missionFailedToLaunch(pos, reason) {
        TelemetryMissionFailedToLaunch(undefined, undefined, pos.x, pos.y, pos.z, reason);
    }
    telemetry.missionFailedToLaunch = missionFailedToLaunch;
    /**
     * No comment provided
     *
     * Hash: 0xEA323F5E1A4DA2F1 | Since: 1207
     */
    function missionIloOption() {
        TelemetryMissionIloOption(undefined, undefined);
    }
    telemetry.missionIloOption = missionIloOption;
    /**
     * No comment provided
     *
     * Hash: 0xD894437E12C17AEC | Since: 1207
     */
    function missionOver() {
        TelemetryMissionOver(undefined, undefined);
    }
    telemetry.missionOver = missionOver;
    /**
     * No comment provided
     *
     * Hash: 0x15B0CC1B36F1DE29 | Since: 1207
     */
    function missionStarted() {
        TelemetryMissionStarted(undefined, undefined, undefined, undefined);
    }
    telemetry.missionStarted = missionStarted;
    /**
     * No comment provided
     *
     * Hash: 0xB5013EFBB5516867 | Since: 1232
     */
    function moonshineBrew() {
        TelemetryMoonshineBrew(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.moonshineBrew = moonshineBrew;
    /**
     * No comment provided
     *
     * Hash: 0xA72773C3134F9A57 | Since: 1207
     */
    function netCamp() {
        TelemetryNetCamp(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.netCamp = netCamp;
    /**
     * No comment provided
     *
     * Hash: 0xE26970A7AE0F28E9 | Since: 1207
     */
    function notoriety() {
        TelemetryNotoriety(undefined, undefined, undefined, undefined);
    }
    telemetry.notoriety = notoriety;
    /**
     * No comment provided
     *
     * Hash: 0xF37A2149BC9A8A27 | Since: 1207
     */
    function parleyFeud() {
        TelemetryParleyFeud(undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.parleyFeud = parleyFeud;
    /**
     * No comment provided
     *
     * Hash: 0xE67AF24C5A3B6058 | Since: 1207
     */
    function personalVehicleWagon() {
        TelemetryPersonalVehicleWagon(undefined, undefined, undefined);
    }
    telemetry.personalVehicleWagon = personalVehicleWagon;
    /**
     * No comment provided
     *
     * Hash: 0xED22BE4C5A399E63 | Since: 1207
     */
    function photo() {
        TelemetryPhoto(undefined, undefined, undefined, undefined);
    }
    telemetry.photo = photo;
    /**
     * No comment provided
     *
     * Hash: 0x0777D65EE8A17517 | Since: 1311
     */
    function photoCam() {
        TelemetryPhotoCam(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.photoCam = photoCam;
    /**
     * No comment provided
     *
     * Hash: 0x5DA4718DF897EB25 | Since: 1207
     */
    function playerSpawned(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TelemetryPlayerSpawned(_ped);
    }
    telemetry.playerSpawned = playerSpawned;
    /**
     * No comment provided
     *
     * Hash: 0x8127C5AA05C5A210 | Since: 1207
     */
    function pokerOver() {
        TelemetryPokerOver(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.pokerOver = pokerOver;
    /**
     * No comment provided
     *
     * Hash: 0xB204BF9F30298D77 | Since: 1207
     */
    function prison(transactionId, bountyAmount, ped, completionType, jailTimeServed, jailTimeLeft, posseRole) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        TelemetryPrison(transactionId, bountyAmount, _ped, completionType, jailTimeServed, jailTimeLeft, posseRole);
    }
    telemetry.prison = prison;
    /**
     * No comment provided
     *
     * Hash: 0xCD6F8A0335D821F9 | Since: 1207
     */
    function region(regionHash) {
        if (typeof regionHash === 'string')
            regionHash = misc.getHashKey(regionHash);
        TelemetryRegion(regionHash);
    }
    telemetry.region = region;
    /**
     * No comment provided
     *
     * Hash: 0xAB43D1C80B5E9500 | Since: 1207
     */
    function roleBounty() {
        TelemetryRoleBounty(undefined);
    }
    telemetry.roleBounty = roleBounty;
    /**
     * No comment provided
     *
     * Hash: 0x4AC38DFD286DAD14 | Since: 1207
     */
    function roleCollector(transactionId, collectible, category) {
        TelemetryRoleCollector(transactionId, collectible, category, undefined, undefined, undefined, undefined);
    }
    telemetry.roleCollector = roleCollector;
    /**
     * No comment provided
     *
     * Hash: 0x99D40C5D74BC88E9 | Since: 1232
     */
    function roleMoonshiner(transactionId) {
        TelemetryRoleMoonshiner(undefined, transactionId);
    }
    telemetry.roleMoonshiner = roleMoonshiner;
    /**
     * No comment provided
     *
     * Hash: 0x6FB9EA308F302922 | Since: 1311
     */
    function roleNaturalist(transactionId) {
        TelemetryRoleNaturalist(transactionId, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.roleNaturalist = roleNaturalist;
    /**
     * No comment provided
     *
     * Hash: 0x32C2939564D74BFF | Since: 1207
     */
    function roleTokenTransaction() {
        TelemetryRoleTokenTransaction(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.roleTokenTransaction = roleTokenTransaction;
    /**
     * No comment provided
     *
     * Hash: 0x476038B5A0734C10 | Since: 1207
     */
    function roleTrader(transactionId) {
        TelemetryRoleTrader(undefined, transactionId);
    }
    telemetry.roleTrader = roleTrader;
    /**
     * Creation of the metric is related to attribute filling, i. e. at camp fires, when the ped is resting.
     * _TELEMETRY_C* - _TELEMETRY_P*
     *
     * Hash: 0x7E002A36AEFCFB55 | Since: 1207
     */
    function rpgGlobalCalculateAttributeCoreDelta() {
        TelemetryRpgGlobalCalculateAttributeCoreDelta();
    }
    telemetry.rpgGlobalCalculateAttributeCoreDelta = rpgGlobalCalculateAttributeCoreDelta;
    /**
     * No comment provided
     *
     * Hash: 0x61559675D23D8BD1 | Since: 1311
     */
    function sample(transactionId, animal, bSampled, bTranq) {
        TelemetrySample(transactionId, animal, undefined, bSampled, bTranq);
    }
    telemetry.sample = sample;
    /**
     * No comment provided
     *
     * Hash: 0x9BEE018A63FFFAD9 | Since: 1207
     */
    function setIsFlow(toggle) {
        TelemetrySetIsFlow(toggle);
    }
    telemetry.setIsFlow = setIsFlow;
    /**
     * No comment provided
     *
     * Hash: 0xCA9E42F437625A85 | Since: 1232
     */
    function setShopForTransaction(transactionId, p1, p2) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        TelemetrySetShopForTransaction(transactionId, p1, p2);
    }
    telemetry.setShopForTransaction = setShopForTransaction;
    /**
     * No comment provided
     *
     * Hash: 0xB0B19B56697836F5 | Since: 1311
     */
    function shopCutscene() {
        TelemetryShopCutscene(undefined, undefined, undefined, undefined);
    }
    telemetry.shopCutscene = shopCutscene;
    /**
     * No comment provided
     *
     * Hash: 0x775B2ED944E44973 | Since: 1207
     */
    function shopEntry(shopType, shopRegion, region) {
        TelemetryShopEntry(shopType, shopRegion, region, undefined, undefined, undefined);
    }
    telemetry.shopEntry = shopEntry;
    /**
     * No comment provided
     *
     * Hash: 0xF78E669FDC202E73 | Since: 1207
     */
    function shopExit() {
        TelemetryShopExit(undefined, undefined);
    }
    telemetry.shopExit = shopExit;
    /**
     * No comment provided
     *
     * Hash: 0x2A374E6F0075EE81 | Since: 1207
     */
    function shopPurchase() {
        TelemetryShopPurchase(undefined, undefined, undefined, undefined, undefined);
    }
    telemetry.shopPurchase = shopPurchase;
    /**
     * No comment provided
     *
     * Hash: 0x9BD8A9D0A774A6F8 | Since: 1207
     */
    function shopSell(centSalePrice) {
        TelemetryShopSell(undefined, undefined, undefined, undefined, centSalePrice);
    }
    telemetry.shopSell = shopSell;
    /**
     * No comment provided
     *
     * Hash: 0xF9F14080D80937BD | Since: 1207
     */
    function sleep() {
        TelemetrySleep(undefined);
    }
    telemetry.sleep = sleep;
    /**
     * No comment provided
     *
     * Hash: 0xF0D54E0651DD7E07 | Since: 1207
     */
    function startGunLockerInteraction() {
        TelemetryStartGunLockerInteraction();
    }
    telemetry.startGunLockerInteraction = startGunLockerInteraction;
    /**
     * Returns false when transaction request is failing
     *
     * Hash: 0x80A02D9F948A8BCA | Since: 1207
     */
    function triggerTransactionRequest() {
        return TelemetryTriggerTransactionRequest();
    }
    telemetry.triggerTransactionRequest = triggerTransactionRequest;
    /**
     * No comment provided
     *
     * Hash: 0xF184B3ECE36219CF | Since: 1207
     */
    function tryGetIdFromTransactionId() {
        return TryGetTelemetryIdFromTransactionId();
    }
    telemetry.tryGetIdFromTransactionId = tryGetIdFromTransactionId;
})(telemetry || (telemetry = {}));
export var txd;
(function (txd) {
    /**
     * No comment provided
     *
     * Hash: 0x7332461FC59EB7EC | Since: 1207
     */
    function doesStreamedTextureDictExist() {
        return DoesStreamedTextureDictExist();
    }
    txd.doesStreamedTextureDictExist = doesStreamedTextureDictExist;
    /**
     * No comment provided
     *
     * Hash: 0xBA0163B277C2D2D0 | Since: 1207
     */
    function doesStreamedExist(txdHash) {
        if (typeof txdHash === 'string')
            txdHash = misc.getHashKey(txdHash);
        return DoesStreamedTxdExist(txdHash);
    }
    txd.doesStreamedExist = doesStreamedExist;
    /**
     * No comment provided
     *
     * Hash: 0x54D6900929CCF162 | Since: 1207
     */
    function hasStreamedTextureDictLoaded(textureDict) {
        return HasStreamedTextureDictLoaded(textureDict);
    }
    txd.hasStreamedTextureDictLoaded = hasStreamedTextureDictLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xBE72591D1509FFE4 | Since: 1207
     */
    function hasStreamedLoaded(txdHash) {
        if (typeof txdHash === 'string')
            txdHash = misc.getHashKey(txdHash);
        return HasStreamedTxdLoaded(txdHash);
    }
    txd.hasStreamedLoaded = hasStreamedLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xC1BA29DF5631B0F8 | Since: 1207
     */
    function requestStreamedTextureDict(textureDict) {
        RequestStreamedTextureDict(textureDict, false);
    }
    txd.requestStreamedTextureDict = requestStreamedTextureDict;
    /**
     * No comment provided
     *
     * Hash: 0xDB1BD07FB464584D | Since: 1207
     */
    function requestStreamed(txdHash) {
        if (typeof txdHash === 'string')
            txdHash = misc.getHashKey(txdHash);
        RequestStreamedTxd(txdHash, false);
    }
    txd.requestStreamed = requestStreamed;
    /**
     * No comment provided
     *
     * Hash: 0x4ACA10A91F66F1E2 | Since: 1207
     */
    function setStreamedTextureDictAsNoLongerNeeded(textureDict) {
        SetStreamedTextureDictAsNoLongerNeeded(textureDict);
    }
    txd.setStreamedTextureDictAsNoLongerNeeded = setStreamedTextureDictAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x8232F37DF762ACB2 | Since: 1207
     */
    function setStreamedAsNoLongerNeeded(txdHash) {
        if (typeof txdHash === 'string')
            txdHash = misc.getHashKey(txdHash);
        SetStreamedTxdAsNoLongerNeeded(txdHash);
    }
    txd.setStreamedAsNoLongerNeeded = setStreamedAsNoLongerNeeded;
})(txd || (txd = {}));
export var uiapps;
(function (uiapps) {
    /**
     * No comment provided
     *
     * Hash: 0xE555EC27D65EDE80 | Since: 1207
     */
    function canLaunchUiappByHash(appNameHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        return CanLaunchUiappByHash(appNameHash);
    }
    uiapps.canLaunchUiappByHash = canLaunchUiappByHash;
    /**
     * No comment provided
     *
     * Hash: 0x16F47D434B6086BF | Since: 1207
     */
    function canLaunchUiappByHashWithEntry(appNameHash, entryHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        if (typeof entryHash === 'string')
            entryHash = misc.getHashKey(entryHash);
        return CanLaunchUiappByHashWithEntry(appNameHash, entryHash);
    }
    uiapps.canLaunchUiappByHashWithEntry = canLaunchUiappByHashWithEntry;
    /**
     * No comment provided
     *
     * Hash: 0xAC959AB99AAF3D9F | Since: 1207
     */
    function isAnyUiappActive() {
        return IsAnyUiappActive();
    }
    uiapps.isAnyUiappActive = isAnyUiappActive;
    /**
     * No comment provided
     *
     * Hash: 0xDB30BEC7A7A5CBD3 | Since: 1207
     */
    function isAnyUiappRunning() {
        return IsAnyUiappRunning();
    }
    uiapps.isAnyUiappRunning = isAnyUiappRunning;
    /**
     * No comment provided
     *
     * Hash: 0x25B7A0206BDFAC76 | Since: 1207
     */
    function isUiappActiveByHash(appNameHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        return IsUiappActiveByHash(appNameHash);
    }
    uiapps.isUiappActiveByHash = isUiappActiveByHash;
    /**
     * No comment provided
     *
     * Hash: 0xDE4A9B35D028979F | Since: 1232
     */
    function isUiappRunning() {
        return IsUiappRunning();
    }
    uiapps.isUiappRunning = isUiappRunning;
    /**
     * No comment provided
     *
     * Hash: 0x4E511D093A86AD49 | Since: 1207
     */
    function isUiappRunningByHash(appNameHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        return IsUiappRunningByHash(appNameHash);
    }
    uiapps.isUiappRunningByHash = isUiappRunningByHash;
    /**
     * No comment provided
     *
     * Hash: 0x42095B886D30DE66 | Since: 1232
     */
    function isUiappTransitioningByHash(appNameHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        return IsUiappTransitioningByHash(appNameHash);
    }
    uiapps.isUiappTransitioningByHash = isUiappTransitioningByHash;
    /**
     * No comment provided
     *
     * Hash: 0xC8FC7F4E4CF4F581 | Since: 1207
     */
    function launchUiappByHash(appNameHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        return LaunchUiappByHash(appNameHash);
    }
    uiapps.launchUiappByHash = launchUiappByHash;
    /**
     * No comment provided
     *
     * Hash: 0xC1BCF31E975B3195 | Since: 1207
     */
    function launchUiappByHashWithEntry(appNameHash, entryHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        if (typeof entryHash === 'string')
            entryHash = misc.getHashKey(entryHash);
        return LaunchUiappByHashWithEntry(appNameHash, entryHash);
    }
    uiapps.launchUiappByHashWithEntry = launchUiappByHashWithEntry;
    /**
     * No comment provided
     *
     * Hash: 0x7B2027BAC5C8EC89 | Since: 1207
     */
    function launchUiappWithEntry() {
        return LaunchUiappWithEntry();
    }
    uiapps.launchUiappWithEntry = launchUiappWithEntry;
    /**
     * No comment provided
     *
     * Hash: 0x7689CD255655BFD7 | Since: 1207
     */
    function requestUiappTransitionByHash(appNameHash, transitionHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        if (typeof transitionHash === 'string')
            transitionHash = misc.getHashKey(transitionHash);
        return RequestUiappTransitionByHash(appNameHash, transitionHash);
    }
    uiapps.requestUiappTransitionByHash = requestUiappTransitionByHash;
    /**
     * No comment provided
     *
     * Hash: 0xAD7B70F7230C5A12 | Since: 1207
     */
    function closeAll() {
        CloseAllUiapps();
    }
    uiapps.closeAll = closeAll;
    /**
     * No comment provided
     *
     * Hash: 0x12769EEB8DBD7A7B | Since: 1207
     */
    function closeAllImmediate() {
        CloseAllUiappsImmediate();
    }
    uiapps.closeAllImmediate = closeAllImmediate;
    /**
     * No comment provided
     *
     * Hash: 0x818C6CA9B659E8EC | Since: 1207
     */
    function closeUiapp() {
        return CloseUiapp();
    }
    uiapps.closeUiapp = closeUiapp;
    /**
     * No comment provided
     *
     * Hash: 0x2FF10C9C3F92277E | Since: 1207
     */
    function closeUiappByHash(appNameHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        CloseUiappByHash(appNameHash);
    }
    uiapps.closeUiappByHash = closeUiappByHash;
    /**
     * No comment provided
     *
     * Hash: 0x04428420A248A354 | Since: 1207
     */
    function closeUiappByHashImmediate(appNameHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        CloseUiappByHashImmediate(appNameHash);
    }
    uiapps.closeUiappByHashImmediate = closeUiappByHashImmediate;
    /**
     * No comment provided
     *
     * Hash: 0x3015635426D1B17C | Since: 1207
     */
    function closeUiappImmediate() {
        return CloseUiappImmediate();
    }
    uiapps.closeUiappImmediate = closeUiappImmediate;
    /**
     * No comment provided
     *
     * Hash: 0x96FD694FE5BE55DC | Since: 1207
     */
    function getUiappCurrentActivityByHash(appNameHash) {
        if (typeof appNameHash === 'string')
            appNameHash = misc.getHashKey(appNameHash);
        return GetUiappCurrentActivityByHash(appNameHash);
    }
    uiapps.getUiappCurrentActivityByHash = getUiappCurrentActivityByHash;
})(uiapps || (uiapps = {}));
export var uidebug;
(function (uidebug) {
    /**
     * Note: you must use VAR_STRING
     *
     * Hash: 0x16794E044C9EFB58 | Since: 1355
     */
    function bgDisplayText(x, y) {
        return BgDisplayText(x, y);
    }
    uidebug.bgDisplayText = bgDisplayText;
    /**
     * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/colours
     *
     * Hash: 0x16FA5CE47F184F1E | Since: 1355
     */
    function bgSetTextColor(red, green, blue, alpha) {
        BgSetTextColor(red, green, blue, alpha);
    }
    uidebug.bgSetTextColor = bgSetTextColor;
    /**
     * No comment provided
     *
     * Hash: 0xA1253A3C870B6843 | Since: 1355
     */
    function bgSetTextScale(scaleX, scaleY) {
        BgSetTextScale(scaleX, scaleY);
    }
    uidebug.bgSetTextScale = bgSetTextScale;
})(uidebug || (uidebug = {}));
export var uievents;
(function (uievents) {
    /**
     * eventData:
     * struct UI_SCRIPT_EVENT
     * {
     * alignas(8) eUIScriptEventType eventType; // https://alloc8or.re/rdr3/doc/enums/eUIScriptEventType.txt
     * alignas(8) int intParam;
     * alignas(8) Hash hashParam;
     * alignas(8) Hash datastoreParam;
     * };
     *
     * Old name: _EVENT_MANAGER_GET_EVENT
     *
     * Hash: 0xE24E957294241444 | Since: 1207
     */
    function eventsUiGetMessage(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return EventsUiGetMessage(hash);
    }
    uievents.eventsUiGetMessage = eventsUiGetMessage;
    /**
     * Old name: _EVENT_MANAGER_IS_EVENT_PENDING
     *
     * Hash: 0x67ED5A7963F2F722 | Since: 1207
     */
    function eventsUiIsPending(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return EventsUiIsPending(hash);
    }
    uievents.eventsUiIsPending = eventsUiIsPending;
    /**
     * eventData: see EVENTS_UI_GET_MESSAGE
     *
     * Old name: _EVENT_MANAGER_PEEK_EVENT
     *
     * Hash: 0x90237103F27F7937 | Since: 1207
     */
    function eventsUiPeekMessage(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return EventsUiPeekMessage(hash);
    }
    uievents.eventsUiPeekMessage = eventsUiPeekMessage;
    /**
     * Old name: _EVENT_MANAGER_POP_EVENT
     *
     * Hash: 0x8E8A2369F48EC839 | Since: 1207
     */
    function eventsUiPopMessage(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        EventsUiPopMessage(hash);
    }
    uievents.eventsUiPopMessage = eventsUiPopMessage;
})(uievents || (uievents = {}));
export var uifeed;
(function (uifeed) {
    /**
     * feedChannel: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIFeedChannel
     *
     * Hash: 0xDD1232B332CBB9E7 | Since: 1207
     */
    function clearChannel(feedChannel) {
        UiFeedClearChannel(feedChannel, false, false);
    }
    uifeed.clearChannel = clearChannel;
    /**
     * feedChannel: see UI_FEED_CLEAR_CHANNEL
     * Returns feedMessage
     *
     * Hash: 0xC17F69E1418CD11F | Since: 1207
     */
    function getCurrentMessage(feedChannel) {
        return UiFeedGetCurrentMessage(feedChannel);
    }
    uifeed.getCurrentMessage = getCurrentMessage;
    /**
     * Only used in R* SP Script beat_animal_attack
     * Returns feedMessage
     *
     * Hash: 0x0FD07141AD048AAE | Since: 1207
     */
    function _0x0FD07141AD048AAE() {
        return Citizen.invokeNative('0x0FD07141AD048AAE', false);
    }
    uifeed._0x0FD07141AD048AAE = _0x0FD07141AD048AAE;
    /**
     * Only used in R* SP Scripts
     *
     * Hash: 0x18D6869FBFFEC0F8 | Since: 1207
     */
    function _0x18D6869FBFFEC0F8() {
        return Citizen.invokeNative('0x18D6869FBFFEC0F8', false, false);
    }
    uifeed._0x18D6869FBFFEC0F8 = _0x18D6869FBFFEC0F8;
    /**
     * Returns feedMessage
     *
     * Hash: 0x4E88A65968A55C78 | Since: 1207
     */
    function _0x4E88A65968A55C78() {
        return Citizen.invokeNative('0x4E88A65968A55C78', false);
    }
    uifeed._0x4E88A65968A55C78 = _0x4E88A65968A55C78;
    /**
     * No comment provided
     *
     * Hash: 0x6D85126F6CCF02C9 | Since: 1207
     */
    function _0x6D85126F6CCF02C9(feedChannel) {
        Citizen.invokeNative('0x6D85126F6CCF02C9', feedChannel, 0, false);
    }
    uifeed._0x6D85126F6CCF02C9 = _0x6D85126F6CCF02C9;
    /**
     * No comment provided
     *
     * Hash: 0xAFF5BE9BA496CE40 | Since: 1207
     */
    function _0xAFF5BE9BA496CE40(collectableCategory) {
        if (typeof collectableCategory === 'string')
            collectableCategory = misc.getHashKey(collectableCategory);
        return Citizen.invokeNative('0xAFF5BE9BA496CE40', false, false, collectableCategory);
    }
    uifeed._0xAFF5BE9BA496CE40 = _0xAFF5BE9BA496CE40;
    /**
     * No comment provided
     *
     * Hash: 0xB7223B91CD6B7E07 | Since: 1207
     */
    function _0xB7223B91CD6B7E07(feedChannel) {
        return Citizen.invokeNative('0xB7223B91CD6B7E07', feedChannel);
    }
    uifeed._0xB7223B91CD6B7E07 = _0xB7223B91CD6B7E07;
    /**
     * Hides Toast Notifications
     *
     * Hash: 0x6035E8FBCA32AC5E | Since: 1207
     */
    function clearAllChannels() {
        UiFeedClearAllChannels();
    }
    uifeed.clearAllChannels = clearAllChannels;
    /**
     * Clears help text
     *
     * Hash: 0x2F901291EF177B02 | Since: 1207
     */
    function clearHelpTextFeed(feedMessage) {
        UiFeedClearHelpTextFeed(feedMessage, false);
    }
    uifeed.clearHelpTextFeed = clearHelpTextFeed;
    /**
     * Returns messageState, see https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIMessageState
     *
     * Hash: 0x59FA676177DBE4C9 | Since: 1207
     */
    function getMessageState(feedMessage) {
        return UiFeedGetMessageState(feedMessage);
    }
    uifeed.getMessageState = getMessageState;
    /**
     * Display text on right of the screen, Example : https://pastebin.com/n1YmNe25
     *
     * Hash: 0xB2920B9760F0F36B | Since: 1207
     */
    function postFeedTicker() {
        return UiFeedPostFeedTicker(false);
    }
    uifeed.postFeedTicker = postFeedTicker;
    /**
     * No comment provided
     *
     * Hash: 0x8D1249BD28791878 | Since: 1207
     */
    function postGameUpdateShard() {
        return UiFeedPostGameUpdateShard(false);
    }
    uifeed.postGameUpdateShard = postGameUpdateShard;
    /**
     * Example : https://pastebin.com/GvdBp8Dh
     *
     * Hash: 0x049D5C615BD38BAD | Since: 1207
     */
    function postHelpText() {
        return UiFeedPostHelpText(false);
    }
    uifeed.postHelpText = postHelpText;
    /**
     * Example : https://pastebin.com/h1YzycuR
     *
     * Hash: 0xD05590C1AB38F068 | Since: 1207
     */
    function postLocationShard() {
        return UiFeedPostLocationShard(false, false);
    }
    uifeed.postLocationShard = postLocationShard;
    /**
     * No comment provided
     *
     * Hash: 0x2024F4F333095FB1 | Since: 1207
     */
    function postMissionName() {
        return UiFeedPostMissionName(false);
    }
    uifeed.postMissionName = postMissionName;
    /**
     * Example : https://pastebin.com/13tuRa63
     *
     * Hash: 0xCEDBF17EFCC0E4A4 | Since: 1207
     */
    function postObjective() {
        return UiFeedPostObjective(false);
    }
    uifeed.postObjective = postObjective;
    /**
     * No comment provided
     *
     * Hash: 0x860DDFE97CC94DF0 | Since: 1207
     */
    function postOneTextShard() {
        return UiFeedPostOneTextShard(false);
    }
    uifeed.postOneTextShard = postOneTextShard;
    /**
     * No comment provided
     *
     * Hash: 0x3F9FDDBA79117C69 | Since: 1207
     */
    function postRankupToast() {
        return UiFeedPostRankupToast(0, 0);
    }
    uifeed.postRankupToast = postRankupToast;
    /**
     * No comment provided
     *
     * Hash: 0x893128CDB4B81FBB | Since: 1207
     */
    function postReticleMessage() {
        return UiFeedPostReticleMessage(false);
    }
    uifeed.postReticleMessage = postReticleMessage;
    /**
     * Example : https://pastebin.com/kAtEMQTD
     *
     * Hash: 0xC927890AA64E9661 | Since: 1207
     */
    function postSampleNotification() {
        return UiFeedPostSampleNotification(0, 0);
    }
    uifeed.postSampleNotification = postSampleNotification;
    /**
     * Example : https://pastebin.com/YZMBkAmW
     *
     * Hash: 0x26E87218390E6729 | Since: 1207
     */
    function postSampleToast() {
        return UiFeedPostSampleToast(false, false);
    }
    uifeed.postSampleToast = postSampleToast;
    /**
     * No comment provided
     *
     * Hash: 0xB249EBCB30DD88E0 | Since: 1207
     */
    function postSampleToastRight() {
        return UiFeedPostSampleToastRight(false);
    }
    uifeed.postSampleToastRight = postSampleToastRight;
    /**
     * No comment provided
     *
     * Hash: 0x38838A646FB30AAE | Since: 1311
     */
    function postSampleToastWithAppLink() {
        return UiFeedPostSampleToastWithAppLink(false, false, false);
    }
    uifeed.postSampleToastWithAppLink = postSampleToastWithAppLink;
    /**
     * No comment provided
     *
     * Hash: 0x02BCC0FE9EBA3529 | Since: 1207
     */
    function postThreeTextShard() {
        return UiFeedPostThreeTextShard(false, false, false);
    }
    uifeed.postThreeTextShard = postThreeTextShard;
    /**
     * No comment provided
     *
     * Hash: 0xA6F4216AB10EB08E | Since: 1207
     */
    function postTwoTextShard() {
        return UiFeedPostTwoTextShard(false, false);
    }
    uifeed.postTwoTextShard = postTwoTextShard;
    /**
     * No comment provided
     *
     * Hash: 0xC48152BC6B3E821C | Since: 1207
     */
    function postVoiceChatFeed() {
        return UiFeedPostVoiceChatFeed(false);
    }
    uifeed.postVoiceChatFeed = postVoiceChatFeed;
})(uifeed || (uifeed = {}));
export var uilog;
(function (uilog) {
    /**
     * No comment provided
     *
     * Hash: 0x2A4765812202E671 | Since: 1207
     */
    function _0x2A4765812202E671() {
        return Citizen.invokeNative('0x2A4765812202E671');
    }
    uilog._0x2A4765812202E671 = _0x2A4765812202E671;
    /**
     * No comment provided
     *
     * Hash: 0x763637F9B838B0A7 | Since: 1207
     */
    function _0x763637F9B838B0A7(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x763637F9B838B0A7', 0, p1, undefined);
    }
    uilog._0x763637F9B838B0A7 = _0x763637F9B838B0A7;
    /**
     * No comment provided
     *
     * Hash: 0xA20398536B7F1134 | Since: 1207
     */
    function _0xA20398536B7F1134() {
        Citizen.invokeNative('0xA20398536B7F1134', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    uilog._0xA20398536B7F1134 = _0xA20398536B7F1134;
    /**
     * No comment provided
     *
     * Hash: 0xA49D6D503E3EA847 | Since: 1207
     */
    function _0xA49D6D503E3EA847() {
        Citizen.invokeNative('0xA49D6D503E3EA847', undefined, undefined, undefined, undefined, undefined);
    }
    uilog._0xA49D6D503E3EA847 = _0xA49D6D503E3EA847;
    /**
     * No comment provided
     *
     * Hash: 0xDA0A30153FCC0FFD | Since: 1207
     */
    function _0xDA0A30153FCC0FFD() {
        Citizen.invokeNative('0xDA0A30153FCC0FFD');
    }
    uilog._0xDA0A30153FCC0FFD = _0xDA0A30153FCC0FFD;
    /**
     * No comment provided
     *
     * Hash: 0x69D5479982355D8F | Since: 1207
     */
    function addEntryHash(pos, p5, p6) {
        if (typeof p5 === 'string')
            p5 = misc.getHashKey(p5);
        if (typeof p6 === 'string')
            p6 = misc.getHashKey(p6);
        UilogAddEntryHash(0, 0, pos.x, pos.y, pos.z, p5, p6, undefined);
    }
    uilog.addEntryHash = addEntryHash;
    /**
     * No comment provided
     *
     * Hash: 0x49C63FDF69744A27 | Since: 1207
     */
    function addItemToTaskList() {
        UilogAddItemToTaskList(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    uilog.addItemToTaskList = addItemToTaskList;
    /**
     * No comment provided
     *
     * Hash: 0xB43163388484CC87 | Since: 1207
     */
    function addOrUpdateObjective(p1, p2) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        UilogAddOrUpdateObjective(0, p1, p2, undefined, false, false, false);
    }
    uilog.addOrUpdateObjective = addOrUpdateObjective;
    /**
     * No comment provided
     *
     * Hash: 0x60C59968E8E87E6B | Since: 1207
     */
    function addTotalTakeEntry(p0, p1, p4) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof p4 === 'string')
            p4 = misc.getHashKey(p4);
        UilogAddTotalTakeEntry(p0, p1, undefined, undefined, p4);
    }
    uilog.addTotalTakeEntry = addTotalTakeEntry;
    /**
     * No comment provided
     *
     * Hash: 0xB95B4EA6B1EDF035 | Since: 1207
     */
    function clearAllEntries() {
        UilogClearAllEntries();
    }
    uilog.clearAllEntries = clearAllEntries;
    /**
     * No comment provided
     *
     * Hash: 0xDFF0D417277B41F8 | Since: 1207
     */
    function clearCachedObjective() {
        UilogClearCachedObjective();
    }
    uilog.clearCachedObjective = clearCachedObjective;
    /**
     * No comment provided
     *
     * Hash: 0xA3108D6981A5CADB | Since: 1207
     */
    function clearHasDisplayedCachedObjective() {
        UilogClearHasDisplayedCachedObjective();
    }
    uilog.clearHasDisplayedCachedObjective = clearHasDisplayedCachedObjective;
    /**
     * No comment provided
     *
     * Hash: 0x15A4461BEB788096 | Since: 1207
     */
    function getCachedObjective() {
        return UilogGetCachedObjective();
    }
    uilog.getCachedObjective = getCachedObjective;
    /**
     * No comment provided
     *
     * Hash: 0xCC48FFBB45B54F71 | Since: 1207
     */
    function hasDisplayedCachedObjective() {
        return UilogHasDisplayedCachedObjective();
    }
    uilog.hasDisplayedCachedObjective = hasDisplayedCachedObjective;
    /**
     * No comment provided
     *
     * Hash: 0xB8188CCF52202475 | Since: 1207
     */
    function isEntryRegistered(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return UilogIsEntryRegistered(0, p1);
    }
    uilog.isEntryRegistered = isEntryRegistered;
    /**
     * No comment provided
     *
     * Hash: 0x3920574CF0A2B7B6 | Since: 1207
     */
    function markAllEntriesAvailability() {
        UilogMarkAllEntriesAvailability(0, undefined);
    }
    uilog.markAllEntriesAvailability = markAllEntriesAvailability;
    /**
     * No comment provided
     *
     * Hash: 0x13E8D7DD08543482 | Since: 1207
     */
    function markEntryAvailability(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        UilogMarkEntryAvailability(0, p1, 0, undefined);
    }
    uilog.markEntryAvailability = markEntryAvailability;
    /**
     * No comment provided
     *
     * Hash: 0xDE31D66D1E54C471 | Since: 1207
     */
    function markMissionCompleted(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        UilogMarkMissionCompleted(p0);
    }
    uilog.markMissionCompleted = markMissionCompleted;
    /**
     * No comment provided
     *
     * Hash: 0x49E58FE6EF40B987 | Since: 1207
     */
    function postNotification() {
        return UilogPostNotification();
    }
    uilog.postNotification = postNotification;
    /**
     * No comment provided
     *
     * Hash: 0xE9990552DEC71600 | Since: 1207
     */
    function printCachedObjective() {
        UilogPrintCachedObjective();
    }
    uilog.printCachedObjective = printCachedObjective;
    /**
     * No comment provided
     *
     * Hash: 0xD594A19BE09A75C6 | Since: 1207
     */
    function removeEntry(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        UilogRemoveEntry(0, p1);
    }
    uilog.removeEntry = removeEntry;
    /**
     * No comment provided
     *
     * Hash: 0xFA233F8FE190514C | Since: 1207
     */
    function setCachedObjective() {
        UilogSetCachedObjective(undefined);
    }
    uilog.setCachedObjective = setCachedObjective;
    /**
     * No comment provided
     *
     * Hash: 0xA31013798FADCADC | Since: 1207
     */
    function setDisplayCompletionRating(logEntryType, p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        UilogSetDisplayCompletionRating(logEntryType, p1, false);
    }
    uilog.setDisplayCompletionRating = setDisplayCompletionRating;
    /**
     * No comment provided
     *
     * Hash: 0x69684D9936958D8F | Since: 1207
     */
    function setEntryBriefTexture(p1, texture, textureDictionary) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof texture === 'string')
            texture = misc.getHashKey(texture);
        if (typeof textureDictionary === 'string')
            textureDictionary = misc.getHashKey(textureDictionary);
        UilogSetEntryBriefTexture(0, p1, texture, textureDictionary);
    }
    uilog.setEntryBriefTexture = setEntryBriefTexture;
    /**
     * No comment provided
     *
     * Hash: 0x6965469934958D8F | Since: 1207
     */
    function setEntryIconTexture(p1, icon, iconDictionary) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        if (typeof icon === 'string')
            icon = misc.getHashKey(icon);
        if (typeof iconDictionary === 'string')
            iconDictionary = misc.getHashKey(iconDictionary);
        UilogSetEntryIconTexture(0, p1, icon, iconDictionary);
    }
    uilog.setEntryIconTexture = setEntryIconTexture;
    /**
     * No comment provided
     *
     * Hash: 0x72A5CD214B342568 | Since: 1207
     */
    function setEntryPinned(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        UilogSetEntryPinned(0, p1, false);
    }
    uilog.setEntryPinned = setEntryPinned;
    /**
     * No comment provided
     *
     * Hash: 0xA3108D6981A5CADC | Since: 1207
     */
    function setHasDisplayedCachedObjective() {
        UilogSetHasDisplayedCachedObjective();
    }
    uilog.setHasDisplayedCachedObjective = setHasDisplayedCachedObjective;
    /**
     * No comment provided
     *
     * Hash: 0x136A027CF37B0A4F | Since: 1207
     */
    function setPendingDetailsId(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return UilogSetPendingDetailsId(0, p1);
    }
    uilog.setPendingDetailsId = setPendingDetailsId;
    /**
     * No comment provided
     *
     * Hash: 0xD106B211EF1B8F04 | Since: 1207
     */
    function setTotalTakeSummary() {
        UilogSetTotalTakeSummary(undefined, undefined);
    }
    uilog.setTotalTakeSummary = setTotalTakeSummary;
    /**
     * No comment provided
     *
     * Hash: 0x80D6524190258C3E | Since: 1207
     */
    function updateEntrySubheader(p1) {
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        return UilogUpdateEntrySubheader(0, p1);
    }
    uilog.updateEntrySubheader = updateEntrySubheader;
})(uilog || (uilog = {}));
export var uipinning;
(function (uipinning) {
    /**
     * No comment provided
     *
     * Hash: 0x3138582E0A13BFAB | Since: 1207
     */
    function getTooltipText(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return UipinningGetTooltipText(hash);
    }
    uipinning.getTooltipText = getTooltipText;
})(uipinning || (uipinning = {}));
export var uistatemachine;
(function (uistatemachine) {
    /**
     * No comment provided
     *
     * Hash: 0xF7C180F57F85D0B8 | Since: 1207
     */
    function canRequestTransition() {
        return UiStateMachineCanRequestTransition(undefined);
    }
    uistatemachine.canRequestTransition = canRequestTransition;
    /**
     * No comment provided
     *
     * Hash: 0x4C6F2C4B7A03A266 | Since: 1207
     */
    function create() {
        return UiStateMachineCreate(undefined, undefined);
    }
    uistatemachine.create = create;
    /**
     * No comment provided
     *
     * Hash: 0x4EB122210A90E2D8 | Since: 1207
     */
    function destroy() {
        UiStateMachineDestroy(undefined);
    }
    uistatemachine.destroy = destroy;
    /**
     * No comment provided
     *
     * Hash: 0x2738D68D2B4E09E7 | Since: 1207
     */
    function destroyAndClear() {
        return UiStateMachineDestroyAndClear();
    }
    uistatemachine.destroyAndClear = destroyAndClear;
    /**
     * No comment provided
     *
     * Hash: 0x5D15569C0FEBF757 | Since: 1207
     */
    function exists() {
        return UiStateMachineExists(undefined);
    }
    uistatemachine.exists = exists;
    /**
     * No comment provided
     *
     * Hash: 0x6B9FE4F0BA521A19 | Since: 1207
     */
    function requestExit() {
        UiStateMachineRequestExit(undefined, undefined);
    }
    uistatemachine.requestExit = requestExit;
    /**
     * No comment provided
     *
     * Hash: 0x7EA9C3547E80350E | Since: 1207
     */
    function requestTransition() {
        return UiStateMachineRequestTransition(undefined, undefined);
    }
    uistatemachine.requestTransition = requestTransition;
    /**
     * No comment provided
     *
     * Hash: 0x3B7519720C9DCB45 | Since: 1207
     */
    function uiflowblockEnter() {
        return UiflowblockEnter(undefined, undefined);
    }
    uistatemachine.uiflowblockEnter = uiflowblockEnter;
    /**
     * No comment provided
     *
     * Hash: 0x10A93C057B6BD944 | Since: 1207
     */
    function uiflowblockIsLoaded() {
        return UiflowblockIsLoaded(undefined);
    }
    uistatemachine.uiflowblockIsLoaded = uiflowblockIsLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xF320A77DD5F781DF | Since: 1207
     */
    function uiflowblockRelease() {
        UiflowblockRelease(undefined);
    }
    uistatemachine.uiflowblockRelease = uiflowblockRelease;
    /**
     * No comment provided
     *
     * Hash: 0xC0081B34E395CE48 | Since: 1207
     */
    function uiflowblockRequest() {
        return UiflowblockRequest(undefined);
    }
    uistatemachine.uiflowblockRequest = uiflowblockRequest;
    /**
     * No comment provided
     *
     * Hash: 0x11E73195E735B25B | Since: 1207
     */
    function isExited(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return UiStateMachineIsExited(p0);
    }
    uistatemachine.isExited = isExited;
})(uistatemachine || (uistatemachine = {}));
export var uistickyfeed;
(function (uistickyfeed) {
    /**
     * No comment provided
     *
     * Hash: 0x00A15B94CBA4F76F | Since: 1207
     */
    function clearMessage(msgId) {
        UiStickyFeedClearMessage(msgId);
    }
    uistickyfeed.clearMessage = clearMessage;
    /**
     * Example: https://pastebin.com/JygJShNU
     *
     * Hash: 0x815C4065AE6E6071 | Since: 1207
     */
    function createDeathFailMessage() {
        return UiStickyFeedCreateDeathFailMessage(false);
    }
    uistickyfeed.createDeathFailMessage = createDeathFailMessage;
    /**
     * Example: https://pastebin.com/EJD7ytnz
     *
     * Hash: 0x9F2CC2439A04E7BA | Since: 1207
     */
    function createErrorMessage() {
        return UiStickyFeedCreateErrorMessage(false);
    }
    uistickyfeed.createErrorMessage = createErrorMessage;
    /**
     * Example: https://pastebin.com/6mLtee2S
     *
     * Hash: 0x339E16B41780FC35 | Since: 1207
     */
    function createWarningMessage() {
        return UiStickyFeedCreateWarningMessage(false);
    }
    uistickyfeed.createWarningMessage = createWarningMessage;
    /**
     * Returns state of sticky feed message, see 0x59FA676177DBE4C9
     *
     * Hash: 0x07954320D77F6A3D | Since: 1207
     */
    function getMessageState(msgId) {
        return UiStickyFeedGetMessageState(msgId);
    }
    uistickyfeed.getMessageState = getMessageState;
    /**
     * No comment provided
     *
     * Hash: 0xF8806EC3FF840FDC | Since: 1207
     */
    function isAlertScreenActive() {
        return UiStickyFeedIsAlertScreenActive();
    }
    uistickyfeed.isAlertScreenActive = isAlertScreenActive;
    /**
     * stickyFeedChannel: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIStickyFeedChannel
     *
     * Hash: 0xC5C395C60B542A3C | Since: 1207
     */
    function isChannelActive(stickyFeedChannel) {
        return UiStickyFeedIsChannelActive(stickyFeedChannel);
    }
    uistickyfeed.isChannelActive = isChannelActive;
    /**
     * Seems to only update _UI_STICKY_FEED_CREATE_ERROR_MESSAGE(0x9F2CC2439A04E7BA) and _UI_STICKY_FEED_CREATE_DEATH_FAIL_MESSAGE(0x815C4065AE6E6071) message.
     * Example: https://pastebin.com/nDrJyWq2
     *
     * Hash: 0xBC6F454E310124DA | Since: 1207
     */
    function updateMessage(msgId) {
        return UiStickyFeedUpdateMessage(msgId, false);
    }
    uistickyfeed.updateMessage = updateMessage;
})(uistickyfeed || (uistickyfeed = {}));
export var uitutorial;
(function (uitutorial) {
    /**
     * No comment provided
     *
     * Hash: 0x2CC24A2A7A1489C4 | Since: 1207
     */
    function getIsThreatIndicatorCapableRadarShown() {
        return UitutorialGetIsThreatIndicatorCapableRadarShown();
    }
    uitutorial.getIsThreatIndicatorCapableRadarShown = getIsThreatIndicatorCapableRadarShown;
    /**
     * No comment provided
     *
     * Hash: 0xFC2E0A5E9ED4E1B4 | Since: 1207
     */
    function getIsThreatIndicatorOn() {
        return UitutorialGetIsThreatIndicatorOn();
    }
    uitutorial.getIsThreatIndicatorOn = getIsThreatIndicatorOn;
    /**
     * enum eRpgIcons
     * {
     * ICON_STAMINA,
     * ICON_STAMINA_CORE,
     * ICON_DEADEYE,
     * ICON_DEADEYE_CORE,
     * ICON_HEALTH,
     * ICON_HEALTH_CORE,
     * ICON_HORSE_HEALTH,
     * ICON_HORSE_HEALTH_CORE,
     * ICON_HORSE_STAMINA,
     * ICON_HORSE_STAMINA_CORE,
     * ICON_HORSE_COURAGE,
     * ICON_HORSE_COURAGE_CORE
     * };
     *
     * enum eRpgIconVisibility
     * {
     * ICON_VISIBILITY_WAIT_TO_HIDE,
     * ICON_VISIBILITY_ALWAYS_SHOW,
     * ICON_VISIBILITY_ALWAYS_HIDE,
     * ICON_VISIBILITY_ALWAYS_BLINK
     * };
     *
     * Hash: 0xC116E6DF68DCE667 | Since: 1207
     */
    function setRpgIconVisibility(rpgIcon, visibility) {
        UitutorialSetRpgIconVisibility(rpgIcon, visibility);
    }
    uitutorial.setRpgIconVisibility = setRpgIconVisibility;
})(uitutorial || (uitutorial = {}));
export var unlock;
(function (unlock) {
    /**
     * No comment provided
     *
     * Hash: 0xC4B660C7B6040E75 | Since: 1207
     */
    function isUnlocked(unlockHash) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        return UnlockIsUnlocked(unlockHash);
    }
    unlock.isUnlocked = isUnlocked;
    /**
     * No comment provided
     *
     * Hash: 0x8588A14B75AF096B | Since: 1207
     */
    function isVisible(unlockHash) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        return UnlockIsVisible(unlockHash);
    }
    unlock.isVisible = isVisible;
    /**
     * No comment provided
     *
     * Hash: 0x1B7C5ADA8A6910A0 | Since: 1207
     */
    function setUnlocked(unlockHash, toggle) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        UnlockSetUnlocked(unlockHash, toggle);
    }
    unlock.setUnlocked = setUnlocked;
    /**
     * No comment provided
     *
     * Hash: 0x46B901A8ECDB5A61 | Since: 1207
     */
    function setVisible(unlockHash, toggle) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        UnlockSetVisible(unlockHash, toggle);
    }
    unlock.setVisible = setVisible;
    /**
     * No comment provided
     *
     * Hash: 0x7C1C2062CFAD06FE | Since: 1207
     */
    function getItemRoleUnlockInfo(unlockHash) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        return UnlockGetItemRoleUnlockInfo(unlockHash);
    }
    unlock.getItemRoleUnlockInfo = getItemRoleUnlockInfo;
    /**
     * No comment provided
     *
     * Hash: 0x66BF197E066050DE | Since: 1207
     */
    function isLootable(unlockHash) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        return UnlockIsLootable(unlockHash);
    }
    unlock.isLootable = isLootable;
    /**
     * No comment provided
     *
     * Hash: 0x644166BA7AA49DEA | Since: 1207
     */
    function isNew(unlockHash) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        return UnlockIsNew(unlockHash);
    }
    unlock.isNew = isNew;
    /**
     * No comment provided
     *
     * Hash: 0x6B6369647F26F09F | Since: 1207
     */
    function isUnlockFlagSet(unlockHash, flag) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        return UnlockIsUnlockFlagSet(unlockHash, flag);
    }
    unlock.isUnlockFlagSet = isUnlockFlagSet;
    /**
     * No comment provided
     *
     * Hash: 0xA6D79C7AEF870A99 | Since: 1207
     */
    function setNew(unlockHash, toggle) {
        if (typeof unlockHash === 'string')
            unlockHash = misc.getHashKey(unlockHash);
        UnlockSetNew(unlockHash, toggle);
    }
    unlock.setNew = setNew;
})(unlock || (unlock = {}));
export var vehicle;
(function (vehicle_1) {
    /**
     * No comment provided
     *
     * Hash: 0x4C221BAC54D735C3 | Since: 1207
     */
    function addRoadNodeSpeedZone() {
        return AddRoadNodeSpeedZone(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1.addRoadNodeSpeedZone = addRoadNodeSpeedZone;
    /**
     * Returns false if every seat is occupied.
     *
     * Hash: 0xA0A424505A1B6429 | Since: 1207
     */
    function areAnySeatsFree(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return AreAnyVehicleSeatsFree(_vehicle);
    }
    vehicle_1.areAnySeatsFree = areAnySeatsFree;
    /**
     * This native makes the vehicle stop immediately
     *
     * distance defines how far it will travel until stopping.
     *
     * Hash: 0x260BE8F09E326A20 | Since: 1207
     */
    function bringToHalt(vehicle, distance, duration, _unknown) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        BringVehicleToHalt(_vehicle, distance, duration, _unknown);
    }
    vehicle_1.bringToHalt = bringToHalt;
    /**
     * No comment provided
     *
     * Hash: 0xC075176CFB8B4128 | Since: 1207
     */
    function canAnchorBoatHere(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return CanAnchorBoatHere(_vehicle);
    }
    vehicle_1.canAnchorBoatHere = canAnchorBoatHere;
    /**
     * seatIndex: see CREATE_PED_INSIDE_VEHICLE
     *
     * Hash: 0xF8B2D32A2231FD24 | Since: 1207
     */
    function canShuffleSeat(vehicle, seatIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return CanShuffleSeat(_vehicle, seatIndex);
    }
    vehicle_1.canShuffleSeat = canShuffleSeat;
    /**
     * No comment provided
     *
     * Hash: 0x0EFC5DC62E67609B | Since: 1207
     */
    function clearLastDriven() {
        ClearLastDrivenVehicle();
    }
    vehicle_1.clearLastDriven = clearLastDriven;
    /**
     * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
     *
     * Hash: 0xDBC28A8C683CD80B | Since: 1207
     */
    function copyDamages(sourceVehicle, targetVehicle) {
        const _sourceVehicle = sourceVehicle instanceof Vehicle ? sourceVehicle.localId() : sourceVehicle;
        const _targetVehicle = targetVehicle instanceof Vehicle ? targetVehicle.localId() : targetVehicle;
        CopyVehicleDamages(_sourceVehicle, _targetVehicle);
    }
    vehicle_1.copyDamages = copyDamages;
    /**
     * No comment provided
     *
     * Hash: 0xAF35D0D2583051B0 | Since: 1207
     */
    function create(modelHash, pos, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateVehicle(modelHash, pos.x, pos.y, pos.z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, false);
    }
    vehicle_1.create = create;
    /**
     * No comment provided
     *
     * Hash: 0xA3120A1385F17FF7 | Since: 1207
     */
    function deleteAllTrains() {
        DeleteAllTrains();
    }
    vehicle_1.deleteAllTrains = deleteAllTrains;
    /**
     * No comment provided
     *
     * Hash: 0x0D3630FB07E8B570 | Since: 1207
     */
    function deleteMissionTrain(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        DeleteMissionTrain(_train);
    }
    vehicle_1.deleteMissionTrain = deleteMissionTrain;
    /**
     * Deletes a vehicle.
     * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
     *
     * eg how to use:
     * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
     * DELETE_VEHICLE(&vehicle);
     *
     * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0xE20A909D8C4A70F8 | Since: 1207
     */
    function deleteVehicle(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        DeleteVehicle(_vehicle);
    }
    vehicle_1.deleteVehicle = deleteVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x94B1E71B144356A5 | Since: 1207
     */
    function disableWeapon(disabled, weaponHash, vehicle, owner) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        const _owner = owner instanceof Ped ? owner.handle() : owner;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        DisableVehicleWeapon(disabled, weaponHash, _vehicle, _owner);
    }
    vehicle_1.disableWeapon = disableWeapon;
    /**
     * No comment provided
     *
     * Hash: 0xAF5E7E9A7620FFB5 | Since: 1207
     */
    function doesExtraExist(vehicle, extraId) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return DoesExtraExist(_vehicle, extraId);
    }
    vehicle_1.doesExtraExist = doesExtraExist;
    /**
     * Explodes a selected vehicle.
     *
     * Vehicle vehicle = Vehicle you want to explode.
     * BOOL isAudible = If explosion makes a sound.
     * BOOL isInvisible = If the explosion is invisible or not.
     *
     * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
     *
     * Hash: 0x75DCED9EEC5769D7 | Since: 1207
     */
    function explode(vehicle, isAudible, isInvisible) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        ExplodeVehicle(_vehicle, isAudible, isInvisible, undefined, undefined);
    }
    vehicle_1.explode = explode;
    /**
     * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
     *
     * Hash: 0x59ECA796021B0539 | Since: 1207
     */
    function forcePlaybackRecordedUpdate(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        ForcePlaybackRecordedVehicleUpdate(_vehicle, false);
    }
    vehicle_1.forcePlaybackRecordedUpdate = forcePlaybackRecordedUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x52F45D033645181B | Since: 1207
     */
    function getClosest(pos, radius, modelHash, flags) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetClosestVehicle(pos.x, pos.y, pos.z, radius, modelHash, flags);
    }
    vehicle_1.getClosest = getClosest;
    /**
     * Returns p1 for 0xBA958F68031DDBFC (stationIndex)
     *
     * Hash: 0x86FA6D8B48667D75 | Since: 1207
     */
    function getCurrentStationForTrain(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return GetCurrentStationForTrain(_train);
    }
    vehicle_1.getCurrentStationForTrain = getCurrentStationForTrain;
    /**
     * No comment provided
     *
     * Hash: 0xA19447D83294E29F | Since: 1207
     */
    function getDraftAnimalCount(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetDraftAnimalCount(_vehicle);
    }
    vehicle_1.getDraftAnimalCount = getDraftAnimalCount;
    /**
     * No comment provided
     *
     * Hash: 0x2963B5C1637E8A27 | Since: 1207
     */
    function getDriverOf(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetDriverOfVehicle(_vehicle);
    }
    vehicle_1.getDriverOf = getDriverOf;
    /**
     * No comment provided
     *
     * Hash: 0xA94F3E0AB9695E19 | Since: 1207
     */
    function getLastDriven() {
        return GetLastDrivenVehicle();
    }
    vehicle_1.getLastDriven = getLastDriven;
    /**
     * seatIndex: see CREATE_PED_INSIDE_VEHICLE
     *
     * Hash: 0x74583B19FEEAFDA7 | Since: 1207
     */
    function getLastPedInSeat(vehicle, seatIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetLastPedInVehicleSeat(_vehicle, seatIndex);
    }
    vehicle_1.getLastPedInSeat = getLastPedInSeat;
    /**
     * seatIndex: see CREATE_PED_INSIDE_VEHICLE
     *
     * Hash: 0xBB40DD2270B65366 | Since: 1207
     */
    function getPedInSeat(vehicle, seatIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetPedInVehicleSeat(_vehicle, seatIndex);
    }
    vehicle_1.getPedInSeat = getPedInSeat;
    /**
     * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x1A00961A1BE94E5E | Since: 1207
     */
    function getPositionOfRecordingAtTime(recording, time) {
        return new Vector3(GetPositionOfVehicleRecordingAtTime(recording, time));
    }
    vehicle_1.getPositionOfRecordingAtTime = getPositionOfRecordingAtTime;
    /**
     * This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x61787DD28B8CC0D5 | Since: 1207
     */
    function getRotationOfRecordingAtTime(recording, time) {
        return new Vector3(GetRotationOfVehicleRecordingAtTime(recording, time));
    }
    vehicle_1.getRotationOfRecordingAtTime = getRotationOfRecordingAtTime;
    /**
     * No comment provided
     *
     * Hash: 0x233B51C7913FA031 | Since: 1207
     */
    function getTimePositionInRecording(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetTimePositionInRecording(_vehicle);
    }
    vehicle_1.getTimePositionInRecording = getTimePositionInRecording;
    /**
     * No comment provided
     *
     * Hash: 0x865FEC2FA899F29C | Since: 1207
     */
    function getTrackIndexOfTrain(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return GetTrackIndexOfTrain(_train);
    }
    vehicle_1.getTrackIndexOfTrain = getTrackIndexOfTrain;
    /**
     * No comment provided
     *
     * Hash: 0xD0FB093A4CDB932C | Since: 1207
     */
    function getTrainCarriage(train, trailerNumber) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return GetTrainCarriage(_train, trailerNumber);
    }
    vehicle_1.getTrainCarriage = getTrainCarriage;
    /**
     * Seems related to vehicle health, like the one in IV.
     * Max 1000, min 0.
     * Vehicle does not necessarily explode or become undrivable at 0.
     *
     * Hash: 0x42113B857E33C16E | Since: 1207
     */
    function getBodyHealth(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleBodyHealth(_vehicle);
    }
    vehicle_1.getBodyHealth = getBodyHealth;
    /**
     * No comment provided
     *
     * Hash: 0xFA2CDDFEB8BC898B | Since: 1207
     */
    function getDoorsLockedForPlayer(vehicle, player) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        const _player = player instanceof Player ? player.localId() : player;
        return GetVehicleDoorsLockedForPlayer(_vehicle, _player);
    }
    vehicle_1.getDoorsLockedForPlayer = getDoorsLockedForPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xC867FD144F2469D3 | Since: 1207
     */
    function getDoorLockStatus(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleDoorLockStatus(_vehicle);
    }
    vehicle_1.getDoorLockStatus = getDoorLockStatus;
    /**
     * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
     *
     * Minimum: -4000
     * Maximum: 1000
     *
     * -4000: Engine is destroyed
     * 0 and below: Engine catches fire and health rapidly declines
     * 300: Engine is smoking and losing functionality
     * 1000: Engine is perfect
     *
     * Hash: 0x90DBFFAC43B22081 | Since: 1207
     */
    function getEngineHealth(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleEngineHealth(_vehicle);
    }
    vehicle_1.getEngineHealth = getEngineHealth;
    /**
     * No comment provided
     *
     * Hash: 0xFE52F34491529F0B | Since: 1207
     */
    function getEstimatedMaxSpeed(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleEstimatedMaxSpeed(_vehicle);
    }
    vehicle_1.getEstimatedMaxSpeed = getEstimatedMaxSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xA9C55F1C15E62E06 | Since: 1207
     */
    function getMaxNumberOfPassengers(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleMaxNumberOfPassengers(_vehicle);
    }
    vehicle_1.getMaxNumberOfPassengers = getMaxNumberOfPassengers;
    /**
     * No comment provided
     *
     * Hash: 0x9A578736FF3A17C3 | Since: 1207
     */
    function getModelNumberOfSeats(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelNumberOfSeats(modelHash);
    }
    vehicle_1.getModelNumberOfSeats = getModelNumberOfSeats;
    /**
     * Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
     *
     * Hash: 0x59F3F16577CD79B2 | Since: 1207
     */
    function getNumberOfPassengers(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleNumberOfPassengers(_vehicle);
    }
    vehicle_1.getNumberOfPassengers = getNumberOfPassengers;
    /**
     * 1000 is max health
     *
     * Hash: 0x1E5A9B356D5098BE | Since: 1207
     */
    function getPetrolTankHealth(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehiclePetrolTankHealth(_vehicle);
    }
    vehicle_1.getPetrolTankHealth = getPetrolTankHealth;
    /**
     * Gets the trailer of a vehicle and puts it into the trailer parameter.
     *
     * Hash: 0xCF867A239EC30741 | Since: 1207
     */
    function getTrailerVehicle(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleTrailerVehicle(_vehicle);
    }
    vehicle_1.getTrailerVehicle = getTrailerVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x2701D01D5E18FC31 | Since: 1207
     */
    function hasInstantFillPopulationFinished() {
        return HasInstantFillVehiclePopulationFinished();
    }
    vehicle_1.hasInstantFillPopulationFinished = hasInstantFillPopulationFinished;
    /**
     * No comment provided
     *
     * Hash: 0xB935F3154BC913C8 | Since: 1207
     */
    function hasAssetLoaded(vehicleAsset) {
        if (typeof vehicleAsset === 'string')
            vehicleAsset = misc.getHashKey(vehicleAsset);
        return HasVehicleAssetLoaded(vehicleAsset);
    }
    vehicle_1.hasAssetLoaded = hasAssetLoaded;
    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0xBA9325BE372AB6EA | Since: 1207
     */
    function hasRecordingBeenLoaded(recording) {
        return HasVehicleRecordingBeenLoaded(recording);
    }
    vehicle_1.hasRecordingBeenLoaded = hasRecordingBeenLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x1FF00DB43026B12F | Since: 1207
     */
    function instantlyFillPopulation() {
        InstantlyFillVehiclePopulation();
    }
    vehicle_1.instantlyFillPopulation = instantlyFillPopulation;
    /**
     * No comment provided
     *
     * Hash: 0x5698BA4FD04D39C4 | Since: 1207
     */
    function isAnyNearPoint(pos, radius) {
        return IsAnyVehicleNearPoint(pos.x, pos.y, pos.z, radius);
    }
    vehicle_1.isAnyNearPoint = isAnyNearPoint;
    /**
     * No comment provided
     *
     * Hash: 0xEA44E97849E9F3DD | Since: 1207
     */
    function isDraft(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsDraftVehicle(_vehicle);
    }
    vehicle_1.isDraft = isDraft;
    /**
     * No comment provided
     *
     * Hash: 0x80DDCCB2F4A3EB57 | Since: 1207
     */
    function isEntryPointForSeatClear(ped, vehicle, seatIndex, side, onEnter) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsEntryPointForSeatClear(_ped, _vehicle, seatIndex, side, onEnter);
    }
    vehicle_1.isEntryPointForSeatClear = isEntryPointForSeatClear;
    /**
     * No comment provided
     *
     * Hash: 0x02774B3A9034278F | Since: 1207
     */
    function isPlaybackGoingOnFor(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsPlaybackGoingOnForVehicle(_vehicle);
    }
    vehicle_1.isPlaybackGoingOnFor = isPlaybackGoingOnFor;
    /**
     * No comment provided
     *
     * Hash: 0x5A7472606EC5B7C1 | Since: 1207
     */
    function isPlaybackUsingAiGoingOnFor(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsPlaybackUsingAiGoingOnForVehicle(_vehicle);
    }
    vehicle_1.isPlaybackUsingAiGoingOnFor = isPlaybackUsingAiGoingOnFor;
    /**
     * seatIndex: see CREATE_PED_INSIDE_VEHICLE
     *
     * Hash: 0x7892685BF6D9775E | Since: 1207
     */
    function isSeatWarpOnly(vehicle, seatIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsSeatWarpOnly(_vehicle, seatIndex);
    }
    vehicle_1.isSeatWarpOnly = isSeatWarpOnly;
    /**
     * No comment provided
     *
     * Hash: 0x799CFC7C5B743B15 | Since: 1207
     */
    function isThisModelABoat(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelABoat(model);
    }
    vehicle_1.isThisModelABoat = isThisModelABoat;
    /**
     * No comment provided
     *
     * Hash: 0xFC08C8F8C1EDF174 | Since: 1207
     */
    function isThisModelATrain(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelATrain(model);
    }
    vehicle_1.isThisModelATrain = isThisModelATrain;
    /**
     * No comment provided
     *
     * Hash: 0xE887BD31D97793F6 | Since: 1207
     */
    function isTrainWaitingAtStation(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return IsTrainWaitingAtStation(_train);
    }
    vehicle_1.isTrainWaitingAtStation = isTrainWaitingAtStation;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x7AE191143C7A9107 | Since: 1207
     */
    function isDoorFullyOpen(vehicle, doorId) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleDoorFullyOpen(_vehicle, doorId);
    }
    vehicle_1.isDoorFullyOpen = isDoorFullyOpen;
    /**
     * No comment provided
     *
     * Hash: 0xB86D29B10F627379 | Since: 1207
     */
    function isDriveable(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleDriveable(_vehicle, false, false);
    }
    vehicle_1.isDriveable = isDriveable;
    /**
     * No comment provided
     *
     * Hash: 0xFA9A55D9C4351625 | Since: 1207
     */
    function isExtraTurnedOn(vehicle, extraId) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleExtraTurnedOn(_vehicle, extraId);
    }
    vehicle_1.isExtraTurnedOn = isExtraTurnedOn;
    /**
     * No comment provided
     *
     * Hash: 0x3F5029A8FC060C48 | Since: 1207
     */
    function isInBurnout(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleInBurnout(_vehicle);
    }
    vehicle_1.isInBurnout = isInBurnout;
    /**
     * No comment provided
     *
     * Hash: 0x0045A54EC7A22455 | Since: 1207
     */
    function isModel(vehicle, model) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsVehicleModel(_vehicle, model);
    }
    vehicle_1.isModel = isModel;
    /**
     * No comment provided
     *
     * Hash: 0x0D5D119529654EE0 | Since: 1207
     */
    function isOnAllWheels(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleOnAllWheels(_vehicle);
    }
    vehicle_1.isOnAllWheels = isOnAllWheels;
    /**
     * seatIndex: see CREATE_PED_INSIDE_VEHICLE
     * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
     *
     * Hash: 0xE052C1B1CAA4ECE4 | Since: 1207
     */
    function isSeatFree(vehicle, seatIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleSeatFree(_vehicle, seatIndex);
    }
    vehicle_1.isSeatFree = isSeatFree;
    /**
     * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
     *
     * For some vehicles it returns true if the current speed is <= 0.00039999999.
     *
     * Hash: 0x78C3311A73135241 | Since: 1207
     */
    function isStopped(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleStopped(_vehicle);
    }
    vehicle_1.isStopped = isStopped;
    /**
     * VEH_STUCK_ON_ROOF = 0,
     * VEH_STUCK_ON_SIDE,
     * VEH_STUCK_HUNG_UP,
     * VEH_STUCK_JAMMED
     *
     * Hash: 0x1ABA9753939503C5 | Since: 1207
     */
    function isStuckTimerUp(vehicle, stuckType, ms) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleStuckTimerUp(_vehicle, stuckType, ms);
    }
    vehicle_1.isStuckTimerUp = isStuckTimerUp;
    /**
     * Requires a visibility tracker on the vehicle (TRACK_VEHICLE_VISIBILITY)
     *
     * Hash: 0x424910CD5DE8C246 | Since: 1207
     */
    function isVisible(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleVisible(_vehicle);
    }
    vehicle_1.isVisible = isVisible;
    /**
     * No comment provided
     *
     * Hash: 0x0E7910A63E05B12C | Since: 1436
     */
    function isWindowIntact(vehicle, windowIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleWindowIntact(_vehicle, windowIndex);
    }
    vehicle_1.isWindowIntact = isWindowIntact;
    /**
     * No comment provided
     *
     * Hash: 0xDDBEA5506C848227 | Since: 1207
     */
    function isWrecked(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleWrecked(_vehicle);
    }
    vehicle_1.isWrecked = isWrecked;
    /**
     * No comment provided
     *
     * Hash: 0x1EF36558FBDE2DAA | Since: 1207
     */
    function lockDoorsWhenNoLongerNeeded(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        LockDoorsWhenNoLongerNeeded(_vehicle);
    }
    vehicle_1.lockDoorsWhenNoLongerNeeded = lockDoorsWhenNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x35AD938C74CACD6A | Since: 1207
     */
    function modifyTopSpeed(vehicle, value) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        ModifyVehicleTopSpeed(_vehicle, value);
    }
    vehicle_1.modifyTopSpeed = modifyTopSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xFE9AB3354ACE6C9C | Since: 1207
     */
    function removeRoadNodeSpeedZone(speedzone) {
        return RemoveRoadNodeSpeedZone(speedzone);
    }
    vehicle_1.removeRoadNodeSpeedZone = removeRoadNodeSpeedZone;
    /**
     * No comment provided
     *
     * Hash: 0xC619A44639BC0CB4 | Since: 1207
     */
    function removesFromGeneratorsInArea() {
        RemoveVehiclesFromGeneratorsInArea(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1.removesFromGeneratorsInArea = removesFromGeneratorsInArea;
    /**
     * No comment provided
     *
     * Hash: 0x888A4E675B38F5AD | Since: 1207
     */
    function removeAsset(vehicleAsset) {
        if (typeof vehicleAsset === 'string')
            vehicleAsset = misc.getHashKey(vehicleAsset);
        RemoveVehicleAsset(vehicleAsset);
    }
    vehicle_1.removeAsset = removeAsset;
    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x139E35755418F6AA | Since: 1207
     */
    function removeRecording() {
        return RemoveVehicleRecording(undefined);
    }
    vehicle_1.removeRecording = removeRecording;
    /**
     * windowIndex:
     * 0 = Front Right Window
     * 1 = Front Left Window
     * 2 = Back Right Window
     * 3 = Back Left Window
     *
     * Hash: 0x745F15A215F2DDF1 | Since: 1207
     */
    function removeWindow(vehicle, windowIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        RemoveVehicleWindow(_vehicle, windowIndex);
    }
    vehicle_1.removeWindow = removeWindow;
    /**
     * No comment provided
     *
     * Hash: 0x81A15811460FAB3A | Since: 1207
     */
    function requestAsset(vehicleHash, vehicleAsset) {
        if (typeof vehicleHash === 'string')
            vehicleHash = misc.getHashKey(vehicleHash);
        RequestVehicleAsset(vehicleHash, vehicleAsset);
    }
    vehicle_1.requestAsset = requestAsset;
    /**
     * No comment provided
     *
     * Hash: 0x84B81EF78BD22357 | Since: 1207
     */
    function requestHighDetailModel(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        RequestVehicleHighDetailModel(_vehicle);
    }
    vehicle_1.requestHighDetailModel = requestHighDetailModel;
    /**
     * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
     * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" corresponds to a unique identifier within the recording streaming module.
     * (GTA) Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
     *
     * Hash: 0xC474CF16EDA45DC9 | Since: 1207
     */
    function requestRecording(recording) {
        return RequestVehicleRecording(recording);
    }
    vehicle_1.requestRecording = requestRecording;
    /**
     * No comment provided
     *
     * Hash: 0x23298B468F7D88B6 | Since: 1207
     */
    function resetStuckTimer(vehicle, nullAttributes) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        ResetVehicleStuckTimer(_vehicle, nullAttributes);
    }
    vehicle_1.resetStuckTimer = resetStuckTimer;
    /**
     * No comment provided
     *
     * Hash: 0x8D3230A0ED7DE39F | Since: 1207
     */
    function setAllowExplodesOnContact(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetAllowVehicleExplodesOnContact(_vehicle, false);
    }
    vehicle_1.setAllowExplodesOnContact = setAllowExplodesOnContact;
    /**
     * No comment provided
     *
     * Hash: 0x3D596E6E88A02C24 | Since: 1207
     */
    function setAllGeneratorsActive() {
        SetAllVehicleGeneratorsActive();
    }
    vehicle_1.setAllGeneratorsActive = setAllGeneratorsActive;
    /**
     * No comment provided
     *
     * Hash: 0xBBB134FB9D50C0CC | Since: 1207
     */
    function setAllGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2) {
        SetAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, false, false);
    }
    vehicle_1.setAllGeneratorsActiveInArea = setAllGeneratorsActiveInArea;
    /**
     * No comment provided
     *
     * Hash: 0xAEAB044F05B92659 | Since: 1207
     */
    function setBoatAnchor(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetBoatAnchor(_vehicle, toggle);
    }
    vehicle_1.setBoatAnchor = setBoatAnchor;
    /**
     * Value: mostly 99999.9f
     *
     * Old name: _SET_BOAT_MOVEMENT_RESISTANCE
     *
     * Hash: 0xE3261532550D6A9F | Since: 1207
     */
    function setBoatLowLodAnchorDistance(vehicle, value) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetBoatLowLodAnchorDistance(_vehicle, value);
    }
    vehicle_1.setBoatLowLodAnchorDistance = setBoatLowLodAnchorDistance;
    /**
     * Old name: _SET_BOAT_FROZEN_WHEN_ANCHORED
     *
     * Hash: 0x286771F3059A37A7 | Since: 1207
     */
    function setBoatRemainsAnchoredWhilePlayerIsDriver(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetBoatRemainsAnchoredWhilePlayerIsDriver(_vehicle, false, false);
    }
    vehicle_1.setBoatRemainsAnchoredWhilePlayerIsDriver = setBoatRemainsAnchoredWhilePlayerIsDriver;
    /**
     * No comment provided
     *
     * Hash: 0x62A6D317A011EA1D | Since: 1207
     */
    function setBoatSinksWhenWrecked(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetBoatSinksWhenWrecked(_vehicle, toggle);
    }
    vehicle_1.setBoatSinksWhenWrecked = setBoatSinksWhenWrecked;
    /**
     * No comment provided
     *
     * Hash: 0xBC4735F48CD983EF | Since: 1207
     */
    function setBreakableLocksUnbreakable(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetBreakableVehicleLocksUnbreakable(_vehicle, toggle);
    }
    vehicle_1.setBreakableLocksUnbreakable = setBreakableLocksUnbreakable;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xD4288603E8766FF7 | Since: 1207
     */
    function setDisableRandomTrainsThisFrame(toggle) {
        SetDisableRandomTrainsThisFrame(toggle);
    }
    vehicle_1.setDisableRandomTrainsThisFrame = setDisableRandomTrainsThisFrame;
    /**
     * Old name: _SET_DISABLE_SUPERDUMMY_MODE
     *
     * Hash: 0x1716D787D9B94202 | Since: 1232
     */
    function setDisableSuperdummy(vehicle, disable) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDisableSuperdummy(_vehicle, disable);
    }
    vehicle_1.setDisableSuperdummy = setDisableSuperdummy;
    /**
     * No comment provided
     *
     * Hash: 0xD146EE5F2B06B95E | Since: 1207
     */
    function setDisableEngineFires(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDisableVehicleEngineFires(_vehicle, false);
    }
    vehicle_1.setDisableEngineFires = setDisableEngineFires;
    /**
     * No comment provided
     *
     * Hash: 0x5795FBE7A2001C14 | Since: 1207
     */
    function setDisablePetrolTankDamage(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDisableVehiclePetrolTankDamage(_vehicle, toggle);
    }
    vehicle_1.setDisablePetrolTankDamage = setDisablePetrolTankDamage;
    /**
     * No comment provided
     *
     * Hash: 0xB70986AB19B04AFF | Since: 1207
     */
    function setDisablePetrolTankFires(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDisableVehiclePetrolTankFires(_vehicle, toggle);
    }
    vehicle_1.setDisablePetrolTankFires = setDisablePetrolTankFires;
    /**
     * No comment provided
     *
     * Hash: 0x63DC1F22C903B709 | Since: 1207
     */
    function setDontAllowPlayerToEnterIfLockedForPlayer(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDontAllowPlayerToEnterVehicleIfLockedForPlayer(_vehicle, false);
    }
    vehicle_1.setDontAllowPlayerToEnterIfLockedForPlayer = setDontAllowPlayerToEnterIfLockedForPlayer;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Old name: _SET_VEHICLE_DOOR_CAN_BREAK
     *
     * Hash: 0x081FB9D6422F804C | Since: 1207
     */
    function setDoorAllowedToBeBrokenOff(vehicle, doorId, isBreakable) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDoorAllowedToBeBrokenOff(_vehicle, doorId, isBreakable);
    }
    vehicle_1.setDoorAllowedToBeBrokenOff = setDoorAllowedToBeBrokenOff;
    /**
     * No comment provided
     *
     * Hash: 0x73F1E4F6DF26FE30 | Since: 1207
     */
    function setEnableSlipstreaming() {
        SetEnableVehicleSlipstreaming(false);
    }
    vehicle_1.setEnableSlipstreaming = setEnableSlipstreaming;
    /**
     * No comment provided
     *
     * Hash: 0x373CB1283308BD7B | Since: 1207
     */
    function setForceHd(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetForceHdVehicle(_vehicle, toggle);
    }
    vehicle_1.setForceHd = setForceHd;
    /**
     * Sets boat to be anchored on spawn, called together with SET_BOAT_ANCHOR and _SET_BOAT_ANCHOR_BUOYANCY_COEFFICIENT
     *
     * Hash: 0x75B49ACD73617437 | Since: 1207
     */
    function setForceLowLodAnchorMode(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetForceLowLodAnchorMode(_vehicle, false);
    }
    vehicle_1.setForceLowLodAnchorMode = setForceLowLodAnchorMode;
    /**
     * No comment provided
     *
     * Hash: 0x7F8E2B131E1DCA6C | Since: 1207
     */
    function setForceEngineDamageByBullet(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetForceVehicleEngineDamageByBullet(_vehicle, toggle);
    }
    vehicle_1.setForceEngineDamageByBullet = setForceEngineDamageByBullet;
    /**
     * flags = 0: DEFAULT; 1: KEEP_OLD_SPEED
     *
     * Hash: 0xBBE7648349B49BE8 | Since: 1207
     */
    function setMissionTrainAsNoLongerNeeded(train, flags) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetMissionTrainAsNoLongerNeeded(_train, flags);
    }
    vehicle_1.setMissionTrainAsNoLongerNeeded = setMissionTrainAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x7632755962AB9922 | Since: 1207
     */
    function setMissionTrainCoords(train, pos) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetMissionTrainCoords(_train, pos.x, pos.y, pos.z);
    }
    vehicle_1.setMissionTrainCoords = setMissionTrainCoords;
    /**
     * No comment provided
     *
     * Hash: 0xFEDFA97638D61D4A | Since: 1207
     */
    function setParkedDensityMultiplierThisFrame(multiplier) {
        SetParkedVehicleDensityMultiplierThisFrame(multiplier);
    }
    vehicle_1.setParkedDensityMultiplierThisFrame = setParkedDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x838C216C2B05A009 | Since: 1207
     */
    function setPedOwns(ped, vehicle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetPedOwnsVehicle(_ped, _vehicle);
    }
    vehicle_1.setPedOwns = setPedOwns;
    /**
     * No comment provided
     *
     * Hash: 0xD78084EED4CD94C6 | Since: 1207
     */
    function setPlaybackSpeed(vehicle, speed) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetPlaybackSpeed(_vehicle, speed);
    }
    vehicle_1.setPlaybackSpeed = setPlaybackSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xF44D446D4E36DB87 | Since: 1207
     */
    function setRandomBoats(toggle) {
        SetRandomBoats(toggle);
    }
    vehicle_1.setRandomBoats = setRandomBoats;
    /**
     * No comment provided
     *
     * Hash: 0x1156C6EE7E82A98A | Since: 1207
     */
    function setRandomTrains(toggle) {
        SetRandomTrains(toggle);
    }
    vehicle_1.setRandomTrains = setRandomTrains;
    /**
     * No comment provided
     *
     * Hash: 0x1F91D44490E1EA0C | Since: 1207
     */
    function setRandomDensityMultiplierThisFrame(multiplier) {
        SetRandomVehicleDensityMultiplierThisFrame(multiplier);
    }
    vehicle_1.setRandomDensityMultiplierThisFrame = setRandomDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x01021EB2E96B793C | Since: 1207
     */
    function setTrainCruiseSpeed(train, speed) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetTrainCruiseSpeed(_train, speed);
    }
    vehicle_1.setTrainCruiseSpeed = setTrainCruiseSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x8EC47DD4300BF063 | Since: 1207
     */
    function setTrainOffsetFromStation(train, offset) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetTrainOffsetFromStation(_train, offset);
    }
    vehicle_1.setTrainOffsetFromStation = setTrainOffsetFromStation;
    /**
     * No comment provided
     *
     * Hash: 0xDFBA6BBFF7CCAFBB | Since: 1207
     */
    function setTrainSpeed(train, speed) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetTrainSpeed(_train, speed);
    }
    vehicle_1.setTrainSpeed = setTrainSpeed;
    /**
     * Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
     *
     * Hash: 0x0893DAFBFA67110E | Since: 1207
     */
    function setAiCanUseExclusiveSeats(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleAiCanUseExclusiveSeats(_vehicle, toggle);
    }
    vehicle_1.setAiCanUseExclusiveSeats = setAiCanUseExclusiveSeats;
    /**
     * No comment provided
     *
     * Hash: 0x1240E8596A8308B9 | Since: 1207
     */
    function setAllowHomingMissleLockon(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleAllowHomingMissleLockon(_vehicle, toggle);
    }
    vehicle_1.setAllowHomingMissleLockon = setAllowHomingMissleLockon;
    /**
     * Makes the vehicle accept no passengers.
     *
     * Hash: 0xECB9E9BC887E8060 | Since: 1207
     */
    function setAllowNoPassengersLockon(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleAllowNoPassengersLockon(_vehicle, toggle);
    }
    vehicle_1.setAllowNoPassengersLockon = setAllowNoPassengersLockon;
    /**
     * No comment provided
     *
     * Hash: 0x501354951CD942DE | Since: 1207
     */
    function setAutomaticallyAttaches(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return SetVehicleAutomaticallyAttaches(_vehicle, false, undefined);
    }
    vehicle_1.setAutomaticallyAttaches = setAutomaticallyAttaches;
    /**
     * No comment provided
     *
     * Hash: 0x55CCAAE4F28C67A0 | Since: 1207
     */
    function setBodyHealth(vehicle, value) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleBodyHealth(_vehicle, value);
    }
    vehicle_1.setBodyHealth = setBodyHealth;
    /**
     * No comment provided
     *
     * Hash: 0xCEC4CA2CAB8FA98C | Since: 1207
     */
    function setBrokenPartsDontAffectAiHandling(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleBrokenPartsDontAffectAiHandling(_vehicle, false);
    }
    vehicle_1.setBrokenPartsDontAffectAiHandling = setBrokenPartsDontAffectAiHandling;
    /**
     * No comment provided
     *
     * Hash: 0x05254BA0B44ADC16 | Since: 1207
     */
    function setCanBeTargetted(vehicle, state) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleCanBeTargetted(_vehicle, state);
    }
    vehicle_1.setCanBeTargetted = setCanBeTargetted;
    /**
     * No comment provided
     *
     * Hash: 0xE42952510F84AFDB | Since: 1207
     */
    function setCanBeUsedByFleeingPeds(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleCanBeUsedByFleeingPeds(_vehicle, toggle);
    }
    vehicle_1.setCanBeUsedByFleeingPeds = setCanBeUsedByFleeingPeds;
    /**
     * No comment provided
     *
     * Hash: 0x4BF8131AE811541C | Since: 1207
     */
    function setCanBeVisiblyDamaged(vehicle, state) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleCanBeVisiblyDamaged(_vehicle, state);
    }
    vehicle_1.setCanBeVisiblyDamaged = setCanBeVisiblyDamaged;
    /**
     * No comment provided
     *
     * Hash: 0xC5ED9D59B4646611 | Since: 1207
     */
    function setCanBreak(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleCanBreak(_vehicle, toggle);
    }
    vehicle_1.setCanBreak = setCanBreak;
    /**
     * No comment provided
     *
     * Hash: 0x065D03A9D6B2C6B5 | Since: 1207
     */
    function setCanEjectPassengersIfLocked(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleCanEjectPassengersIfLocked(_vehicle, false);
    }
    vehicle_1.setCanEjectPassengersIfLocked = setCanEjectPassengersIfLocked;
    /**
     * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
     *
     * Radius of effect damage applied in a sphere at impact location
     *
     * Hash: 0x1D7678F81452BB41 | Since: 1207
     */
    function setDamage(vehicle, xOffset, yOffset, zOffset, damage, radius) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDamage(_vehicle, xOffset, yOffset, zOffset, damage, radius, false);
    }
    vehicle_1.setDamage = setDamage;
    /**
     * No comment provided
     *
     * Hash: 0x606374EBFC27B133 | Since: 1207
     */
    function setDensityMultiplierThisFrame(multiplier) {
        SetVehicleDensityMultiplierThisFrame(multiplier);
    }
    vehicle_1.setDensityMultiplierThisFrame = setDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x758C3460EE915D0A | Since: 1207
     */
    function setDirtLevel(vehicle, dirtLevel) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDirtLevel(_vehicle, dirtLevel);
    }
    vehicle_1.setDirtLevel = setDirtLevel;
    /**
     * No comment provided
     *
     * Hash: 0x96F78A6A075D55D9 | Since: 1207
     */
    function setDoorsLocked(vehicle, doorLockStatus) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorsLocked(_vehicle, doorLockStatus);
    }
    vehicle_1.setDoorsLocked = setDoorsLocked;
    /**
     * No comment provided
     *
     * Hash: 0x2381977DA948F8DC | Since: 1207
     */
    function setDoorsLockedForAllPlayers(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorsLockedForAllPlayers(_vehicle, toggle);
    }
    vehicle_1.setDoorsLockedForAllPlayers = setDoorsLockedForAllPlayers;
    /**
     * No comment provided
     *
     * Hash: 0x359A8EA1FB8D6F0F | Since: 1207
     */
    function setDoorsLockedForPlayer(vehicle, player, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        const _player = player instanceof Player ? player.localId() : player;
        SetVehicleDoorsLockedForPlayer(_vehicle, _player, toggle);
    }
    vehicle_1.setDoorsLockedForPlayer = setDoorsLockedForPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xE712BC978770F105 | Since: 1207
     */
    function setDoorsLockedForTeam(vehicle, team, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorsLockedForTeam(_vehicle, team, toggle);
    }
    vehicle_1.setDoorsLockedForTeam = setDoorsLockedForTeam;
    /**
     * Closes all doors of a vehicle:
     *
     * Hash: 0xA4FFCD645B11F25A | Since: 1207
     */
    function setDoorsShut(vehicle, closeInstantly) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorsShut(_vehicle, closeInstantly);
    }
    vehicle_1.setDoorsShut = setDoorsShut;
    /**
     * No comment provided
     *
     * Hash: 0x362CEDD2A41E0747 | Since: 1232
     */
    function setDoorsToOpenAtAnyDistance(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorsToOpenAtAnyDistance(_vehicle, toggle);
    }
    vehicle_1.setDoorsToOpenAtAnyDistance = setDoorsToOpenAtAnyDistance;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x9666CF20A1C6D780 | Since: 1207
     */
    function setDoorBroken(vehicle, doorId, deleteDoor) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorBroken(_vehicle, doorId, deleteDoor);
    }
    vehicle_1.setDoorBroken = setDoorBroken;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xD57F10EBBA814ECF | Since: 1207
     */
    function setDoorControl(vehicle, doorId, speed, angle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorControl(_vehicle, doorId, speed, angle);
    }
    vehicle_1.setDoorControl = setDoorControl;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x06F8A202EB312A3C | Since: 1207
     */
    function setDoorLatched(vehicle, doorId) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorLatched(_vehicle, doorId, false, false, false);
    }
    vehicle_1.setDoorLatched = setDoorLatched;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     * Can also be used on trains and its wagons
     *
     * Hash: 0x550CE392A4672412 | Since: 1207
     */
    function setDoorOpen(vehicle, doorId, loose, openInstantly) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorOpen(_vehicle, doorId, loose, openInstantly);
    }
    vehicle_1.setDoorOpen = setDoorOpen;
    /**
     * doorId: enum eDoorId
     * {
     * VEH_EXT_DOOR_INVALID_ID = -1,
     * VEH_EXT_DOOR_DSIDE_F,
     * VEH_EXT_DOOR_DSIDE_M,
     * VEH_EXT_DOOR_DSIDE_M1,
     * VEH_EXT_DOOR_DSIDE_M2,
     * VEH_EXT_DOOR_DSIDE_R,
     * VEH_EXT_DOOR_PSIDE_F,
     * VEH_EXT_DOOR_PSIDE_M,
     * VEH_EXT_DOOR_PSIDE_M1,
     * VEH_EXT_DOOR_PSIDE_M2,
     * VEH_EXT_DOOR_PSIDE_R,
     * VEH_EXT_BONNET,
     * VEH_EXT_BOOT
     * };
     *
     * Hash: 0x6A3C24B91FD0EA09 | Since: 1207
     */
    function setDoorShut(vehicle, doorId, closeInstantly) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDoorShut(_vehicle, doorId, closeInstantly);
    }
    vehicle_1.setDoorShut = setDoorShut;
    /**
     * No comment provided
     *
     * Hash: 0x48E4C137A71C2688 | Since: 1207
     */
    function setEngineCanDegrade(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleEngineCanDegrade(_vehicle, toggle);
    }
    vehicle_1.setEngineCanDegrade = setEngineCanDegrade;
    /**
     * 1000 is max health
     * Begins leaking gas at around 650 health
     * -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement
     *
     * -------------------------
     * Minimum: -4000
     * Maximum: 1000
     *
     * -4000: Engine is destroyed
     * 0 and below: Engine catches fire and health rapidly declines
     * 300: Engine is smoking and losing functionality
     * 1000: Engine is perfect
     *
     * Hash: 0x8BDC5B998B4654EF | Since: 1207
     */
    function setEngineHealth(vehicle, health) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleEngineHealth(_vehicle, health);
    }
    vehicle_1.setEngineHealth = setEngineHealth;
    /**
     * Starts or stops the engine on the specified vehicle.
     *
     * vehicle: The vehicle to start or stop the engine on.
     * value: true to turn the vehicle on; false to turn it off.
     * instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
     *
     * Hash: 0xB64CFA14CB9A2E78 | Since: 1207
     */
    function setEngineOn(vehicle, value, instantly) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleEngineOn(_vehicle, value, instantly);
    }
    vehicle_1.setEngineOn = setEngineOn;
    /**
     * index: 0 - 1
     *
     * Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
     *
     * Hash: 0xC6B9BF123B9463B6 | Since: 1207
     */
    function setExclusiveDriver(vehicle, ped, index) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetVehicleExclusiveDriver(_vehicle, _ped, index);
    }
    vehicle_1.setExclusiveDriver = setExclusiveDriver;
    /**
     * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
     *
     * Hash: 0xA402939C6761E1A3 | Since: 1207
     */
    function setExplodesOnHighExplosionDamage(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleExplodesOnHighExplosionDamage(_vehicle, toggle);
    }
    vehicle_1.setExplodesOnHighExplosionDamage = setExplodesOnHighExplosionDamage;
    /**
     * Note: only some vehicle have extras
     * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_extras.lua
     *
     * Hash: 0xBB6F89150BC9D16B | Since: 1207
     */
    function setExtra(vehicle, extraId, disable) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleExtra(_vehicle, extraId, disable);
    }
    vehicle_1.setExtra = setExtra;
    /**
     * This fixes a vehicle.
     * If the vehicle's engine's broken then you cannot fix it with this native.
     *
     * Hash: 0x79811282A9D1AE56 | Since: 1207
     */
    function setFixed(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleFixed(_vehicle);
    }
    vehicle_1.setFixed = setFixed;
    /**
     * No comment provided
     *
     * Hash: 0xF9F92AF49F12F6E7 | Since: 1207
     */
    function setForwardSpeed(vehicle, speed) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleForwardSpeed(_vehicle, speed);
    }
    vehicle_1.setForwardSpeed = setForwardSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x91BE51AEC4E99710 | Since: 1207
     */
    function setHandbrake(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleHandbrake(_vehicle, toggle);
    }
    vehicle_1.setHandbrake = setHandbrake;
    /**
     * No comment provided
     *
     * Hash: 0xBB5A3FA8ED3979C5 | Since: 1207
     */
    function setHasBeenOwnedByPlayer(vehicle, owned) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleHasBeenOwnedByPlayer(_vehicle, owned);
    }
    vehicle_1.setHasBeenOwnedByPlayer = setHasBeenOwnedByPlayer;
    /**
     * if true, axles won't bend.
     *
     * Hash: 0x252253C8A45AA1FC | Since: 1207
     */
    function setHasStrongAxles(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleHasStrongAxles(_vehicle, toggle);
    }
    vehicle_1.setHasStrongAxles = setHasStrongAxles;
    /**
     * No comment provided
     *
     * Hash: 0xC903855E028A05F2 | Since: 1207
     */
    function setHasUnbreakableLights(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleHasUnbreakableLights(_vehicle, false);
    }
    vehicle_1.setHasUnbreakableLights = setHasUnbreakableLights;
    /**
     * No comment provided
     *
     * Hash: 0x4EA71B4C9DB3C3F1 | Since: 1207
     */
    function setInactiveDuringPlayback(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleInactiveDuringPlayback(_vehicle, toggle);
    }
    vehicle_1.setInactiveDuringPlayback = setInactiveDuringPlayback;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xA9F1D75195CC40F6 | Since: 1207
     */
    function setIndividualDoorsLocked(vehicle, doorId, doorLockStatus) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleIndividualDoorsLocked(_vehicle, doorId, doorLockStatus);
    }
    vehicle_1.setIndividualDoorsLocked = setIndividualDoorsLocked;
    /**
     * No comment provided
     *
     * Hash: 0xC1842F40FD501DA2 | Since: 1207
     */
    function setInfluencesWantedLevel(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleInfluencesWantedLevel(_vehicle, toggle);
    }
    vehicle_1.setInfluencesWantedLevel = setInfluencesWantedLevel;
    /**
     * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
     *
     * Hash: 0x54800D386C5825E5 | Since: 1207
     */
    function setIsConsideredByPlayer(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleIsConsideredByPlayer(_vehicle, toggle);
    }
    vehicle_1.setIsConsideredByPlayer = setIsConsideredByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x6C32FC81DFF25C9A | Since: 1207
     */
    function setIsStolen(vehicle, isStolen) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleIsStolen(_vehicle, isStolen);
    }
    vehicle_1.setIsStolen = setIsStolen;
    /**
     * No comment provided
     *
     * Hash: 0x1549BA7FE83A2383 | Since: 1207
     */
    function setKeepEngineOnWhenAbandoned(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleKeepEngineOnWhenAbandoned(_vehicle, toggle);
    }
    vehicle_1.setKeepEngineOnWhenAbandoned = setKeepEngineOnWhenAbandoned;
    /**
     * Sets the vehicle's lights state.
     *
     * Hash: 0x629F0A0E952CAE7D | Since: 1207
     */
    function setLights(vehicle, state) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleLights(_vehicle, state);
    }
    vehicle_1.setLights = setLights;
    /**
     * _SET_VEHICLE_LI*
     *
     * Hash: 0x8F75941C86EEBFCA | Since: 1207
     */
    function setLimitSpeedWhenPlayerInactive(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleLimitSpeedWhenPlayerInactive(_vehicle, false);
    }
    vehicle_1.setLimitSpeedWhenPlayerInactive = setLimitSpeedWhenPlayerInactive;
    /**
     * No comment provided
     *
     * Hash: 0x5F5E2B1B9EAECC0F | Since: 1207
     */
    function setLodMultiplier(vehicle, multiplier) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleLodMultiplier(_vehicle, multiplier);
    }
    vehicle_1.setLodMultiplier = setLodMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x7549B9E841940695 | Since: 1207
     */
    function setMayBeUsedByGotoPointAnyMeans(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleMayBeUsedByGotoPointAnyMeans(_vehicle, false);
    }
    vehicle_1.setMayBeUsedByGotoPointAnyMeans = setMayBeUsedByGotoPointAnyMeans;
    /**
     * No comment provided
     *
     * Hash: 0x09C970AE59ABF6B2 | Since: 1207
     */
    function setNotStealableAmbiently(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleNotStealableAmbiently(_vehicle, false);
    }
    vehicle_1.setNotStealableAmbiently = setNotStealableAmbiently;
    /**
     * No comment provided
     *
     * Hash: 0x7263332501E07F52 | Since: 1207
     */
    function setOnGroundProperly(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return SetVehicleOnGroundProperly(_vehicle, false);
    }
    vehicle_1.setOnGroundProperly = setOnGroundProperly;
    /**
     * 1000 is max health
     *
     * Hash: 0x6AB2918EE3BEC94C | Since: 1207
     */
    function setPetrolTankHealth(vehicle, health) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehiclePetrolTankHealth(_vehicle, health);
    }
    vehicle_1.setPetrolTankHealth = setPetrolTankHealth;
    /**
     * No comment provided
     *
     * Hash: 0x652712478F1721F4 | Since: 1207
     */
    function setProvidesCover(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleProvidesCover(_vehicle, toggle);
    }
    vehicle_1.setProvidesCover = setProvidesCover;
    /**
     * No comment provided
     *
     * Hash: 0x33992A808DF1C1BA | Since: 1207
     */
    function setRespectsLocksWhenHasDriver(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleRespectsLocksWhenHasDriver(_vehicle, false);
    }
    vehicle_1.setRespectsLocksWhenHasDriver = setRespectsLocksWhenHasDriver;
    /**
     * No comment provided
     *
     * Hash: 0xB79BE78C665B3E6D | Since: 1207
     */
    function setShootAtTarget() {
        SetVehicleShootAtTarget(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1.setShootAtTarget = setShootAtTarget;
    /**
     * No comment provided
     *
     * Hash: 0x23A3AB86E0807721 | Since: 1207
     */
    function setStaysFrozenWhenCleanedUp(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleStaysFrozenWhenCleanedUp(_vehicle, toggle);
    }
    vehicle_1.setStaysFrozenWhenCleanedUp = setStaysFrozenWhenCleanedUp;
    /**
     * Locks the vehicle's steering to the desired angle, explained below.
     *
     * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
     *
     * Steer bias:
     * -1.0 = full right
     * 0.0 = centered steering
     * 1.0 = full left
     *
     * Hash: 0x84DAAE11E9EE4FC3 | Since: 1207
     */
    function setSteerBias(vehicle, value) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleSteerBias(_vehicle, value);
    }
    vehicle_1.setSteerBias = setSteerBias;
    /**
     * No comment provided
     *
     * Hash: 0xC84E138448507567 | Since: 1207
     */
    function setStopInstantlyWhenPlayerInactive(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleStopInstantlyWhenPlayerInactive(_vehicle, false);
    }
    vehicle_1.setStopInstantlyWhenPlayerInactive = setStopInstantlyWhenPlayerInactive;
    /**
     * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
     *
     * Hash: 0xAB315515C9F8803D | Since: 1207
     */
    function setStrong(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleStrong(_vehicle, toggle);
    }
    vehicle_1.setStrong = setStrong;
    /**
     * Allows you to toggle bulletproof tires.
     *
     * Hash: 0xEBD0A4E935106FE5 | Since: 1207
     */
    function setTyresCanBurst(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleTyresCanBurst(_vehicle, toggle);
    }
    vehicle_1.setTyresCanBurst = setTyresCanBurst;
    /**
     * No comment provided
     *
     * Hash: 0x6E884BAB713A2A94 | Since: 1207
     */
    function setUndriveable(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleUndriveable(_vehicle, toggle);
    }
    vehicle_1.setUndriveable = setUndriveable;
    /**
     * No comment provided
     *
     * Hash: 0x839137C40275FB77 | Since: 1207
     */
    function setWheelsCanBreak(vehicle, enabled) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleWheelsCanBreak(_vehicle, enabled);
    }
    vehicle_1.setWheelsCanBreak = setWheelsCanBreak;
    /**
     * No comment provided
     *
     * Hash: 0xC462C79379ABBCB1 | Since: 1207
     */
    function setWheelsCanBreakOffWhenBlowUp(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleWheelsCanBreakOffWhenBlowUp(_vehicle, toggle);
    }
    vehicle_1.setWheelsCanBreakOffWhenBlowUp = setWheelsCanBreakOffWhenBlowUp;
    /**
     * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
     *
     * Hash: 0x5F5E6379C59EFC56 | Since: 1207
     */
    function skipTimeInPlaybackRecorded(vehicle, time) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SkipTimeInPlaybackRecordedVehicle(_vehicle, time);
    }
    vehicle_1.skipTimeInPlaybackRecorded = skipTimeInPlaybackRecorded;
    /**
     * `p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).`
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x4932B84E3276508E | Since: 1207
     */
    function startPlaybackRecorded(vehicle, recording) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return StartPlaybackRecordedVehicle(_vehicle, recording, false);
    }
    vehicle_1.startPlaybackRecorded = startPlaybackRecorded;
    /**
     * Sounds the horn for the specified vehicle.
     *
     * vehicle: The vehicle to activate the horn for.
     * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
     * duration: The duration to sound the horn, in milliseconds.
     *
     * Note: If a player is in the vehicle, it will only sound briefly.
     *
     * Hash: 0xB4E3BFC39CA16057 | Since: 1207
     */
    function startHorn(vehicle, duration, mode, forever) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof mode === 'string')
            mode = misc.getHashKey(mode);
        StartVehicleHorn(_vehicle, duration, mode, forever);
    }
    vehicle_1.startHorn = startHorn;
    /**
     * Old name: _STOP_BRING_VEHICLE_TO_HALT
     *
     * Hash: 0x7C06330BFDDA182E | Since: 1207
     */
    function stopBringingToHalt(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        StopBringingVehicleToHalt(_vehicle);
    }
    vehicle_1.stopBringingToHalt = stopBringingToHalt;
    /**
     * No comment provided
     *
     * Hash: 0xBF9B4D6267E8C26D | Since: 1207
     */
    function stopPlaybackRecorded(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        StopPlaybackRecordedVehicle(_vehicle);
    }
    vehicle_1.stopPlaybackRecorded = stopPlaybackRecorded;
    /**
     * No comment provided
     *
     * Hash: 0x1F3969B140DEE157 | Since: 1207
     */
    function trackVisibility(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        TrackVehicleVisibility(_vehicle);
    }
    vehicle_1.trackVisibility = trackVisibility;
    /**
     * Only used in SP Scripts.
     * Related to Vehicle Speed.
     *
     * Hash: 0x012701ED938B85DE | Since: 1207
     */
    function _0x012701ED938B85DE() {
        Citizen.invokeNative('0x012701ED938B85DE', 0, 0);
    }
    vehicle_1._0x012701ED938B85DE = _0x012701ED938B85DE;
    /**
     * No comment provided
     *
     * Hash: 0x0355FE37240E2C77 | Since: 1207
     */
    function _0x0355FE37240E2C77() {
        Citizen.invokeNative('0x0355FE37240E2C77', undefined, undefined);
    }
    vehicle_1._0x0355FE37240E2C77 = _0x0355FE37240E2C77;
    /**
     * _SET_VEHICLE_*
     *
     * Hash: 0x04F0579DBDD32F34 | Since: 1207
     */
    function _0x04F0579DBDD32F34(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x04F0579DBDD32F34', _vehicle);
    }
    vehicle_1._0x04F0579DBDD32F34 = _0x04F0579DBDD32F34;
    /**
     * Takes value returned from 0x45853F4E17D847D5
     *
     * Hash: 0x0516FAE561276EFC | Since: 1207
     */
    function _0x0516FAE561276EFC(trackIndex) {
        return Citizen.invokeNative('0x0516FAE561276EFC', trackIndex);
    }
    vehicle_1._0x0516FAE561276EFC = _0x0516FAE561276EFC;
    /**
     * _SET_TRAIN_*
     *
     * Hash: 0x06A09A6E0C6D2A84 | Since: 1207
     */
    function _0x06A09A6E0C6D2A84(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0x06A09A6E0C6D2A84', _train, false);
    }
    vehicle_1._0x06A09A6E0C6D2A84 = _0x06A09A6E0C6D2A84;
    /**
     * _SET_VEHICLE_S*
     *
     * Hash: 0x0794199B25E499E1 | Since: 1207
     */
    function _0x0794199B25E499E1(wagon) {
        const _wagon = wagon instanceof Vehicle ? wagon.localId() : wagon;
        Citizen.invokeNative('0x0794199B25E499E1', _wagon, false);
    }
    vehicle_1._0x0794199B25E499E1 = _0x0794199B25E499E1;
    /**
     * No comment provided
     *
     * Hash: 0x07E2E21E799080A0 | Since: 1207
     */
    function _0x07E2E21E799080A0() {
        Citizen.invokeNative('0x07E2E21E799080A0', undefined, undefined);
    }
    vehicle_1._0x07E2E21E799080A0 = _0x07E2E21E799080A0;
    /**
     * Outputs track hash and junction index on given train vehicle handle.
     * _RESET_VEHICLE_* (?)
     *
     * Hash: 0x09034479E6E3E269 | Since: 1207
     */
    function returnTrainInfoFromHandle(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return Citizen.invokeNative('0x09034479E6E3E269', _train);
    }
    vehicle_1.returnTrainInfoFromHandle = returnTrainInfoFromHandle;
    /**
     * No comment provided
     *
     * Hash: 0x0BA4250D20007C2E | Since: 1207
     */
    function _0x0BA4250D20007C2E() {
        return Citizen.invokeNative('0x0BA4250D20007C2E', undefined);
    }
    vehicle_1._0x0BA4250D20007C2E = _0x0BA4250D20007C2E;
    /**
     * No comment provided
     *
     * Hash: 0x0CD7914D17A970AB | Since: 1207
     */
    function _0x0CD7914D17A970AB() {
        Citizen.invokeNative('0x0CD7914D17A970AB', undefined, undefined);
    }
    vehicle_1._0x0CD7914D17A970AB = _0x0CD7914D17A970AB;
    /**
     * No comment provided
     *
     * Hash: 0x0D5FDF0D36FA10CD | Since: 1207
     */
    function _0x0D5FDF0D36FA10CD(trackIndex) {
        Citizen.invokeNative('0x0D5FDF0D36FA10CD', trackIndex);
    }
    vehicle_1._0x0D5FDF0D36FA10CD = _0x0D5FDF0D36FA10CD;
    /**
     * No comment provided
     *
     * Hash: 0x0E558D3A49D759D6 | Since: 1207
     */
    function _0x0E558D3A49D759D6() {
        return Citizen.invokeNative('0x0E558D3A49D759D6', undefined, undefined);
    }
    vehicle_1._0x0E558D3A49D759D6 = _0x0E558D3A49D759D6;
    /**
     * No comment provided
     *
     * Hash: 0x0F7F603BDE08C4D3 | Since: 1207
     */
    function _0x0F7F603BDE08C4D3() {
        Citizen.invokeNative('0x0F7F603BDE08C4D3', undefined);
    }
    vehicle_1._0x0F7F603BDE08C4D3 = _0x0F7F603BDE08C4D3;
    /**
     * No comment provided
     *
     * Hash: 0x0FDDEE66E3465726 | Since: 1207
     */
    function _0x0FDDEE66E3465726() {
        return Citizen.invokeNative('0x0FDDEE66E3465726', undefined);
    }
    vehicle_1._0x0FDDEE66E3465726 = _0x0FDDEE66E3465726;
    /**
     * No comment provided
     *
     * Hash: 0x104D9A7B1C0D0783 | Since: 1207
     */
    function _0x104D9A7B1C0D0783(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x104D9A7B1C0D0783', _vehicle, 0);
    }
    vehicle_1._0x104D9A7B1C0D0783 = _0x104D9A7B1C0D0783;
    /**
     * No comment provided
     *
     * Hash: 0x1121B07088ED3013 | Since: 1207
     */
    function _0x1121B07088ED3013() {
        return Citizen.invokeNative('0x1121B07088ED3013', undefined);
    }
    vehicle_1._0x1121B07088ED3013 = _0x1121B07088ED3013;
    /**
     * Returns p1 for 0xBA958F68031DDBFC (stationIndex)
     * _GET_N* (NEAREST_STATION_FOR_TRAIN?)
     *
     * Hash: 0x1180A2974D251B7B | Since: 1207
     */
    function _0x1180A2974D251B7B(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return Citizen.invokeNative('0x1180A2974D251B7B', _train);
    }
    vehicle_1._0x1180A2974D251B7B = _0x1180A2974D251B7B;
    /**
     * Params: coords = GET_ENTITY_VELOCITY
     * _SET_VELOCITY*
     *
     * Hash: 0x12F6C6ED3EFF42DE | Since: 1207
     */
    function _0x12F6C6ED3EFF42DE(vehicle, pos) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x12F6C6ED3EFF42DE', _vehicle, pos.x, pos.y, pos.z);
    }
    vehicle_1._0x12F6C6ED3EFF42DE = _0x12F6C6ED3EFF42DE;
    /**
     * No comment provided
     *
     * Hash: 0x13C190302369308B | Since: 1207
     */
    function _0x13C190302369308B() {
        return Citizen.invokeNative('0x13C190302369308B', undefined);
    }
    vehicle_1._0x13C190302369308B = _0x13C190302369308B;
    /**
     * No comment provided
     *
     * Hash: 0x13EB275BF81636D1 | Since: 1207
     */
    function _0x13EB275BF81636D1() {
        Citizen.invokeNative('0x13EB275BF81636D1', undefined, undefined);
    }
    vehicle_1._0x13EB275BF81636D1 = _0x13EB275BF81636D1;
    /**
     * No comment provided
     *
     * Hash: 0x14DA8C4BC2CCD90A | Since: 1207
     */
    function _0x14DA8C4BC2CCD90A() {
        return Citizen.invokeNative('0x14DA8C4BC2CCD90A', undefined);
    }
    vehicle_1._0x14DA8C4BC2CCD90A = _0x14DA8C4BC2CCD90A;
    /**
     * No comment provided
     *
     * Hash: 0x15206E88FF7617DF | Since: 1207
     */
    function _0x15206E88FF7617DF(trackIndex) {
        Citizen.invokeNative('0x15206E88FF7617DF', trackIndex, 0);
    }
    vehicle_1._0x15206E88FF7617DF = _0x15206E88FF7617DF;
    /**
     * No comment provided
     *
     * Hash: 0x15CC8C33D7FFCC4A | Since: 1436
     */
    function _0x15CC8C33D7FFCC4A(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x15CC8C33D7FFCC4A', _vehicle, 0);
    }
    vehicle_1._0x15CC8C33D7FFCC4A = _0x15CC8C33D7FFCC4A;
    /**
     * No comment provided
     *
     * Hash: 0x160C1B5AB48AB87C | Since: 1207
     */
    function _0x160C1B5AB48AB87C(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0x160C1B5AB48AB87C', _train, 0);
    }
    vehicle_1._0x160C1B5AB48AB87C = _0x160C1B5AB48AB87C;
    /**
     * No comment provided
     *
     * Hash: 0x165BE2001E5E4B75 | Since: 1207
     */
    function _0x165BE2001E5E4B75() {
        Citizen.invokeNative('0x165BE2001E5E4B75', undefined);
    }
    vehicle_1._0x165BE2001E5E4B75 = _0x165BE2001E5E4B75;
    /**
     * No comment provided
     *
     * Hash: 0x16B86A49E072AA85 | Since: 1207
     */
    function _0x16B86A49E072AA85() {
        Citizen.invokeNative('0x16B86A49E072AA85');
    }
    vehicle_1._0x16B86A49E072AA85 = _0x16B86A49E072AA85;
    /**
     * No comment provided
     *
     * Hash: 0x172E9DD35858DCD7 | Since: 1207
     */
    function _0x172E9DD35858DCD7() {
        Citizen.invokeNative('0x172E9DD35858DCD7', undefined);
    }
    vehicle_1._0x172E9DD35858DCD7 = _0x172E9DD35858DCD7;
    /**
     * returns true if any wheel is destroyed/detached
     *
     * Hash: 0x18714953CCED17D3 | Since: 1207
     */
    function areAnyWheelsDestroyed(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return Citizen.invokeNative('0x18714953CCED17D3', _vehicle);
    }
    vehicle_1.areAnyWheelsDestroyed = areAnyWheelsDestroyed;
    /**
     * No comment provided
     *
     * Hash: 0x1A861F899EBBE17C | Since: 1207
     */
    function _0x1A861F899EBBE17C(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0x1A861F899EBBE17C', _train, false);
    }
    vehicle_1._0x1A861F899EBBE17C = _0x1A861F899EBBE17C;
    /**
     * No comment provided
     *
     * Hash: 0x1BFBAFCC6760FF02 | Since: 1207
     */
    function _0x1BFBAFCC6760FF02(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0x1BFBAFCC6760FF02', _train, false);
    }
    vehicle_1._0x1BFBAFCC6760FF02 = _0x1BFBAFCC6760FF02;
    /**
     * No comment provided
     *
     * Hash: 0x2045429505158D1A | Since: 1207
     */
    function _0x2045429505158D1A() {
        return Citizen.invokeNative('0x2045429505158D1A', undefined);
    }
    vehicle_1._0x2045429505158D1A = _0x2045429505158D1A;
    /**
     * No comment provided
     *
     * Hash: 0x2200AB13CBD10F4E | Since: 1207
     */
    function _0x2200AB13CBD10F4E(vehicle, pos) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x2200AB13CBD10F4E', _vehicle, pos.x, pos.y, pos.z, false, 0);
    }
    vehicle_1._0x2200AB13CBD10F4E = _0x2200AB13CBD10F4E;
    /**
     * No comment provided
     *
     * Hash: 0x23F66C36F8E5EAAB | Since: 1207
     */
    function _0x23F66C36F8E5EAAB() {
        Citizen.invokeNative('0x23F66C36F8E5EAAB', undefined, undefined);
    }
    vehicle_1._0x23F66C36F8E5EAAB = _0x23F66C36F8E5EAAB;
    /**
     * No comment provided
     *
     * Hash: 0x27E3F2B57209FA54 | Since: 1207
     */
    function _0x27E3F2B57209FA54() {
        Citizen.invokeNative('0x27E3F2B57209FA54', undefined, undefined);
    }
    vehicle_1._0x27E3F2B57209FA54 = _0x27E3F2B57209FA54;
    /**
     * No comment provided
     *
     * Hash: 0x288CBB414C3C2FBB | Since: 1207
     */
    function _0x288CBB414C3C2FBB() {
        return Citizen.invokeNative('0x288CBB414C3C2FBB', undefined);
    }
    vehicle_1._0x288CBB414C3C2FBB = _0x288CBB414C3C2FBB;
    /**
     * No comment provided
     *
     * Hash: 0x2A7413168F6CD5A8 | Since: 1207
     */
    function _0x2A7413168F6CD5A8() {
        Citizen.invokeNative('0x2A7413168F6CD5A8');
    }
    vehicle_1._0x2A7413168F6CD5A8 = _0x2A7413168F6CD5A8;
    /**
     * No comment provided
     *
     * Hash: 0x2BB2B5BCF0DF8008 | Since: 1207
     */
    function _0x2BB2B5BCF0DF8008() {
        Citizen.invokeNative('0x2BB2B5BCF0DF8008', undefined, undefined);
    }
    vehicle_1._0x2BB2B5BCF0DF8008 = _0x2BB2B5BCF0DF8008;
    /**
     * No comment provided
     *
     * Hash: 0x2C46D2A591D8C322 | Since: 1207
     */
    function _0x2C46D2A591D8C322() {
        return Citizen.invokeNative('0x2C46D2A591D8C322', undefined, undefined, undefined);
    }
    vehicle_1._0x2C46D2A591D8C322 = _0x2C46D2A591D8C322;
    /**
     * No comment provided
     *
     * Hash: 0x3053064F909B5F42 | Since: 1207
     */
    function _0x3053064F909B5F42() {
        Citizen.invokeNative('0x3053064F909B5F42', undefined, undefined);
    }
    vehicle_1._0x3053064F909B5F42 = _0x3053064F909B5F42;
    /**
     * No comment provided
     *
     * Hash: 0x3137EDC899E6DAE4 | Since: 1355
     */
    function _0x3137EDC899E6DAE4() {
        Citizen.invokeNative('0x3137EDC899E6DAE4', undefined, undefined);
    }
    vehicle_1._0x3137EDC899E6DAE4 = _0x3137EDC899E6DAE4;
    /**
     * Returns trackIndex
     *
     * Hash: 0x331CBD247FC5DAA8 | Since: 1207
     */
    function _0x331CBD247FC5DAA8(configHash, pos, direction) {
        if (typeof configHash === 'string')
            configHash = misc.getHashKey(configHash);
        return Citizen.invokeNative('0x331CBD247FC5DAA8', configHash, pos.x, pos.y, pos.z, direction, false);
    }
    vehicle_1._0x331CBD247FC5DAA8 = _0x331CBD247FC5DAA8;
    /**
     * No comment provided
     *
     * Hash: 0x34BCF6209B9668A7 | Since: 1207
     */
    function _0x34BCF6209B9668A7(trackIndex) {
        Citizen.invokeNative('0x34BCF6209B9668A7', trackIndex, undefined);
    }
    vehicle_1._0x34BCF6209B9668A7 = _0x34BCF6209B9668A7;
    /**
     * No comment provided
     *
     * Hash: 0x37D238BE69F7378A | Since: 1207
     */
    function _0x37D238BE69F7378A(trackIndex) {
        return Citizen.invokeNative('0x37D238BE69F7378A', trackIndex);
    }
    vehicle_1._0x37D238BE69F7378A = _0x37D238BE69F7378A;
    /**
     * No comment provided
     *
     * Hash: 0x38E7DD70A242D5CB | Since: 1207
     */
    function _0x38E7DD70A242D5CB(trackIndex) {
        Citizen.invokeNative('0x38E7DD70A242D5CB', trackIndex, 0);
    }
    vehicle_1._0x38E7DD70A242D5CB = _0x38E7DD70A242D5CB;
    /**
     * Called together with 0xE6C5E2125EB210C1 in R* Script medium_update
     *
     * Hash: 0x3ABFA128F5BF5A70 | Since: 1207
     */
    function _0x3ABFA128F5BF5A70(trainTrack, junctionIndex, enabled) {
        if (typeof trainTrack === 'string')
            trainTrack = misc.getHashKey(trainTrack);
        Citizen.invokeNative('0x3ABFA128F5BF5A70', trainTrack, junctionIndex, enabled);
    }
    vehicle_1._0x3ABFA128F5BF5A70 = _0x3ABFA128F5BF5A70;
    /**
     * No comment provided
     *
     * Hash: 0x3D86997A86FEEF0D | Since: 1207
     */
    function _0x3D86997A86FEEF0D() {
        Citizen.invokeNative('0x3D86997A86FEEF0D', undefined, undefined);
    }
    vehicle_1._0x3D86997A86FEEF0D = _0x3D86997A86FEEF0D;
    /**
     * No comment provided
     *
     * Hash: 0x41365DB586CD9E8E | Since: 1207
     */
    function _0x41365DB586CD9E8E(trackIndex) {
        Citizen.invokeNative('0x41365DB586CD9E8E', trackIndex, 0);
    }
    vehicle_1._0x41365DB586CD9E8E = _0x41365DB586CD9E8E;
    /**
     * _H*
     *
     * Hash: 0x41F0B254DDF71473 | Since: 1207
     */
    function _0x41F0B254DDF71473(wagon) {
        const _wagon = wagon instanceof Vehicle ? wagon.localId() : wagon;
        Citizen.invokeNative('0x41F0B254DDF71473', _wagon);
    }
    vehicle_1._0x41F0B254DDF71473 = _0x41F0B254DDF71473;
    /**
     * No comment provided
     *
     * Hash: 0x42404D57D621601A | Since: 1207
     */
    function _0x42404D57D621601A() {
        return Citizen.invokeNative('0x42404D57D621601A', undefined);
    }
    vehicle_1._0x42404D57D621601A = _0x42404D57D621601A;
    /**
     * No comment provided
     *
     * Hash: 0x427C919E9809E370 | Since: 1207
     */
    function _0x427C919E9809E370(trackIndex) {
        Citizen.invokeNative('0x427C919E9809E370', trackIndex, 0);
    }
    vehicle_1._0x427C919E9809E370 = _0x427C919E9809E370;
    /**
     * No comment provided
     *
     * Hash: 0x485B05EF05B9AEE9 | Since: 1207
     */
    function _0x485B05EF05B9AEE9() {
        Citizen.invokeNative('0x485B05EF05B9AEE9', undefined, undefined);
    }
    vehicle_1._0x485B05EF05B9AEE9 = _0x485B05EF05B9AEE9;
    /**
     * No comment provided
     *
     * Hash: 0x4C05B42A8D937796 | Since: 1207
     */
    function _0x4C05B42A8D937796() {
        Citizen.invokeNative('0x4C05B42A8D937796');
    }
    vehicle_1._0x4C05B42A8D937796 = _0x4C05B42A8D937796;
    /**
     * Params: p1 usually true in R* Scripts
     * _SET_DRAFT_VEHICLE_*
     *
     * Hash: 0x4C60C333F9CCA2B6 | Since: 1207
     */
    function _0x4C60C333F9CCA2B6(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x4C60C333F9CCA2B6', _vehicle, false);
    }
    vehicle_1._0x4C60C333F9CCA2B6 = _0x4C60C333F9CCA2B6;
    /**
     * No comment provided
     *
     * Hash: 0x51C7694E140FAE43 | Since: 1207
     */
    function _0x51C7694E140FAE43() {
        return Citizen.invokeNative('0x51C7694E140FAE43', undefined);
    }
    vehicle_1._0x51C7694E140FAE43 = _0x51C7694E140FAE43;
    /**
     * No comment provided
     *
     * Hash: 0x5AADC7BBBB1BCEEB | Since: 1207
     */
    function _0x5AADC7BBBB1BCEEB() {
        Citizen.invokeNative('0x5AADC7BBBB1BCEEB', undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1._0x5AADC7BBBB1BCEEB = _0x5AADC7BBBB1BCEEB;
    /**
     * No comment provided
     *
     * Hash: 0x615B3B8E73634509 | Since: 1207
     */
    function _0x615B3B8E73634509(trackIndex) {
        Citizen.invokeNative('0x615B3B8E73634509', trackIndex, 0);
    }
    vehicle_1._0x615B3B8E73634509 = _0x615B3B8E73634509;
    /**
     * No comment provided
     *
     * Hash: 0x63509DDF102E08E8 | Since: 1207
     */
    function _0x63509DDF102E08E8(trackIndex) {
        Citizen.invokeNative('0x63509DDF102E08E8', trackIndex, 0);
    }
    vehicle_1._0x63509DDF102E08E8 = _0x63509DDF102E08E8;
    /**
     * Only used in R* Script beat_train_holdup: p1 = 1
     *
     * Hash: 0x6355602C02EDC6DF | Since: 1207
     */
    function _0x6355602C02EDC6DF(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x6355602C02EDC6DF', _entity, undefined);
    }
    vehicle_1._0x6355602C02EDC6DF = _0x6355602C02EDC6DF;
    /**
     * No comment provided
     *
     * Hash: 0x6703872EC09BC158 | Since: 1207
     */
    function _0x6703872EC09BC158() {
        Citizen.invokeNative('0x6703872EC09BC158', undefined, undefined);
    }
    vehicle_1._0x6703872EC09BC158 = _0x6703872EC09BC158;
    /**
     * No comment provided
     *
     * Hash: 0x6835AFEA10E186F4 | Since: 1207
     */
    function _0x6835AFEA10E186F4() {
        Citizen.invokeNative('0x6835AFEA10E186F4', undefined, undefined);
    }
    vehicle_1._0x6835AFEA10E186F4 = _0x6835AFEA10E186F4;
    /**
     * No comment provided
     *
     * Hash: 0x68830738A6BFB370 | Since: 1207
     */
    function _0x68830738A6BFB370() {
        Citizen.invokeNative('0x68830738A6BFB370', undefined, undefined);
    }
    vehicle_1._0x68830738A6BFB370 = _0x68830738A6BFB370;
    /**
     * No comment provided
     *
     * Hash: 0x697DF68F3A761A50 | Since: 1207
     */
    function _0x697DF68F3A761A50() {
        Citizen.invokeNative('0x697DF68F3A761A50', undefined);
    }
    vehicle_1._0x697DF68F3A761A50 = _0x697DF68F3A761A50;
    /**
     * No comment provided
     *
     * Hash: 0x6B34BE961F639E21 | Since: 1207
     */
    function _0x6B34BE961F639E21(trackIndex) {
        Citizen.invokeNative('0x6B34BE961F639E21', trackIndex, 0);
    }
    vehicle_1._0x6B34BE961F639E21 = _0x6B34BE961F639E21;
    /**
     * No comment provided
     *
     * Hash: 0x6B53F4B811E583D2 | Since: 1207
     */
    function _0x6B53F4B811E583D2(vehicle, toggle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x6B53F4B811E583D2', _vehicle, toggle);
    }
    vehicle_1._0x6B53F4B811E583D2 = _0x6B53F4B811E583D2;
    /**
     * Returns trackIndex
     *
     * Hash: 0x6C87F49BFA181DB5 | Since: 1207
     */
    function _0x6C87F49BFA181DB5(pos) {
        return Citizen.invokeNative('0x6C87F49BFA181DB5', pos.x, pos.y, pos.z);
    }
    vehicle_1._0x6C87F49BFA181DB5 = _0x6C87F49BFA181DB5;
    /**
     * _SET_INSTANTLY_* - _SET_MISSION_TRAIN*
     *
     * Hash: 0x6DE072AC8A95FFC1 | Since: 1207
     */
    function _0x6DE072AC8A95FFC1(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x6DE072AC8A95FFC1', _vehicle, false);
    }
    vehicle_1._0x6DE072AC8A95FFC1 = _0x6DE072AC8A95FFC1;
    /**
     * No comment provided
     *
     * Hash: 0x6EA1273D525427F4 | Since: 1207
     */
    function _0x6EA1273D525427F4() {
        Citizen.invokeNative('0x6EA1273D525427F4', undefined, undefined, undefined);
    }
    vehicle_1._0x6EA1273D525427F4 = _0x6EA1273D525427F4;
    /**
     * No comment provided
     *
     * Hash: 0x6FD7BDF10304363A | Since: 1207
     */
    function _0x6FD7BDF10304363A() {
        Citizen.invokeNative('0x6FD7BDF10304363A', undefined, undefined);
    }
    vehicle_1._0x6FD7BDF10304363A = _0x6FD7BDF10304363A;
    /**
     * No comment provided
     *
     * Hash: 0x703D4FB366DA4452 | Since: 1207
     */
    function _0x703D4FB366DA4452() {
        Citizen.invokeNative('0x703D4FB366DA4452', undefined, undefined);
    }
    vehicle_1._0x703D4FB366DA4452 = _0x703D4FB366DA4452;
    /**
     * No comment provided
     *
     * Hash: 0x718EB706B6E998A0 | Since: 1207
     */
    function _0x718EB706B6E998A0(trackIndex) {
        Citizen.invokeNative('0x718EB706B6E998A0', trackIndex);
    }
    vehicle_1._0x718EB706B6E998A0 = _0x718EB706B6E998A0;
    /**
     * _SET_VEHICLE_WHEELS_*
     *
     * Hash: 0x73118A3EE9C9B6DB | Since: 1207
     */
    function _0x73118A3EE9C9B6DB(wagon) {
        const _wagon = wagon instanceof Vehicle ? wagon.localId() : wagon;
        Citizen.invokeNative('0x73118A3EE9C9B6DB', _wagon, 0, false);
    }
    vehicle_1._0x73118A3EE9C9B6DB = _0x73118A3EE9C9B6DB;
    /**
     * No comment provided
     *
     * Hash: 0x7408B5C66BA31ADB | Since: 1207
     */
    function _0x7408B5C66BA31ADB() {
        Citizen.invokeNative('0x7408B5C66BA31ADB', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1._0x7408B5C66BA31ADB = _0x7408B5C66BA31ADB;
    /**
     * No comment provided
     *
     * Hash: 0x750D42C013F64AE7 | Since: 1207
     */
    function _0x750D42C013F64AE7() {
        Citizen.invokeNative('0x750D42C013F64AE7', undefined, undefined);
    }
    vehicle_1._0x750D42C013F64AE7 = _0x750D42C013F64AE7;
    /**
     * Seems to be related while setting a (door) state of specific trains (midlandboxcar05x, privateboxcar01x, privateboxcar02x, midlandrefrigeratorCar, privateArmoured, armoredCar01x)
     *
     * Hash: 0x762FDC4C19E5A981 | Since: 1207
     */
    function _0x762FDC4C19E5A981(trainCarriage) {
        const _trainCarriage = trainCarriage instanceof Entity ? trainCarriage.handle() : trainCarriage;
        Citizen.invokeNative('0x762FDC4C19E5A981', _trainCarriage, false);
    }
    vehicle_1._0x762FDC4C19E5A981 = _0x762FDC4C19E5A981;
    /**
     * No comment provided
     *
     * Hash: 0x7840576C50A13DBA | Since: 1207
     */
    function _0x7840576C50A13DBA(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0x7840576C50A13DBA', _train, false);
    }
    vehicle_1._0x7840576C50A13DBA = _0x7840576C50A13DBA;
    /**
     * No comment provided
     *
     * Hash: 0x785639D89F8451AB | Since: 1207
     */
    function _0x785639D89F8451AB() {
        return new Vector3(Citizen.invokeNative('0x785639D89F8451AB', undefined, undefined));
    }
    vehicle_1._0x785639D89F8451AB = _0x785639D89F8451AB;
    /**
     * No comment provided
     *
     * Hash: 0x7BE0746539DEF0C8 | Since: 1207
     */
    function _0x7BE0746539DEF0C8() {
        return Citizen.invokeNative('0x7BE0746539DEF0C8', undefined, undefined);
    }
    vehicle_1._0x7BE0746539DEF0C8 = _0x7BE0746539DEF0C8;
    /**
     * No comment provided
     *
     * Hash: 0x8379E05871AD24E0 | Since: 1207
     */
    function _0x8379E05871AD24E0() {
        Citizen.invokeNative('0x8379E05871AD24E0');
    }
    vehicle_1._0x8379E05871AD24E0 = _0x8379E05871AD24E0;
    /**
     * No comment provided
     *
     * Hash: 0x850CE59DEC2028F3 | Since: 1207
     */
    function _0x850CE59DEC2028F3(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x850CE59DEC2028F3', _vehicle, undefined);
    }
    vehicle_1._0x850CE59DEC2028F3 = _0x850CE59DEC2028F3;
    /**
     * No comment provided
     *
     * Hash: 0x873AAF600CC36DAC | Since: 1207
     */
    function _0x873AAF600CC36DAC() {
        Citizen.invokeNative('0x873AAF600CC36DAC', undefined);
    }
    vehicle_1._0x873AAF600CC36DAC = _0x873AAF600CC36DAC;
    /**
     * No comment provided
     *
     * Hash: 0x877EA24EB1614495 | Since: 1207
     */
    function _0x877EA24EB1614495() {
        return Citizen.invokeNative('0x877EA24EB1614495', undefined, undefined, undefined);
    }
    vehicle_1._0x877EA24EB1614495 = _0x877EA24EB1614495;
    /**
     * No comment provided
     *
     * Hash: 0x87B974E54C71BA7B | Since: 1207
     */
    function _0x87B974E54C71BA7B(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x87B974E54C71BA7B', _vehicle, false);
    }
    vehicle_1._0x87B974E54C71BA7B = _0x87B974E54C71BA7B;
    /**
     * No comment provided
     *
     * Hash: 0x8878FF3EEE2868A9 | Since: 1207
     */
    function _0x8878FF3EEE2868A9() {
        Citizen.invokeNative('0x8878FF3EEE2868A9', undefined, undefined);
    }
    vehicle_1._0x8878FF3EEE2868A9 = _0x8878FF3EEE2868A9;
    /**
     * No comment provided
     *
     * Hash: 0x8DECD262602548B9 | Since: 1207
     */
    function _0x8DECD262602548B9() {
        Citizen.invokeNative('0x8DECD262602548B9', undefined, undefined);
    }
    vehicle_1._0x8DECD262602548B9 = _0x8DECD262602548B9;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x9868C0D0134855F7 | Since: 1207
     */
    function _0x9868C0D0134855F7() {
        Citizen.invokeNative('0x9868C0D0134855F7', undefined);
    }
    vehicle_1._0x9868C0D0134855F7 = _0x9868C0D0134855F7;
    /**
     * No comment provided
     *
     * Hash: 0x98A7598C579EE871 | Since: 1207
     */
    function _0x98A7598C579EE871() {
        Citizen.invokeNative('0x98A7598C579EE871', undefined, undefined, undefined);
    }
    vehicle_1._0x98A7598C579EE871 = _0x98A7598C579EE871;
    /**
     * _GET_P - _GET_T*
     *
     * Hash: 0x9CC94A948EAF5372 | Since: 1207
     */
    function _0x9CC94A948EAF5372(trackIndex, stationIndex) {
        return Citizen.invokeNative('0x9CC94A948EAF5372', trackIndex, stationIndex);
    }
    vehicle_1._0x9CC94A948EAF5372 = _0x9CC94A948EAF5372;
    /**
     * No comment provided
     *
     * Hash: 0x9D12796EF4BF9EA9 | Since: 1207
     */
    function _0x9D12796EF4BF9EA9() {
        Citizen.invokeNative('0x9D12796EF4BF9EA9', undefined);
    }
    vehicle_1._0x9D12796EF4BF9EA9 = _0x9D12796EF4BF9EA9;
    /**
     * Forcing high LOD buoyancy for vehicle: p1 = false
     * _SET_A*
     *
     * Hash: 0x9E8711C81AA17876 | Since: 1207
     */
    function _0x9E8711C81AA17876(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x9E8711C81AA17876', _vehicle, false);
    }
    vehicle_1._0x9E8711C81AA17876 = _0x9E8711C81AA17876;
    /**
     * No comment provided
     *
     * Hash: 0xA13028E22564A1BD | Since: 1207
     */
    function _0xA13028E22564A1BD() {
        Citizen.invokeNative('0xA13028E22564A1BD', undefined, undefined);
    }
    vehicle_1._0xA13028E22564A1BD = _0xA13028E22564A1BD;
    /**
     * No comment provided
     *
     * Hash: 0xA230A5DDE12ED374 | Since: 1207
     */
    function _0xA230A5DDE12ED374() {
        Citizen.invokeNative('0xA230A5DDE12ED374', undefined);
    }
    vehicle_1._0xA230A5DDE12ED374 = _0xA230A5DDE12ED374;
    /**
     * No comment provided
     *
     * Hash: 0xA72B1BF3857B94D7 | Since: 1207
     */
    function _0xA72B1BF3857B94D7(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0xA72B1BF3857B94D7', _train, false);
    }
    vehicle_1._0xA72B1BF3857B94D7 = _0xA72B1BF3857B94D7;
    /**
     * No comment provided
     *
     * Hash: 0xA7966807953A18EE | Since: 1207
     */
    function _0xA7966807953A18EE(trackIndex) {
        Citizen.invokeNative('0xA7966807953A18EE', trackIndex, 0);
    }
    vehicle_1._0xA7966807953A18EE = _0xA7966807953A18EE;
    /**
     * No comment provided
     *
     * Hash: 0xA9E185D498B9AC67 | Since: 1207
     */
    function _0xA9E185D498B9AC67() {
        return Citizen.invokeNative('0xA9E185D498B9AC67', undefined, undefined);
    }
    vehicle_1._0xA9E185D498B9AC67 = _0xA9E185D498B9AC67;
    /**
     * _SET_TRAIN_*
     *
     * Hash: 0xAE7E66A61E7C17A5 | Since: 1207
     */
    function _0xAE7E66A61E7C17A5(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0xAE7E66A61E7C17A5', _train, false);
    }
    vehicle_1._0xAE7E66A61E7C17A5 = _0xAE7E66A61E7C17A5;
    /**
     * No comment provided
     *
     * Hash: 0xB4241AD8F5AEE9ED | Since: 1207
     */
    function _0xB4241AD8F5AEE9ED(trackIndex) {
        return Citizen.invokeNative('0xB4241AD8F5AEE9ED', trackIndex);
    }
    vehicle_1._0xB4241AD8F5AEE9ED = _0xB4241AD8F5AEE9ED;
    /**
     * No comment provided
     *
     * Hash: 0xB42C87521D1BDD2F | Since: 1207
     */
    function _0xB42C87521D1BDD2F(vehicle, pos) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0xB42C87521D1BDD2F', _vehicle, pos.x, pos.y, pos.z);
    }
    vehicle_1._0xB42C87521D1BDD2F = _0xB42C87521D1BDD2F;
    /**
     * No comment provided
     *
     * Hash: 0xB961DD799A837BD7 | Since: 1207
     */
    function _0xB961DD799A837BD7() {
        Citizen.invokeNative('0xB961DD799A837BD7');
    }
    vehicle_1._0xB961DD799A837BD7 = _0xB961DD799A837BD7;
    /**
     * No comment provided
     *
     * Hash: 0xC2E62678D602853C | Since: 1207
     */
    function _0xC2E62678D602853C() {
        Citizen.invokeNative('0xC2E62678D602853C', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1._0xC2E62678D602853C = _0xC2E62678D602853C;
    /**
     * Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
     *
     * Hash: 0xC325A6BAA62CF8A2 | Since: 1207
     */
    function _0xC325A6BAA62CF8A2(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0xC325A6BAA62CF8A2', _vehicle, false);
    }
    vehicle_1._0xC325A6BAA62CF8A2 = _0xC325A6BAA62CF8A2;
    /**
     * No comment provided
     *
     * Hash: 0xC351394B932A6A50 | Since: 1207
     */
    function _0xC351394B932A6A50() {
        Citizen.invokeNative('0xC351394B932A6A50', undefined);
    }
    vehicle_1._0xC351394B932A6A50 = _0xC351394B932A6A50;
    /**
     * No comment provided
     *
     * Hash: 0xC399CC89FBA05DA0 | Since: 1207
     */
    function _0xC399CC89FBA05DA0(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0xC399CC89FBA05DA0', _vehicle, false);
    }
    vehicle_1._0xC399CC89FBA05DA0 = _0xC399CC89FBA05DA0;
    /**
     * _SET_DRAFT_VEHICLE_(STOP?)*
     *
     * Hash: 0xC4A2C11FC0D41916 | Since: 1207
     */
    function _0xC4A2C11FC0D41916(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0xC4A2C11FC0D41916', _vehicle, false);
    }
    vehicle_1._0xC4A2C11FC0D41916 = _0xC4A2C11FC0D41916;
    /**
     * No comment provided
     *
     * Hash: 0xCACAB2B123BBDBD6 | Since: 1207
     */
    function _0xCACAB2B123BBDBD6() {
        return Citizen.invokeNative('0xCACAB2B123BBDBD6', undefined, undefined, undefined);
    }
    vehicle_1._0xCACAB2B123BBDBD6 = _0xCACAB2B123BBDBD6;
    /**
     * No comment provided
     *
     * Hash: 0xCAFF2C9747103C02 | Since: 1207
     */
    function _0xCAFF2C9747103C02() {
        return Citizen.invokeNative('0xCAFF2C9747103C02', undefined, undefined, undefined);
    }
    vehicle_1._0xCAFF2C9747103C02 = _0xCAFF2C9747103C02;
    /**
     * No comment provided
     *
     * Hash: 0xCBC7B6F9A56B79F6 | Since: 1207
     */
    function _0xCBC7B6F9A56B79F6() {
        Citizen.invokeNative('0xCBC7B6F9A56B79F6', undefined, undefined);
    }
    vehicle_1._0xCBC7B6F9A56B79F6 = _0xCBC7B6F9A56B79F6;
    /**
     * Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
     *
     * Hash: 0xCBF88256E44D5D39 | Since: 1207
     */
    function _0xCBF88256E44D5D39(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0xCBF88256E44D5D39', _vehicle, false);
    }
    vehicle_1._0xCBF88256E44D5D39 = _0xCBF88256E44D5D39;
    /**
     * No comment provided
     *
     * Hash: 0xCEB1F1EED484A5B4 | Since: 1207
     */
    function _0xCEB1F1EED484A5B4() {
        Citizen.invokeNative('0xCEB1F1EED484A5B4', undefined, undefined);
    }
    vehicle_1._0xCEB1F1EED484A5B4 = _0xCEB1F1EED484A5B4;
    /**
     * No comment provided
     *
     * Hash: 0xCF342503CA4C8DF1 | Since: 1207
     */
    function _0xCF342503CA4C8DF1(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0xCF342503CA4C8DF1', _vehicle, 0);
    }
    vehicle_1._0xCF342503CA4C8DF1 = _0xCF342503CA4C8DF1;
    /**
     * No comment provided
     *
     * Hash: 0xCF9DA72002FC16BF | Since: 1207
     */
    function requestAssetAnims(ped, entity, vehicleAsset) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xCF9DA72002FC16BF', _ped, _entity, vehicleAsset);
    }
    vehicle_1.requestAssetAnims = requestAssetAnims;
    /**
     * No comment provided
     *
     * Hash: 0xD0116DF21E6C7B36 | Since: 1207
     */
    function _0xD0116DF21E6C7B36() {
        return Citizen.invokeNative('0xD0116DF21E6C7B36', undefined, undefined);
    }
    vehicle_1._0xD0116DF21E6C7B36 = _0xD0116DF21E6C7B36;
    /**
     * No comment provided
     *
     * Hash: 0xD0AABE5B9F8FA589 | Since: 1207
     */
    function _0xD0AABE5B9F8FA589(trackIndex) {
        Citizen.invokeNative('0xD0AABE5B9F8FA589', trackIndex, 0);
    }
    vehicle_1._0xD0AABE5B9F8FA589 = _0xD0AABE5B9F8FA589;
    /**
     * No comment provided
     *
     * Hash: 0xD0BA1853D76683C8 | Since: 1207
     */
    function _0xD0BA1853D76683C8(trackIndex, pos) {
        Citizen.invokeNative('0xD0BA1853D76683C8', trackIndex, pos.x, pos.y, pos.z, undefined);
    }
    vehicle_1._0xD0BA1853D76683C8 = _0xD0BA1853D76683C8;
    /**
     * No comment provided
     *
     * Hash: 0xD1DF5E54F4ACBE1A | Since: 1207
     */
    function _0xD1DF5E54F4ACBE1A() {
        return Citizen.invokeNative('0xD1DF5E54F4ACBE1A', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1._0xD1DF5E54F4ACBE1A = _0xD1DF5E54F4ACBE1A;
    /**
     * No comment provided
     *
     * Hash: 0xD1EFA8D68BF5D63D | Since: 1207
     */
    function _0xD1EFA8D68BF5D63D() {
        Citizen.invokeNative('0xD1EFA8D68BF5D63D', undefined, undefined, undefined, undefined);
    }
    vehicle_1._0xD1EFA8D68BF5D63D = _0xD1EFA8D68BF5D63D;
    /**
     * No comment provided
     *
     * Hash: 0xD21A3D421E7F09F7 | Since: 1207
     */
    function _0xD21A3D421E7F09F7() {
        Citizen.invokeNative('0xD21A3D421E7F09F7', undefined, undefined);
    }
    vehicle_1._0xD21A3D421E7F09F7 = _0xD21A3D421E7F09F7;
    /**
     * No comment provided
     *
     * Hash: 0xD4907EF4334C7602 | Since: 1207
     */
    function _0xD4907EF4334C7602() {
        Citizen.invokeNative('0xD4907EF4334C7602', undefined, undefined);
    }
    vehicle_1._0xD4907EF4334C7602 = _0xD4907EF4334C7602;
    /**
     * No comment provided
     *
     * Hash: 0xD826690B5CF3BEFF | Since: 1207
     */
    function _0xD826690B5CF3BEFF(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0xD826690B5CF3BEFF', _vehicle, undefined);
    }
    vehicle_1._0xD826690B5CF3BEFF = _0xD826690B5CF3BEFF;
    /**
     * No comment provided
     *
     * Hash: 0xD9BF3ED8EFB67EA3 | Since: 1207
     */
    function _0xD9BF3ED8EFB67EA3() {
        return Citizen.invokeNative('0xD9BF3ED8EFB67EA3', undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1._0xD9BF3ED8EFB67EA3 = _0xD9BF3ED8EFB67EA3;
    /**
     * No comment provided
     *
     * Hash: 0xDC0556D0F484ECAA | Since: 1207
     */
    function _0xDC0556D0F484ECAA() {
        Citizen.invokeNative('0xDC0556D0F484ECAA', undefined);
    }
    vehicle_1._0xDC0556D0F484ECAA = _0xDC0556D0F484ECAA;
    /**
     * No comment provided
     *
     * Hash: 0xDC69F6913CCA0B99 | Since: 1207
     */
    function _0xDC69F6913CCA0B99() {
        Citizen.invokeNative('0xDC69F6913CCA0B99', undefined, undefined);
    }
    vehicle_1._0xDC69F6913CCA0B99 = _0xDC69F6913CCA0B99;
    /**
     * No comment provided
     *
     * Hash: 0xDD100CE1EBBF37E3 | Since: 1207
     */
    function _0xDD100CE1EBBF37E3() {
        Citizen.invokeNative('0xDD100CE1EBBF37E3', undefined, undefined);
    }
    vehicle_1._0xDD100CE1EBBF37E3 = _0xDD100CE1EBBF37E3;
    /**
     * No comment provided
     *
     * Hash: 0xDE8C5B9F65017FA1 | Since: 1207
     */
    function _0xDE8C5B9F65017FA1(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return Citizen.invokeNative('0xDE8C5B9F65017FA1', _train);
    }
    vehicle_1._0xDE8C5B9F65017FA1 = _0xDE8C5B9F65017FA1;
    /**
     * No comment provided
     *
     * Hash: 0xE12F5ED49F44D40D | Since: 1207
     */
    function _0xE12F5ED49F44D40D() {
        Citizen.invokeNative('0xE12F5ED49F44D40D', undefined);
    }
    vehicle_1._0xE12F5ED49F44D40D = _0xE12F5ED49F44D40D;
    /**
     * Only used in R* SP Script rcm_abigail31: p1 = 5
     * _GET_VEHICLE_T* - _GET_VO*
     *
     * Hash: 0xE1C0F8781BF130C2 | Since: 1207
     */
    function _0xE1C0F8781BF130C2(wagon) {
        const _wagon = wagon instanceof Vehicle ? wagon.localId() : wagon;
        return Citizen.invokeNative('0xE1C0F8781BF130C2', _wagon, 0);
    }
    vehicle_1._0xE1C0F8781BF130C2 = _0xE1C0F8781BF130C2;
    /**
     * No comment provided
     *
     * Hash: 0xE682002DB1F30669 | Since: 1207
     */
    function _0xE682002DB1F30669() {
        Citizen.invokeNative('0xE682002DB1F30669', undefined);
    }
    vehicle_1._0xE682002DB1F30669 = _0xE682002DB1F30669;
    /**
     * No comment provided
     *
     * Hash: 0xE6BD7DD3FD474415 | Since: 1207
     */
    function _0xE6BD7DD3FD474415(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0xE6BD7DD3FD474415', _train, false);
    }
    vehicle_1._0xE6BD7DD3FD474415 = _0xE6BD7DD3FD474415;
    /**
     * No comment provided
     *
     * Hash: 0xE777DDF3E78397E8 | Since: 1207
     */
    function _0xE777DDF3E78397E8() {
        return Citizen.invokeNative('0xE777DDF3E78397E8', undefined);
    }
    vehicle_1._0xE777DDF3E78397E8 = _0xE777DDF3E78397E8;
    /**
     * No comment provided
     *
     * Hash: 0xE78993FF9022C064 | Since: 1207
     */
    function _0xE78993FF9022C064() {
        Citizen.invokeNative('0xE78993FF9022C064', undefined);
    }
    vehicle_1._0xE78993FF9022C064 = _0xE78993FF9022C064;
    /**
     * _SET_TRAIN_*
     *
     * Hash: 0xEF28A614B4B264B8 | Since: 1207
     */
    function _0xEF28A614B4B264B8(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        Citizen.invokeNative('0xEF28A614B4B264B8', _train, false);
    }
    vehicle_1._0xEF28A614B4B264B8 = _0xEF28A614B4B264B8;
    /**
     * _IS_* (related to CREATE_MISSION_TRAIN)
     *
     * Hash: 0xF05DFAF1ADFEF2CD | Since: 1207
     */
    function _0xF05DFAF1ADFEF2CD(trainConfig, pos, direction) {
        if (typeof trainConfig === 'string')
            trainConfig = misc.getHashKey(trainConfig);
        return Citizen.invokeNative('0xF05DFAF1ADFEF2CD', trainConfig, pos.x, pos.y, pos.z, direction, false);
    }
    vehicle_1._0xF05DFAF1ADFEF2CD = _0xF05DFAF1ADFEF2CD;
    /**
     * No comment provided
     *
     * Hash: 0xF57DB8E83DCD8349 | Since: 1207
     */
    function _0xF57DB8E83DCD8349() {
        return Citizen.invokeNative('0xF57DB8E83DCD8349', undefined);
    }
    vehicle_1._0xF57DB8E83DCD8349 = _0xF57DB8E83DCD8349;
    /**
     * No comment provided
     *
     * Hash: 0xF5EA41C1408695FB | Since: 1207
     */
    function _0xF5EA41C1408695FB() {
        return Citizen.invokeNative('0xF5EA41C1408695FB', undefined, undefined, undefined, undefined);
    }
    vehicle_1._0xF5EA41C1408695FB = _0xF5EA41C1408695FB;
    /**
     * No comment provided
     *
     * Hash: 0xF6E3D38869D0F7AD | Since: 1207
     */
    function _0xF6E3D38869D0F7AD() {
        Citizen.invokeNative('0xF6E3D38869D0F7AD', undefined);
    }
    vehicle_1._0xF6E3D38869D0F7AD = _0xF6E3D38869D0F7AD;
    /**
     * No comment provided
     *
     * Hash: 0xF8F7DA13CFBD4532 | Since: 1207
     */
    function _0xF8F7DA13CFBD4532(trackIndex) {
        Citizen.invokeNative('0xF8F7DA13CFBD4532', trackIndex, false);
    }
    vehicle_1._0xF8F7DA13CFBD4532 = _0xF8F7DA13CFBD4532;
    /**
     * _SET_DRAFT_VEHICLE_*
     *
     * Hash: 0xFC4F15A7DDDC47B1 | Since: 1207
     */
    function _0xFC4F15A7DDDC47B1(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0xFC4F15A7DDDC47B1', _vehicle, false);
    }
    vehicle_1._0xFC4F15A7DDDC47B1 = _0xFC4F15A7DDDC47B1;
    /**
     * No comment provided
     *
     * Hash: 0xFF2B1F59FB892F14 | Since: 1207
     */
    function _0xFF2B1F59FB892F14() {
        Citizen.invokeNative('0xFF2B1F59FB892F14', undefined);
    }
    vehicle_1._0xFF2B1F59FB892F14 = _0xFF2B1F59FB892F14;
    /**
     * No comment provided
     *
     * Hash: 0xFFFE15B433300B8C | Since: 1207
     */
    function _0xFFFE15B433300B8C() {
        Citizen.invokeNative('0xFFFE15B433300B8C', undefined, undefined, undefined);
    }
    vehicle_1._0xFFFE15B433300B8C = _0xFFFE15B433300B8C;
    /**
     * No comment provided
     *
     * Hash: 0x41503629D1139ABC | Since: 1207
     */
    function addTrainTemporaryStop(train, trackIndex, pos) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        AddTrainTemporaryStop(_train, trackIndex, pos.x, pos.y, pos.z);
    }
    vehicle_1.addTrainTemporaryStop = addTrainTemporaryStop;
    /**
     * No comment provided
     *
     * Hash: 0x316CDB5B6E8F4110 | Since: 1207
     */
    function attachDraftHarnessPed(mount, draft, harnessId) {
        const _mount = mount instanceof Ped ? mount.handle() : mount;
        const _draft = draft instanceof Vehicle ? draft.localId() : draft;
        return AttachDraftVehicleHarnessPed(_mount, _draft, harnessId);
    }
    vehicle_1.attachDraftHarnessPed = attachDraftHarnessPed;
    /**
     * Params: destroyingForce is usually 100f in R* Scripts
     * Similar to 0xD4F5EFB55769D272, _A*
     *
     * Hash: 0xC372B6A88F6E4AD8 | Since: 1207
     */
    function breakOffDraftWheel(vehicle, wheelIndex, destroyingForce) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        BreakOffDraftWheel(_vehicle, wheelIndex, destroyingForce);
    }
    vehicle_1.breakOffDraftWheel = breakOffDraftWheel;
    /**
     * wheelIndex 0: left, wheelIndex 1: right, 4 & 5: unknown
     *
     * Hash: 0xD4F5EFB55769D272 | Since: 1207
     */
    function breakOffWheel(vehicle, wheelIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return BreakOffVehicleWheel(_vehicle, wheelIndex);
    }
    vehicle_1.breakOffWheel = breakOffWheel;
    /**
     * Identical to CREATE_VEHICLE but allows to set draftAnimalPopGroup (see popgroups.#mt for DRAFT_HORSES_*)
     *
     * Hash: 0x214651FB1DFEBA89 | Since: 1207
     */
    function createDraft(modelHash, pos, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, draftAnimalPopGroup) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        if (typeof draftAnimalPopGroup === 'string')
            draftAnimalPopGroup = misc.getHashKey(draftAnimalPopGroup);
        return CreateDraftVehicle(modelHash, pos.x, pos.y, pos.z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, draftAnimalPopGroup, false);
    }
    vehicle_1.createDraft = createDraft;
    /**
     * configHash: https://alloc8or.re/rdr3/doc/enums/eTrainConfig.txt
     * For more information, see trainconfigs.ymt
     * To make the train AI controlled, set conductor to true and set the speed once.
     *
     * Hash: 0xC239DBD9A57D2A71 | Since: 1207
     */
    function createMissionTrain(configHash, pos, direction, passengers, conductor) {
        if (typeof configHash === 'string')
            configHash = misc.getHashKey(configHash);
        return CreateMissionTrain(configHash, pos.x, pos.y, pos.z, direction, passengers, false, conductor);
    }
    vehicle_1.createMissionTrain = createMissionTrain;
    /**
     * Spawn without lanterns set
     *
     * Hash: 0xE1A83D4A3B5D7938 | Since: 1207
     */
    function deleteLanterns(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return DeleteVehicleLanterns(_vehicle);
    }
    vehicle_1.deleteLanterns = deleteLanterns;
    /**
     * No comment provided
     *
     * Hash: 0x4402960666000E62 | Since: 1207
     */
    function detachDraftHarnessFromIndex(draft, harnessId) {
        const _draft = draft instanceof Vehicle ? draft.localId() : draft;
        return DetachDraftVehicleHarnessFromIndex(_draft, harnessId);
    }
    vehicle_1.detachDraftHarnessFromIndex = detachDraftHarnessFromIndex;
    /**
     * No comment provided
     *
     * Hash: 0xB36D3EC70963BE60 | Since: 1207
     */
    function detachDraftHarnessPed(draft, ped) {
        const _draft = draft instanceof Vehicle ? draft.localId() : draft;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return DetachDraftVehicleHarnessPed(_draft, _ped);
    }
    vehicle_1.detachDraftHarnessPed = detachDraftHarnessPed;
    /**
     * Only used in train_robbery4 R* Script
     * _C* - _DEL*
     *
     * Hash: 0x54CBDD6E1B4CB4DF | Since: 1207
     */
    function detachWagonEntityFromTrain(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        DetachWagonEntityFromTrain(_entity);
    }
    vehicle_1.detachWagonEntityFromTrain = detachWagonEntityFromTrain;
    /**
     * No comment provided
     *
     * Hash: 0xC29996A337BDD099 | Since: 1207
     */
    function doesTrainExistOnTrack(trackIndex) {
        return DoesTrainExistOnTrack(trackIndex);
    }
    vehicle_1.doesTrainExistOnTrack = doesTrainExistOnTrack;
    /**
     * No comment provided
     *
     * Hash: 0x35DC1877312FBA0F | Since: 1207
     */
    function fadeAndDestroy(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        FadeAndDestroyVehicle(_vehicle);
    }
    vehicle_1.fadeAndDestroy = fadeAndDestroy;
    /**
     * No comment provided
     *
     * Hash: 0xE015CF1F2C0959D8 | Since: 1207
     */
    function getBreakableLocksState(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetBreakableVehicleLocksState(_vehicle);
    }
    vehicle_1.getBreakableLocksState = getBreakableLocksState;
    /**
     * No comment provided
     *
     * Hash: 0x58F2244C1286D09A | Since: 1207
     */
    function getBreakableLockObject(vehicle, index) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetBreakableVehicleLockObject(_vehicle, index);
    }
    vehicle_1.getBreakableLockObject = getBreakableLockObject;
    /**
     * No comment provided
     *
     * Hash: 0x35D302397E524939 | Since: 1207
     */
    function getCheckpointTrainSpawnLocation(trackIndex, pos, distance, direction) {
        return new Vector3(GetCheckpointTrainSpawnLocation(trackIndex, pos.x, pos.y, pos.z, distance, direction));
    }
    vehicle_1.getCheckpointTrainSpawnLocation = getCheckpointTrainSpawnLocation;
    /**
     * Returns p0 for 0xBA958F68031DDBFC (trackIndex)
     *
     * Hash: 0xAF787E081AC4A8EE | Since: 1207
     */
    function getCurrentTrackForTrain(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return GetCurrentTrackForTrain(_train);
    }
    vehicle_1.getCurrentTrackForTrain = getCurrentTrackForTrain;
    /**
     * `Returns rage::NumericLimits<float>::kMax (3.402823466e+38) if vehicle is not a valid vehicle of type VEHICLE_TYPE_DRAFT.`
     *
     * Hash: 0xC6D7DDC843176701 | Since: 1207
     */
    function getDraftDesiredSpeed(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetDraftVehicleDesiredSpeed(_vehicle);
    }
    vehicle_1.getDraftDesiredSpeed = getDraftDesiredSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x6DE03BCC15E81710 | Since: 1207
     */
    function getNearestTrainTrackPosition(pos) {
        return new Vector3(GetNearestTrainTrackPosition(pos.x, pos.y, pos.z));
    }
    vehicle_1.getNearestTrainTrackPosition = getNearestTrainTrackPosition;
    /**
     * No comment provided
     *
     * Hash: 0x2FA86833E3617E2D | Since: 1207
     */
    function getNumBreakableLockObjects(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetNumBreakableVehicleLockObjects(_vehicle);
    }
    vehicle_1.getNumBreakableLockObjects = getNumBreakableLockObjects;
    /**
     * Returns amount for CAN_REGISTER_MISSION_VEHICLES
     *
     * Hash: 0x635423D55CA84FC8 | Since: 1207
     */
    function getNumCarsFromTrainConfig(trainConfig) {
        if (typeof trainConfig === 'string')
            trainConfig = misc.getHashKey(trainConfig);
        return GetNumCarsFromTrainConfig(trainConfig);
    }
    vehicle_1.getNumCarsFromTrainConfig = getNumCarsFromTrainConfig;
    /**
     * Returns number of horses a wagon can have
     *
     * Hash: 0x5B1A26BB18E7D451 | Since: 1207
     */
    function getNumDraftHarnessPed(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetNumDraftVehicleHarnessPed(modelHash);
    }
    vehicle_1.getNumDraftHarnessPed = getNumDraftHarnessPed;
    /**
     * enum eDraftHarness
     * {
     * DRAFT_HARNESS_LR,
     * DRAFT_HARNESS_RR,
     * DRAFT_HARNESS_LM,
     * DRAFT_HARNESS_RM,
     * DRAFT_HARNESS_LF,
     * DRAFT_HARNESS_RF,
     * DRAFT_HARNESS_COUNT
     * };
     *
     * Hash: 0xA8BA0BAE0173457B | Since: 1207
     */
    function getPedInDraftHarness(vehicle, harnessId) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetPedInDraftHarness(_vehicle, harnessId);
    }
    vehicle_1.getPedInDraftHarness = getPedInDraftHarness;
    /**
     * Returns handles of boat paddles entities.
     *
     * Hash: 0xA6E210FB4283B767 | Since: 1207
     */
    function getRowingOars(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetRowingOars(_vehicle);
    }
    vehicle_1.getRowingOars = getRowingOars;
    /**
     * Returns Coords of vStation
     * p0 - NET_TRAIN_MANAGER_GET_TRAIN_STATION_DATA
     * _GET_P* - _GET_T*
     *
     * Hash: 0xBA958F68031DDBFC | Since: 1207
     */
    function getStationCoordsFromTrainStationData(trackIndex, stationIndex) {
        return new Vector3(GetStationCoordsFromTrainStationData(trackIndex, stationIndex));
    }
    vehicle_1.getStationCoordsFromTrainStationData = getStationCoordsFromTrainStationData;
    /**
     * Returns trackIndex
     * _E* - _F*
     *
     * Hash: 0x85D39F5E3B6D7EB0 | Since: 1207
     */
    function getTrackIndexFromCoords(pos) {
        return GetTrackIndexFromCoords(pos.x, pos.y, pos.z);
    }
    vehicle_1.getTrackIndexFromCoords = getTrackIndexFromCoords;
    /**
     * Returns train car, use GET_TRAIN_CARRIAGE when trailerNumber is bigger than 0
     *
     * Hash: 0x671A07C9A1CD50A5 | Since: 1207
     */
    function getTrainCar(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return GetTrainCar(_train);
    }
    vehicle_1.getTrainCar = getTrainCar;
    /**
     * Returns iNumCars - to be used with GET_TRAIN_CARRIAGE (trailerNumber)
     * _C* (O, P, Q, R)
     *
     * Hash: 0x60B7D1DCC312697D | Since: 1207
     */
    function getTrainCarriageTrailerNumber(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return GetTrainCarriageTrailerNumber(_train);
    }
    vehicle_1.getTrainCarriageTrailerNumber = getTrainCarriageTrailerNumber;
    /**
     * No comment provided
     *
     * Hash: 0x3C9628A811CBD724 | Since: 1207
     */
    function getTrainDirection(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return GetTrainDirection(_train);
    }
    vehicle_1.getTrainDirection = getTrainDirection;
    /**
     * https://i.imgur.com/1rHibjW.jpg
     *
     * Hash: 0x67995318F5FAA496 | Since: 1207
     */
    function getTrainDirectionFromIndex(trackIndex) {
        return GetTrainDirectionFromIndex(trackIndex);
    }
    vehicle_1.getTrainDirectionFromIndex = getTrainDirectionFromIndex;
    /**
     * Returns modelHash
     *
     * Hash: 0x8DF5F6A19F99F0D5 | Since: 1207
     */
    function getTrainModelFromTrainConfigByCarIndex(trainConfig, trainCarIndex) {
        if (typeof trainConfig === 'string')
            trainConfig = misc.getHashKey(trainConfig);
        return GetTrainModelFromTrainConfigByCarIndex(trainConfig, trainCarIndex);
    }
    vehicle_1.getTrainModelFromTrainConfigByCarIndex = getTrainModelFromTrainConfigByCarIndex;
    /**
     * No comment provided
     *
     * Hash: 0x1E8A921112891651 | Since: 1207
     */
    function getTrainPositionOnTrack(trackIndex) {
        return new Vector3(GetTrainPositionOnTrack(trackIndex));
    }
    vehicle_1.getTrainPositionOnTrack = getTrainPositionOnTrack;
    /**
     * Returns trackIndex
     *
     * Hash: 0x45853F4E17D847D5 | Since: 1207
     */
    function getTrainTrackFromTrain(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return GetTrainTrackFromTrainVehicle(_train);
    }
    vehicle_1.getTrainTrackFromTrain = getTrainTrackFromTrain;
    /**
     * Outputs junctionIndex, to be used with 0xE6C5E2125EB210C1
     *
     * Hash: 0x86AFC343CF7F0B34 | Since: 1207
     */
    function getTrainTrackJunctionAtCoords(trainTrack, pos) {
        if (typeof trainTrack === 'string')
            trainTrack = misc.getHashKey(trainTrack);
        return GetTrainTrackJunctionAtCoords(trainTrack, pos.x, pos.y, pos.z);
    }
    vehicle_1.getTrainTrackJunctionAtCoords = getTrainTrackJunctionAtCoords;
    /**
     * Returns train
     *
     * Hash: 0x6E585A616ABB8401 | Since: 1207
     */
    function getTrainFromTrackIndex(trackIndex) {
        return GetTrainVehicleFromTrackIndex(trackIndex);
    }
    vehicle_1.getTrainFromTrackIndex = getTrainFromTrackIndex;
    /**
     * No comment provided
     *
     * Hash: 0xDD1E1393D966D39A | Since: 1207
     */
    function getDoorsLockedForTeam(vehicle, team) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleDoorsLockedForTeam(_vehicle, team);
    }
    vehicle_1.getDoorsLockedForTeam = getDoorsLockedForTeam;
    /**
     * No comment provided
     *
     * Hash: 0xD798DF5DB67B1659 | Since: 1207
     */
    function getIsPropSetApplied(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleIsPropSetApplied(_vehicle);
    }
    vehicle_1.getIsPropSetApplied = getIsPropSetApplied;
    /**
     * No comment provided
     *
     * Hash: 0xBB765B8FD49A796C | Since: 1207
     */
    function getLivery(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleLivery(_vehicle);
    }
    vehicle_1.getLivery = getLivery;
    /**
     * No comment provided
     *
     * Hash: 0xB729679356A889AE | Since: 1207
     */
    function getOwner(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleOwner(_vehicle);
    }
    vehicle_1.getOwner = getOwner;
    /**
     * No comment provided
     *
     * Hash: 0xA44D65E6C624526F | Since: 1207
     */
    function getTint(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleTint(_vehicle);
    }
    vehicle_1.getTint = getTint;
    /**
     * No comment provided
     *
     * Hash: 0xFF5791B7639C2A46 | Since: 1207
     */
    function getTurretSeat(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return GetVehicleTurretSeat(_vehicle);
    }
    vehicle_1.getTurretSeat = getTurretSeat;
    /**
     * No comment provided
     *
     * Hash: 0xBD3C4A2ED509205E | Since: 1207
     */
    function hasTrainLoaded(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return HasTrainLoaded(_train);
    }
    vehicle_1.hasTrainLoaded = hasTrainLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x201B8ED4FF7FE9F5 | Since: 1207
     */
    function hideHorseReins(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        HideHorseReins(_vehicle);
    }
    vehicle_1.hideHorseReins = hideHorseReins;
    /**
     * No comment provided
     *
     * Hash: 0x30D86B2B7622D0EB | Since: 1207
     */
    function isBoatGrounded(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsBoatGrounded(_vehicle);
    }
    vehicle_1.isBoatGrounded = isBoatGrounded;
    /**
     * No comment provided
     *
     * Hash: 0xB213D2A560B2E48B | Since: 1207
     */
    function isPedExclusiveDriverOf(ped, vehicle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsPedExclusiveDriverOfVehicle(_ped, _vehicle);
    }
    vehicle_1.isPedExclusiveDriverOf = isPedExclusiveDriverOf;
    /**
     * No comment provided
     *
     * Hash: 0xB9D5BDDA88E1BB66 | Since: 1207
     */
    function isThisModelADraft(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelADraftVehicle(model);
    }
    vehicle_1.isThisModelADraft = isThisModelADraft;
    /**
     * Only returns true if BRING_VEHICLE_TO_HALT is called on vehicle beforehand
     *
     * Hash: 0x404527BC03DA0E6C | Since: 1207
     */
    function isBroughtToHalt(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleBroughtToHalt(_vehicle);
    }
    vehicle_1.isBroughtToHalt = isBroughtToHalt;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xE979BB5602AD3402 | Since: 1207
     */
    function isDoorBroken(vehicle, doorId) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleDoorBroken(_vehicle, doorId);
    }
    vehicle_1.isDoorBroken = isDoorBroken;
    /**
     * No comment provided
     *
     * Hash: 0x5136B284B67B35C7 | Since: 1207
     */
    function isFadingOut(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleFadingOut(_vehicle);
    }
    vehicle_1.isFadingOut = isFadingOut;
    /**
     * No comment provided
     *
     * Hash: 0x0E3BF7ED4169EC43 | Since: 1207
     */
    function isOnFire(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleOnFire(_vehicle);
    }
    vehicle_1.isOnFire = isOnFire;
    /**
     * No comment provided
     *
     * Hash: 0xCB2CA620C48BC875 | Since: 1207
     */
    function isWheelDestroyed(vehicle, wheel) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return IsVehicleWheelDestroyed(_vehicle, wheel);
    }
    vehicle_1.isWheelDestroyed = isWheelDestroyed;
    /**
     * No comment provided
     *
     * Hash: 0x138398153824E332 | Since: 1207
     */
    function setAllJunctionsCleared() {
        SetAllJunctionsCleared();
    }
    vehicle_1.setAllJunctionsCleared = setAllJunctionsCleared;
    /**
     * No comment provided
     *
     * Hash: 0x424FFCB9F0D2D4B5 | Since: 1207
     */
    function setAllGeneratorsDisabledForVolume(volume, toggle) {
        SetAllVehicleGeneratorsDisabledForVolume(volume, toggle);
    }
    vehicle_1.setAllGeneratorsDisabledForVolume = setAllGeneratorsDisabledForVolume;
    /**
     * Params: 1.0f will make balloon hover
     *
     * Hash: 0x7C9E45A4CED2E8DA | Since: 1207
     */
    function setBalloonHoverState(balloon) {
        const _balloon = balloon instanceof Vehicle ? balloon.localId() : balloon;
        SetBalloonHoverState(_balloon, 0);
    }
    vehicle_1.setBalloonHoverState = setBalloonHoverState;
    /**
     * Total height is calculated using: cargo ratio + pelt ratio (by pelt count)
     * Screenshot: https://imgur.com/a/nsomtiv
     *
     * Hash: 0x31F343383F19C987 | Since: 1207
     */
    function setBatchTarpHeight(vehicle, height, immediately) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetBatchTarpHeight(_vehicle, height, immediately);
    }
    vehicle_1.setBatchTarpHeight = setBatchTarpHeight;
    /**
     * No comment provided
     *
     * Hash: 0x8C6D9A399126C194 | Since: 1207
     */
    function setDraftAnimalRandomSeed(vehicle, seed) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDraftAnimalRandomSeed(_vehicle, seed);
    }
    vehicle_1.setDraftAnimalRandomSeed = setDraftAnimalRandomSeed;
    /**
     * No comment provided
     *
     * Hash: 0x87344305778E5415 | Since: 1207
     */
    function setDraftAllowDraftAnimalAutoCreation(vehicle, allow) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDraftVehicleAllowDraftAnimalAutoCreation(_vehicle, allow);
    }
    vehicle_1.setDraftAllowDraftAnimalAutoCreation = setDraftAllowDraftAnimalAutoCreation;
    /**
     * No comment provided
     *
     * Hash: 0x6090A031C69F384E | Since: 1207
     */
    function setDraftAnimalsCanDetach(draft, canDetach) {
        const _draft = draft instanceof Vehicle ? draft.localId() : draft;
        SetDraftVehicleAnimalsCanDetach(_draft, canDetach);
    }
    vehicle_1.setDraftAnimalsCanDetach = setDraftAnimalsCanDetach;
    /**
     * No comment provided
     *
     * Hash: 0x0C3F0F7F92CA847C | Since: 1207
     */
    function setDraftDesiredSpeed(vehicle, speed) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetDraftVehicleDesiredSpeed(_vehicle, speed);
    }
    vehicle_1.setDraftDesiredSpeed = setDraftDesiredSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x226C6A4E3346D288 | Since: 1207
     */
    function setDraftYokeCanBreak(draft, canBreak) {
        const _draft = draft instanceof Vehicle ? draft.localId() : draft;
        SetDraftVehicleYokeCanBreak(_draft, canBreak);
    }
    vehicle_1.setDraftYokeCanBreak = setDraftYokeCanBreak;
    /**
     * Hashes: COACH2_BOOT_LOOT_ITEMS_COACHROB_RSC, COACH2_BOOT_LOOT_ITEMS_COACHROB, COACH2_MARY3
     *
     * Hash: 0xF489F94BFEE12BB0 | Since: 1207
     */
    function setForceCoachRobberyLoot(vehicle, coachrobberyLoot) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof coachrobberyLoot === 'string')
            coachrobberyLoot = misc.getHashKey(coachrobberyLoot);
        SetForceCoachRobberyLoot(_vehicle, coachrobberyLoot);
    }
    vehicle_1.setForceCoachRobberyLoot = setForceCoachRobberyLoot;
    /**
     * No comment provided
     *
     * Hash: 0x1098CDA477890165 | Since: 1207
     */
    function setForceHighLod(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetForceHighLodVehicle(_vehicle, false);
    }
    vehicle_1.setForceHighLod = setForceHighLod;
    /**
     * No comment provided
     *
     * Hash: 0xF5FFB08976911B50 | Since: 1207
     */
    function setHorseTrafficGroupingDistribution() {
        SetHorseTrafficGroupingDistribution(undefined, undefined, undefined, undefined);
    }
    vehicle_1.setHorseTrafficGroupingDistribution = setHorseTrafficGroupingDistribution;
    /**
     * Notice: BOOL p4 was wrongly named takePassengers (?)
     * Can be used to rotate the train by setting the BOOL direction
     *
     * Hash: 0xC9EA26893C9E4024 | Since: 1207
     */
    function setMissionTrainWarpToCoords(train, pos, direction) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetMissionTrainWarpToCoords(_train, pos.x, pos.y, pos.z, direction);
    }
    vehicle_1.setMissionTrainWarpToCoords = setMissionTrainWarpToCoords;
    /**
     * No comment provided
     *
     * Hash: 0x3660BCAB3A6BB734 | Since: 1207
     */
    function setTrainHalt(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetTrainHalt(_train);
    }
    vehicle_1.setTrainHalt = setTrainHalt;
    /**
     * Restarts the train
     *
     * Hash: 0x787E43477746876F | Since: 1207
     */
    function setTrainLeaveStation(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetTrainLeaveStation(_train);
    }
    vehicle_1.setTrainLeaveStation = setTrainLeaveStation;
    /**
     * Maximum possible speed is 30.0 (108 km/h)
     *
     * Hash: 0x9F29999DFDF2AEB8 | Since: 1207
     */
    function setTrainMaxSpeed(train, speed) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetTrainMaxSpeed(_train, speed);
    }
    vehicle_1.setTrainMaxSpeed = setTrainMaxSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x4182C037AA1F0091 | Since: 1207
     */
    function setTrainStopsForStations(train, toggle) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        SetTrainStopsForStations(_train, toggle);
    }
    vehicle_1.setTrainStopsForStations = setTrainStopsForStations;
    /**
     * trainTrack: FREIGHT_GROUP, TRAINS3, BRAITHWAITES2_TRACK_CONFIG, TRAINS_OLD_WEST01, TRAINS_OLD_WEST03, TRAINS_NB1, TRAINS_INTERSECTION1_ANN
     *
     * Hash: 0xE6C5E2125EB210C1 | Since: 1207
     */
    function setTrainTrackJunctionSwitch(trainTrack, junctionIndex, enabled) {
        if (typeof trainTrack === 'string')
            trainTrack = misc.getHashKey(trainTrack);
        SetTrainTrackJunctionSwitch(trainTrack, junctionIndex, enabled);
    }
    vehicle_1.setTrainTrackJunctionSwitch = setTrainTrackJunctionSwitch;
    /**
     * No comment provided
     *
     * Hash: 0x8E5DA070BAD3279E | Since: 1207
     */
    function setDeterioration(vehicle, amount) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDeterioration(_vehicle, amount, 0, false);
    }
    vehicle_1.setDeterioration = setDeterioration;
    /**
     * dirtLevel: 0.0 - 1.0
     *
     * Hash: 0xBAE0EEDF93F05EAA | Since: 1207
     */
    function setDirtLevel2(vehicle, dirtLevel) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleDirtLevel2(_vehicle, dirtLevel);
    }
    vehicle_1.setDirtLevel2 = setDirtLevel2;
    /**
     * No comment provided
     *
     * Hash: 0xCE1531927AD6C9F8 | Since: 1207
     */
    function setIsInHurry(vehicle, enabled) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleIsInHurry(_vehicle, enabled);
    }
    vehicle_1.setIsInHurry = setIsInHurry;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_liveries.lua
     *
     * Hash: 0xF89D82A0582E46ED | Since: 1207
     */
    function setLivery(vehicle, liveryIndex) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleLivery(_vehicle, liveryIndex);
    }
    vehicle_1.setLivery = setLivery;
    /**
     * Ranges from -1 to 2? (internal type is int8)
     * https://imgur.com/a/bPzHcft
     *
     * Hash: 0x3FA7D7D1E0EA809E | Since: 1207
     */
    function setLodLevel(vehicle, lodLevel) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleLodLevel(_vehicle, lodLevel);
    }
    vehicle_1.setLodLevel = setLodLevel;
    /**
     * mudLevel: 0.0 - 1.0
     *
     * Hash: 0x4D15E49764CB328A | Since: 1207
     */
    function setMudLevel(vehicle, mudLevel) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleMudLevel(_vehicle, mudLevel);
    }
    vehicle_1.setMudLevel = setMudLevel;
    /**
     * snowLevel: 0.0 - 1.0
     *
     * Hash: 0x6F73EFAB11651D7F | Since: 1207
     */
    function setSnowLevel(vehicle, snowLevel) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleSnowLevel(_vehicle, snowLevel);
    }
    vehicle_1.setSnowLevel = setSnowLevel;
    /**
     * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_tints.lua
     *
     * Hash: 0x8268B098F6FCA4E2 | Since: 1207
     */
    function setTint(vehicle, tintId) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleTint(_vehicle, tintId);
    }
    vehicle_1.setTint = setTint;
    /**
     * wetLevel: 0.0 - 1.0
     *
     * Hash: 0x5AABB09F6FBD1F87 | Since: 1207
     */
    function setWetLevel(vehicle, wetLevel) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleWetLevel(_vehicle, wetLevel);
    }
    vehicle_1.setWetLevel = setWetLevel;
    /**
     * No comment provided
     *
     * Hash: 0x41CDA90EE3450921 | Since: 1207
     */
    function showHorseReins(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        ShowHorseReins(_vehicle);
    }
    vehicle_1.showHorseReins = showHorseReins;
    /**
     * whistleSequence: ACKNOWLEDGE, BACKING_UP, CROSSING, DANGER, MOVING, NEXT_STATION, PASSING, STOPPED
     * p2 = true seems to mute the sound
     *
     * Hash: 0xCFE122EC635CC2B2 | Since: 1207
     */
    function triggerTrainWhistle(train) {
        const _train = train instanceof Vehicle ? train.localId() : train;
        return TriggerTrainWhistle(_train, false, false);
    }
    vehicle_1.triggerTrainWhistle = triggerTrainWhistle;
})(vehicle || (vehicle = {}));
export var voice;
(function (voice) {
    /**
     * No comment provided
     *
     * Hash: 0x08797A8C03868CB8 | Since: 1207
     */
    function _0x08797A8C03868CB8(threshold) {
        Citizen.invokeNative('0x08797A8C03868CB8', threshold);
    }
    voice._0x08797A8C03868CB8 = _0x08797A8C03868CB8;
    /**
     * No comment provided
     *
     * Hash: 0x0DED260A1958A82E | Since: 1207
     */
    function _0x0DED260A1958A82E(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x0DED260A1958A82E', _player);
    }
    voice._0x0DED260A1958A82E = _0x0DED260A1958A82E;
    /**
     * No comment provided
     *
     * Hash: 0x1C38C3577901AF1F | Since: 1207
     */
    function _0x1C38C3577901AF1F() {
        Citizen.invokeNative('0x1C38C3577901AF1F');
    }
    voice._0x1C38C3577901AF1F = _0x1C38C3577901AF1F;
    /**
     * No comment provided
     *
     * Hash: 0x1FBF7F5BA7E4BE3A | Since: 1207
     */
    function _0x1FBF7F5BA7E4BE3A() {
        Citizen.invokeNative('0x1FBF7F5BA7E4BE3A', 0);
    }
    voice._0x1FBF7F5BA7E4BE3A = _0x1FBF7F5BA7E4BE3A;
    /**
     * No comment provided
     *
     * Hash: 0x2F82CAB262C8AE26 | Since: 1207
     */
    function _0x2F82CAB262C8AE26(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x2F82CAB262C8AE26', _player);
    }
    voice._0x2F82CAB262C8AE26 = _0x2F82CAB262C8AE26;
    /**
     * No comment provided
     *
     * Hash: 0x356135B9B10A2A82 | Since: 1207
     */
    function _0x356135B9B10A2A82() {
        return Citizen.invokeNative('0x356135B9B10A2A82');
    }
    voice._0x356135B9B10A2A82 = _0x356135B9B10A2A82;
    /**
     * Params: p1 = 2; p2 = 3 in R* Script net_main_offline
     *
     * Hash: 0x4791899615D70FA2 | Since: 1207
     */
    function _0x4791899615D70FA2(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0x4791899615D70FA2', _player, 0, 0);
    }
    voice._0x4791899615D70FA2 = _0x4791899615D70FA2;
    /**
     * No comment provided
     *
     * Hash: 0x49623BCFC3A3D829 | Since: 1207
     */
    function _0x49623BCFC3A3D829(player, muted) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x49623BCFC3A3D829', _player, muted);
    }
    voice._0x49623BCFC3A3D829 = _0x49623BCFC3A3D829;
    /**
     * No comment provided
     *
     * Hash: 0x58125B691F6827D5 | Since: 1207
     */
    function _0x58125B691F6827D5(proximity) {
        Citizen.invokeNative('0x58125B691F6827D5', proximity);
    }
    voice._0x58125B691F6827D5 = _0x58125B691F6827D5;
    /**
     * No comment provided
     *
     * Hash: 0x5CA7FB7D6DE49DCC | Since: 1207
     */
    function _0x5CA7FB7D6DE49DCC(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x5CA7FB7D6DE49DCC', _player);
    }
    voice._0x5CA7FB7D6DE49DCC = _0x5CA7FB7D6DE49DCC;
    /**
     * Returns p2 value of 0x4791899615D70FA2
     *
     * Hash: 0x767931C727DF2ED7 | Since: 1207
     */
    function _0x767931C727DF2ED7(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x767931C727DF2ED7', _player, 0);
    }
    voice._0x767931C727DF2ED7 = _0x767931C727DF2ED7;
    /**
     * No comment provided
     *
     * Hash: 0x79F478FF5F9F4F05 | Since: 1207
     */
    function _0x79F478FF5F9F4F05(enabled) {
        Citizen.invokeNative('0x79F478FF5F9F4F05', enabled);
    }
    voice._0x79F478FF5F9F4F05 = _0x79F478FF5F9F4F05;
    /**
     * No comment provided
     *
     * Hash: 0x8E462DB1EAA9C47C | Since: 1207
     */
    function _0x8E462DB1EAA9C47C(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x8E462DB1EAA9C47C', _player);
    }
    voice._0x8E462DB1EAA9C47C = _0x8E462DB1EAA9C47C;
    /**
     * No comment provided
     *
     * Hash: 0x919AF2D93E9AA89D | Since: 1207
     */
    function _0x919AF2D93E9AA89D(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0x919AF2D93E9AA89D', _player);
    }
    voice._0x919AF2D93E9AA89D = _0x919AF2D93E9AA89D;
    /**
     * No comment provided
     *
     * Hash: 0xAA35FD9ABAB490A3 | Since: 1207
     */
    function _0xAA35FD9ABAB490A3(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xAA35FD9ABAB490A3', _player);
    }
    voice._0xAA35FD9ABAB490A3 = _0xAA35FD9ABAB490A3;
    /**
     * No comment provided
     *
     * Hash: 0xB3E8841F6BDAF83E | Since: 1207
     */
    function _0xB3E8841F6BDAF83E() {
        Citizen.invokeNative('0xB3E8841F6BDAF83E');
    }
    voice._0xB3E8841F6BDAF83E = _0xB3E8841F6BDAF83E;
    /**
     * No comment provided
     *
     * Hash: 0xB6E79850B759A30E | Since: 1207
     */
    function _0xB6E79850B759A30E(teamId, allow) {
        Citizen.invokeNative('0xB6E79850B759A30E', teamId, allow);
    }
    voice._0xB6E79850B759A30E = _0xB6E79850B759A30E;
    /**
     * No comment provided
     *
     * Hash: 0xB779F4FA19269AEC | Since: 1207
     */
    function _0xB779F4FA19269AEC(flag) {
        Citizen.invokeNative('0xB779F4FA19269AEC', flag);
    }
    voice._0xB779F4FA19269AEC = _0xB779F4FA19269AEC;
    /**
     * No comment provided
     *
     * Hash: 0xCCF71FCFA0070B1A | Since: 1207
     */
    function _0xCCF71FCFA0070B1A() {
        return Citizen.invokeNative('0xCCF71FCFA0070B1A');
    }
    voice._0xCCF71FCFA0070B1A = _0xCCF71FCFA0070B1A;
    /**
     * No comment provided
     *
     * Hash: 0xDB622ECD3DCBE078 | Since: 1207
     */
    function _0xDB622ECD3DCBE078(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xDB622ECD3DCBE078', _player);
    }
    voice._0xDB622ECD3DCBE078 = _0xDB622ECD3DCBE078;
    /**
     * No comment provided
     *
     * Hash: 0xDC9B361CB7776673 | Since: 1207
     */
    function _0xDC9B361CB7776673(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xDC9B361CB7776673', _player);
    }
    voice._0xDC9B361CB7776673 = _0xDC9B361CB7776673;
    /**
     * No comment provided
     *
     * Hash: 0xEC8703E4536A9952 | Since: 1207
     */
    function _0xEC8703E4536A9952() {
        Citizen.invokeNative('0xEC8703E4536A9952');
    }
    voice._0xEC8703E4536A9952 = _0xEC8703E4536A9952;
    /**
     * No comment provided
     *
     * Hash: 0xEF6F2A35FAAF2ED7 | Since: 1207
     */
    function _0xEF6F2A35FAAF2ED7(player) {
        const _player = player instanceof Player ? player.localId() : player;
        return Citizen.invokeNative('0xEF6F2A35FAAF2ED7', _player);
    }
    voice._0xEF6F2A35FAAF2ED7 = _0xEF6F2A35FAAF2ED7;
    /**
     * No comment provided
     *
     * Hash: 0xF8938CF3984092A5 | Since: 1207
     */
    function _0xF8938CF3984092A5(player) {
        const _player = player instanceof Player ? player.localId() : player;
        Citizen.invokeNative('0xF8938CF3984092A5', _player);
    }
    voice._0xF8938CF3984092A5 = _0xF8938CF3984092A5;
})(voice || (voice = {}));
export var volume;
(function (volume_1) {
    /**
     * No comment provided
     *
     * Hash: 0x59F6F5C1D129F106 | Since: 1207
     */
    function createAggregate() {
        return CreateVolumeAggregate();
    }
    volume_1.createAggregate = createAggregate;
    /**
     * No comment provided
     *
     * Hash: 0xDF85637F22706891 | Since: 1207
     */
    function createBox(pos, rot, scale) {
        return CreateVolumeBox(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createBox = createBox;
    /**
     * No comment provided
     *
     * Hash: 0x0522D4774B82E3E6 | Since: 1207
     */
    function createCylinder(pos, rot, scale) {
        return CreateVolumeCylinder(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createCylinder = createCylinder;
    /**
     * No comment provided
     *
     * Hash: 0xB3FB80A32BAE3065 | Since: 1207
     */
    function createSphere(pos, rot, scale) {
        return CreateVolumeSphere(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createSphere = createSphere;
    /**
     * No comment provided
     *
     * Hash: 0x43F867EF5C463A53 | Since: 1207
     */
    function deleteVolume(volume) {
        DeleteVolume(volume);
    }
    volume_1.deleteVolume = deleteVolume;
    /**
     * No comment provided
     *
     * Hash: 0x397769175A7DBB30 | Since: 1207
     */
    function doesCollideWithAnyVolumeLock(pos, radius) {
        return DoesVolumeCollideWithAnyVolumeLock(pos.x, pos.y, pos.z, radius, false, 0, 0);
    }
    volume_1.doesCollideWithAnyVolumeLock = doesCollideWithAnyVolumeLock;
    /**
     * No comment provided
     *
     * Hash: 0x92A78D0BEDB332A3 | Since: 1207
     */
    function doesExist(volume) {
        return DoesVolumeExist(volume);
    }
    volume_1.doesExist = doesExist;
    /**
     * No comment provided
     *
     * Hash: 0xF70F00013A62F866 | Since: 1207
     */
    function getCoords(volume) {
        return new Vector3(GetVolumeCoords(volume));
    }
    volume_1.getCoords = getCoords;
    /**
     * enum eVolumeLockRequestStatus
     * {
     * VOLUME_LOCK_REQUEST_STATUS_INVALID,
     * VOLUME_LOCK_REQUEST_STATUS_READY,
     * VOLUME_LOCK_REQUEST_STATUS_IN_PROGRESS,
     * VOLUME_LOCK_REQUEST_STATUS_SUCCEEDED,
     * VOLUME_LOCK_REQUEST_STATUS_FAILED
     * };
     *
     * Hash: 0xB33A604345F58202 | Since: 1207
     */
    function getLockRequestStatus(volLockRequestId) {
        return GetVolumeLockRequestStatus(volLockRequestId);
    }
    volume_1.getLockRequestStatus = getLockRequestStatus;
    /**
     * No comment provided
     *
     * Hash: 0x18675BC914891122 | Since: 1207
     */
    function getRotation(volume) {
        return new Vector3(GetVolumeRotation(volume));
    }
    volume_1.getRotation = getRotation;
    /**
     * No comment provided
     *
     * Hash: 0x3E2A25B2416DD67E | Since: 1207
     */
    function getScale(volume) {
        return new Vector3(GetVolumeScale(volume));
    }
    volume_1.getScale = getScale;
    /**
     * Old name: _IS_POSITION_INSIDE_VOLUME
     *
     * Hash: 0xF256A75210C5C0EB | Since: 1207
     */
    function isPointIn(volume, pos) {
        return IsPointInVolume(volume, pos.x, pos.y, pos.z);
    }
    volume_1.isPointIn = isPointIn;
    /**
     * No comment provided
     *
     * Hash: 0xA4A4359320345B34 | Since: 1207
     */
    function isLockRequestValid(volLockRequestId) {
        return IsVolumeLockRequestValid(volLockRequestId);
    }
    volume_1.isLockRequestValid = isLockRequestValid;
    /**
     * No comment provided
     *
     * Hash: 0xF14BCEF290F869E1 | Since: 1207
     */
    function requestLock(pos, radius) {
        return RequestVolumeLock(pos.x, pos.y, pos.z, radius, 0, 0);
    }
    volume_1.requestLock = requestLock;
    /**
     * No comment provided
     *
     * Hash: 0x183C0B6CFEFFCAE4 | Since: 1207
     */
    function requestLockWithArgs() {
        return RequestVolumeLockWithArgs();
    }
    volume_1.requestLockWithArgs = requestLockWithArgs;
    /**
     * No comment provided
     *
     * Hash: 0x541B8576615C33DE | Since: 1207
     */
    function setCoords(volume, pos) {
        return SetVolumeCoords(volume, pos.x, pos.y, pos.z);
    }
    volume_1.setCoords = setCoords;
    /**
     * No comment provided
     *
     * Hash: 0xE2BE6FFA4A13CBB0 | Since: 1207
     */
    function setOwnerPersistentCharacter(volume, persChar) {
        SetVolumeOwnerPersistentCharacter(volume, persChar, false);
    }
    volume_1.setOwnerPersistentCharacter = setOwnerPersistentCharacter;
    /**
     * No comment provided
     *
     * Hash: 0xA07CF1B21B56F041 | Since: 1207
     */
    function setRotation(volume, rot) {
        return SetVolumeRotation(volume, rot.x, rot.y, rot.z);
    }
    volume_1.setRotation = setRotation;
    /**
     * No comment provided
     *
     * Hash: 0xA46E98BDC407E23D | Since: 1207
     */
    function setScale(volume, scale) {
        return SetVolumeScale(volume, scale.x, scale.y, scale.z);
    }
    volume_1.setScale = setScale;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x128FC3A893BF853A | Since: 1207
     */
    function _0x128FC3A893BF853A() {
        Citizen.invokeNative('0x128FC3A893BF853A', undefined);
    }
    volume_1._0x128FC3A893BF853A = _0x128FC3A893BF853A;
    /**
     * Indexes items (including entyties and peds) in a set volume
     * Counts up as its the return value of how many items it writes to given itemSet
     *
     * Hash: 0x2B32B11520626229 | Since: 1207
     */
    function getAmountOfIndexedItems(pos, radius, itemSet) {
        return Citizen.invokeNative('0x2B32B11520626229', pos.x, pos.y, pos.z, radius, itemSet);
    }
    volume_1.getAmountOfIndexedItems = getAmountOfIndexedItems;
    /**
     * No comment provided
     *
     * Hash: 0x351D71B8B72B858B | Since: 1207
     */
    function _0x351D71B8B72B858B() {
        return Citizen.invokeNative('0x351D71B8B72B858B', undefined);
    }
    volume_1._0x351D71B8B72B858B = _0x351D71B8B72B858B;
    /**
     * No comment provided
     *
     * Hash: 0x3EFABB21E14A6BD1 | Since: 1207
     */
    function _0x3EFABB21E14A6BD1() {
        Citizen.invokeNative('0x3EFABB21E14A6BD1', undefined, undefined, undefined);
    }
    volume_1._0x3EFABB21E14A6BD1 = _0x3EFABB21E14A6BD1;
    /**
     * No comment provided
     *
     * Hash: 0x40F769D31A00D5A0 | Since: 1207
     */
    function _0x40F769D31A00D5A0() {
        return Citizen.invokeNative('0x40F769D31A00D5A0', undefined, undefined);
    }
    volume_1._0x40F769D31A00D5A0 = _0x40F769D31A00D5A0;
    /**
     * No comment provided
     *
     * Hash: 0x4A8FEFC43FD8AC9B | Since: 1207
     */
    function _0x4A8FEFC43FD8AC9B() {
        Citizen.invokeNative('0x4A8FEFC43FD8AC9B', undefined, undefined, undefined);
    }
    volume_1._0x4A8FEFC43FD8AC9B = _0x4A8FEFC43FD8AC9B;
    /**
     * No comment provided
     *
     * Hash: 0x51E52C9687FCDEEC | Since: 1207
     */
    function _0x51E52C9687FCDEEC() {
        return Citizen.invokeNative('0x51E52C9687FCDEEC', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    volume_1._0x51E52C9687FCDEEC = _0x51E52C9687FCDEEC;
    /**
     * No comment provided
     *
     * Hash: 0x52572B331E693AED | Since: 1207
     */
    function _0x52572B331E693AED() {
        Citizen.invokeNative('0x52572B331E693AED', undefined, undefined, undefined);
    }
    volume_1._0x52572B331E693AED = _0x52572B331E693AED;
    /**
     * No comment provided
     *
     * Hash: 0x53D05D60E5F5B40C | Since: 1207
     */
    function _0x53D05D60E5F5B40C() {
        Citizen.invokeNative('0x53D05D60E5F5B40C', undefined, undefined, undefined, undefined);
    }
    volume_1._0x53D05D60E5F5B40C = _0x53D05D60E5F5B40C;
    /**
     * No comment provided
     *
     * Hash: 0x695DAC2DB928F308 | Since: 1207
     */
    function _0x695DAC2DB928F308() {
        Citizen.invokeNative('0x695DAC2DB928F308', undefined, undefined);
    }
    volume_1._0x695DAC2DB928F308 = _0x695DAC2DB928F308;
    /**
     * No comment provided
     *
     * Hash: 0x6D5F9E69BA1BE783 | Since: 1207
     */
    function _0x6D5F9E69BA1BE783() {
        Citizen.invokeNative('0x6D5F9E69BA1BE783', undefined);
    }
    volume_1._0x6D5F9E69BA1BE783 = _0x6D5F9E69BA1BE783;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0x748C5F51A18CB8F0 | Since: 1207
     */
    function _0x748C5F51A18CB8F0() {
        Citizen.invokeNative('0x748C5F51A18CB8F0', false);
    }
    volume_1._0x748C5F51A18CB8F0 = _0x748C5F51A18CB8F0;
    /**
     * No comment provided
     *
     * Hash: 0x7FD78DFD0C5D7B9B | Since: 1207
     */
    function _0x7FD78DFD0C5D7B9B() {
        return Citizen.invokeNative('0x7FD78DFD0C5D7B9B', undefined);
    }
    volume_1._0x7FD78DFD0C5D7B9B = _0x7FD78DFD0C5D7B9B;
    /**
     * No comment provided
     *
     * Hash: 0x870E9981ED27C815 | Since: 1207
     */
    function _0x870E9981ED27C815() {
        return Citizen.invokeNative('0x870E9981ED27C815', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    volume_1._0x870E9981ED27C815 = _0x870E9981ED27C815;
    /**
     * No comment provided
     *
     * Hash: 0x998202B206872672 | Since: 1207
     */
    function _0x998202B206872672() {
        Citizen.invokeNative('0x998202B206872672', undefined);
    }
    volume_1._0x998202B206872672 = _0x998202B206872672;
    /**
     * No comment provided
     *
     * Hash: 0xAA9EE2AAFC717623 | Since: 1207
     */
    function _0xAA9EE2AAFC717623() {
        return Citizen.invokeNative('0xAA9EE2AAFC717623', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    volume_1._0xAA9EE2AAFC717623 = _0xAA9EE2AAFC717623;
    /**
     * No comment provided
     *
     * Hash: 0xAC355980681A7F89 | Since: 1207
     */
    function _0xAC355980681A7F89() {
        Citizen.invokeNative('0xAC355980681A7F89', undefined);
    }
    volume_1._0xAC355980681A7F89 = _0xAC355980681A7F89;
    /**
     * No comment provided
     *
     * Hash: 0xB440F4E35393FC39 | Since: 1207
     */
    function _0xB440F4E35393FC39(volume) {
        Citizen.invokeNative('0xB440F4E35393FC39', volume, undefined);
    }
    volume_1._0xB440F4E35393FC39 = _0xB440F4E35393FC39;
    /**
     * No comment provided
     *
     * Hash: 0xB469CFD9E065EB99 | Since: 1207
     */
    function _0xB469CFD9E065EB99() {
        Citizen.invokeNative('0xB469CFD9E065EB99', undefined, undefined);
    }
    volume_1._0xB469CFD9E065EB99 = _0xB469CFD9E065EB99;
    /**
     * No comment provided
     *
     * Hash: 0xC4019CF9AE8E931A | Since: 1207
     */
    function _0xC4019CF9AE8E931A(volLockRequestId) {
        return new Vector3(Citizen.invokeNative('0xC4019CF9AE8E931A', volLockRequestId));
    }
    volume_1._0xC4019CF9AE8E931A = _0xC4019CF9AE8E931A;
    /**
     * No comment provided
     *
     * Hash: 0xC61E2FD926DBB406 | Since: 1311
     */
    function _0xC61E2FD926DBB406() {
        Citizen.invokeNative('0xC61E2FD926DBB406');
    }
    volume_1._0xC61E2FD926DBB406 = _0xC61E2FD926DBB406;
    /**
     * No comment provided
     *
     * Hash: 0xCA5C90D40665D5CE | Since: 1207
     */
    function _0xCA5C90D40665D5CE() {
        return Citizen.invokeNative('0xCA5C90D40665D5CE', undefined, undefined);
    }
    volume_1._0xCA5C90D40665D5CE = _0xCA5C90D40665D5CE;
    /**
     * No comment provided
     *
     * Hash: 0xD460135C98940274 | Since: 1207
     */
    function _0xD460135C98940274(volume) {
        Citizen.invokeNative('0xD460135C98940274', volume, undefined);
    }
    volume_1._0xD460135C98940274 = _0xD460135C98940274;
    /**
     * No comment provided
     *
     * Hash: 0xD4FA73FE628FEC63 | Since: 1207
     */
    function _0xD4FA73FE628FEC63() {
        Citizen.invokeNative('0xD4FA73FE628FEC63', undefined, undefined);
    }
    volume_1._0xD4FA73FE628FEC63 = _0xD4FA73FE628FEC63;
    /**
     * No comment provided
     *
     * Hash: 0xD52DF30355EA7C8E | Since: 1207
     */
    function _0xD52DF30355EA7C8E() {
        Citizen.invokeNative('0xD52DF30355EA7C8E', undefined, undefined, undefined);
    }
    volume_1._0xD52DF30355EA7C8E = _0xD52DF30355EA7C8E;
    /**
     * No comment provided
     *
     * Hash: 0xD882C5B3991575B7 | Since: 1207
     */
    function _0xD882C5B3991575B7() {
        return new Vector3(Citizen.invokeNative('0xD882C5B3991575B7', undefined, undefined, undefined, undefined, undefined));
    }
    volume_1._0xD882C5B3991575B7 = _0xD882C5B3991575B7;
    /**
     * No comment provided
     *
     * Hash: 0xEBA87B9273835CF3 | Since: 1207
     */
    function _0xEBA87B9273835CF3() {
        Citizen.invokeNative('0xEBA87B9273835CF3', undefined, undefined);
    }
    volume_1._0xEBA87B9273835CF3 = _0xEBA87B9273835CF3;
    /**
     * No comment provided
     *
     * Hash: 0xEE1D6FF54CAF7714 | Since: 1207
     */
    function _0xEE1D6FF54CAF7714() {
        return Citizen.invokeNative('0xEE1D6FF54CAF7714', undefined, undefined);
    }
    volume_1._0xEE1D6FF54CAF7714 = _0xEE1D6FF54CAF7714;
    /**
     * No comment provided
     *
     * Hash: 0xF3A2FBA5985C8CD5 | Since: 1207
     */
    function _0xF3A2FBA5985C8CD5() {
        Citizen.invokeNative('0xF3A2FBA5985C8CD5', undefined, undefined, undefined, undefined);
    }
    volume_1._0xF3A2FBA5985C8CD5 = _0xF3A2FBA5985C8CD5;
    /**
     * No comment provided
     *
     * Hash: 0xF6CE6F9C3897804E | Since: 1207
     */
    function _0xF6CE6F9C3897804E() {
        return Citizen.invokeNative('0xF6CE6F9C3897804E', undefined);
    }
    volume_1._0xF6CE6F9C3897804E = _0xF6CE6F9C3897804E;
    /**
     * No comment provided
     *
     * Hash: 0xF6F5447D418DAA82 | Since: 1207
     */
    function _0xF6F5447D418DAA82() {
        return Citizen.invokeNative('0xF6F5447D418DAA82', undefined);
    }
    volume_1._0xF6F5447D418DAA82 = _0xF6F5447D418DAA82;
    /**
     * nullsub, doesn't do anything
     *
     * Hash: 0xFA15C9A320E707B0 | Since: 1207
     */
    function _0xFA15C9A320E707B0() {
        Citizen.invokeNative('0xFA15C9A320E707B0');
    }
    volume_1._0xFA15C9A320E707B0 = _0xFA15C9A320E707B0;
    /**
     * _ADD_R* - _ADD_V(OLUME?)*
     *
     * Hash: 0x6E0D3C3F828DA773 | Since: 1207
     */
    function addBoundsToAggregate(volume, aggregate) {
        AddBoundsToAggregateVolume(volume, aggregate);
    }
    volume_1.addBoundsToAggregate = addBoundsToAggregate;
    /**
     * No comment provided
     *
     * Hash: 0x39816F6F94F385AD | Since: 1207
     */
    function addBoxToVolumeAggregate(aggregate) {
        AddBoxVolumeToVolumeAggregate(aggregate, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    volume_1.addBoxToVolumeAggregate = addBoxToVolumeAggregate;
    /**
     * No comment provided
     *
     * Hash: 0xBCE668AAF83608BE | Since: 1207
     */
    function addCylinderToVolumeAggregate(aggregate) {
        AddCylinderVolumeToVolumeAggregate(aggregate, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    volume_1.addCylinderToVolumeAggregate = addCylinderToVolumeAggregate;
    /**
     * No comment provided
     *
     * Hash: 0x58D3803FA639A3BB | Since: 1311
     */
    function addEntryLock() {
        return AddEntryVolumeLock();
    }
    volume_1.addEntryLock = addEntryLock;
    /**
     * No comment provided
     *
     * Hash: 0x5B7D7BF36D2DE18B | Since: 1207
     */
    function addSphereToVolumeAggregate(aggregate) {
        AddSphereVolumeToVolumeAggregate(aggregate, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    volume_1.addSphereToVolumeAggregate = addSphereToVolumeAggregate;
    /**
     * No comment provided
     *
     * Hash: 0x12FCAA23F2320422 | Since: 1207
     */
    function addToVolumeAggregate(aggregate, typeHash, pos, rot, scale) {
        if (typeof typeHash === 'string')
            typeHash = misc.getHashKey(typeHash);
        AddVolumeToVolumeAggregate(aggregate, typeHash, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.addToVolumeAggregate = addToVolumeAggregate;
    /**
     * No comment provided
     *
     * Hash: 0x0EB78C2B156635B1 | Since: 1207
     */
    function createAntiGrief(volumeType, pos, rot, scale) {
        if (typeof volumeType === 'string')
            volumeType = misc.getHashKey(volumeType);
        return CreateAntiGriefVolume(volumeType, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createAntiGrief = createAntiGrief;
    /**
     * No comment provided
     *
     * Hash: 0xBBE768E3AE76E07C | Since: 1207
     */
    function createSpeed() {
        return CreateSpeedVolume(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    volume_1.createSpeed = createSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x5D580DE6398BB162 | Since: 1207
     */
    function createAggregateWithCustomName() {
        return CreateVolumeAggregateWithCustomName();
    }
    volume_1.createAggregateWithCustomName = createAggregateWithCustomName;
    /**
     * No comment provided
     *
     * Hash: 0xF68485C7495D848E | Since: 1207
     */
    function createBoxWithCustomName(pos, rot, scale) {
        return CreateVolumeBoxWithCustomName(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createBoxWithCustomName = createBoxWithCustomName;
    /**
     * No comment provided
     *
     * Hash: 0x502022FA1AF9DC86 | Since: 1207
     */
    function createByHash(volumeType, pos, rot, scale) {
        if (typeof volumeType === 'string')
            volumeType = misc.getHashKey(volumeType);
        return CreateVolumeByHash(volumeType, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createByHash = createByHash;
    /**
     * No comment provided
     *
     * Hash: 0x1F85E4AC774A201E | Since: 1207
     */
    function createByHashWithCustomName(volumeType, pos, rot, scale) {
        if (typeof volumeType === 'string')
            volumeType = misc.getHashKey(volumeType);
        return CreateVolumeByHashWithCustomName(volumeType, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createByHashWithCustomName = createByHashWithCustomName;
    /**
     * No comment provided
     *
     * Hash: 0xDF1E350EDDF06E59 | Since: 1207
     */
    function createCylinderWithCustomName(pos, rot, scale) {
        return CreateVolumeCylinderWithCustomName(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createCylinderWithCustomName = createCylinderWithCustomName;
    /**
     * Params: p5 is always 0
     *
     * Hash: 0x00BBF7CEAE8C666A | Since: 1207
     */
    function createLock(pos, radius, flag) {
        return CreateVolumeLock(pos.x, pos.y, pos.z, radius, flag, undefined);
    }
    volume_1.createLock = createLock;
    /**
     * Params: p3 is always 0
     *
     * Hash: 0xF383E96C4904DF0C | Since: 1207
     */
    function createLockAttachedToEntity(entity, radius, flag) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        return CreateVolumeLockAttachedToEntity(_entity, radius, flag, undefined);
    }
    volume_1.createLockAttachedToEntity = createLockAttachedToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x10157BC3247FF3BA | Since: 1207
     */
    function createSphereWithCustomName(pos, rot, scale) {
        return CreateVolumeSphereWithCustomName(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z);
    }
    volume_1.createSphereWithCustomName = createSphereWithCustomName;
    /**
     * No comment provided
     *
     * Hash: 0xFD0E389CD44434B6 | Since: 1207
     */
    function createWalkAndTalk() {
        return CreateWalkAndTalkVolume(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    volume_1.createWalkAndTalk = createWalkAndTalk;
    /**
     * No comment provided
     *
     * Hash: 0x77A6E4AD0C496F81 | Since: 1207
     */
    function findLockRequestIdWithArgs() {
        return FindVolumeLockRequestIdWithArgs();
    }
    volume_1.findLockRequestIdWithArgs = findLockRequestIdWithArgs;
    /**
     * No comment provided
     *
     * Hash: 0x5737199AF2DC609F | Since: 1207
     */
    function getBounds(volume) {
        return GetVolumeBounds(volume);
    }
    volume_1.getBounds = getBounds;
    /**
     * Returns relationshipGroup Hash
     *
     * Hash: 0x666C2F53ABEFC952 | Since: 1207
     */
    function getRelationship(volume) {
        return GetVolumeRelationship(volume);
    }
    volume_1.getRelationship = getRelationship;
    /**
     * No comment provided
     *
     * Hash: 0xFEFF01B5725BCD22 | Since: 1207
     */
    function isAggregate(volume) {
        return IsAggregateVolume(volume);
    }
    volume_1.isAggregate = isAggregate;
    /**
     * No comment provided
     *
     * Hash: 0x769BB7626B8CDB06 | Since: 1207
     */
    function isPointNearLockCenter(pos, radius, flags) {
        return IsPointNearVolumeLockCenter(pos.x, pos.y, pos.z, radius, 0, 0, flags);
    }
    volume_1.isPointNearLockCenter = isPointNearLockCenter;
    /**
     * No comment provided
     *
     * Hash: 0xF6A8A652A6B186CD | Since: 1207
     */
    function isLockRequestValid2(volLockRequestId) {
        return IsVolumeLockRequestValid2(volLockRequestId);
    }
    volume_1.isLockRequestValid2 = isLockRequestValid2;
    /**
     * No comment provided
     *
     * Hash: 0xEC43C2FFB70E3F30 | Since: 1207
     */
    function modifyLockLocation(volLock, pos) {
        ModifyVolumeLockLocation(volLock, pos.x, pos.y, pos.z);
    }
    volume_1.modifyLockLocation = modifyLockLocation;
    /**
     * No comment provided
     *
     * Hash: 0xFDFECC6EE4491E11 | Since: 1207
     */
    function releaseLock(volLockRequestId) {
        ReleaseLockVolume(volLockRequestId);
    }
    volume_1.releaseLock = releaseLock;
    /**
     * _REMOVE_E* - _REMOVE_R*
     *
     * Hash: 0xF92FA8890DECECF6 | Since: 1207
     */
    function removeBoundsFromAggregate(volume, aggregate) {
        RemoveBoundsFromAggregateVolume(volume, aggregate);
    }
    volume_1.removeBoundsFromAggregate = removeBoundsFromAggregate;
    /**
     * No comment provided
     *
     * Hash: 0xBE551C2CC421185D | Since: 1207
     */
    function setAntiGriefBlocksHorse(volume, toggle) {
        SetAntiGriefVolumeBlocksHorse(volume, toggle);
    }
    volume_1.setAntiGriefBlocksHorse = setAntiGriefBlocksHorse;
    /**
     * No comment provided
     *
     * Hash: 0x5B23DFF8E0948BB2 | Since: 1207
     */
    function setAntiGriefBlocksPlayer(volume, toggle) {
        SetAntiGriefVolumeBlocksPlayer(volume, toggle);
    }
    volume_1.setAntiGriefBlocksPlayer = setAntiGriefBlocksPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xFD010A2154B40676 | Since: 1207
     */
    function setRelationship(volume, relationshipGroup) {
        if (typeof relationshipGroup === 'string')
            relationshipGroup = misc.getHashKey(relationshipGroup);
        SetVolumeRelationship(volume, relationshipGroup);
    }
    volume_1.setRelationship = setRelationship;
})(volume || (volume = {}));
export var water;
(function (water) {
    /**
     * Must be called every frame to take full effect.
     *
     * Hash: 0x754616EC6965D1FB | Since: 1207
     */
    function disableLookup() {
        DisableWaterLookup();
    }
    water.disableLookup = disableLookup;
    /**
     * No comment provided
     *
     * Hash: 0x754616EC6965D1BF | Since: 1207
     */
    function enableLookup() {
        EnableWaterLookup();
    }
    water.enableLookup = enableLookup;
    /**
     * Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If that is set to one it will fail. Likely not the only issue but part of it.
     *
     * Hash: 0xFCA8B23F28813F69 | Since: 1207
     */
    function getHeight(pos) {
        return GetWaterHeight(pos.x, pos.y, pos.z);
    }
    water.getHeight = getHeight;
    /**
     * No comment provided
     *
     * Hash: 0xDCF3690AA262C03F | Since: 1207
     */
    function getHeightNoWaves(pos) {
        return GetWaterHeightNoWaves(pos.x, pos.y, pos.z);
    }
    water.getHeightNoWaves = getHeightNoWaves;
    /**
     * Only used in rcm_crackpot1 R* Script: p0 = 0
     *
     * Hash: 0x4BEF8DD75AF6C71C | Since: 1207
     */
    function removeExtraCalmingQuad(index) {
        RemoveExtraCalmingQuad(index);
    }
    water.removeExtraCalmingQuad = removeExtraCalmingQuad;
    /**
     * enum eScriptWaterTestResult
     * {
     * SCRIPT_WATER_TEST_RESULT_NONE,
     * SCRIPT_WATER_TEST_RESULT_WATER,
     * SCRIPT_WATER_TEST_RESULT_BLOCKED,
     * };
     *
     * Hash: 0x8974647ED222EA5F | Since: 1207
     */
    function testProbeAgainstAll(x1, y1, z1, x2, y2, z2, flags) {
        return TestProbeAgainstAllWater(x1, y1, z1, x2, y2, z2, flags);
    }
    water.testProbeAgainstAll = testProbeAgainstAll;
    /**
     * Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If it's set to 1 (Guarma) it will fail.
     *
     * See TEST_PROBE_AGAINST_ALL_WATER.
     *
     * Hash: 0x2B3451FA1E3142E2 | Since: 1207
     */
    function testVerticalProbeAgainstAll(pos, flags) {
        return TestVerticalProbeAgainstAllWater(pos.x, pos.y, pos.z, flags);
    }
    water.testVerticalProbeAgainstAll = testVerticalProbeAgainstAll;
    /**
     * Called together with REMOVE_EXTRA_CALMING_QUAD in rcm_crackpot1 R* Script: p0 = 0
     * _REMOVE_*
     *
     * Hash: 0x09A1C7DFDCE54FBC | Since: 1207
     */
    function _0x09A1C7DFDCE54FBC() {
        Citizen.invokeNative('0x09A1C7DFDCE54FBC', 0);
    }
    water._0x09A1C7DFDCE54FBC = _0x09A1C7DFDCE54FBC;
    /**
     * Only used in native_son1 R* Script: p1 = 1
     *
     * Hash: 0x0DCEC6A92E497E17 | Since: 1207
     */
    function _0x0DCEC6A92E497E17(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0x0DCEC6A92E497E17', _entity, 0);
    }
    water._0x0DCEC6A92E497E17 = _0x0DCEC6A92E497E17;
    /**
     * Only used in fishing_core R* Script
     *
     * Hash: 0xA33F5069B0CB89B8 | Since: 1207
     */
    function _0xA33F5069B0CB89B8() {
        Citizen.invokeNative('0xA33F5069B0CB89B8');
    }
    water._0xA33F5069B0CB89B8 = _0xA33F5069B0CB89B8;
    /**
     * Used in bounty1, fanale3, sean1 R* Scripts
     *
     * Hash: 0xB34A6009A0DB80B8 | Since: 1207
     */
    function _0xB34A6009A0DB80B8(entity) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        Citizen.invokeNative('0xB34A6009A0DB80B8', _entity);
    }
    water._0xB34A6009A0DB80B8 = _0xB34A6009A0DB80B8;
    /**
     * Only used in fussar1 / train_robbery2 R* Script
     *
     * Hash: 0xE8126623008372AA | Since: 1207
     */
    function _0xE8126623008372AA() {
        Citizen.invokeNative('0xE8126623008372AA');
    }
    water._0xE8126623008372AA = _0xE8126623008372AA;
    /**
     * Only used in fishing_core R* Script
     *
     * Hash: 0xF0FBF193F1F5C0EA | Since: 1207
     */
    function _0xF0FBF193F1F5C0EA(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xF0FBF193F1F5C0EA', _ped);
    }
    water._0xF0FBF193F1F5C0EA = _0xF0FBF193F1F5C0EA;
    /**
     * No comment provided
     *
     * Hash: 0x189739A7631C1867 | Since: 1207
     */
    function getWorldType() {
        return GetWorldWaterType();
    }
    water.getWorldType = getWorldType;
    /**
     * Only used in guama1 / guama3 R* Script
     * _REQUEST_* or _RESET_*
     *
     * Hash: 0xC63540AEF8384769 | Since: 1207
     */
    function resetGuarmaState() {
        ResetGuarmaWaterState();
    }
    water.resetGuarmaState = resetGuarmaState;
    /**
     * Only used in R* Script guama1 this native allows to modify the ocean water in the guarma island. wave direction accepts 0, 1 and 2 values.
     *
     * Hash: 0xC63540AEF8384732 | Since: 1207
     */
    function setOceanGuarmaQuadrant(wavesHeight, waveDirection, waveAmmount, waveSpeed, wavesStrength) {
        SetOceanGuarmaWaterQuadrant(wavesHeight, 0, waveDirection, 0, waveAmmount, 0, waveSpeed, wavesStrength, 0);
    }
    water.setOceanGuarmaQuadrant = setOceanGuarmaQuadrant;
    /**
     * 0 = World
     * 1 = Guarma
     *
     * Hash: 0xE8770EE02AEE45C2 | Since: 1207
     */
    function setWorldType(waterType) {
        SetWorldWaterType(waterType);
    }
    water.setWorldType = setWorldType;
})(water || (water = {}));
export var weapon;
(function (weapon_1) {
    /**
     * No comment provided
     *
     * Hash: 0x918990BD9CE08582 | Since: 1207
     */
    function getAllowDualWield(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAllowDualWield(_ped);
    }
    weapon_1.getAllowDualWield = getAllowDualWield;
    /**
     * No comment provided
     *
     * Hash: 0x2E1202248937775C | Since: 1207
     */
    function getAmmoInClip(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetAmmoInClip(_ped, weaponHash);
    }
    weapon_1.getAmmoInClip = getAmmoInClip;
    /**
     * No comment provided
     *
     * Hash: 0x015A522136D7F951 | Since: 1207
     */
    function getAmmoInPed(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetAmmoInPedWeapon(_ped, weaponHash);
    }
    weapon_1.getAmmoInPed = getAmmoInPed;
    /**
     * No comment provided
     *
     * Hash: 0xF52BD94B47CCF736 | Since: 1207
     */
    function getBestPedShortarmGuid(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetBestPedShortarmGuid(_ped, false, false);
    }
    weapon_1.getBestPedShortarmGuid = getBestPedShortarmGuid;
    /**
     * No comment provided
     *
     * Hash: 0x8483E98E8B888AE2 | Since: 1207
     */
    function getBestPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetBestPedWeapon(_ped, false, false);
    }
    weapon_1.getBestPed = getBestPed;
    /**
     * No comment provided
     *
     * Hash: 0x1017582BCD3832DC | Since: 1207
     */
    function getCurrentPedVehicle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCurrentPedVehicleWeapon(_ped);
    }
    weapon_1.getCurrentPedVehicle = getCurrentPedVehicle;
    /**
     * attachPoint: see SET_CURRENT_PED_WEAPON
     *
     * Hash: 0x3A87E44BB9A01D54 | Since: 1207
     */
    function getCurrentPed(ped, attachPoint) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCurrentPedWeapon(_ped, false, attachPoint, false);
    }
    weapon_1.getCurrentPed = getCurrentPed;
    /**
     * Returns weaponObject, attachPoint: see SET_CURRENT_PED_WEAPON
     *
     * Hash: 0x3B390A939AF0B5FC | Since: 1207
     */
    function getCurrentPedEntityIndex(ped, attachPoint) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCurrentPedWeaponEntityIndex(_ped, attachPoint);
    }
    weapon_1.getCurrentPedEntityIndex = getCurrentPedEntityIndex;
    /**
     * No comment provided
     *
     * Hash: 0xDC16122C7A20C933 | Since: 1207
     */
    function getMaxAmmo(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetMaxAmmo(_ped, weaponHash);
    }
    weapon_1.getMaxAmmo = getMaxAmmo;
    /**
     * No comment provided
     *
     * Hash: 0xA38DCFFCEA8962FA | Since: 1207
     */
    function getMaxAmmoInClip(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetMaxAmmoInClip(_ped, weaponHash, false);
    }
    weapon_1.getMaxAmmoInClip = getMaxAmmoInClip;
    /**
     * No comment provided
     *
     * Hash: 0x39D22031557946C1 | Since: 1207
     */
    function getPedAmmoByType(ped, ammoType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof ammoType === 'string')
            ammoType = misc.getHashKey(ammoType);
        return GetPedAmmoByType(_ped, ammoType);
    }
    weapon_1.getPedAmmoByType = getPedAmmoByType;
    /**
     * Returns the current ammo type of the specified ped's specified weapon.
     *
     * Hash: 0x7FEAD38B326B9F74 | Since: 1207
     */
    function getPedAmmoTypeFrom(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetPedAmmoTypeFromWeapon(_ped, weaponHash);
    }
    weapon_1.getPedAmmoTypeFrom = getPedAmmoTypeFrom;
    /**
     * No comment provided
     *
     * Hash: 0xC71FE230A513C30F | Since: 1207
     */
    function getPedBackup(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedBackupWeapon(_ped, false);
    }
    weapon_1.getPedBackup = getPedBackup;
    /**
     * No comment provided
     *
     * Hash: 0x6C4D0409BA1A2BC2 | Since: 1207
     */
    function getPedLastImpactCoord(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedLastWeaponImpactCoord(_ped);
    }
    weapon_1.getPedLastImpactCoord = getPedLastImpactCoord;
    /**
     * No comment provided
     *
     * Hash: 0x6929E22158E52265 | Since: 1207
     */
    function getPedGuidAtAttachPoint(ped, attachPoint) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedWeaponGuidAtAttachPoint(_ped, attachPoint);
    }
    weapon_1.getPedGuidAtAttachPoint = getPedGuidAtAttachPoint;
    /**
     * No comment provided
     *
     * Hash: 0xEDCA14CA5199FF25 | Since: 1207
     */
    function gettypeGroup(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeapontypeGroup(weaponHash);
    }
    weapon_1.gettypeGroup = gettypeGroup;
    /**
     * No comment provided
     *
     * Hash: 0xD3750CCC00635FC2 | Since: 1207
     */
    function getClipSize(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponClipSize(weaponHash);
    }
    weapon_1.getClipSize = getClipSize;
    /**
     * 0.0: good condition, 1.0: poor condition
     *
     * Hash: 0x0D78E1097F89E637 | Since: 1207
     */
    function getDegradation(weaponObject) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        return GetWeaponDegradation(_weaponObject);
    }
    weapon_1.getDegradation = getDegradation;
    /**
     * Related to rust of weapons
     *
     * Hash: 0xD56E5F336C675EFA | Since: 1207
     */
    function getPermanentDegradation(weaponObject) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        return GetWeaponPermanentDegradation(_weaponObject);
    }
    weapon_1.getPermanentDegradation = getPermanentDegradation;
    /**
     * addReason: see _ADD_AMMO_TO_PED
     *
     * Hash: 0xB282DC6EBD803C75 | Since: 1207
     */
    function giveDelayedToPed(ped, weaponHash, ammoCount, addReason) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof addReason === 'string')
            addReason = misc.getHashKey(addReason);
        GiveDelayedWeaponToPed(_ped, weaponHash, ammoCount, false, addReason);
    }
    weapon_1.giveDelayedToPed = giveDelayedToPed;
    /**
     * Gives the ped the weapon.
     * List: https://github.com/femga/rdr3_discoveries/blob/master/weapons/weapons.lua
     *
     * Params: p7 is 0.5f, and p8 is 1.0f. p11 and p12 are both 0 in R* Scripts
     * attachPoint: see SET_CURRENT_PED_WEAPON
     * addReason: see _ADD_AMMO_TO_PED
     * permanentDegradation: default 0.5, any higher than 0 it will automatically make the weapon worn, you can also adjust the value to change the weapons maximum cleanliness
     *
     * Hash: 0x5E3BDDBCB83F3D84 | Since: 1207
     */
    function giveToPed(ped, weaponHash, ammoCount, bForceInHand, bForceInHolster, attachPoint, bAllowMultipleCopies, addReason, bIgnoreUnlocks, permanentDegradation) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof addReason === 'string')
            addReason = misc.getHashKey(addReason);
        return GiveWeaponToPed(_ped, weaponHash, ammoCount, bForceInHand, bForceInHolster, attachPoint, bAllowMultipleCopies, 0, 0, addReason, bIgnoreUnlocks, permanentDegradation, false);
    }
    weapon_1.giveToPed = giveToPed;
    /**
     * No comment provided
     *
     * Hash: 0xBE7E42B07FD317AC | Since: 1207
     */
    function giveToPedWithOptions(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GiveWeaponToPedWithOptions(_ped);
    }
    weapon_1.giveToPedWithOptions = giveToPedWithOptions;
    /**
     * onlyCheckPlayerInventory: If true, it will only check the players current inventory. If false, it also checks your horse inventory
     *
     * Hash: 0x8DECB02F88F428BC | Since: 1207
     */
    function hasPedGot(ped, weaponHash, onlyCheckPlayerInventory) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasPedGotWeapon(_ped, weaponHash, 0, onlyCheckPlayerInventory);
    }
    weapon_1.hasPedGot = hasPedGot;
    /**
     * No comment provided
     *
     * Hash: 0x76A18844E743BF91 | Since: 1207
     */
    function hasGotWeaponComponent(weapon, addonHash) {
        const _weapon = weapon instanceof Object ? weapon.handle() : weapon;
        if (typeof addonHash === 'string')
            addonHash = misc.getHashKey(addonHash);
        return HasWeaponGotWeaponComponent(_weapon, addonHash);
    }
    weapon_1.hasGotWeaponComponent = hasGotWeaponComponent;
    /**
     * Hides the ped's weapon during a cutscene.
     *
     * Hash: 0x6F6981D2253C208F | Since: 1207
     */
    function hidePedForScriptedCutscene(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        HidePedWeaponForScriptedCutscene(_ped, toggle);
    }
    weapon_1.hidePedForScriptedCutscene = hidePedForScriptedCutscene;
    /**
     * No comment provided
     *
     * Hash: 0xCB690F680A3EA971 | Since: 1207
     */
    function isPedArmed(ped, flags) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedArmed(_ped, flags);
    }
    weapon_1.isPedArmed = isPedArmed;
    /**
     * No comment provided
     *
     * Hash: 0xF29A186ED428B552 | Since: 1207
     */
    function isPedCarrying(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsPedCarryingWeapon(_ped, weaponHash);
    }
    weapon_1.isPedCarrying = isPedCarrying;
    /**
     * No comment provided
     *
     * Hash: 0xB80CA294F2F26749 | Since: 1207
     */
    function isPedReadyToShoot(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedWeaponReadyToShoot(_ped);
    }
    weapon_1.isPedReadyToShoot = isPedReadyToShoot;
    /**
     * `Returns true if CWeaponInfoFlags::Flags::Gun is set.`
     *
     * Hash: 0x705BE297EEBDB95D | Since: 1207
     */
    function isAGun(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponAGun(weaponHash);
    }
    weapon_1.isAGun = isAGun;
    /**
     * No comment provided
     *
     * Hash: 0xC4DEC3CA8C365A5D | Since: 1207
     */
    function isBow(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponBow(weaponHash);
    }
    weapon_1.isBow = isBow;
    /**
     * No comment provided
     *
     * Hash: 0x959383DCD42040DA | Since: 1207
     */
    function isMeleeWeapon(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponMeleeWeapon(weaponHash);
    }
    weapon_1.isMeleeWeapon = isMeleeWeapon;
    /**
     * No comment provided
     *
     * Hash: 0xDDC64F5E31EEDAB6 | Since: 1207
     */
    function isPistol(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponPistol(weaponHash);
    }
    weapon_1.isPistol = isPistol;
    /**
     * No comment provided
     *
     * Hash: 0xDDB2578E95EF7138 | Since: 1207
     */
    function isRepeater(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponRepeater(weaponHash);
    }
    weapon_1.isRepeater = isRepeater;
    /**
     * No comment provided
     *
     * Hash: 0xC212F1D05A8232BB | Since: 1207
     */
    function isRevolver(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponRevolver(weaponHash);
    }
    weapon_1.isRevolver = isRevolver;
    /**
     * No comment provided
     *
     * Hash: 0x0A82317B7EBFC420 | Since: 1207
     */
    function isRifle(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponRifle(weaponHash);
    }
    weapon_1.isRifle = isRifle;
    /**
     * No comment provided
     *
     * Hash: 0xC75386174ECE95D5 | Since: 1207
     */
    function isShotgun(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponShotgun(weaponHash);
    }
    weapon_1.isShotgun = isShotgun;
    /**
     * No comment provided
     *
     * Hash: 0x937C71165CF334B3 | Since: 1207
     */
    function isValid(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponValid(weaponHash);
    }
    weapon_1.isValid = isValid;
    /**
     * Old name: _DROP_CURRENT_PED_WEAPON
     *
     * Hash: 0xCEF4C65DE502D367 | Since: 1207
     */
    function makePedDrop(ped, attachPoint) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return MakePedDropWeapon(_ped, false, attachPoint, false, false);
    }
    weapon_1.makePedDrop = makePedDrop;
    /**
     * No comment provided
     *
     * Hash: 0xF25DF915FA38C5F3 | Since: 1207
     */
    function removeAllPeds(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemoveAllPedWeapons(_ped, false, false);
    }
    weapon_1.removeAllPeds = removeAllPeds;
    /**
     * No comment provided
     *
     * Hash: 0xF7D82B0D66777611 | Since: 1207
     */
    function removeComponentFromWeaponObject(weaponObject, component) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        if (typeof component === 'string')
            component = misc.getHashKey(component);
        RemoveWeaponComponentFromWeaponObject(_weaponObject, component);
    }
    weapon_1.removeComponentFromWeaponObject = removeComponentFromWeaponObject;
    /**
     * removeReason:
     * enum eRemoveItemReason : Hash
     * {
     * REMOVE_REASON_CLIENT_PURGED = 0x4A4E94DC,
     * REMOVE_REASON_COALESCE = 0x2ABE393E,
     * REMOVE_REASON_DEBUG = 0xA07362E6,
     * REMOVE_REASON_DEFAULT = 0xF77DE93D,
     * REMOVE_REASON_DELETE_CHARACTER = 0x20AFBDE9,
     * REMOVE_REASON_DROPPED = 0xEC7FB5D5,
     * REMOVE_REASON_DUPLICATE = 0x19047132,
     * REMOVE_REASON_GIFTED_INCORRECTLY = 0x9C4E3829,
     * REMOVE_REASON_GIVEN = 0xAD5377D4,
     * REMOVE_REASON_INSUFFICIENT_INVENTORY = 0x518D1AAE,
     * REMOVE_REASON_ITEM_DOES_NOT_EXIST = 0xEAD5D889,
     * REMOVE_REASON_LOADOUT = 0x1B94E3BA,
     * REMOVE_REASON_SET_AMOUNT = 0x19D5CFA5,
     * REMOVE_REASON_SOLD = 0x76C4B482,
     * REMOVE_REASON_USED = 0x2188E0A3,
     * REMOVE_REASON_USE_FAILED = 0x671F9EAD
     * };
     *
     * Hash: 0x4899CB088EDF59B8 | Since: 1207
     */
    function removeFromPed(ped, weaponHash, removeReason) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof removeReason === 'string')
            removeReason = misc.getHashKey(removeReason);
        RemoveWeaponFromPed(_ped, weaponHash, false, removeReason);
    }
    weapon_1.removeFromPed = removeFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x78030C7867D8B9B6 | Since: 1207
     */
    function setAllowAnyDrop(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAllowAnyWeaponDrop(_ped, toggle);
    }
    weapon_1.setAllowAnyDrop = setAllowAnyDrop;
    /**
     * No comment provided
     *
     * Hash: 0xDCD2A934D65CB497 | Since: 1207
     */
    function setAmmoInClip(ped, weaponHash, ammo) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return SetAmmoInClip(_ped, weaponHash, ammo);
    }
    weapon_1.setAmmoInClip = setAmmoInClip;
    /**
     * No comment provided
     *
     * Hash: 0x75C55983C2C39DAA | Since: 1207
     */
    function setCurrentPedVehicle(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return SetCurrentPedVehicleWeapon(_ped, weaponHash);
    }
    weapon_1.setCurrentPedVehicle = setCurrentPedVehicle;
    /**
     * attachPoint:
     * enum eWeaponAttachPoint
     * {
     * WEAPON_ATTACH_POINT_INVALID = -1,
     * WEAPON_ATTACH_POINT_HAND_PRIMARY = 0,
     * WEAPON_ATTACH_POINT_HAND_SECONDARY = 1,
     * WEAPON_ATTACH_POINT_PISTOL_R = 2,
     * MAX_HAND_WEAPON_ATTACH_POINTS = 2,
     * WEAPON_ATTACH_POINT_PISTOL_L = 3,
     * WEAPON_ATTACH_POINT_KNIFE = 4,
     * WEAPON_ATTACH_POINT_LASSO = 5,
     * WEAPON_ATTACH_POINT_THROWER = 6,
     * WEAPON_ATTACH_POINT_BOW = 7,
     * WEAPON_ATTACH_POINT_BOW_ALTERNATE = 8,
     * WEAPON_ATTACH_POINT_RIFLE = 9,
     * WEAPON_ATTACH_POINT_RIFLE_ALTERNATE = 10,
     * WEAPON_ATTACH_POINT_LANTERN = 11,
     * WEAPON_ATTACH_POINT_TEMP_LANTERN = 12,
     * WEAPON_ATTACH_POINT_MELEE = 13,
     * MAX_SYNCED_WEAPON_ATTACH_POINTS = 13,
     * WEAPON_ATTACH_POINT_HIP = 14,
     * WEAPON_ATTACH_POINT_BOOT = 15,
     * WEAPON_ATTACH_POINT_BACK = 16,
     * WEAPON_ATTACH_POINT_FRONT = 17,
     * WEAPON_ATTACH_POINT_SHOULDERSLING = 18,
     * WEAPON_ATTACH_POINT_LEFTBREAST = 19,
     * WEAPON_ATTACH_POINT_RIGHTBREAST = 20,
     * WEAPON_ATTACH_POINT_LEFTARMPIT = 21,
     * WEAPON_ATTACH_POINT_RIGHTARMPIT = 22,
     * WEAPON_ATTACH_POINT_LEFTARMPIT_RIFLE = 23,
     * WEAPON_ATTACH_POINT_SATCHEL = 24,
     * WEAPON_ATTACH_POINT_LEFTARMPIT_BOW = 25,
     * WEAPON_ATTACH_POINT_RIGHT_HAND_EXTRA = 26,
     * WEAPON_ATTACH_POINT_LEFT_HAND_EXTRA = 27,
     * WEAPON_ATTACH_POINT_RIGHT_HAND_AUX = 28,
     * MAX_WEAPON_ATTACH_POINTS = 29
     * };
     *
     * Hash: 0xADF692B254977C0C | Since: 1207
     */
    function setCurrentPed(ped, weaponHash, equipNow, attachPoint) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetCurrentPedWeapon(_ped, weaponHash, equipNow, attachPoint, false, false);
    }
    weapon_1.setCurrentPed = setCurrentPed;
    /**
     * Equips a weapon from a weaponItem, similar to GIVE_WEAPON_TO_PED
     *
     * Hash: 0x12FB95FE3D579238 | Since: 1207
     */
    function setCurrentPedByGuid(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetCurrentPedWeaponByGuid(_ped, false, false, false, false);
    }
    weapon_1.setCurrentPedByGuid = setCurrentPedByGuid;
    /**
     * No comment provided
     *
     * Hash: 0x739B9C6D0E7F7F93 | Since: 1207
     */
    function setInstantlyEquipPickups(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetInstantlyEquipWeaponPickups(_ped, toggle);
    }
    weapon_1.setInstantlyEquipPickups = setInstantlyEquipPickups;
    /**
     * No comment provided
     *
     * Hash: 0x14E56BC5B5DB6A19 | Since: 1207
     */
    function setPedAmmo(ped, weaponHash, ammo) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetPedAmmo(_ped, weaponHash, ammo);
    }
    weapon_1.setPedAmmo = setPedAmmo;
    /**
     * No comment provided
     *
     * Hash: 0x5FD1E1F011E76D7E | Since: 1207
     */
    function setPedAmmoByType(ped, ammoType, ammo) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof ammoType === 'string')
            ammoType = misc.getHashKey(ammoType);
        SetPedAmmoByType(_ped, ammoType, ammo);
    }
    weapon_1.setPedAmmoByType = setPedAmmoByType;
    /**
     * No comment provided
     *
     * Hash: 0xA4EFEF9440A5B0EF | Since: 1207
     */
    function setPedAmmoToDrop(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedAmmoToDrop(_ped, 0, 0);
    }
    weapon_1.setPedAmmoToDrop = setPedAmmoToDrop;
    /**
     * No comment provided
     *
     * Hash: 0x0725A4CCFDED9A70 | Since: 1207
     */
    function setPedCurrentVisible(ped, visible, deselectWeapon) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedCurrentWeaponVisible(_ped, visible, deselectWeapon, false, false);
    }
    weapon_1.setPedCurrentVisible = setPedCurrentVisible;
    /**
     * No comment provided
     *
     * Hash: 0x208A1888007FC0E6 | Since: 1207
     */
    function setPedDropsInventory(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetPedDropsInventoryWeapon(_ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
    }
    weapon_1.setPedDropsInventory = setPedDropsInventory;
    /**
     * No comment provided
     *
     * Hash: 0x476AE72C1D19D1A8 | Since: 1207
     */
    function setPedDropssWhenDead(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedDropsWeaponsWhenDead(_ped, toggle);
    }
    weapon_1.setPedDropssWhenDead = setPedDropssWhenDead;
    /**
     * No comment provided
     *
     * Hash: 0x3EDCB0505123623B | Since: 1207
     */
    function setPedInfiniteAmmo(ped, toggle, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetPedInfiniteAmmo(_ped, toggle, weaponHash);
    }
    weapon_1.setPedInfiniteAmmo = setPedInfiniteAmmo;
    /**
     * No comment provided
     *
     * Hash: 0xEC1F85DA51D3D6C4 | Since: 1232
     */
    function setPlayerPedQuickSwapByGuid(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return SetPlayerPedQuickSwapWeaponByGuid(_ped);
    }
    weapon_1.setPlayerPedQuickSwapByGuid = setPlayerPedQuickSwapByGuid;
    /**
     * No comment provided
     *
     * Hash: 0x194D877FC5597B7D | Since: 1207
     */
    function setVehicleHeading(vehicle, seatIndex, heading) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleWeaponHeading(_vehicle, seatIndex, heading, false);
    }
    weapon_1.setVehicleHeading = setVehicleHeading;
    /**
     * No comment provided
     *
     * Hash: 0x2C83212A7AA51D3D | Since: 1207
     */
    function shouldBeDiscardedWhenSwapped(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return ShouldWeaponBeDiscardedWhenSwapped(weaponHash);
    }
    weapon_1.shouldBeDiscardedWhenSwapped = shouldBeDiscardedWhenSwapped;
    /**
     * No comment provided
     *
     * Hash: 0x000FA7A4A8443AF7 | Since: 1207
     */
    function _0x000FA7A4A8443AF7() {
        Citizen.invokeNative('0x000FA7A4A8443AF7', undefined);
    }
    weapon_1._0x000FA7A4A8443AF7 = _0x000FA7A4A8443AF7;
    /**
     * Returns whether the specified ped is holding a weapon with the given hash.
     * only these weapons below return true
     * WEAPON_BOW, WEAPON_KIT_METAL_DETECTOR, WEAPON_MELEE_CLEAVER, WEAPON_MELEE_DAVY_LANTERN, WEAPON_MELEE_HATCHET, WEAPON_MELEE_HATCHET_HUNTER, WEAPON_MELEE_KNIFE_JAWBONE, WEAPON_MELEE_LANTERN WEAPON_MELEE_TORCH, WEAPON_MOONSHINEJUG_MP, WEAPON_RIFLE_BOLTACTION, WEAPON_SHOTGUN_PUMP, WEAPON_THROWN_BOLAS, WEAPON_THROWN_MOLOTOV
     *
     * Hash: 0x07E1C35F0078C3F9 | Since: 1207
     */
    function isPedHolding(ped, weapon) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weapon === 'string')
            weapon = misc.getHashKey(weapon);
        return Citizen.invokeNative('0x07E1C35F0078C3F9', _ped, weapon);
    }
    weapon_1.isPedHolding = isPedHolding;
    /**
     * _GET_D* - _GET_L*
     *
     * Hash: 0x0DE0944ECCB3DF5D | Since: 1232
     */
    function _0x0DE0944ECCB3DF5D(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x0DE0944ECCB3DF5D', _ped);
    }
    weapon_1._0x0DE0944ECCB3DF5D = _0x0DE0944ECCB3DF5D;
    /**
     * Puts the gun visibly in your horse's holster without having to be close to the horse. Use 0xE9BD19F8121ADE3E before using this native
     * _A* or _B*
     *
     * Hash: 0x14FF0C2545527F9B | Since: 1207
     */
    function _0x14FF0C2545527F9B(horse, weaponHash, ped) {
        const _horse = horse instanceof Ped ? horse.handle() : horse;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        Citizen.invokeNative('0x14FF0C2545527F9B', _horse, weaponHash, _ped);
    }
    weapon_1._0x14FF0C2545527F9B = _0x14FF0C2545527F9B;
    /**
     * No comment provided
     *
     * Hash: 0x16D9841A85FA627E | Since: 1207
     */
    function _0x16D9841A85FA627E(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x16D9841A85FA627E', _ped, toggle);
    }
    weapon_1._0x16D9841A85FA627E = _0x16D9841A85FA627E;
    /**
     * No comment provided
     *
     * Hash: 0x183CE355115B6E75 | Since: 1207
     */
    function _0x183CE355115B6E75() {
        Citizen.invokeNative('0x183CE355115B6E75', undefined, undefined);
    }
    weapon_1._0x183CE355115B6E75 = _0x183CE355115B6E75;
    /**
     * No comment provided
     *
     * Hash: 0x23BF601A42F329A0 | Since: 1207
     */
    function _0x23BF601A42F329A0() {
        return Citizen.invokeNative('0x23BF601A42F329A0', undefined);
    }
    weapon_1._0x23BF601A42F329A0 = _0x23BF601A42F329A0;
    /**
     * _SET_A* - _SET_B*
     *
     * Hash: 0x2EBF70E1D8C06683 | Since: 1207
     */
    function _0x2EBF70E1D8C06683(ped, p1) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof p1 === 'string')
            p1 = misc.getHashKey(p1);
        Citizen.invokeNative('0x2EBF70E1D8C06683', _ped, p1);
    }
    weapon_1._0x2EBF70E1D8C06683 = _0x2EBF70E1D8C06683;
    /**
     * No comment provided
     *
     * Hash: 0x3799EFCC3C8CD5E1 | Since: 1207
     */
    function _0x3799EFCC3C8CD5E1() {
        return Citizen.invokeNative('0x3799EFCC3C8CD5E1', undefined);
    }
    weapon_1._0x3799EFCC3C8CD5E1 = _0x3799EFCC3C8CD5E1;
    /**
     * No comment provided
     *
     * Hash: 0x404514D231DB27A0 | Since: 1207
     */
    function _0x404514D231DB27A0() {
        Citizen.invokeNative('0x404514D231DB27A0', undefined, undefined);
    }
    weapon_1._0x404514D231DB27A0 = _0x404514D231DB27A0;
    /**
     * No comment provided
     *
     * Hash: 0x431240A58484D5D0 | Since: 1207
     */
    function _0x431240A58484D5D0(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x431240A58484D5D0', _ped, toggle);
    }
    weapon_1._0x431240A58484D5D0 = _0x431240A58484D5D0;
    /**
     * No comment provided
     *
     * Hash: 0x44C8F4908F1B2622 | Since: 1207
     */
    function _0x44C8F4908F1B2622(ped, ammoHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        return Citizen.invokeNative('0x44C8F4908F1B2622', _ped, ammoHash);
    }
    weapon_1._0x44C8F4908F1B2622 = _0x44C8F4908F1B2622;
    /**
     * No comment provided
     *
     * Hash: 0x457B16951AD77C1B | Since: 1436
     */
    function _0x457B16951AD77C1B() {
        Citizen.invokeNative('0x457B16951AD77C1B', undefined);
    }
    weapon_1._0x457B16951AD77C1B = _0x457B16951AD77C1B;
    /**
     * No comment provided
     *
     * Hash: 0x45E57FDD531C9477 | Since: 1207
     */
    function _0x45E57FDD531C9477(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x45E57FDD531C9477', _ped, toggle);
    }
    weapon_1._0x45E57FDD531C9477 = _0x45E57FDD531C9477;
    /**
     * returns the amount of peds that were restrained with the weapon thrown bolas
     *
     * Hash: 0x46D42883E873C1D7 | Since: 1232
     */
    function getNumPedsRestrainedFromBolas(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x46D42883E873C1D7', _ped);
    }
    weapon_1.getNumPedsRestrainedFromBolas = getNumPedsRestrainedFromBolas;
    /**
     * Holster the holded shoulder weapon. Precisions: 0 means with anim while 1 means direct holster
     *
     * Hash: 0x4820A6939D7CEF28 | Since: 1207
     */
    function setPedOnBack(ped, disableAnim) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x4820A6939D7CEF28', _ped, disableAnim);
    }
    weapon_1.setPedOnBack = setPedOnBack;
    /**
     * No comment provided
     *
     * Hash: 0x4823F13A21F51964 | Since: 1207
     */
    function _0x4823F13A21F51964() {
        return Citizen.invokeNative('0x4823F13A21F51964', undefined, undefined);
    }
    weapon_1._0x4823F13A21F51964 = _0x4823F13A21F51964;
    /**
     * No comment provided
     *
     * Hash: 0x486C96A0DCD2BC92 | Since: 1232
     */
    function _0x486C96A0DCD2BC92() {
        return Citizen.invokeNative('0x486C96A0DCD2BC92', undefined, undefined);
    }
    weapon_1._0x486C96A0DCD2BC92 = _0x486C96A0DCD2BC92;
    /**
     * Returns whether the ped has a repeater p1: 0 or 1
     *
     * Hash: 0x495A04CAEC263AF8 | Since: 1207
     */
    function doesPedHaveRepeater(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x495A04CAEC263AF8', _ped, 0);
    }
    weapon_1.doesPedHaveRepeater = doesPedHaveRepeater;
    /**
     * Returns whether the weapon has multiple ammo types or not.
     *
     * Hash: 0x58425FCA3D3A2D15 | Since: 1207
     */
    function getHasMultipleAmmoTypes(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return Citizen.invokeNative('0x58425FCA3D3A2D15', weaponHash);
    }
    weapon_1.getHasMultipleAmmoTypes = getHasMultipleAmmoTypes;
    /**
     * Returns true if ped is on a horse while inside of a town
     * Params: p1 = 0
     * GET_L* - GET_MA*
     *
     * Hash: 0x5A695BD328586B44 | Since: 1207
     */
    function _0x5A695BD328586B44(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x5A695BD328586B44', _ped, 0);
    }
    weapon_1._0x5A695BD328586B44 = _0x5A695BD328586B44;
    /**
     * Returns whether the ped has a revolver p1: 0 or 1
     *
     * Hash: 0x5B235F24472F2C3B | Since: 1207
     */
    function doesPedHaveRevolver(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x5B235F24472F2C3B', _ped, 0);
    }
    weapon_1.doesPedHaveRevolver = doesPedHaveRevolver;
    /**
     * Only used in R* Script fme_escaped_convicts, p0 = 0
     *
     * Hash: 0x63B83A526329AFBC | Since: 1207
     */
    function _0x63B83A526329AFBC() {
        Citizen.invokeNative('0x63B83A526329AFBC', undefined);
    }
    weapon_1._0x63B83A526329AFBC = _0x63B83A526329AFBC;
    /**
     * No comment provided
     *
     * Hash: 0x641351E9AD103890 | Since: 1207
     */
    function _0x641351E9AD103890() {
        Citizen.invokeNative('0x641351E9AD103890', undefined, undefined);
    }
    weapon_1._0x641351E9AD103890 = _0x641351E9AD103890;
    /**
     * Returns the attachpoint for a weapon hash. (returns -1 for melee as they can't be attached)
     *
     * Hash: 0x65DC4AC5B96614CB | Since: 1311
     */
    function getDefaultAttachPoint(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return Citizen.invokeNative('0x65DC4AC5B96614CB', weaponHash);
    }
    weapon_1.getDefaultAttachPoint = getDefaultAttachPoint;
    /**
     * No comment provided
     *
     * Hash: 0x74C2365FDD1BB48F | Since: 1207
     */
    function _0x74C2365FDD1BB48F() {
        Citizen.invokeNative('0x74C2365FDD1BB48F', undefined, undefined);
    }
    weapon_1._0x74C2365FDD1BB48F = _0x74C2365FDD1BB48F;
    /**
     * No comment provided
     *
     * Hash: 0x74C8000FDD1BB111 | Since: 1207
     */
    function _0x74C8000FDD1BB111() {
        return Citizen.invokeNative('0x74C8000FDD1BB111', undefined, undefined);
    }
    weapon_1._0x74C8000FDD1BB111 = _0x74C8000FDD1BB111;
    /**
     * No comment provided
     *
     * Hash: 0x74C8000FDD1BB222 | Since: 1207
     */
    function _0x74C8000FDD1BB222() {
        return Citizen.invokeNative('0x74C8000FDD1BB222', undefined, undefined);
    }
    weapon_1._0x74C8000FDD1BB222 = _0x74C8000FDD1BB222;
    /**
     * No comment provided
     *
     * Hash: 0x74C9080FDD1BB48E | Since: 1207
     */
    function _0x74C9080FDD1BB48E() {
        Citizen.invokeNative('0x74C9080FDD1BB48E', undefined, undefined);
    }
    weapon_1._0x74C9080FDD1BB48E = _0x74C9080FDD1BB48E;
    /**
     * No comment provided
     *
     * Hash: 0x74C9080FDD1BB48F | Since: 1207
     */
    function _0x74C9080FDD1BB48F() {
        Citizen.invokeNative('0x74C9080FDD1BB48F', undefined, undefined);
    }
    weapon_1._0x74C9080FDD1BB48F = _0x74C9080FDD1BB48F;
    /**
     * No comment provided
     *
     * Hash: 0x74C90AAACC1DD48F | Since: 1207
     */
    function _0x74C90AAACC1DD48F() {
        Citizen.invokeNative('0x74C90AAACC1DD48F', undefined);
    }
    weapon_1._0x74C90AAACC1DD48F = _0x74C90AAACC1DD48F;
    /**
     * Returns whether the ped has a sniper p1: 0 or 1
     *
     * Hash: 0x80BB243789008A82 | Since: 1207
     */
    function doesPedHaveSniper(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x80BB243789008A82', _ped, 0);
    }
    weapon_1.doesPedHaveSniper = doesPedHaveSniper;
    /**
     * Only used in R* SP Scripts native_son2, native_son3 and smuggler2
     * Params: p2 = -1
     *
     * Hash: 0x8A779706DA5CA3DD | Since: 1207
     */
    function _0x8A779706DA5CA3DD(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0x8A779706DA5CA3DD', _ped, false, 0);
    }
    weapon_1._0x8A779706DA5CA3DD = _0x8A779706DA5CA3DD;
    /**
     * Only used in R* SP Script guama3
     *
     * Hash: 0x9409C62504A8F9E9 | Since: 1207
     */
    function _0x9409C62504A8F9E9(vehicle) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        Citizen.invokeNative('0x9409C62504A8F9E9', _vehicle, false);
    }
    weapon_1._0x9409C62504A8F9E9 = _0x9409C62504A8F9E9;
    /**
     * Returns whether the ped has a rifle p1: 0 or 1
     *
     * Hash: 0x95CA12E2C68043E5 | Since: 1207
     */
    function doesPedHaveRifle(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0x95CA12E2C68043E5', _ped, 0);
    }
    weapon_1.doesPedHaveRifle = doesPedHaveRifle;
    /**
     * No comment provided
     *
     * Hash: 0x9CCA3131E6B53C68 | Since: 1207
     */
    function _0x9CCA3131E6B53C68() {
        return Citizen.invokeNative('0x9CCA3131E6B53C68', undefined, undefined, undefined);
    }
    weapon_1._0x9CCA3131E6B53C68 = _0x9CCA3131E6B53C68;
    /**
     * this native gets the weapon hash from the default ped weapon collection (see GetDefaultPedWeaponCollection for more info) will randomly return one of it's weapons
     *
     * Hash: 0x9EEFD670F10656D7 | Since: 1207
     */
    function getFromDefaultPedWeaponCollection(weaponCollection, weaponGroup) {
        if (typeof weaponGroup === 'string')
            weaponGroup = misc.getHashKey(weaponGroup);
        return Citizen.invokeNative('0x9EEFD670F10656D7', weaponCollection, weaponGroup);
    }
    weapon_1.getFromDefaultPedWeaponCollection = getFromDefaultPedWeaponCollection;
    /**
     * No comment provided
     *
     * Hash: 0x9F0E1892C7F228A8 | Since: 1207
     */
    function _0x9F0E1892C7F228A8() {
        return Citizen.invokeNative('0x9F0E1892C7F228A8', false);
    }
    weapon_1._0x9F0E1892C7F228A8 = _0x9F0E1892C7F228A8;
    /**
     * No comment provided
     *
     * Hash: 0xA2091482ED42EF85 | Since: 1207
     */
    function _0xA2091482ED42EF85() {
        return Citizen.invokeNative('0xA2091482ED42EF85', undefined, undefined);
    }
    weapon_1._0xA2091482ED42EF85 = _0xA2091482ED42EF85;
    /**
     * No comment provided
     *
     * Hash: 0xA3716A77DCF17424 | Since: 1207
     */
    function _0xA3716A77DCF17424() {
        Citizen.invokeNative('0xA3716A77DCF17424', undefined, undefined, undefined);
    }
    weapon_1._0xA3716A77DCF17424 = _0xA3716A77DCF17424;
    /**
     * No comment provided
     *
     * Hash: 0xA769D753922B031B | Since: 1207
     */
    function _0xA769D753922B031B() {
        Citizen.invokeNative('0xA769D753922B031B', undefined, undefined, undefined);
    }
    weapon_1._0xA769D753922B031B = _0xA769D753922B031B;
    /**
     * Returns whether the ped has a shotgun p1: 0 or 1
     *
     * Hash: 0xABC18A28BAD4B46F | Since: 1207
     */
    function doesPedHaveShotgun(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xABC18A28BAD4B46F', _ped, 0);
    }
    weapon_1.doesPedHaveShotgun = doesPedHaveShotgun;
    /**
     * No comment provided
     *
     * Hash: 0xAFFD0CCF31F469B8 | Since: 1207
     */
    function _0xAFFD0CCF31F469B8() {
        return Citizen.invokeNative('0xAFFD0CCF31F469B8', undefined);
    }
    weapon_1._0xAFFD0CCF31F469B8 = _0xAFFD0CCF31F469B8;
    /**
     * No comment provided
     *
     * Hash: 0xB0FB9B196A3D13F0 | Since: 1207
     */
    function _0xB0FB9B196A3D13F0() {
        Citizen.invokeNative('0xB0FB9B196A3D13F0', undefined, undefined, undefined);
    }
    weapon_1._0xB0FB9B196A3D13F0 = _0xB0FB9B196A3D13F0;
    /**
     * Stores longarms to your horse on dismount
     * Params: p2 = 0
     * SET_[I - M]*
     *
     * Hash: 0xB832F1A686B9B810 | Since: 1207
     */
    function setInstantlyStoreLongarmsOnDismount(ped, storeLongarms) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xB832F1A686B9B810', _ped, storeLongarms, 0);
    }
    weapon_1.setInstantlyStoreLongarmsOnDismount = setInstantlyStoreLongarmsOnDismount;
    /**
     * No comment provided
     *
     * Hash: 0xBC9444F2FF94A9C0 | Since: 1355
     */
    function _0xBC9444F2FF94A9C0() {
        return Citizen.invokeNative('0xBC9444F2FF94A9C0', undefined);
    }
    weapon_1._0xBC9444F2FF94A9C0 = _0xBC9444F2FF94A9C0;
    /**
     * Returns whether the ped has a pistol p1: 0 or 1
     *
     * Hash: 0xBFCA7AFABF9D7967 | Since: 1207
     */
    function doesPedHavePistol(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return Citizen.invokeNative('0xBFCA7AFABF9D7967', _ped, 0);
    }
    weapon_1.doesPedHavePistol = doesPedHavePistol;
    /**
     * No comment provided
     *
     * Hash: 0xC5899C4CD2E2495D | Since: 1207
     */
    function _0xC5899C4CD2E2495D() {
        Citizen.invokeNative('0xC5899C4CD2E2495D', undefined);
    }
    weapon_1._0xC5899C4CD2E2495D = _0xC5899C4CD2E2495D;
    /**
     * No comment provided
     *
     * Hash: 0xD2209866B0CB72EA | Since: 1207
     */
    function _0xD2209866B0CB72EA() {
        return Citizen.invokeNative('0xD2209866B0CB72EA', undefined, undefined);
    }
    weapon_1._0xD2209866B0CB72EA = _0xD2209866B0CB72EA;
    /**
     * No comment provided
     *
     * Hash: 0xD4C6E24D955FF061 | Since: 1311
     */
    function _0xD4C6E24D955FF061() {
        Citizen.invokeNative('0xD4C6E24D955FF061', undefined);
    }
    weapon_1._0xD4C6E24D955FF061 = _0xD4C6E24D955FF061;
    /**
     * No comment provided
     *
     * Hash: 0xD53846B9C931C181 | Since: 1207
     */
    function _0xD53846B9C931C181() {
        Citizen.invokeNative('0xD53846B9C931C181', undefined, undefined, undefined);
    }
    weapon_1._0xD53846B9C931C181 = _0xD53846B9C931C181;
    /**
     * No comment provided
     *
     * Hash: 0xD63B4BA3A02A99E0 | Since: 1207
     */
    function _0xD63B4BA3A02A99E0() {
        Citizen.invokeNative('0xD63B4BA3A02A99E0', undefined, undefined);
    }
    weapon_1._0xD63B4BA3A02A99E0 = _0xD63B4BA3A02A99E0;
    /**
     * No comment provided
     *
     * Hash: 0xE9B3FEC825668291 | Since: 1207
     */
    function _0xE9B3FEC825668291() {
        Citizen.invokeNative('0xE9B3FEC825668291', undefined, undefined, undefined);
    }
    weapon_1._0xE9B3FEC825668291 = _0xE9B3FEC825668291;
    /**
     * _IS_WEAPON_CLOSE_RANGE?
     * returns true when it's lassos , melee, thrown weapons (matchetes and unarmed return false)
     * all guns ,bows and animal weapons return false
     *
     * Hash: 0xEA522F991E120D45 | Since: 1207
     */
    function isCloseRange(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return Citizen.invokeNative('0xEA522F991E120D45', weaponHash);
    }
    weapon_1.isCloseRange = isCloseRange;
    /**
     * No comment provided
     *
     * Hash: 0xEC97101A8F311282 | Since: 1207
     */
    function _0xEC97101A8F311282() {
        return Citizen.invokeNative('0xEC97101A8F311282', undefined);
    }
    weapon_1._0xEC97101A8F311282 = _0xEC97101A8F311282;
    /**
     * No comment provided
     *
     * Hash: 0xECBB26529A737EF6 | Since: 1207
     */
    function _0xECBB26529A737EF6() {
        Citizen.invokeNative('0xECBB26529A737EF6', undefined);
    }
    weapon_1._0xECBB26529A737EF6 = _0xECBB26529A737EF6;
    /**
     * No comment provided
     *
     * Hash: 0xF08D8FEB455F2C8C | Since: 1207
     */
    function _0xF08D8FEB455F2C8C(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        Citizen.invokeNative('0xF08D8FEB455F2C8C', _ped, toggle);
    }
    weapon_1._0xF08D8FEB455F2C8C = _0xF08D8FEB455F2C8C;
    /**
     * No comment provided
     *
     * Hash: 0xF252A85B8F3F8C58 | Since: 1207
     */
    function _0xF252A85B8F3F8C58(weaponCollection, dualwieldVariant) {
        if (typeof weaponCollection === 'string')
            weaponCollection = misc.getHashKey(weaponCollection);
        if (typeof dualwieldVariant === 'string')
            dualwieldVariant = misc.getHashKey(dualwieldVariant);
        return Citizen.invokeNative('0xF252A85B8F3F8C58', weaponCollection, dualwieldVariant);
    }
    weapon_1._0xF252A85B8F3F8C58 = _0xF252A85B8F3F8C58;
    /**
     * No comment provided
     *
     * Hash: 0xF2F585411E748B9C | Since: 1207
     */
    function _0xF2F585411E748B9C() {
        return Citizen.invokeNative('0xF2F585411E748B9C', undefined, undefined);
    }
    weapon_1._0xF2F585411E748B9C = _0xF2F585411E748B9C;
    /**
     * Returns weaponHash
     *
     * Hash: 0xF8204EF17410BF43 | Since: 1207
     */
    function _0xF8204EF17410BF43(weaponGroupHash) {
        if (typeof weaponGroupHash === 'string')
            weaponGroupHash = misc.getHashKey(weaponGroupHash);
        return Citizen.invokeNative('0xF8204EF17410BF43', weaponGroupHash, 0, 0, undefined);
    }
    weapon_1._0xF8204EF17410BF43 = _0xF8204EF17410BF43;
    /**
     * No comment provided
     *
     * Hash: 0xFDCEDFB0577A390D | Since: unknown
     */
    function _0xFDCEDFB0577A390D() {
        return Citizen.invokeNative('0xFDCEDFB0577A390D', undefined, undefined);
    }
    weapon_1._0xFDCEDFB0577A390D = _0xFDCEDFB0577A390D;
    /**
     * addReason:
     * enum eAddItemReason : Hash
     * {
     * ADD_REASON_AWARDS = 0xB784AD1E,
     * ADD_REASON_CREATE_CHARACTER = 0xE2C4FF71,
     * ADD_REASON_DEBUG = 0x5C05C64D,
     * ADD_REASON_DEFAULT = 0x2CD419DC,
     * ADD_REASON_GET_INVENTORY = 0xD8188685,
     * ADD_REASON_INCENTIVE = 0x8ADC2E95,
     * ADD_REASON_LOADOUT = 0xCA3454E6,
     * ADD_REASON_LOAD_SAVEGAME = 0x56212906,
     * ADD_REASON_LOOTED = 0xCA806A55,
     * ADD_REASON_MELEE = 0x7B9BDCE7,
     * ADD_REASON_MP_MISSION = 0xEC0E0194,
     * ADD_REASON_NOTIFICATION = 0xC56292D2,
     * ADD_REASON_PICKUP = 0x1A770E22,
     * ADD_REASON_PURCHASED = 0x4A6726C9,
     * ADD_REASON_SET_AMOUNT = 0x4504731E,
     * ADD_REASON_SYNCING = 0x8D4B4FF4,
     * ADD_REASON_USE_FAILED = 0xD385B670
     * };
     *
     * Hash: 0xB190BCA3F4042F95 | Since: 1207
     */
    function addAmmoToPed(ped, weaponHash, amount, addReason) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof addReason === 'string')
            addReason = misc.getHashKey(addReason);
        AddAmmoToPed(_ped, weaponHash, amount, addReason);
    }
    weapon_1.addAmmoToPed = addAmmoToPed;
    /**
     * addReason: see _ADD_AMMO_TO_PED
     *
     * Hash: 0x106A811C6D3035F3 | Since: 1207
     */
    function addAmmoToPedByType(ped, ammoType, amount, addReason) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof ammoType === 'string')
            ammoType = misc.getHashKey(ammoType);
        if (typeof addReason === 'string')
            addReason = misc.getHashKey(addReason);
        AddAmmoToPedByType(_ped, ammoType, amount, addReason);
    }
    weapon_1.addAmmoToPedByType = addAmmoToPedByType;
    /**
     * No comment provided
     *
     * Hash: 0x087D8F4BC65F68E4 | Since: 1207
     */
    function clearPedLastDamage(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        ClearPedLastWeaponDamage(_ped);
    }
    weapon_1.clearPedLastDamage = clearPedLastDamage;
    /**
     * No comment provided
     *
     * Hash: 0x9888652B8BA77F73 | Since: 1207
     */
    function createObject(weaponHash, ammoCount, pos, showWorldModel, scale) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return CreateWeaponObject(weaponHash, ammoCount, pos.x, pos.y, pos.z, showWorldModel, scale);
    }
    weapon_1.createObject = createObject;
    /**
     * No comment provided
     *
     * Hash: 0xAA5A52204E077883 | Since: 1207
     */
    function disableAmmoTypeForPed(ped, ammoHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        DisableAmmoTypeForPed(_ped, ammoHash);
    }
    weapon_1.disableAmmoTypeForPed = disableAmmoTypeForPed;
    /**
     * No comment provided
     *
     * Hash: 0xF0D728EEA3C99775 | Since: 1207
     */
    function disableAmmoTypeForPedWeapon(ped, weaponHash, ammoHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        DisableAmmoTypeForPedWeapon(_ped, weaponHash, ammoHash);
    }
    weapon_1.disableAmmoTypeForPedWeapon = disableAmmoTypeForPedWeapon;
    /**
     * No comment provided
     *
     * Hash: 0x3B7B7908B7ADFB4B | Since: 1207
     */
    function enableAmmoTypeForPed(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        EnableAmmoTypeForPed(_ped, weaponHash);
    }
    weapon_1.enableAmmoTypeForPed = enableAmmoTypeForPed;
    /**
     * No comment provided
     *
     * Hash: 0x23FB9FACA28779C1 | Since: 1207
     */
    function enableAmmoTypeForPedWeapon(ped, weaponHash, ammoHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        EnableAmmoTypeForPedWeapon(_ped, weaponHash, ammoHash);
    }
    weapon_1.enableAmmoTypeForPedWeapon = enableAmmoTypeForPedWeapon;
    /**
     * No comment provided
     *
     * Hash: 0xC395355843BE134B | Since: 1207
     */
    function enableRestore(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return EnableWeaponRestore(_ped);
    }
    weapon_1.enableRestore = enableRestore;
    /**
     * No comment provided
     *
     * Hash: 0x678F00858980F516 | Since: 1207
     */
    function getAmmoInClipByInventoryUid(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetAmmoInClipByInventoryUid(_ped);
    }
    weapon_1.getAmmoInClipByInventoryUid = getAmmoInClipByInventoryUid;
    /**
     * No comment provided
     *
     * Hash: 0x5C2EA6C44F515F34 | Since: 1207
     */
    function getAmmoTypeFor(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetAmmoTypeForWeapon(weaponHash);
    }
    weapon_1.getAmmoTypeFor = getAmmoTypeFor;
    /**
     * If near your horse when called, weapons stored on your horse will be considered
     * Returns weaponHash
     *
     * Hash: 0x9F67929D98E7C6E8 | Since: 1207
     */
    function getBestPedInGroup(ped, weaponGroup) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponGroup === 'string')
            weaponGroup = misc.getHashKey(weaponGroup);
        return GetBestPedWeaponInGroup(_ped, weaponGroup, false, false);
    }
    weapon_1.getBestPedInGroup = getBestPedInGroup;
    /**
     * No comment provided
     *
     * Hash: 0x7B98500614C8E8B8 | Since: 1232
     */
    function getBestPedInInventory(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetBestPedWeaponInInventory(_ped, undefined);
    }
    weapon_1.getBestPedInInventory = getBestPedInInventory;
    /**
     * No comment provided
     *
     * Hash: 0x6554ECCE226F2A2A | Since: 1207
     */
    function getCanTwirl(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetCanTwirlWeapon(weaponHash);
    }
    weapon_1.getCanTwirl = getCanTwirl;
    /**
     * _GET_BEST_* - _GET_CLOSEST_*
     *
     * Hash: 0xCD356B42C57BFE01 | Since: 1355
     */
    function getCorrectKitEmoteTwirlGun(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCorrectKitEmoteTwirlGun(_ped);
    }
    weapon_1.getCorrectKitEmoteTwirlGun = getCorrectKitEmoteTwirlGun;
    /**
     * Returns ammoHash
     *
     * Hash: 0xAF9D167A5656D6A6 | Since: 1207
     */
    function getCurrentAmmoTypeFromGuid(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetCurrentAmmoTypeFromGuid(_ped);
    }
    weapon_1.getCurrentAmmoTypeFromGuid = getCurrentAmmoTypeFromGuid;
    /**
     * Returns ammoHash from weaponObject (Returned by 0x6CA484C9A7377E4F)
     *
     * Hash: 0x7E7B19A4355FEE13 | Since: 1207
     */
    function getCurrentPedAmmoType(ped, weaponObject) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        return GetCurrentPedWeaponAmmoType(_ped, _weaponObject);
    }
    weapon_1.getCurrentPedAmmoType = getCurrentPedAmmoType;
    /**
     * Returns weaponCollection Hash
     * Example: RE_POLICECHASE_MALES_01: Carbine Repeater + Knife, LO_AGRO_PED
     *
     * Hash: 0xD42514C182121C23 | Since: 1207
     */
    function getDefaultPedCollection(pedModel) {
        if (typeof pedModel === 'string')
            pedModel = misc.getHashKey(pedModel);
        return GetDefaultPedWeaponCollection(pedModel);
    }
    weapon_1.getDefaultPedCollection = getDefaultPedCollection;
    /**
     * Returns the ped's default unarmed weapon hash as defined in CPedModelInfo (DefaultUnarmedWeapon).
     * Falls back to WEAPON_UNARMED if the ped doesn't have a valid model info pointer, or 0 if the ped doesn't exist.
     *
     * Hash: 0x08FF1099ED2E6E21 | Since: 1207
     */
    function getDefaultUnarmedHash(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetDefaultUnarmedWeaponHash(_ped);
    }
    weapon_1.getDefaultUnarmedHash = getDefaultUnarmedHash;
    /**
     * No comment provided
     *
     * Hash: 0x79B1A6E780266DB0 | Since: 1207
     */
    function getMaxLockonDistanceOfCurrentPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetMaxLockonDistanceOfCurrentPedWeapon(_ped);
    }
    weapon_1.getMaxLockonDistanceOfCurrentPed = getMaxLockonDistanceOfCurrentPed;
    /**
     * Returns eCurrentHeldWeapon
     * _GET_R* - _GET_T*
     *
     * Hash: 0x8425C5F057012DAB | Since: 1207
     */
    function getPedCurrentHeld(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedCurrentHeldWeapon(_ped);
    }
    weapon_1.getPedCurrentHeld = getPedCurrentHeld;
    /**
     * Returns emote Hash
     *
     * Hash: 0x2C4FEC3D0EFA9FC0 | Since: 1355
     */
    function getPedGunSpinningEquippedKitEmoteTwirl(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedGunSpinningEquippedKitEmoteTwirl(_ped);
    }
    weapon_1.getPedGunSpinningEquippedKitEmoteTwirl = getPedGunSpinningEquippedKitEmoteTwirl;
    /**
     * Returns iSpinHash / iVariationSpin
     *
     * Hash: 0xF3B1620B920D1708 | Since: 1355
     */
    function getPedGunSpinningHashFromEmoteVariation(ped, weaponEmoteVariation) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedGunSpinningHashFromWeaponEmoteVariation(_ped, weaponEmoteVariation);
    }
    weapon_1.getPedGunSpinningHashFromEmoteVariation = getPedGunSpinningHashFromEmoteVariation;
    /**
     * No comment provided
     *
     * Hash: 0x90EB1CB189923587 | Since: 1207
     */
    function getPedHogtie(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedHogtieWeapon(_ped);
    }
    weapon_1.getPedHogtie = getPedHogtie;
    /**
     * slotHash is usually just the weaponHash name, but WEAPON_* is replaced with SLOT_*
     *
     * Hash: 0xDBC4B552B2AE9A83 | Since: 1207
     */
    function getPedInSlot(ped, slotHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof slotHash === 'string')
            slotHash = misc.getHashKey(slotHash);
        return GetPedWeaponInSlot(_ped, slotHash);
    }
    weapon_1.getPedInSlot = getPedInSlot;
    /**
     * _GET_M* - _GET_PED_A*
     *
     * Hash: 0x6CA484C9A7377E4F | Since: 1207
     */
    function getPedObject(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedWeaponObject(_ped, false);
    }
    weapon_1.getPedObject = getPedObject;
    /**
     * No comment provided
     *
     * Hash: 0xDA37A053C1522F5D | Since: 1207
     */
    function getPedWorst(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPedWorstWeapon(_ped, false, false, false);
    }
    weapon_1.getPedWorst = getPedWorst;
    /**
     * Outputs cached guids
     *
     * Hash: 0xB7E52A058B07C7E2 | Since: 1232
     */
    function getPlayerPedQuickSwapByGuid(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetPlayerPedQuickSwapWeaponByGuid(_ped);
    }
    weapon_1.getPlayerPedQuickSwapByGuid = getPlayerPedQuickSwapByGuid;
    /**
     * Gets the model hash from the weapon hash.
     *
     * Hash: 0xF70825EB340E7D15 | Since: 1207
     */
    function gettypeModel(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeapontypeModel(weaponHash);
    }
    weapon_1.gettypeModel = gettypeModel;
    /**
     * Returns hash where WEAPON_ is replaced with SLOT_
     *
     * Hash: 0x46F032B8DDF46CDE | Since: 1207
     */
    function gettypeSlot(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeapontypeSlot(weaponHash);
    }
    weapon_1.gettypeSlot = gettypeSlot;
    /**
     * Returns WeaponAttachPoint
     *
     * Hash: 0xCAD4FE9398820D24 | Since: 1207
     */
    function getAttachPoint(ped, attachPoint) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetWeaponAttachPoint(_ped, attachPoint);
    }
    weapon_1.getAttachPoint = getAttachPoint;
    /**
     * No comment provided
     *
     * Hash: 0x59DE03442B6C9598 | Since: 1207
     */
    function getComponentTypeModel(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetWeaponComponentTypeModel(componentHash);
    }
    weapon_1.getComponentTypeModel = getComponentTypeModel;
    /**
     * Related to weapon visual damage, not actual damage.
     *
     * Hash: 0x904103D5D2333977 | Since: 1207
     */
    function getDamage(weaponObject) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        return GetWeaponDamage(_weaponObject);
    }
    weapon_1.getDamage = getDamage;
    /**
     * No comment provided
     *
     * Hash: 0x810E8AE9AFEA7E54 | Since: 1207
     */
    function getDirt(weaponObject) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        return GetWeaponDirt(_weaponObject);
    }
    weapon_1.getDirt = getDirt;
    /**
     * Returns weaponEmoteVariation
     *
     * WEAPON_EMOTE_VARIATION_INVALID = -2,
     * WEAPON_EMOTE_VARIATION_BASE,
     * WEAPON_EMOTE_VARIATION_A,
     * WEAPON_EMOTE_VARIATION_B,
     * WEAPON_EMOTE_VARIATION_C,
     * WEAPON_EMOTE_VARIATION_D,
     * WEAPON_EMOTE_VARIATION_PREVIEW,
     * WEAPON_EMOTE_NUM_VARIATIONS
     *
     * Hash: 0x86147D05FA831D3A | Since: 1355
     */
    function getEmoteVariation(ped, variation) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetWeaponEmoteVariation(_ped, variation);
    }
    weapon_1.getEmoteVariation = getEmoteVariation;
    /**
     * Returns iSpinHash
     *
     * Hash: 0xF4601C1203B1A78D | Since: 1207
     */
    function getGunSpinningWeaponEmoteTrickTypeHash(emote, weaponEmoteTrickType) {
        if (typeof emote === 'string')
            emote = misc.getHashKey(emote);
        return GetWeaponGunSpinningWeaponEmoteTrickTypeHash(emote, weaponEmoteTrickType);
    }
    weapon_1.getGunSpinningWeaponEmoteTrickTypeHash = getGunSpinningWeaponEmoteTrickTypeHash;
    /**
     * Returns "WNS_INVALID" if the weapon is invalid/doesn't exist.
     *
     * Hash: 0x89CF5FF3D363311E | Since: 1207
     */
    function getName(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponName(weaponHash);
    }
    weapon_1.getName = getName;
    /**
     * No comment provided
     *
     * Hash: 0x6D3AC61694A791C5 | Since: 1207
     */
    function getName2(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponName2(weaponHash);
    }
    weapon_1.getName2 = getName2;
    /**
     * No comment provided
     *
     * Hash: 0x7A56D66C78D8EF8E | Since: 1207
     */
    function getNameWithPermanentDegradation(weaponHash, permanentDegradationLevel) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponNameWithPermanentDegradation(weaponHash, permanentDegradationLevel);
    }
    weapon_1.getNameWithPermanentDegradation = getNameWithPermanentDegradation;
    /**
     * Detaches the weapon from the ped and actually removes the ped's weapon
     *
     * Hash: 0xC6A6789BB405D11C | Since: 1207
     */
    function getObjectFromPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return GetWeaponObjectFromPed(_ped, false);
    }
    weapon_1.getObjectFromPed = getObjectFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x22084CA699219624 | Since: 1207
     */
    function getScale(weaponObject) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        return GetWeaponScale(_weaponObject);
    }
    weapon_1.getScale = getScale;
    /**
     * No comment provided
     *
     * Hash: 0x4BF66F8878F67663 | Since: 1207
     */
    function getSoot(weaponObject) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        return GetWeaponSoot(_weaponObject);
    }
    weapon_1.getSoot = getSoot;
    /**
     * No comment provided
     *
     * Hash: 0x8EC44AE8DECFF841 | Since: 1207
     */
    function getStatId(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponStatId(weaponHash);
    }
    weapon_1.getStatId = getStatId;
    /**
     * No comment provided
     *
     * Hash: 0x7AA043F6C41D151E | Since: 1207
     */
    function getTypeFromAmmoType(ammoType) {
        if (typeof ammoType === 'string')
            ammoType = misc.getHashKey(ammoType);
        return GetWeaponTypeFromAmmoType(ammoType);
    }
    weapon_1.getTypeFromAmmoType = getTypeFromAmmoType;
    /**
     * No comment provided
     *
     * Hash: 0x865F36299079FB75 | Since: 1207
     */
    function getUnlock(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponUnlock(weaponHash);
    }
    weapon_1.getUnlock = getUnlock;
    /**
     * No comment provided
     *
     * Hash: 0x899A04AFCC725D04 | Since: 1207
     */
    function giveCollectionToPed(ped, weaponCollection) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponCollection === 'string')
            weaponCollection = misc.getHashKey(weaponCollection);
        GiveWeaponCollectionToPed(_ped, weaponCollection);
    }
    weapon_1.giveCollectionToPed = giveCollectionToPed;
    /**
     * entity can be a ped or weapon object.
     *
     * Hash: 0x74C9090FDD1BB48E | Since: 1207
     */
    function giveComponentToEntity(entity, componentHash, weaponHash) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        GiveWeaponComponentToEntity(_entity, componentHash, weaponHash, false);
    }
    weapon_1.giveComponentToEntity = giveComponentToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x1A47699E8D533E8F | Since: 1207
     */
    function giveComponentToWeaponObject(weaponObject, ped, componentHash) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        GiveWeaponComponentToWeaponObject(_weaponObject, _ped, componentHash, false);
    }
    weapon_1.giveComponentToWeaponObject = giveComponentToWeaponObject;
    /**
     * No comment provided
     *
     * Hash: 0xDCF06D0CDFF68424 | Since: 1207
     */
    function hasEntityBeenDamagedBy(entity, weaponName, weaponType) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof weaponName === 'string')
            weaponName = misc.getHashKey(weaponName);
        return HasEntityBeenDamagedByWeapon(_entity, weaponName, weaponType);
    }
    weapon_1.hasEntityBeenDamagedBy = hasEntityBeenDamagedBy;
    /**
     * No comment provided
     *
     * Hash: 0x9E2D5D6BC97A5F1E | Since: 1207
     */
    function hasEntityBeenDamagedByRecently(entity, weaponHash, ms) {
        const _entity = entity instanceof Entity ? entity.handle() : entity;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasEntityBeenDamagedByWeaponRecently(_entity, weaponHash, ms);
    }
    weapon_1.hasEntityBeenDamagedByRecently = hasEntityBeenDamagedByRecently;
    /**
     * No comment provided
     *
     * Hash: 0xBBC67A6F965C688A | Since: 1207
     */
    function hasPedGotComponent(ped, componentHash, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasPedGotWeaponComponent(_ped, componentHash, weaponHash);
    }
    weapon_1.hasPedGotComponent = hasPedGotComponent;
    /**
     * No comment provided
     *
     * Hash: 0xFF07CF465F48B830 | Since: 1207
     */
    function hasAssetLoaded(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasWeaponAssetLoaded(weaponHash);
    }
    weapon_1.hasAssetLoaded = hasAssetLoaded;
    /**
     * Unequip current weapon and set current weapon to WEAPON_UNARMED.
     * p0 usually 2 in R* scripts. Doesn't seem to have any effect if changed....
     * immediately: if true it will instantly switch to unarmed
     *
     * Hash: 0xFCCC886EDE3C63EC | Since: 1207
     */
    function hidePeds(ped, immediately) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        HidePedWeapons(_ped, 0, immediately);
    }
    weapon_1.hidePeds = hidePeds;
    /**
     * No comment provided
     *
     * Hash: 0x94A3C1B804D291EC | Since: 1207
     */
    function holsterPeds(ped, immediately) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        HolsterPedWeapons(_ped, false, false, false, immediately);
    }
    weapon_1.holsterPeds = holsterPeds;
    /**
     * No comment provided
     *
     * Hash: 0xD2866CBA797E872E | Since: 1232
     */
    function isAmmoSilent(ammoHash) {
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        return IsAmmoSilent(ammoHash);
    }
    weapon_1.isAmmoSilent = isAmmoSilent;
    /**
     * No comment provided
     *
     * Hash: 0x7EFACC589B98C488 | Since: 1207
     */
    function isAmmoSilent2(ammoHash) {
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        return IsAmmoSilent2(ammoHash);
    }
    weapon_1.isAmmoSilent2 = isAmmoSilent2;
    /**
     * No comment provided
     *
     * Hash: 0xC570B881754DF609 | Since: 1207
     */
    function isAmmoTypeValidFor(weaponHash, ammoHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        return IsAmmoTypeValidForWeapon(weaponHash, ammoHash);
    }
    weapon_1.isAmmoTypeValidFor = isAmmoTypeValidFor;
    /**
     * No comment provided
     *
     * Hash: 0x1F7977C9101F807F | Since: 1207
     */
    function isAmmoValid(ammoHash) {
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        return IsAmmoValid(ammoHash);
    }
    weapon_1.isAmmoValid = isAmmoValid;
    /**
     * No comment provided
     *
     * Hash: 0xBDD9C235D8D1052E | Since: 1207
     */
    function isPedCurrentHolstered(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsPedCurrentWeaponHolstered(_ped);
    }
    weapon_1.isPedCurrentHolstered = isPedCurrentHolstered;
    /**
     * No comment provided
     *
     * Hash: 0x8D50F43298AB9545 | Since: 1232
     */
    function isTargetPedConstrainedByPedUsingBolas(ped, targetPed) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
        return IsTargetPedConstrainedByPedUsingBolas(_ped, _targetPed);
    }
    weapon_1.isTargetPedConstrainedByPedUsingBolas = isTargetPedConstrainedByPedUsingBolas;
    /**
     * No comment provided
     *
     * Hash: 0xC853230E76A152DF | Since: 1207
     */
    function isBinoculars(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponBinoculars(weaponHash);
    }
    weapon_1.isBinoculars = isBinoculars;
    /**
     * Returns true if the ped is currently holstering or unholstering a weapon
     *
     * Hash: 0x2387D6E9C6B478AA | Since: 1207
     */
    function isHolsterStateChanging(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return IsWeaponHolsterStateChanging(_ped);
    }
    weapon_1.isHolsterStateChanging = isHolsterStateChanging;
    /**
     * Returns true when the weapon passed is either a lasso, the camera or the binoculars
     * _IS_WEAPON_M* - _IS_WEAPON_P*
     *
     * Hash: 0x6ABAD7B0A854F8FB | Since: 1207
     */
    function isKit(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponKit(weaponHash);
    }
    weapon_1.isKit = isKit;
    /**
     * Returns true when the weapon passed is either the fishingrod, a lasso, the camera or the binoculars
     * _IS_WEAPON_M* - _IS_WEAPON_P*
     *
     * Hash: 0x49E40483948AF062 | Since: 1207
     */
    function isKit2(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponKit2(weaponHash);
    }
    weapon_1.isKit2 = isKit2;
    /**
     * No comment provided
     *
     * Hash: 0x792E3EF76C911959 | Since: 1207
     */
    function isKnife(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponKnife(weaponHash);
    }
    weapon_1.isKnife = isKnife;
    /**
     * No comment provided
     *
     * Hash: 0x79407D33328286C6 | Since: 1207
     */
    function isLantern(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponLantern(weaponHash);
    }
    weapon_1.isLantern = isLantern;
    /**
     * No comment provided
     *
     * Hash: 0x6E4E1A82081EABED | Since: 1207
     */
    function isLasso(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponLasso(weaponHash);
    }
    weapon_1.isLasso = isLasso;
    /**
     * No comment provided
     *
     * Hash: 0xD955FEE4B87AFA07 | Since: 1207
     */
    function isOneHanded(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponOneHanded(weaponHash);
    }
    weapon_1.isOneHanded = isOneHanded;
    /**
     * No comment provided
     *
     * Hash: 0x5809DBCA0A37C82B | Since: 1207
     */
    function isSilent(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponSilent(weaponHash);
    }
    weapon_1.isSilent = isSilent;
    /**
     * No comment provided
     *
     * Hash: 0x6AD66548840472E5 | Since: 1207
     */
    function isSniper(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponSniper(weaponHash);
    }
    weapon_1.isSniper = isSniper;
    /**
     * No comment provided
     *
     * Hash: 0x30E7C16B12DA8211 | Since: 1207
     */
    function isThrowable(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponThrowable(weaponHash);
    }
    weapon_1.isThrowable = isThrowable;
    /**
     * No comment provided
     *
     * Hash: 0x506F1DE1BFC75304 | Since: 1207
     */
    function isTorch(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponTorch(weaponHash);
    }
    weapon_1.isTorch = isTorch;
    /**
     * No comment provided
     *
     * Hash: 0x0556E9D2ECF39D01 | Since: 1207
     */
    function isTwoHanded(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponTwoHanded(weaponHash);
    }
    weapon_1.isTwoHanded = isTwoHanded;
    /**
     * No comment provided
     *
     * Hash: 0xDA5D3F2C6DD5B5D4 | Since: 1207
     */
    function listenProjectileHitEvents(listen) {
        ListenProjectileHitEvents(listen);
    }
    weapon_1.listenProjectileHitEvents = listenProjectileHitEvents;
    /**
     * No comment provided
     *
     * Hash: 0x79E1E511FF7EFB13 | Since: 1207
     */
    function makePedReload(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return MakePedReload(_ped);
    }
    weapon_1.makePedReload = makePedReload;
    /**
     * No comment provided
     *
     * Hash: 0xDF4A3404D022ADDE | Since: 1207
     */
    function refillAmmoInClip(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return RefillAmmoInClip(_ped, 0);
    }
    weapon_1.refillAmmoInClip = refillAmmoInClip;
    /**
     * No comment provided
     *
     * Hash: 0x0A2AB7B7ABC055F4 | Since: 1207
     */
    function refillAmmoInCurrentPed(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        return RefillAmmoInCurrentPedWeapon(_ped);
    }
    weapon_1.refillAmmoInCurrentPed = refillAmmoInCurrentPed;
    /**
     * No comment provided
     *
     * Hash: 0x1B83C0DEEBCBB214 | Since: 1207
     */
    function removeAllPedAmmo(ped) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        RemoveAllPedAmmo(_ped);
    }
    weapon_1.removeAllPedAmmo = removeAllPedAmmo;
    /**
     * removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
     *
     * removeReason: see REMOVE_WEAPON_FROM_PED
     *
     * Hash: 0xF4823C813CB8277D | Since: 1207
     */
    function removeAmmoFromPed(ped, weaponHash, amount, removeReason) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof removeReason === 'string')
            removeReason = misc.getHashKey(removeReason);
        RemoveAmmoFromPed(_ped, weaponHash, amount, removeReason);
    }
    weapon_1.removeAmmoFromPed = removeAmmoFromPed;
    /**
     * removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
     *
     * removeReason: see REMOVE_WEAPON_FROM_PED
     *
     * Hash: 0xB6CFEC32E3742779 | Since: 1207
     */
    function removeAmmoFromPedByType(ped, ammoHash, amount, removeReason) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        if (typeof removeReason === 'string')
            removeReason = misc.getHashKey(removeReason);
        RemoveAmmoFromPedByType(_ped, ammoHash, amount, removeReason);
    }
    weapon_1.removeAmmoFromPedByType = removeAmmoFromPedByType;
    /**
     * No comment provided
     *
     * Hash: 0xC3896D03E2852236 | Since: 1207
     */
    function removeAsset(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        RemoveWeaponAsset(weaponHash);
    }
    weapon_1.removeAsset = removeAsset;
    /**
     * No comment provided
     *
     * Hash: 0x19F70C4D80494FF8 | Since: 1207
     */
    function removeComponentFromPed(ped, componentHash, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        RemoveWeaponComponentFromPed(_ped, componentHash, weaponHash);
    }
    weapon_1.removeComponentFromPed = removeComponentFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x51C3B71591811485 | Since: 1311
     */
    function removeFromPedByGuid(ped, removeReason) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof removeReason === 'string')
            removeReason = misc.getHashKey(removeReason);
        return RemoveWeaponFromPedByGuid(_ped, removeReason);
    }
    weapon_1.removeFromPedByGuid = removeFromPedByGuid;
    /**
     * No comment provided
     *
     * Hash: 0x72D4CB5DB927009C | Since: 1207
     */
    function requestAsset(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        RequestWeaponAsset(weaponHash, 0, false);
    }
    weapon_1.requestAsset = requestAsset;
    /**
     * Appears to just send specified weapon to your horse holster without having to be close
     * However, the weapon is not visible on the horse holster, but you can reach the weapon on the weapon wheel
     *
     * Hash: 0xE9BD19F8121ADE3E | Since: 1207
     */
    function sendToInventory(ped, weaponHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SendWeaponToInventory(_ped, weaponHash);
    }
    weapon_1.sendToInventory = sendToInventory;
    /**
     * emote hashes: KIT_EMOTE_TWIRL_GUN, KIT_EMOTE_TWIRL_GUN_LEFT_HOLSTER, KIT_EMOTE_TWIRL_GUN_DUAL, 0 (to unequip)
     *
     * Hash: 0xCBCFFF805F1B4596 | Since: 1311
     */
    function setActiveGunSpinningEquipKitEmoteTwirl(ped, emote) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof emote === 'string')
            emote = misc.getHashKey(emote);
        SetActiveGunSpinningEquipKitEmoteTwirl(_ped, emote);
    }
    weapon_1.setActiveGunSpinningEquipKitEmoteTwirl = setActiveGunSpinningEquipKitEmoteTwirl;
    /**
     * spinHash can be -1, 0 to disable
     *
     * Hash: 0x01F661BB9C71B465 | Since: 1207
     */
    function setActiveGunSpinningKitEmoteTwirl(ped, weaponEmoteTrickType, spin) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof spin === 'string')
            spin = misc.getHashKey(spin);
        SetActiveGunSpinningKitEmoteTwirl(_ped, weaponEmoteTrickType, spin);
    }
    weapon_1.setActiveGunSpinningKitEmoteTwirl = setActiveGunSpinningKitEmoteTwirl;
    /**
     * No comment provided
     *
     * Hash: 0x83B8D50EB9446BBA | Since: 1207
     */
    function setAllowDualWield(ped, allow) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetAllowDualWield(_ped, allow);
    }
    weapon_1.setAllowDualWield = setAllowDualWield;
    /**
     * turretHash: WEAPON_TURRET_MAXIUM, WEAPON_TURRET_GATLING, WEAPON_TURRET_CANNON, WEAPON_TURRET_REVOLVING_CANNON
     *
     * Hash: 0xBDDA0C290C228159 | Since: 1207
     */
    function setAmmoInTurret(vehicle, turretHash, ammo) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        if (typeof turretHash === 'string')
            turretHash = misc.getHashKey(turretHash);
        SetAmmoInTurret(_vehicle, turretHash, ammo);
    }
    weapon_1.setAmmoInTurret = setAmmoInTurret;
    /**
     * No comment provided
     *
     * Hash: 0xCC9C4393523833E2 | Since: 1207
     */
    function setAmmoTypeForPed(ped, weaponHash, ammoHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        SetAmmoTypeForPedWeapon(_ped, weaponHash, ammoHash);
    }
    weapon_1.setAmmoTypeForPed = setAmmoTypeForPed;
    /**
     * No comment provided
     *
     * Hash: 0xEBE46B501BC3FBCF | Since: 1207
     */
    function setAmmoTypeForPedInventory(ped, ammoHash) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        if (typeof ammoHash === 'string')
            ammoHash = misc.getHashKey(ammoHash);
        return SetAmmoTypeForPedWeaponInventory(_ped, ammoHash);
    }
    weapon_1.setAmmoTypeForPedInventory = setAmmoTypeForPedInventory;
    /**
     * No comment provided
     *
     * Hash: 0xBE711B14A159E84F | Since: 1207
     */
    function setForceAutoEquip(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetForceAutoEquip(_ped, toggle);
    }
    weapon_1.setForceAutoEquip = setForceAutoEquip;
    /**
     * No comment provided
     *
     * Hash: 0x5230D3F6EE56CFE6 | Since: 1207
     */
    function setForceCurrentIntoCockedState(ped, attachPoint) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetForceCurrentWeaponIntoCockedState(_ped, attachPoint);
    }
    weapon_1.setForceCurrentIntoCockedState = setForceCurrentIntoCockedState;
    /**
     * _STOP_* - _TEST_*
     *
     * Hash: 0x408CF580C5E96D49 | Since: 1355
     */
    function setGunSpinningInventorySlotIdActivate(ped, emoteType) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetGunSpinningInventorySlotIdActivate(_ped, emoteType);
    }
    weapon_1.setGunSpinningInventorySlotIdActivate = setGunSpinningInventorySlotIdActivate;
    /**
     * No comment provided
     *
     * Hash: 0x4F806A6CFED89468 | Since: 1207
     */
    function setPedAllsVisibility(ped, visible) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedAllWeaponsVisibility(_ped, visible);
    }
    weapon_1.setPedAllsVisibility = setPedAllsVisibility;
    /**
     * No comment provided
     *
     * Hash: 0xFBAA1E06B6BCA741 | Since: 1207
     */
    function setPedInfiniteAmmoClip(ped, toggle) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedInfiniteAmmoClip(_ped, toggle);
    }
    weapon_1.setPedInfiniteAmmoClip = setPedInfiniteAmmoClip;
    /**
     * attachPoint: see SET_CURRENT_PED_WEAPON
     *
     * Hash: 0x67E21ACC5C0C970C | Since: 1207
     */
    function setPedAttachPointVisibility(ped, attachPoint, visible) {
        const _ped = ped instanceof Ped ? ped.handle() : ped;
        SetPedWeaponAttachPointVisibility(_ped, attachPoint, visible);
    }
    weapon_1.setPedAttachPointVisibility = setPedAttachPointVisibility;
    /**
     * No comment provided
     *
     * Hash: 0x56CB3B4305A4F7CE | Since: 1207
     */
    function setVehicleHeadingLimits(vehicle, minHeading, maxHeading) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        SetVehicleWeaponHeadingLimits(_vehicle, 0, minHeading, maxHeading);
    }
    weapon_1.setVehicleHeadingLimits = setVehicleHeadingLimits;
    /**
     * No comment provided
     *
     * Hash: 0xBF5987E1CDE63501 | Since: 1207
     */
    function setVehicleHeadingLimits2(vehicle, minHeading, maxHeading) {
        const _vehicle = vehicle instanceof Vehicle ? vehicle.localId() : vehicle;
        return SetVehicleWeaponHeadingLimits2(_vehicle, 0, minHeading, maxHeading);
    }
    weapon_1.setVehicleHeadingLimits2 = setVehicleHeadingLimits2;
    /**
     * Related to weapon visual damage, not actual damage.
     *
     * Hash: 0xE22060121602493B | Since: 1207
     */
    function setDamage(weaponObject, level) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        SetWeaponDamage(_weaponObject, level, false);
    }
    weapon_1.setDamage = setDamage;
    /**
     * No comment provided
     *
     * Hash: 0xA7A57E89E965D839 | Since: 1207
     */
    function setDegradation(weaponObject, level) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        SetWeaponDegradation(_weaponObject, level);
    }
    weapon_1.setDegradation = setDegradation;
    /**
     * No comment provided
     *
     * Hash: 0x812CE61DEBCAB948 | Since: 1207
     */
    function setDirt(weaponObject, level) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        SetWeaponDirt(_weaponObject, level, false);
    }
    weapon_1.setDirt = setDirt;
    /**
     * every other level will have the max value of (brokeLevel - threshold)
     *
     * Hash: 0xD4071EFC83794B2F | Since: 1207
     */
    function setLevelThreshold(weaponObject, threshold) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        SetWeaponLevelThreshold(_weaponObject, threshold);
    }
    weapon_1.setLevelThreshold = setLevelThreshold;
    /**
     * No comment provided
     *
     * Hash: 0xC3544AD0522E69B4 | Since: 1207
     */
    function setScale(weaponObject, scale) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        SetWeaponScale(_weaponObject, scale);
    }
    weapon_1.setScale = setScale;
    /**
     * No comment provided
     *
     * Hash: 0xA9EF4AD10BDDDB57 | Since: 1207
     */
    function setSoot(weaponObject, level) {
        const _weaponObject = weaponObject instanceof Object ? weaponObject.handle() : weaponObject;
        SetWeaponSoot(_weaponObject, level, false);
    }
    weapon_1.setSoot = setSoot;
})(weapon || (weapon = {}));
export var zone;
(function (zone) {
    /**
     * Returns name hash, see common:/data/levels/rdr3/mapzones.meta
     *
     * type (-1 matches any type):
     * class CMapZone
     * {
     * public:
     * enum class Type
     * {
     * STATE,
     * TOWN,
     * LAKE,
     * RIVER,
     * OIL_SPILL,
     * SWAMP,
     * OCEAN,
     * CREEK,
     * POND,
     * GLACIER,
     * DISTRICT,
     * TEXT_PRINTED,
     * TEXT_WRITTEN
     * };
     * };
     *
     * https://github.com/femga/rdr3_discoveries/tree/master/zones & https://alloc8or.re/rdr3/doc/enums/CMapZone__Type.txt
     *
     * Hash: 0x43AD8FC02B429D33 | Since: 1207
     */
    function getMapAtCoords(pos, _type) {
        return GetMapZoneAtCoords(pos.x, pos.y, pos.z, _type);
    }
    zone.getMapAtCoords = getMapAtCoords;
    /**
     * Returns the zone's name hash if its type matches one of the following:
     * - LAKE
     * - RIVER
     * - OIL_SPILL
     * - SWAMP
     * - OCEAN
     * - CREEK
     * - POND
     * - GLACIER
     *
     * Hash: 0x5BA7A68A346A5A91 | Since: 1207
     */
    function getWaterMapAtCoords(pos) {
        return GetWaterMapZoneAtCoords(pos.x, pos.y, pos.z);
    }
    zone.getWaterMapAtCoords = getWaterMapAtCoords;
})(zone || (zone = {}));
export * from "@risinglife/redm-shared";
